var gc;
(function (gc) {
    var max = function (num1, num2) { return Math.max.apply(Math, arguments); };
    var min = function (num1, num2) { return Math.min.apply(Math, arguments); };
    var pow = function (num1, num2) { return Math.pow.apply(Math, arguments); };
    var floor = function (num1) { return Math.floor.apply(Math, arguments); };
    var exp = function (num1) { return Math.exp.apply(Math, arguments); };
    var abs = function (num1) { return Math.abs.apply(Math, arguments); };
    var random = function (num1, num2) { return (0 | (Math.random() * (num2 - num1 + 1)) + num1); };
    var int = function (n) { return parseInt(n); };
    var log = function (num1) { return Math.log.apply(Math, arguments); };
    /**
     * 麻痹公式
     * @param a 自身麻痹
     * @param b 目标抗麻
     */
    function calBlock(a, b) { return min(max((b - a) * 0.006, 0.005), 0.5); }
    gc.calBlock = calBlock;
    /**
     * 购买金币钻石消耗公式
     * @param x 金币购买次数
     */
    function calBuyGoldDiamond(x) { return 10 + 10 * int(x / 1.5); }
    gc.calBuyGoldDiamond = calBuyGoldDiamond;
    /**
     * 购买金币获得公式
     * @param a 金币购买次数
     * @param b 增量值
     * @param s 等级购买金币基数
     */
    function calBuyGold(a, b, s) { return s + b * a; }
    gc.calBuyGold = calBuyGold;
    /**
     * 境界购买次数
     * @param x 已购买次数
     */
    function calBuyRealm(x) { return 10 + 2 << x - 1; }
    gc.calBuyRealm = calBuyRealm;
    /**
     * 装备购买次数
     * @param x 已购买次数
     */
    function calBuyEquip(x) { return 10 + 2 << x - 1; }
    gc.calBuyEquip = calBuyEquip;
    /**
     * 炼狱boss购买次数
     * @param x 购买次数
     */
    function calBuyBoss(x) { return 110 * x - 70; }
    gc.calBuyBoss = calBuyBoss;
    /**
     * PK获得荣誉
     * @param a 胜负参数
     * @param x 历史pk值
     */
    function calPkOutHonor(a, x) { return int(a * pow(x, 0.25)); }
    gc.calPkOutHonor = calPkOutHonor;
    /**
     * PK获得的金币
     * @param a pk值
     * @param b 对方玩家等级
     * @param x 己方红黄名参数
     * @param y 敌方红黄名参数
     */
    function calPkOutGold(a, b, x, y) { return (100 + random(b, b)) * (x + y) * 25; }
    gc.calPkOutGold = calPkOutGold;
    /**
     * pk获得的经验
     * @param a pk值
     * @param b 对方玩家等级
     * @param c pk差异值(升级表)
     * @param x 己方红黄名参数
     * @param y 敌方红黄名参数
     */
    function calPkOutExpc(a, b, c, x, y) { return (50 * c + random(b, b)) * (x + y); }
    gc.calPkOutExpc = calPkOutExpc;
    /**
     * 装备附加概率公式
     * @param a 装备属性
     * @param c 装备属性随机倍率
     */
    function calEquipSubjoin(a, c) { return int(a * ((c + random(1, 20)) / 100)); }
    gc.calEquipSubjoin = calEquipSubjoin;
    /**
     * 装备评分公式
     * @param a 基础评分
     * @param c 附加值
     * @param b 装备附加参数
     */
    function calEquipGrade(a, c, b) { return a + c * b; }
    gc.calEquipGrade = calEquipGrade;
    /**
     * 熔炼获得强化石数量
     * @param a 熔炼参数
     * @param b 装备等级
     */
    function calSmeltIntensify(a, b) { return a * int(1 + b / 20); }
    gc.calSmeltIntensify = calSmeltIntensify;
    /**
     * 获得杀戮值计算
     * @param a 攻方杀戮值
     * @param b 防御方杀戮值
     */
    function calKillValue(a, b) { return int(25 * pow((abs(max(a - b, 2))), 0.1)); }
    gc.calKillValue = calKillValue;
    /**
     * 随机装备升阶熔炼ID
     * @param a 模板装备ID
     */
    function calSmeltUpId(a) { return a + 100000 + random(1, 3) * 10000; }
    gc.calSmeltUpId = calSmeltUpId;
    /**
     * 随机装备熔炼ID
     * @param a 模板装备ID
     */
    function calSmeltId(a) { return a + random(1, 3) * 10000; }
    gc.calSmeltId = calSmeltId;
    /**
     * 技能CD时间（s）
     * @param a 技能等级
     */
    function calSkillCd(a) { return int(a / 6 + 1) * 120; }
    gc.calSkillCd = calSkillCd;
    /**
     * 清除CD需要消费元宝（s）
     * @param a 当前的CD时间
     */
    function calSkillDiamond(a) { return int(a / 300); }
    gc.calSkillDiamond = calSkillDiamond;
    /**
     * 基础属性战斗力公式
     * @param a 血量之和
     * @param a1 血量参数
     * @param b 攻击之和
     * @param b1 攻击参数
     * @param c 物防之和
     * @param c1 物防参数
     * @param d 魔防之和
     * @param d1 魔防参数
     * @param e 暴击之和
     * @param e1 暴击参数
     * @param f 抗暴之和
     * @param f1 抗暴参数
     * @param g 闪避之和
     * @param g1 闪避参数
     * @param h 命中之和
     * @param h1 命中参数
     * @param j 攻击频率
     * @param j1 攻击频率参数
     */
    function calBaseCombat(a, a1, b, b1, c, c1, d, d1, e, e1, f, f1, g, g1, h, h1, j, j1) { return int((a * a1 + b * b1 + c * c1 + d * d1 + e * e1 + f * f1 + g * g1 + h * h1) * (j / j1)); }
    gc.calBaseCombat = calBaseCombat;
    /**
     * 戒指战力公式
     * @param a 戒指1
     * @param b 戒指2
     * @param c 戒指3
     * @param d 戒指4
     */
    function calBreakCombat(a, b, c, d) { return int(a + b + c + d); }
    gc.calBreakCombat = calBreakCombat;
    /**
     * 技能战力公式
     * @param k 第1技能战力
     * @param k1 第1技能等级
     * @param l 第2技能战力
     * @param l1 第2技能等级
     * @param m 第3技能战力
     * @param m1 第3技能等级
     * @param n 第4技能战力
     * @param n1 第4技能等级
     * @param s 第5技能战力
     * @param s1 第5技能等级
     */
    function calSkillCombat(k, k1, l, l1, m, m1, n, n1, s, s1) { return int(k * k1 + l * l1 + m * m1 + n * n1 + s * s1); }
    gc.calSkillCombat = calSkillCombat;
    /**
     * 总战力公式
     * @param a 基础属性战斗力
     * @param b 戒指战力
     * @param c 技能战力
     */
    function callCountCombat(a, b, c) { return a + b + c; }
    gc.callCountCombat = callCountCombat;
    /**
     * 装备背包购买消耗公式
     * @param a 购买次数
     */
    function callBuyEquipBag(a) { return int(a / 2) + 3; }
    gc.callBuyEquipBag = callBuyEquipBag;
    /**
     * 离线每装备转化的金币
     * @param a 当前所在的普通关卡ID
     */
    function callEquipTraGold(a) { return int(4 * exp(0.45 * (a / 40))); }
    gc.callEquipTraGold = callEquipTraGold;
    /**
     * 离线获得的装备数
     * @param b 离线时间
     */
    function callOfflineEquipCount(b) { return random(int(b / 180), int(b / 120)); }
    gc.callOfflineEquipCount = callOfflineEquipCount;
    /**
     * 离线获得的金币数
     * @param a 当前所在的普通关卡获得的金币
     * @param b 领主等级
     * @param c 离线时间(秒)
     */
    function callOfflineGold(a, b, c) { return a * (c / 10) * log(b + 1) / 3 * (-10 * log(c) / 2.5 + 100) / 100; }
    gc.callOfflineGold = callOfflineGold;
    /**
     * 离线获得的经验数
     * @param a 每秒获得的经验
     * @param c 离线时间(秒)
     */
    function callOfflineExp(a, c) { return a * c * (-10 * log(c) / 2.5 + 80) / 100; }
    gc.callOfflineExp = callOfflineExp;
    /**
     * 离线获得的装备等级
     * @param a 当前所在的普通关卡ID
     */
    function callEquipLvl(a) { return int(a / 40 + 1) * 10; }
    gc.callEquipLvl = callEquipLvl;
    /**
     * 离线获得的装备ID
     * @param a 离线掉落装备等级
     */
    function callOfflineEquipId(a) { return (int(a / 10) + 1) + 100000 + random(1, 3) * 10000 + random(1, 6) * 1000; }
    gc.callOfflineEquipId = callOfflineEquipId;
    /**
     * 刷新商店消耗金币
     * @param a 刷新次数
     */
    function callRefreshShop(a) { return min(int(a / 4), 1) * 1000; }
    gc.callRefreshShop = callRefreshShop;
    /**
     * pk消耗元宝数量
     * @param a PK购买次数
     */
    function calRefreshPKCost(a) { return int(15); }
    gc.calRefreshPKCost = calRefreshPKCost;
    /**
     * pk杀戮值匹配
     * @param a 自己的杀戮值
     * @param b PK杀戮值取值区间值
     */
    function calPkKillCfg(a, b) { return max((a + b), 0); }
    gc.calPkKillCfg = calPkKillCfg;
    /**
     * pk战力值匹配
     * @param a 自己等级
     * @param b 自身战力
     * @param c PK战力取值区间
     */
    function calPkCombatCfg(a, b, c) { return max(((15 * a) / 100 * c + b), 0); }
    gc.calPkCombatCfg = calPkCombatCfg;
    /**
     * PK值清除消耗元宝
     * @param a 当前的PK值
     */
    function calClearPkCost(a) { return int(a / 2); }
    gc.calClearPkCost = calClearPkCost;
    /**
     * 熔炼获得货币数量
     * @param a 装备颜色参数
     * @param b 装备等级参数
     */
    function calSmeltGetCurrency(a, b) { return int(a * b); }
    gc.calSmeltGetCurrency = calSmeltGetCurrency;
    /**
     * pk红名掠夺boo令牌几率（万分率）
     * @param b 己方红名点
     */
    function calBossRate(b) { return min((b * 10), 3500); }
    gc.calBossRate = calBossRate;
    /**
     * 公会退会次数需要CD
     * @param a 公会退会次数
     */
    function calQuitGuildCfg(a) { return max(60, int(a / 2) * 1200); }
    gc.calQuitGuildCfg = calQuitGuildCfg;
    /**
     * 红包公式
     * @param a 当前红包剩余总金额
     * @param b 当前剩余分配红包数
     */
    function calRedEnvelopeShareCfg(a, b) { return max(1, int((a / b) * random(50, 125) / 100)); }
    gc.calRedEnvelopeShareCfg = calRedEnvelopeShareCfg;
    /**
     * 每日国库发放钱粮
     * @param a 当前玩家等级
     * @param b 当前金币贮藏量
     * @param c 领取金币参数1
     * @param d 领取金币参数2
     */
    function calCoffersPersonRecource(a, b, c, d) { return int(a * a * b / c * exp(d)); }
    gc.calCoffersPersonRecource = calCoffersPersonRecource;
    /**
     * 国库城防防守者增加血量
     * @param a 当前城防值
     * @param b 城防参数
     * @param c 当前防守者血量
     */
    function calCoffersPersonHp(a, b, c) { return int((a * b * c) / 100); }
    gc.calCoffersPersonHp = calCoffersPersonHp;
    /**
     * 国库城防显示增加血量百分比
     * @param a 当前城防值
     * @param b 城防参数
     */
    function calCoffersAllHp(a, b) { return (a * b) / 100; }
    gc.calCoffersAllHp = calCoffersAllHp;
    /**
     * 离线获得的铜宝箱数量
     * @param b 离线分钟
     */
    function calCuChests(b) { return int(random((0.75 * b / 40), (0.85 * b / 40))); }
    gc.calCuChests = calCuChests;
    /**
     * 离线获得的银宝箱数量
     * @param b 离线分钟
     */
    function calAgChests(b) { return int(random((0.75 * b / 120), (0.85 * b / 120))); }
    gc.calAgChests = calAgChests;
    /**
     * 离线获得的金宝箱数量
     * @param b 离线分钟
     */
    function calAuChests(b) { return int(random((0.75 * b / 360), (0.85 * b / 360))); }
    gc.calAuChests = calAuChests;
    /**
     * 国库掠夺金币公式
     * @param a 伤害量计算获得金币
     * @param b 国库当前金币
     * @param c 被击破守卫人数
     */
    function calCoffersLoot(a, b, c) { return (a + b * 0.018) * c * 0.25; }
    gc.calCoffersLoot = calCoffersLoot;
    /**
     * 行会副本秒CD花费
     * @param a 当前剩余秒数
     */
    function calGuildCopyCd(a) { return int(int(a / 6) * 0.5); }
    gc.calGuildCopyCd = calGuildCopyCd;
    /**
     * 跨服战进攻秒CD花费
     * @param a 购买次数
     */
    function calClearGuildWarCd(a) { return 20 + (a - 1) * 30; }
    gc.calClearGuildWarCd = calClearGuildWarCd;
    /**
     * 跨服个人鼓舞花费元宝
     * @param a 鼓舞次数
     */
    function calInspireGuildWar(a) { return 100 + (a - 1) * 100; }
    gc.calInspireGuildWar = calInspireGuildWar;
    /**
     * 隐姓埋名元宝消耗
     * @param a 购买次数
     */
    function calIncognito(a) { return int(100 * pow(1.1, a - 1)); }
    gc.calIncognito = calIncognito;
    /**
     * 高级密探元宝消耗
     * @param a 购买次数
     */
    function calSpies(a) { return int(100 + 30 * a); }
    gc.calSpies = calSpies;
    /**
     * 爬塔宝库购买抽奖消耗
     * @param a 购买次数
     * @param b 当前塔层数
     */
    function calPaTaAward(a, b) { return int(150000 * exp(0.2 * a) / 10000) + b * 5; }
    gc.calPaTaAward = calPaTaAward;
    /**
     * 随机宝箱开出等级
     * @param a 人物等级
     */
    function calEquipLvlCfg(a) { return int(a / 10) + 1; }
    gc.calEquipLvlCfg = calEquipLvlCfg;
    /**
     * 法宝洗资质成功概率
     * @param a 当前资质
     * @param b 上限资质
     */
    function calTrumpPro(a, b) { return 1.31 - a / b; }
    gc.calTrumpPro = calTrumpPro;
    /**
     * 法宝资质增加
     * @param a 当前资质
     * @param b 上限资质
     */
    function calTrumpAdd(a, b) { return int(max(((b - a) / random(50, 100)), 1)) + random(3, 7); }
    gc.calTrumpAdd = calTrumpAdd;
    /**
     * 法宝资质减少
     * @param a 当前资质
     * @param b 上限资质
     */
    function calTrumpSub(a, b) { return int(max(((b - a) / random(30, 100)), 1)); }
    gc.calTrumpSub = calTrumpSub;
    /**
     * 清除BOSS CD花费
     * @param a 当前BOSS等级
     * @param b 剩余CD时间(秒)
     * @param c 今日召唤次数
     */
    function calGuildBossRepeat(a, b, c) { return int(a * 3 + b * 0.005 + 500 * (c + 1) + pow(4.5, c)); }
    gc.calGuildBossRepeat = calGuildBossRepeat;
    /**
     * 凌云石购买价格
     * @param a 购买次数
     */
    function calBuyLingyun(a) { return a * 2 + 5; }
    gc.calBuyLingyun = calBuyLingyun;
    /**
     * 计算基金vip购买次数
     * @param a 人物vip等级
     * @param b vip限制等级
     */
    function calFundVipCount(a, b) { return a >= b ? 1 : 0; }
    gc.calFundVipCount = calFundVipCount;
})(gc || (gc = {}));

var gc;
(function (gc) {
    var c_prop;
    (function (c_prop) {
        c_prop.userRefreshCountKey = { buyGold: 0, rePK: 1, buyPK: 2, bossTesseraReplace: 3, worShip: 4, getKingWelfare: 5, buyPrimaryRebirth: 6, buyMidRebirth: 7, buyAdvancedRebirth: 8, coffersBuild: 9, opening: 10, coffersAction: 11, coffersWin: 12, coffersBuffNum: 13, spies: 14, incognito: 15, clearGuildWarCount: 16, inspireGuildWar: 17, enterBoss: 18, repeatBoss: 19, buyLingyun: 20 };
        c_prop.userRefreshCount = { "0": '购买金币次数', "1": '剩余挑战次数', "2": '购买挑战次数', "3": 'BOSS替代令使用次数', "4": '膜拜次数', "5": '领取霸主福利次数', "6": '购买初级飞升丹次数', "7": '购买中级飞升丹次数', "8": '购买高级飞升丹次数', "9": '国库建设次数', "10": '开光次数', "11": '国库行动次数', "12": '国库连胜', "13": '国库激励次数', "14": '密探次数', "15": '隐姓埋名次数', "16": '清除行会战cd', "17": '行会战个人鼓舞', "18": '参与boss', "19": '复活boss', "20": '购买凌云石' };
        c_prop.userExDataKey = { guide: 1, wipeItemNum: 2, wipeReTime: 3, sign: 4, skipFightNum: 5, replaySkipFightTime: 6, buyGoldNum: 7, autoFight: 8, timeError: 9, missEquip: 10, todayRankWin: 11, arenaCount: 12, genuineQi: 13, catNoVipChat: 14, autoBuyLittleHorn: 15, talismanSkill: 16, isChangeLvl: 17, oldLvl: 18, oldExpc: 19 };
        c_prop.userExData = { "1": '引导数据', "2": '扫荡券数量', "3": '扫荡券上一次恢复时间', "4": '签名', "5": '剩余跳过次数', "6": '上一次恢复跳过次数时间', "7": '金币购买总次数', "8": '自动战斗', "9": '时间异常次数', "10": '装备丢失', "11": 'PK榜挑战次数', "12": '竞技场挑战次数', "13": '真气数据', "14": '关注非VIP', "15": '自动购买', "16": '法宝技能', "17": '是否转换等级', "18": '原等级', "19": '原经验' };
        c_prop.itemTypeKey = { logic: 0, equip: 1, rebirth: 2, gold: 3, diamond: 4, exp: 5, chest: 6, break: 7, prestige: 8, gem: 9, expBall: 10, rebirthExp: 11, custom: 12, medal: 13, genuineQi: 14, gift: 15 };
        c_prop.itemType = { "0": '0,道具', "1": '1,装备', "2": '2,元神道具', "3": '3,金币', "4": '4,元宝', "5": '5,经验', "6": '6,宝箱', "7": '7,特殊戒指', "8": '8,声望', "9": '9,宝石', "10": '10,经验丹', "11": '11,飞升经验', "12": '12,定制道具', "13": '13,勋章', "14": '14，真气', "15": '15，法宝' };
        c_prop.spItemIdKey = { gold: 99, diamond: 200, timeError: 71003, wipeItem: 25501, equipTessera: 7, realmTessera: 2, honor: 1140, intensify: 18, bossTessera: 8, bossTesseraReplace: 78, starStone: 19, plumage: 30, goldenKey: 1551, vitality: 89, prestige: 88, paralysis: 3, revive: 4, protect: 5, harm: 6, ctWeapon: 700026, ctClothes: 700027, ctHelmet: 700028, ctRing: 700029, ctBracelet: 700030, ctNecklace: 700031, lotus: 45, genuineQi: 85, littleHorn: 1564, silverKey: 1550, copperKey: 1545 };
        c_prop.spItemId = { "2": '元神入场劵', "3": '麻痹碎片', "4": '复活碎片', "5": '护身碎片', "6": '伤害碎片', "7": '装备入场劵', "8": 'boss令牌', "18": '强化石', "19": '升星石', "30": '羽毛', "45": '妖莲之心', "78": 'boss令牌替代令', "85": '真气', "88": '声望', "89": '活跃值', "99": '金币', "200": '钻石', "301": '摸金符', "1140": '荣誉', "1545": '铜钥匙', "1550": '银钥匙', "1551": '金钥匙', "1564": '小喇叭', "25501": '扫荡券', "71003": '体力', "700026": '定制武器', "700027": '定制黄金甲', "700028": '定制头盔', "700029": '定制戒指', "700030": '定制手环', "700031": '定制项链' };
        c_prop.activityTypeKey = { firstRecharge: 1, sevenLogin: 2, limitBuy: 3, dayChargeCount: 4, allChargeCount: 5, dayCostCount: 6, allCostCount: 7, upLvl: 8, redeemCode: 9, text: 10, upVip: 11, limitBuyRange: 12, sign: 13, lottery: 14, fiveDaysTarget: 15, singleCharge: 16, mysterShop: 17, challengeCup: 18, blueNewbie: 19, blueGrowth: 20, blueEveryday: 21, luckyTalos: 22, everydayCharge: 23, limitPanicBuying: 24, yellowNewbie: 25, yellowGrowth: 26, yellowEveryday: 27, rebate: 28, dayRecharge: 29, setTheWord: 30, vPlan: 31, sysRedredEnvelope: 32, luckyMajong: 33, appMysterShop: 34, userSurvey: 35, activityNotice: 36, newLuckyMajong: 37, newFourDays: 38, newLimitPanicBuying: 39 };
        c_prop.activityType = { "1": '首冲', "2": '7天登陆', "3": '每日抢购', "4": '每日累充福利', "5": '全部累充福利', "6": '每日消费有礼', "7": '全部消费有礼', "8": '升级有奖', "9": '兑换码', "10": '文字说明', "11": 'VIP升级奖励', "12": '时间段限购', "13": '签到', "14": '探宝', "15": '五日目标', "16": '单笔充值', "17": '神秘商店', "18": '王城擂台', "19": '蓝钻新手礼包', "20": '蓝钻成长礼包', "21": '蓝钻每日礼包', "22": '幸运塔罗牌', "23": '天天充值', "24": '限时抢购', "25": '黄钻新手礼包', "26": '黄钻成长礼包', "27": '黄钻每日礼包', "28": '消费返利', "29": '每日累冲', "30": '集字', "31": 'v计划', "32": '系统红包', "33": '幸运麻将', "34": '指定物品神秘商店', "35": '用户调研', "36": '空活动模板', "37": '新麻将牌', "38": '新四日目标', "39": '新限时抢购' };
        c_prop.userRecordTypeKey = { diamondTodayCost: 1, saveDesk: 2, linkShare: 3, bindPhone: 4, downloadQQGame: 5, follow: 6, wanbaGift: 7, coupon: 8, demonLotusOpenNum: 9, demonLotusOpenDate: 10 };
        c_prop.userRecordType = { "1": '钻石每天消耗', "2": '保存桌面成功次数', "3": '分享成功奖励次数', "4": '绑定手机', "5": '下载qq游戏大厅', "6": '关注公众微信号', "7": '玩吧礼包', "8": '兑换码领取时间', "9": '妖莲连续开光次数', "10": '妖莲最近开光时间' };
        c_prop.mailTypeKey = { admin: 0, arenaRank: 1, saveDesk: 2, vip: 3, equipChest: 4, coupon: 5, rechargeCom: 6, pkKill: 7, temp1: 8, champions: 9, championsRank: 10, chaampionsJoin: 11, bonusFirstShare: 12, bonusGift: 13, temp5: 14, linkShare: 15, mysterShop: 16, summonAward: 17, guildAward: 18, hurtAward: 19, rankAward: 20, killAward: 22, continueChampions: 23, redEnvelopeExpire: 24, serverPk: 25, blueDiamondRecharge: 26, coffers: 27, limitPanicBuyingAward: 28, everydayChargeAward: 29, kingMedal: 30, suraMedal: 31, bindPhone: 32, worldBossWin: 33, worldBossLose: 34, worldBossLastKill: 35, yellowDiamondRecharge: 36, follow: 37, downloadQQGame: 38, coffersKill: 39, guildBoss: 40, guildChapter: 41, rebate: 42, treasureMove: 43, treasureOpen: 44, guildWarRank1: 45, guildWarRank2: 46, guildWarRank3: 47, dayRecharge: 48, setTheWord: 49, vPlan: 50, userSurvey: 51, summonAwardLimit: 52, guildAwardLimit: 53, hurtAwardLimit: 54, rankAwardLimit: 55, killAwardLimit: 56, impeachAll: 57, impeachUp: 58, impeachFall: 59 };
        c_prop.mailType = { "0": '后台人工', "1": '竞技场排行奖励', "2": '收藏奖励', "3": 'VIP大礼包', "4": '装备宝箱装备', "5": '兑换码奖励', "6": '封测充值返利', "7": 'PK奖励', "8": '五日目标奖励', "9": '王城霸主', "10": '守擂排名奖励', "11": '擂台赛参与奖', "12": '兄弟首次分享', "13": '兄弟屠龙刀', "14": '单笔充值奖励', "15": '分享奖励', "16": '神秘商店', "17": 'BOSS召唤奖', "18": 'BOSS行会奖', "19": 'BOSS伤害奖', "20": 'BOSS排名奖', "22": 'BOSS最后一击', "23": '霸主连任', "24": '红包到期', "25": '仗剑天涯奖励', "26": '蓝钻续费奖励', "27": '国库红利', "28": '显示抢购奖励', "29": '天天充值奖励', "30": '王城霸主勋章', "31": '修罗追命勋章', "32": '绑定手机奖励', "33": '世界BOSS胜利奖', "34": '世界BOSS失败奖', "35": '世界BOSS最后一击', "36": '黄钻续费奖励', "37": '关注公众微信号', "38": '下载qq游戏大厅', "39": '破军虎将勋章', "40": '行会副本boss击杀奖', "41": '行会副本通关奖', "42": '消费返利', "43": '秘宝被抢', "44": '秘宝被开奖', "45": '行会战行会排名奖', "46": '行会战会长排名奖', "47": '行会战个人点数排名奖', "48": '每日累充福利', "49": '集字', "50": 'V计划', "51": '用户调研', "52": '限时BOSS召唤奖', "53": '限时BOSS行会奖', "54": '限时BOSS伤害奖', "55": '限时BOSS排名奖', "56": '限时BOSS最后一击', "57": '会长降职全体通知', "58": '升职会长通知', "59": '会长降职通知' };
        c_prop.goldCostTypeKey = { upSkill: 1, strength: 2, upStar: 3, wingFos: 4, fieldPk: 5, buy: 6, refreshShop: 7, guildAct: 8, stuMenCulMethods: 9 };
        c_prop.goldCostType = { "1": '技能升级', "2": '强化', "3": '升星', "4": '翅膀培养', "5": '野外pk', "6": '商店购买', "7": '刷新商店', "8": '行会上香', "9": '心法加点' };
        c_prop.diamondCostTypeKey = { buyEquipTessera: 1, buyRealmTessera: 2, equipCopyCount: 3, bossCopyCount: 4, realmCopyCount: 5, clearSkillCd: 6, callHero: 7, shop: 8, activity: 9, refreshCD: 10, arenaNum: 11, wingFos: 12, lottery: 13, refreshEnemy: 14, patchSign: 15, buyBagGrid: 16, buyGold: 17, buyBossTessera: 18, clearPkValue: 19, establishGuild: 20, guildAct: 21, inspire: 22, chuanChen: 23, openBoss: 24, redEnvelope: 25, clearChallengeCupCd: 26, challengeCup: 27, clearBossCd: 28, wingStrength: 29, clearGuildCopy: 30, clearGuildWarCd: 31, spies: 32, incognito: 33, inspireGuildWar: 34, fourRole: 35, paTaAward: 36, littleHorn: 37, sellEquipItem: 38, chaMenCulMethods: 39, baptizeTrump: 40, buyLingyun: 41 };
        c_prop.diamondCostType = { "1": '购买装备入场卷', "2": '购买元神入场卷', "3": '装备副本挑战次数购买', "4": '炼狱副本挑战次数购买', "5": '元神副本挑战次数购买', "6": '清除技能CD', "7": '角色开启', "8": '商店购买', "9": '领取活动', "10": '竞技场刷新cd', "11": '竞技场挑战次数购买', "12": '翅膀培养', "13": '抽奖', "14": '野外pk刷新对手', "15": '补签', "16": '购买背包格子', "17": '购买金币', "18": '购买BOSS入场卷', "19": '清除pk值', "20": '创建行会', "21": '行会上香', "22": '鼓舞', "23": '传承', "24": '开启boss', "25": '红包', "26": '清除擂台赛挑战cd', "27": '挑战擂主', "28": 'boss清除cd', "29": '翅膀强化', "30": '行会副本清cd', "31": '清除行会战cd', "32": '江湖探秘', "33": '隐姓埋名', "34": '行会战个人鼓舞', "35": '第四角色注入经验', "36": '镇妖塔宝库购买次数', "37": '喇叭', "38": '出售装备', "39": '心法更换', "40": '法宝洗练', "41": '购买凌云石' };
        c_prop.diamondGetTypeKey = { activity: 1, coupon: 2, rechargeCom: 3, mail: 4, recharge: 5, task: 6, monster: 7, smelt: 8, redEnvelope: 9, openChest: 10, kingWelfare: 11, sellEquipItem: 12, sellItem: 13 };
        c_prop.diamondGetType = { "1": '领取活动', "2": '兑换码', "3": '测试服充值双倍返还', "4": '邮件', "5": '充值', "6": '任务', "7": '打怪', "8": '熔炼', "9": '红包', "10": '开宝箱', "11": '霸主福利', "12": '出售装备', "13": '出售物品' };
        c_prop.honorGetTypeKey = { heroNum: 1, produceNum: 2, goldNum: 3, userLvl: 4, heroType: 5, userRank: 6, pkWinCount: 7, pkLoseCount: 8, attack: 9, defence: 10, hp: 11, crit: 12, crystalId: 13, arenaWinCount: 14, arenaMaxConWinCount: 15 };
        c_prop.honorGetType = { "1": '小弟总数量', "2": '金币生产速度达到', "3": '获得的金币总量', "4": '召唤师等级', "5": '小弟类型数量', "6": '段位达到等级', "7": '排位赛胜利场次', "8": '排位赛失败场次', "9": '攻击', "10": '防御', "11": '血量', "12": '暴击', "13": '水晶塔层数', "14": '巅峰赛累胜场次', "15": '巅峰赛最大连胜场次' };
        c_prop.itemGetTypeKey = { shop: 1, battle: 2, tower: 3, event: 4, copy: 5 };
        c_prop.itemGetType = { "1": '商店', "2": '战场', "3": '推水晶', "4": '活动', "5": '关卡' };
        c_prop.rankTypeKey = { lvlRank: 1, combatRank: 2, goldRank: 3, wingRank: 4, killRank: 5, arenaRank: 6, zsRank: 7, fsRank: 8, dsRank: 9, guildRank: 10, guildCombatRank: 11, chairmanCombatRank: 12, paTaRank: 13 };
        c_prop.rankType = { "1": '等级榜', "2": '总战榜', "3": '财富榜', "4": '神翼榜', "5": 'PK榜', "6": '竞技榜', "7": '战神榜', "8": '法神榜', "9": '道尊榜', "10": '行会等级榜', "11": '行会战力榜', "12": '会长战力榜', "13": '魔塔榜' };
        c_prop.fightTypeKey = { pk: 1, arena: 2, copy: 3, rankPk: 4, challengeCupPk: 5, coffers: 6, worldBoss: 7, coffersBoss: 8, guildCopy: 9, guildWar: 10 };
        c_prop.fightType = { "1": '野外pk', "2": '巅峰赛', "3": '副本', "4": '排行榜pk', "5": '擂台pk', "6": '国库', "7": '世界boss', "8": '国库Boss', "9": '行会副本', "10": '行会跨服战' };
        c_prop.shopTypeKey = { normal: 0, arena: 1, equip: 2, gem: 3, rebirth: 4 };
        c_prop.shopType = { "0": '普通商店', "1": '荣誉商店', "2": '装备商店', "3": '宝石商店', "4": '飞升商店' };
        c_prop.currencyTypeKey = { gold: 1, diamond: 2, honor: 3, prestige: 4 };
        c_prop.currencyType = { "1": '金币', "2": '钻石', "3": '荣誉值', "4": '声望' };
        c_prop.copyTypeKey = { normal: 0, hell: 1, equip: 2, state: 3, arena: 4, pk: 5, vip: 6, coffer: 7, paTa: 8, guild: 9, undefined: 11 };
        c_prop.copyType = { "0": '普通副本', "1": '炼狱boss', "2": '装备副本', "3": '元神副本', "4": '竞技场', "5": '遭遇战', "6": 'VIP副本', "7": '国库BOSS战', "8": '爬塔', "9": '公会副本', "10": '世界BOSS', "11": '行会BOSS' };
        c_prop.equipPropKey = { maxHpTemp: 33, attackTemp: 34, defenceTemp: 35, magicDefenceTemp: 36, hitTemp: 37, dodgeTemp: 38, criticalTemp: 39, disCriticalTemp: 40 };
        c_prop.equipProp = { "33": '生命', "34": '攻击', "35": '物防', "36": '法防', "37": '命中', "38": '闪避', "39": '暴击', "40": '抗暴' };
        c_prop.heroEquipIndexKey = { weapon: 0, clothes: 1, bracelet1: 2, ring1: 3, paralysisRing: 4, reviveRing: 5, protectRing: 6, harmRing: 7, ring2: 8, bracelet2: 9, helmet: 10, necklace: 11 };
        c_prop.heroEquipIndex = { "0": '武器', "1": '衣服', "2": '手环', "3": '戒指', "4": '麻痹戒指', "5": '复活戒指', "6": '护身戒指', "7": '伤害戒指', "8": '戒指2', "9": '手环2', "10": '头盔', "11": '项链' };
        c_prop.pkNameColorKey = { white: 1, yellow: 2, red: 3 };
        c_prop.pkNameColor = { "1": '白名', "2": '黄名', "3": '红名' };
        c_prop.equipColorKey = { white: 1, green: 2, blue: 3, purple: 4, orange: 5, red: 6 };
        c_prop.equipColor = { "1": '白色', "2": '绿色', "3": '蓝色', "4": '紫色', "5": '橙色', "6": '红色' };
        c_prop.fightDataKey = { winStatus: 0, reHp: 1, maxHp: 2 };
        c_prop.fightData = { "0": '是否胜利', "1": '剩余血量', "2": '总血量' };
        c_prop.winStatusKey = { win: 1, lose: 2, bigWin: 3 };
        c_prop.winStatus = { "1": '胜利', "2": '失败', "3": '大胜' };
        c_prop.heroPropKey = { maxHp: 1, maxHpScale: 2, attack: 3, attackScale: 4, defence: 5, defenceScale: 6, magicDefence: 7, magicDefenceScale: 8, hit: 9, hitScale: 10, dodge: 11, dodgeScale: 12, critical: 13, criticalScale: 14, disCritical: 15, disCriticalScale: 16, luckyValue: 17, luckyValueScale: 18, moveSpeed: 19, moveSpeedScale: 20, attackInterval: 21, attackIntervalScale: 22, damageIncrease: 23, damageDecrease: 24, benumbPro: 25, disBenumbPro: 26, poisoningRecoveryProb: 27, benumbProSpan: 28, reviveCount: 29, reviveHPScale: 30, maxHp2: 31, disMaxHp2: 32, maxHpTemp: 33, attackTemp: 34, defenceTemp: 35, magicDefenceTemp: 36, hitTemp: 37, dodgeTemp: 38, criticalTemp: 39, disCriticalTemp: 40, luckyValueTemp: 41, moveSpeedTemp: 42, attackIntervalTemp: 43, damageIncreaseTemp: 44, damageDecreaseTemp: 46 };
        c_prop.heroProp = { "1": '生命', "2": '生命加成', "3": '攻击', "4": '攻击加成', "5": '物防', "6": '物防加成', "7": '法防', "8": '法防加成', "9": '命中', "10": '命中加成', "11": '闪避', "12": '闪避加成', "13": '暴击', "14": '暴击加成', "15": '抗暴', "16": '抗暴加成', "17": '幸运', "18": '幸运', "19": '移动速度', "20": '移动速度加成', "21": '攻击频率', "22": '攻击频率加成', "23": '伤害加深', "24": '伤害减免', "25": '麻痹', "26": '抗麻痹', "27": '未知', "28": '麻痹时长', "29": '复活次数', "30": '复活HP%', "31": '护盾', "32": '复活无敌时间', "33": '生命', "34": '攻击', "35": '物防', "36": '法防', "37": '命中', "38": '闪避', "39": '暴击', "40": '抗暴', "41": '幸运值', "42": '移动速度', "43": '攻击频率', "44": '伤害加成', "45": '伤害减免', "46": '护盾穿透' };
        c_prop.heroJobKey = { zs: 1, fs: 2, ds: 3, ys: 4 };
        c_prop.heroJob = { "1": '战士', "2": '法师', "3": '道士', "4": '幻术师' };
        c_prop.bagTypeKey = { equip: 1, item: 2, rebirth: 3, chest: 4, medal: 5 };
        c_prop.bagType = { "1": '装备', "2": '物品', "3": '元神', "4": '宝箱', "5": '勋章' };
        c_prop.wingFosTypeKey = { comFoster: 1, advFoster: 2 };
        c_prop.wingFosType = { "1": '普通培养', "2": '高级培养' };
        c_prop.arenaDataKey = { reNum: 0, lastReNumTime: 1, nextFightTime: 2, lastResetTime: 3 };
        c_prop.arenaData = { "0": '剩余挑战次数', "1": '上一次恢复次数时间', "2": '下一次可以挑战的时间(cd)', "3": '最后重置时间' };
        c_prop.lotteryTypeKey = { common: 1, advanced: 2, supremacy: 3 };
        c_prop.lotteryType = { "1": '普通', "2": '高级', "3": '至尊' };
        c_prop.equipTypeKey = { weapon: 0, clothes: 1, helmet: 2, necklace: 3, ring: 4, bracelet: 5 };
        c_prop.equipType = { "0": '武器', "1": '衣服', "2": '头盔', "3": '项链', "4": '戒指', "5": '手镯' };
        c_prop.pointEffectKey = { activity: 1, task: 2, sign: 3, bag: 4, mail: 5, recharge: 6, fiveDaysTarget: 7, chuanChen: 8, custom: 9, medal: 10 };
        c_prop.pointEffect = { "1": '活动-有可领取的活动奖励时', "2": '任务-有可领取的奖励时', "3": '签到-可以签到时', "4": '熔炼-背包已满', "5": '邮件-有可领取附件的邮件时,有未读邮件时', "6": '首充', "7": ' 五日目标-前四日必转', "8": '传承', "9": '订制', "10": '战印' };
        c_prop.pointRedKey = { home_main: 100, role_main: 101, make_main: 102, pkout1: 103, arena1: 104, role1_wing: 105, role1_equip: 106, role1_skill: 108, role1_realm: 109, role1_intensify: 110, role1_star: 111, role1_gem: 112, role2_wing: 113, role2_equip: 114, role2_skill: 116, role2_realm: 117, role2_intensify: 118, role2_star: 119, role2_gem: 120, role3_wing: 121, role3_equip: 122, role3_skill: 124, role3_realm: 125, role3_intensify: 126, role3_star: 127, role3_gem: 128, role1_main: 129, role2_main: 130, role3_main: 131, role1_dazao: 132, role2_dazao: 133, role3_dazao: 134, copy_boss: 135, rankPk: 136, bePkKill: 137, shopMain: 138, fuli: 139, lanzuan: 140, role4_main: 141, role4_equip: 142, role4_skill: 143, role1_tring: 144, role2_tring: 145, role3_tring: 146, demonLotus_main: 147, demonLotus_1: 148, demonLotus_2: 149, talisman_main: 150, talisman_role1: 151, talisman_role2: 152, talisman_role3: 153 };
        c_prop.pointRed = { "100": '主城-红点', "101": '角色-红点', "102": '打造-红点', "103": '野外PK-有新的防守记录时', "104": '主城-竞技场-红点', "105": '角色1-翅膀-红点', "106": '角色1-装备-红点', "108": '角色1-技能-红点', "109": '角色1-元神-红点', "110": '角色1-强化-红点', "111": '角色1-升星-红点', "112": '角色1-宝石-红点', "113": '角色2-翅膀-红点', "114": '角色2-装备-红点', "116": '角色2-技能-红点', "117": '角色2-元神-红点', "118": '角色2-强化-红点', "119": '角色2-升星-红点', "120": '角色2-宝石-红点', "121": '角色3-翅膀-红点', "122": '角色3-装备-红点', "124": '角色3-技能-红点', "125": '角色3-元神-红点', "126": '角色3-强化-红点', "127": '角色3-升星-红点', "128": '角色3-宝石-红点', "129": '角色1-主', "130": '角色2-主', "131": '角色3-主', "132": '角色1-打造', "133": '角色2-打造', "134": '角色3-打造', "135": '炼狱boss', "136": '排行榜战斗记录', "137": '新仇人', "138": '商城按钮', "139": '福利', "140": '蓝钻', "141": '角色4-主', "142": '角色4-装备-红点', "143": '角色4-技能-红点', "144": '角色1特戒', "145": '角色2特戒', "146": '角色3特戒', "147": '妖莲主', "148": '妖莲经验', "149": '妖莲培养', "150": '法宝主', "151": '法宝角色1', "152": '法宝角色2', "153": '法宝角色3' };
        c_prop.pointGreenKey = { home_main: 200, copy_equip: 201, copy_realm: 202, copy_boss: 203, area: 204, role1_skill: 205, role1_realm: 206, role2_skill: 207, role2_realm: 208, role3_skill: 209, role3_realm: 210 };
        c_prop.pointGreen = { "200": '主城-绿点', "201": '主城-装备副本-绿点', "202": '主城-元神副本-绿点', "203": '主城-boss副本-绿点', "204": '主城-竞技场-绿点', "205": '角色1-技能-绿点', "206": '角色1-元神-绿点', "207": '角色2-技能-绿点', "208": '角色2-元神-绿点', "209": '角色3-技能-绿点', "210": '角色3-元神-绿点' };
        c_prop.pointDataKey = { copy_equip: 300, copy_realm: 301, copy_boss: 302 };
        c_prop.pointData = { "300": '装备副本-开启组', "301": '元神副本-开启组', "302": 'boss副本-开启组' };
        c_prop.cTaskTypeKey = { personLvl: 0, skillLvl: 1, equipStrength: 2, equipUpStar: 3, closeTollGate: 4, gemUp: 5, equipSmelt: 6, clearHero: 7, heroGem: 8, equipCopy: 9, combat: 10, encounter: 11, hell: 12, state: 13, shopBuy: 14, wingTrain: 15, rankFighting: 16, chat: 20, treasure: 17, wing: 18, guild: 19, guildCopy: 21, paTaLottery: 22, heartStunt: 23 };
        c_prop.cTaskType = { "0": '人物等级', "1": '技能等级', "2": '装备强化', "3": '装备升星', "4": '通关关卡', "5": '宝石升级', "6": '熔炼装备', "7": '解锁职业', "8": '角色宝石', "9": '装备副本', "10": '战力', "11": '遭遇战', "12": '炼狱副本', "13": '元神副本', "14": '商店购买', "15": '翅膀培养', "16": '竞技场战斗', "17": '探宝', "18": '翅膀总阶数达到5阶', "19": '加入公会或者拥有公会', "20": '发送聊天消息', "21": '行会副本挑战', "22": '爬塔寻宝', "23": '心法升级' };
        c_prop.chatTypeKey = { sys: 1, user: 2, lottery: 3, guildLottery: 4, guild: 5 };
        c_prop.chatType = { "1": '系统', "2": '用户聊天', "3": '探宝', "4": '公会探宝', "5": '公会' };
        c_prop.sexKey = { male: 1, female: 0 };
        c_prop.sex = { "0": '女', "1": '男' };
        c_prop.receiverKey = { chat: 'r1', task: 'r2', point: 'r3', pkDeal: 'r4' };
        c_prop.receiver = { r1: '聊天', r2: '任务', r3: '红点', r4: 'pk被抢' };
        c_prop.roleIconKey = { zs_nan: 1, zs_nv: 2, fs_nan: 3, fs_nv: 4, ds_nan: 5, ds_nv: 6 };
        c_prop.roleIcon = { "1": '男战士', "2": '女战士', "3": '男法师', "4": '女法师', "5": '男道士', "6": '女道士' };
        c_prop.guildPostKey = { chairman: 1, viceChairman: 2, rankFile: 3 };
        c_prop.guildPost = { "1": '会长', "2": '副会长', "3": '会员' };
        c_prop.guildJoinConKey = { can: 1, verify: 2, cannot: 3 };
        c_prop.guildJoinCon = { "1": '不需要验证', "2": '需要验证', "3": '不能加入' };
        c_prop.guildMemberOpKey = { trans: 1, kick: 2, release: 3, increase: 4, quitGuild: 5, dissolveGuild: 6 };
        c_prop.guildMemberOp = { "1": '转让会长', "2": '踢出行会', "3": '解除职务', "4": '提升职务', "5": '退出公会', "6": '解散公会' };
        c_prop.ennobleTypeKey = { civilian: 1, ennoble1: 2, ennoble2: 3, ennoble3: 4, ennoble4: 5, ennoble5: 6, ennoble6: 7, ennoble7: 8, ennoble8: 9, ennoble9: 10, ennoble10: 11, ennoble11: 12, ennoble12: 13 };
        c_prop.ennobleType = { "1": '平民', "2": '亭长', "3": '庶长', "4": '轻骑', "5": '游骑', "6": '校尉', "7": '都尉', "8": '男爵', "9": '子爵', "10": '伯爵', "11": '侯爵', "12": '公爵', "13": '王爵' };
        c_prop.bossAwardTypeKey = { summonAward: 1, guildAward: 2, hurtAward: 3, rankAward1: 4, rankAward2: 5, rankAward3: 6, lastShotAward: 7 };
        c_prop.bossAwardType = { "1": '召唤奖', "2": '行会奖', "3": '伤害奖励', "4": '排名奖1', "5": '排名奖2', "6": '排名奖3', "7": '最后一击奖励' };
        c_prop.biLogTypeKey = { boss: 1, realm: 2, upStarStone: 3, wing: 4, mysterShop: 5, lottery: 6, callBoss: 7 };
        c_prop.biLogType = { "1": '炼狱BOSS挑战记录', "2": '元神升级记录', "3": '升星石获得记录', "4": '翅膀升级记录', "5": '神秘商店购买', "6": '探宝', "7": '召唤boss' };
        c_prop.upStarWayKey = { pkAward: 1, mail: 2, activity: 3 };
        c_prop.upStarWay = { "1": 'PK奖励', "2": '邮件', "3": '活动' };
        c_prop.redEnvelopeTypeKey = { comRed: 1, guildRed: 2, sysComRed: 3, sysGuildRed: 4 };
        c_prop.redEnvelopeType = { "1": '普通红包', "2": '行会福利', "3": '[官方]传世尊享红包', "4": '[官方]行会至尊红包' };
        c_prop.wbossRewardDesKey = { diamond: 1, equip: 2, treasure: 3, gas: 4, goods: 5, talisman: 6, undefined: 12 };
        c_prop.wbossRewardDes = { "1": '大量元宝奖励', "2": '%s级超、精品橙装', "3": '大量宝物奖励', "4": '大量真气奖励', "5": '大量凌云石勋章碎片奖励', "6": '珍稀法宝奖励', "7": '大量强化石', "8": '大量经验丹', "9": '大量钥匙', "10": '大量宝石', "11": '大量特戒碎片', "12": '大量勋章碎片' };
        c_prop.otherBuffIdKey = { boss: 1, king: 2, week: 3, month: 4, inspireGuildWar: 5 };
        c_prop.otherBuffId = { "1": '世界BOSS鼓舞', "2": '王城霸主经验加成', "3": '周卡加成', "4": '月卡加成', "5": '行会战个人鼓舞' };
        c_prop.offersDoorKey = { qinglong: 0, baihu: 1, xuanwu: 2, zhuque: 3 };
        c_prop.offersDoor = { "0": '青龙', "1": '白虎', "2": '玄武', "3": '朱雀' };
        c_prop.coffersRankTypeKey = { king: 1, pk: 2, arena: 3, combat: 4 };
        c_prop.coffersRankType = { "1": '王城霸主', "2": '杀戮狂魔', "3": '竞技大师', "4": '战力精英' };
        c_prop.activityBgTypeKey = { newYear: 1 };
        c_prop.activityBgType = { "1": '春节活动' };
        c_prop.noticeIconTypeKey = { notice: 1, activity: 2, logon: 3, crossClo: 4 };
        c_prop.noticeIconType = { "1": '公告', "2": '活动', "3": '登录公告', "4": '跨服' };
        c_prop.wingStrengthKey = { left: 1, right: 2 };
        c_prop.wingStrength = { "1": '左边', "2": '右边' };
        c_prop.activityExDataTypeKey = { titleIcon: 1, desIcon: 2, spItemId: 3, bgIcon: 4, subType: 5, freeDay: 6, totalDay: 7, minLvl: 8, maxLvl: 9, vipLimitLvl: 10, funcName: 11 };
        c_prop.activityExDataType = { "1": '活动标题icon', "2": '活动描述icon', "3": '活动货币类型', "4": '活动背景icon', "5": '活动子类型', "6": '每日免费参与次数', "7": '每日参与总次数', "8": '活动最小参与等级', "9": '活动最大参与等级', "10": 'vip限制等级', "11": '活动函数名' };
        c_prop.worldBossTypeKey = { guild: 0, world: 1 };
        c_prop.worldBossType = {};
        c_prop.propertyDataKey = { dlTreasure: 1, heartStunt: 2 };
        c_prop.propertyData = { "1": '妖莲宝物', "2": '心法' };
        c_prop.guildCopyKey = { boss: 1, chapter: 2 };
        c_prop.guildCopy = { "1": 'boss奖', "2": '章节奖' };
        c_prop.guildGroupKey = { diamond: 1, wGold: 2, hGold: 3, silver: 4, copper: 5 };
        c_prop.guildGroup = { "1": '钻石', "2": '白金', "3": '黄金', "4": '白银', "5": '黄铜' };
        c_prop.guildWarDoorKey = { dong: 0, nan: 1, xi: 2, bei: 3 };
        c_prop.guildWarDoor = { "0": '东', "1": '南', "2": '西', "3": '北' };
        c_prop.serverArrTypeKey = { littleHorn: 1 };
        c_prop.serverArrType = { "1": '跨服聊天分组' };
        c_prop.accountExDataKey = { lastLoginServer: 1 };
        c_prop.accountExData = { "1": '上次登录的服务器' };
        c_prop.treasureRecordTypeKey = { getTreasure: 1, pkTreasure: 2, openTreasure: 3, compose: 4 };
        c_prop.treasureRecordType = { "1": '获得秘宝', "2": 'pk获得秘宝', "3": '成功开启', "4": '合成成功' };
        c_prop.extraInfuseTypeKey = { genuineQi: 1, diamond: 2 };
        c_prop.extraInfuseType = { "1": '真气注入', "2": '元宝注入' };
        c_prop.chestTypeKey = { equipLvl: 5 };
        c_prop.chestType = { "5": '按等级开对应装备' };
        c_prop.practiceTypeKey = { medal: 0, heart: 1, gift: 2 };
        c_prop.practiceType = { "0": '战印', "1": '心法', "2": '法宝' };
        c_prop.talismanSkillTypeKey = { property: 1, cure: 2, exp: 3, genuineQi: 4, callBoss: 5, replaceSkill: 6 };
        c_prop.talismanSkillType = { "1": '属性', "2": '治疗效果被加成', "3": '经验获得加成', "4": '真气回复加快', "5": '召唤宝宝', "6": '替换技能' };
        c_prop.outActivityTypeKey = { outType1: 1, outType2: 2, outType3: 3 };
        c_prop.outActivityType = { "1": '跨服行会个人排名', "2": '行会BOSS', "3": '活动' };
        c_prop.userSurveyTypeKey = { radio: 1, checkbox: 2 };
        c_prop.userSurveyType = { "1": '单选', "2": '多选' };
        c_prop.newFourDaysTypeKey = { wingRank: 1, gemRank: 2, realmRank: 3, combatRank: 4 };
        c_prop.newFourDaysType = { "1": '角色翅膀', "2": '角色宝石', "3": '角色元神', "4": '角色总战力' };
    })(c_prop = gc.c_prop || (gc.c_prop = {}));
})(gc || (gc = {}));

var gc;
(function (gc) {
    //---------------c_game.json----------------
    gc.cfg_c_game = "shared/c_game.json";
    gc.c_game_id = "A";
    gc.c_game_key = "B";
    gc.c_game_func = "C";
    gc.c_game_memo = "D";
    gc.c_game_param0 = "E";
    gc.c_game_param1 = "F";
    gc.c_game_param2 = "G";
    gc.c_game_param3 = "H";
    gc.c_game_param4 = "I";
    gc.c_game_param5 = "J";
    gc.c_game_param6 = "K";
    gc.c_game_param7 = "L";
    gc.c_game_param8 = "M";
    gc.c_game_param9 = "N";
    gc.c_game_param10 = "O";
    gc.c_game_param11 = "P";
    gc.c_game_param12 = "Q";
    gc.c_game_param13 = "R";
    gc.c_game_param14 = "S";
    gc.c_game_param15 = "T";
    gc.c_game_param16 = "U";
    gc.c_game_param17 = "V";
    gc.c_game_param18 = "W";
    gc.c_game_param19 = "X";
    gc.c_game_param20 = "Y";
    gc.c_game_param21 = "Z";
    gc.c_game_param22 = "AA";
    gc.c_game_param23 = "AB";
    gc.c_game_param24 = "AC";
    gc.c_game_param25 = "AD";
    gc.c_game_param26 = "AE";
    //---------------c_lvl.json----------------
    gc.cfg_c_lvl = "shared/c_lvl.json";
    gc.c_lvl_lvl = "A";
    gc.c_lvl_name = "B";
    gc.c_lvl_minExp = "C";
    gc.c_lvl_reqExp = "D";
    gc.c_lvl_slotStrength = "E";
    gc.c_lvl_slotLevelup = "F";
    gc.c_lvl_upSkillLevel = "G";
    gc.c_lvl_maxHp = "H";
    gc.c_lvl_attack = "I";
    gc.c_lvl_defence = "J";
    gc.c_lvl_magicDefence = "K";
    gc.c_lvl_hit = "L";
    gc.c_lvl_dodge = "M";
    gc.c_lvl_critical = "N";
    gc.c_lvl_disCritical = "O";
    gc.c_lvl_maxHp2 = "P";
    gc.c_lvl_attack2 = "Q";
    gc.c_lvl_defence2 = "R";
    gc.c_lvl_magicDefence2 = "S";
    gc.c_lvl_hit2 = "T";
    gc.c_lvl_dodge2 = "U";
    gc.c_lvl_critical2 = "V";
    gc.c_lvl_disCritical2 = "W";
    gc.c_lvl_minPKLvl = "X";
    gc.c_lvl_maxPKLvl = "Y";
    gc.c_lvl_minRobotLvl = "Z";
    gc.c_lvl_maxRobotLvl = "AA";
    gc.c_lvl_robotRate = "AB";
    gc.c_lvl_pkExpcMult = "AC";
    gc.c_lvl_robotRange = "AD";
    gc.c_lvl_equipStrengthNum = "AE";
    gc.c_lvl_equipStrengthGold = "AF";
    gc.c_lvl_equipStrengthGoldAdd = "AG";
    gc.c_lvl_buyGoldMult = "AH";
    gc.c_lvl_buyGoldRate = "AI";
    gc.c_lvl_skillNeedGold = "AJ";
    gc.c_lvl_guildExp = "AK";
    gc.c_lvl_guildMan = "AL";
    gc.c_lvl_postCount = "AM";
    gc.c_lvl_rankFileNeedAct = "AN";
    gc.c_lvl_ennobleCon = "AO";
    gc.c_lvl_upStarNum = "AR";
    gc.c_lvl_upStarGold = "AS";
    gc.c_lvl_upStarPropAdd = "AT";
    gc.c_lvl_upStarTop = "AU";
    gc.c_lvl_maxUpStarLvl = "AV";
    gc.c_lvl_topCosNum = "AW";
    gc.c_lvl_topCosGold = "AX";
    gc.c_lvl_succeedPro = "AY";
    gc.c_lvl_propertys = "AZ";
    gc.c_lvl_ringSlotLevelupReqItemCount = "BA";
    gc.c_lvl_lotusLvl = "BB";
    gc.c_lvl_upLotusNum = "BC";
    gc.c_lvl_expOutput = "BD";
    gc.c_lvl_storeLimit = "BE";
    gc.c_lvl_needLvl = "BF";
    gc.c_lvl_openingExp = "BG";
    gc.c_lvl_coffersBase = "BI";
    gc.c_lvl_cofferPower = "BJ";
    gc.c_lvl_cofferExpc = "BK";
    gc.c_lvl_cofferBoss = "BL";
    //---------------c_msgCode.json----------------
    gc.cfg_c_msgCode = "shared/c_msgCode.json";
    gc.c_msgCode_id = "A";
    gc.c_msgCode_code = "B";
    gc.c_msgCode_text = "C";
    gc.c_msgCode_region0 = "D";
    gc.c_msgCode_time = "E";
    gc.c_msgCode_onTop = "F";
    gc.c_msgCode_remark = "G";
    gc.c_msgCode_range = "H";
    //---------------c_open.json----------------
    gc.cfg_c_open = "shared/c_open.json";
    gc.c_open_id = "A";
    gc.c_open_key = "B";
    gc.c_open_sys = "C";
    gc.c_open_lvlRequired = "D";
    //---------------c_guide.json----------------
    gc.cfg_c_guide = "shared/c_guide.json";
    gc.c_guide_id = "A";
    gc.c_guide_revert = "D";
    gc.c_guide_next = "E";
    gc.c_guide_condition = "F";
    gc.c_guide_judge = "G";
    gc.c_guide_type = "H";
    gc.c_guide_talk = "I";
    gc.c_guide_npcIndex = "J";
    gc.c_guide_penetrable = "K";
    gc.c_guide_countdown = "L";
    gc.c_guide_lvl = "M";
    gc.c_guide_copyId = "N";
    gc.c_guide_taskId = "O";
    gc.c_guide_layer = "P";
    gc.c_guide_node = "Q";
    gc.c_guide_rectNode = "R";
    gc.c_guide_delayTimeToShow = "S";
    gc.c_guide_beforeShow = "T";
    gc.c_guide_afterShow = "U";
    gc.c_guide_beforeNext = "V";
    gc.c_guide_afterNext = "W";
    gc.c_guide_endType = "X";
    gc.c_guide_toSave = "Y";
    gc.c_guide_waiting = "Z";
    gc.c_guide_actions = "AA";
    gc.c_guide_refreshEvent = "AB";
    gc.c_guide_isHook = "AC";
    gc.c_guide_route = "AD";
    gc.c_guide_option = "AE";
    //---------------c_guildLvl.json----------------
    gc.cfg_c_guildLvl = "shared/c_guildLvl.json";
    gc.c_guildLvl_1 = "V";
    gc.c_guildLvl_2 = "W";
    gc.c_guildLvl_3 = "X";
    gc.c_guildLvl_4 = "Y";
    gc.c_guildLvl_5 = "Z";
    gc.c_guildLvl_6 = "AA";
    gc.c_guildLvl_7 = "AB";
    gc.c_guildLvl_8 = "AC";
    gc.c_guildLvl_9 = "AD";
    gc.c_guildLvl_10 = "AE";
    gc.c_guildLvl_11 = "AF";
    gc.c_guildLvl_12 = "AG";
    gc.c_guildLvl_13 = "AH";
    gc.c_guildLvl_id = "A";
    gc.c_guildLvl_name = "B";
    gc.c_guildLvl_props = "C";
    gc.c_guildLvl_ennobleCount = "D";
    //---------------c_payInfo.json----------------
    gc.cfg_c_payInfo = "shared/c_payInfo.json";
    gc.c_payInfo_10001 = "C";
    gc.c_payInfo_10004 = "D";
    gc.c_payInfo_99999 = "B";
    gc.c_payInfo_id = "A";
    //---------------c_arenaRankReward.json----------------
    gc.cfg_c_arenaRankReward = "shared/c_arenaRankReward.json";
    gc.c_arenaRankReward_id = "A";
    gc.c_arenaRankReward_name = "B";
    gc.c_arenaRankReward_rangeStart = "C";
    gc.c_arenaRankReward_rangeEnd = "D";
    gc.c_arenaRankReward_rewardId = "E";
    gc.c_arenaRankReward_gold = "F";
    gc.c_arenaRankReward_winPrestige = "G";
    gc.c_arenaRankReward_losePrestige = "H";
    //---------------t_itemBreak.json----------------
    gc.cfg_t_itemBreak = "shared/t_itemBreak.json";
    gc.t_itemBreak_id = "A";
    gc.t_itemBreak_name = "B";
    gc.t_itemBreak_level = "C";
    gc.t_itemBreak_position = "D";
    gc.t_itemBreak_props = "E";
    gc.t_itemBreak_combat = "F";
    gc.t_itemBreak_desc = "G";
    //---------------c_gem.json----------------
    gc.cfg_c_gem = "shared/c_gem.json";
    gc.c_gem_id = "A";
    gc.c_gem_itemID = "B";
    gc.c_gem_index = "C";
    gc.c_gem_count = "D";
    gc.c_gem_gemLvl = "E";
    gc.c_gem_items1 = "F";
    gc.c_gem_gemId0 = "G";
    gc.c_gem_effectType1 = "H";
    gc.c_gem_effectPro1 = "I";
    gc.c_gem_items2 = "J";
    gc.c_gem_gemId1 = "K";
    gc.c_gem_effectType2 = "L";
    gc.c_gem_effectPro2 = "M";
    gc.c_gem_items3 = "N";
    gc.c_gem_gemId2 = "O";
    gc.c_gem_effectType3 = "P";
    gc.c_gem_effectPro3 = "Q";
    gc.c_gem_items4 = "R";
    gc.c_gem_gemId3 = "S";
    gc.c_gem_effectType4 = "T";
    gc.c_gem_effectPro4 = "U";
    //---------------c_compound.json----------------
    gc.cfg_c_compound = "shared/c_compound.json";
    gc.c_compound_id = "A";
    gc.c_compound_name = "B";
    gc.c_compound_reqJinbi = "C";
    gc.c_compound_reqExploit = "D";
    gc.c_compound_needLvl = "E";
    gc.c_compound_reqItems1 = "F";
    gc.c_compound_reqCount1 = "G";
    gc.c_compound_reqItems2 = "H";
    gc.c_compound_reqCount2 = "I";
    gc.c_compound_reqItems3 = "J";
    gc.c_compound_reqCount3 = "K";
    gc.c_compound_reqItems4 = "L";
    gc.c_compound_reqCount4 = "M";
    //---------------c_exchange.json----------------
    gc.cfg_c_exchange = "shared/c_exchange.json";
    gc.c_exchange_id = "A";
    gc.c_exchange_item = "B";
    gc.c_exchange_stuffs = "C";
    gc.c_exchange_lvlRequired = "D";
    gc.c_exchange_type = "E";
    gc.c_exchange_count = "F";
    gc.c_exchange_rate = "G";
    //---------------c_mail.json----------------
    gc.cfg_c_mail = "shared/c_mail.json";
    gc.c_mail_id = "A";
    gc.c_mail_type = "B";
    gc.c_mail_fromName = "C";
    gc.c_mail_title = "D";
    gc.c_mail_content = "E";
    gc.c_mail_expireDays = "F";
    gc.c_mail_delHours = "G";
    gc.c_mail_explain = "H";
    //---------------c_task.json----------------
    gc.cfg_c_task = "shared/c_task.json";
    gc.c_task_id = "A";
    gc.c_task_name = "B";
    gc.c_task_note = "C";
    gc.c_task_taskType = "D";
    gc.c_task_cTaskType = "E";
    gc.c_task_targetValue = "F";
    gc.c_task_rewardId = "G";
    gc.c_task_uiLink = "H";
    gc.c_task_icon = "I";
    //---------------c_nameData.json----------------
    gc.cfg_c_nameData = "shared/c_nameData.json";
    gc.c_nameData_id = "A";
    gc.c_nameData_firstName = "B";
    gc.c_nameData_maleName = "C";
    gc.c_nameData_femaleName = "D";
    //---------------c_pvpRankReward.json----------------
    gc.cfg_c_pvpRankReward = "shared/c_pvpRankReward.json";
    gc.c_pvpRankReward_id = "A";
    gc.c_pvpRankReward_name = "B";
    gc.c_pvpRankReward_range = "C";
    gc.c_pvpRankReward_gold = "D";
    gc.c_pvpRankReward_diamond = "E";
    gc.c_pvpRankReward_starStone = "F";
    gc.c_pvpRankReward_items = "G";
    //---------------c_realm.json----------------
    gc.cfg_c_realm = "shared/c_realm.json";
    gc.c_realm_id = "A";
    gc.c_realm_name = "B";
    gc.c_realm_reqItems = "C";
    gc.c_realm_propertys = "D";
    //---------------c_recharge.json----------------
    gc.cfg_c_recharge = "shared/c_recharge.json";
    gc.c_recharge_id = "A";
    gc.c_recharge_name = "B";
    gc.c_recharge_type = "C";
    gc.c_recharge_diamond = "D";
    gc.c_recharge_payId = "E";
    gc.c_recharge_cost = "F";
    gc.c_recharge_first = "G";
    gc.c_recharge_extra = "H";
    gc.c_recharge_daily = "I";
    gc.c_recharge_desc = "J";
    gc.c_recharge_visible = "K";
    gc.c_recharge_index = "L";
    gc.c_recharge_eventIcon = "M";
    gc.c_recharge_displayId = "N";
    gc.c_recharge_isTreble = "O";
    //---------------c_reward.json----------------
    gc.cfg_c_reward = "shared/c_reward.json";
    gc.c_reward_id = "A";
    gc.c_reward_name = "B";
    gc.c_reward_exp = "C";
    gc.c_reward_gold = "D";
    gc.c_reward_diamond = "E";
    gc.c_reward_prestige = "F";
    gc.c_reward_activity = "G";
    gc.c_reward_rewardItems = "H";
    //---------------c_vip.json----------------
    gc.cfg_c_vip = "shared/c_vip.json";
    gc.c_vip_id = "A";
    gc.c_vip_score = "B";
    gc.c_vip_itemId = "C";
    gc.c_vip_equipCount = "D";
    gc.c_vip_bossCount = "E";
    gc.c_vip_realmCount = "F";
    gc.c_vip_buyBossCount = "G";
    gc.c_vip_guildFbCount = "H";
    gc.c_vip_buyLingyunCount = "I";
    gc.c_vip_skipFight = "J";
    gc.c_vip_autoSmelt = "K";
    gc.c_vip_autoPkOut = "L";
    gc.c_vip_guildBoss = "M";
    gc.c_vip_copyCountV10 = "N";
    gc.c_vip_copyCountV14 = "O";
    gc.c_vip_copyCountV17 = "P";
    gc.c_vip_copyCountV19 = "Q";
    gc.c_vip_copyCountV7 = "R";
    gc.c_vip_addEquipBag = "S";
    gc.c_vip_redEnvelopeCount = "T";
    gc.c_vip_openingCount = "U";
    gc.c_vip_coffersBuild = "V";
    gc.c_vip_coffersBuff = "W";
    gc.c_vip_kingOp = "X";
    gc.c_vip_bossBackRes = "Y";
    gc.c_vip_isLock = "Z";
    gc.c_vip_worldCount = "AA";
    gc.c_vip_guildCount = "AB";
    gc.c_vip_bossAutoFight = "AC";
    gc.c_vip_copyBossAutoFight = "AD";
    gc.c_vip_isPickAct = "AE";
    gc.c_vip_isWipeMore = "AL";
    gc.c_vip_wipeCount = "AM";
    gc.c_vip_openRole2 = "AN";
    gc.c_vip_openRole3 = "AO";
    gc.c_vip_openRole4 = "AP";
    gc.c_vip_buzhen = "AQ";
    //---------------t_buff.json----------------
    gc.cfg_t_buff = "shared/t_buff.json";
    gc.t_buff_id = "A";
    gc.t_buff_name = "B";
    gc.t_buff_note = "C";
    gc.t_buff_state = "D";
    gc.t_buff_liftTime = "E";
    gc.t_buff_lifeTimeAdd = "F";
    gc.t_buff_effectValue = "G";
    gc.t_buff_effectValeAdd = "H";
    gc.t_buff_propertyID = "I";
    gc.t_buff_baseValue1 = "J";
    gc.t_buff_linerScale = "K";
    gc.t_buff_quadraticScale = "L";
    gc.t_buff_channel = "M";
    gc.t_buff_overlap = "N";
    gc.t_buff_disBuffChannel = "O";
    gc.t_buff_cleanChannel = "P";
    gc.t_buff_specialEffect = "Q";
    gc.t_buff_targetColor = "R";
    gc.t_buff_effectRes = "S";
    gc.t_buff_effectPos = "T";
    //---------------t_copy.json----------------
    gc.cfg_t_copy = "shared/t_copy.json";
    gc.t_copy_id = "A";
    gc.t_copy_name = "B";
    gc.t_copy_displayID = "C";
    gc.t_copy_type = "D";
    gc.t_copy_monsterCount = "E";
    gc.t_copy_monsterTotal = "F";
    gc.t_copy_bossSpace = "G";
    gc.t_copy_bossID = "H";
    gc.t_copy_loot = "I";
    gc.t_copy_bossLoot = "J";
    gc.t_copy_lootDisplay = "K";
    gc.t_copy_cond = "L";
    gc.t_copy_icon = "M";
    gc.t_copy_randMonsters = "N";
    //---------------t_copyLoot.json----------------
    gc.cfg_t_copyLoot = "shared/t_copyLoot.json";
    gc.t_copyLoot_id = "A";
    gc.t_copyLoot_name = "B";
    gc.t_copyLoot_exItems = "C";
    gc.t_copyLoot_moneyMin = "D";
    gc.t_copyLoot_moneyMax = "E";
    gc.t_copyLoot_diamond = "F";
    gc.t_copyLoot_moneyProbability = "G";
    gc.t_copyLoot_lootChildIds = "H";
    gc.t_copyLoot_randCounts = "I";
    gc.t_copyLoot_showItems = "J";
    //---------------t_copyLootChild.json----------------
    gc.cfg_t_copyLootChild = "shared/t_copyLootChild.json";
    gc.t_copyLootChild_id = "A";
    gc.t_copyLootChild_name = "B";
    gc.t_copyLootChild_num = "C";
    gc.t_copyLootChild_num2 = "D";
    gc.t_copyLootChild_items = "E";
    gc.t_copyLootChild_items2 = "F";
    //---------------t_item.json----------------
    gc.cfg_t_item = "shared/t_item.json";
    gc.t_item_id = "A";
    gc.t_item_name = "B";
    gc.t_item_note = "C";
    gc.t_item_iconId = "D";
    gc.t_item_itemLvl = "E";
    gc.t_item_level = "F";
    gc.t_item_vip = "G";
    gc.t_item_color = "H";
    gc.t_item_type = "I";
    gc.t_item_bagTag = "J";
    gc.t_item_count = "K";
    gc.t_item_price = "L";
    gc.t_item_dropId = "M";
    gc.t_item_isLoot = "N";
    gc.t_item_lootType = "O";
    //---------------t_itemLogic.json----------------
    gc.cfg_t_itemLogic = "shared/t_itemLogic.json";
    gc.t_itemLogic_id = "A";
    gc.t_itemLogic_type = "B";
    gc.t_itemLogic_chestType = "C";
    gc.t_itemLogic_create = "D";
    gc.t_itemLogic_num = "E";
    gc.t_itemLogic_needItems = "F";
    gc.t_itemLogic_create2 = "G";
    //---------------t_itemEquip.json----------------
    gc.cfg_t_itemEquip = "shared/t_itemEquip.json";
    gc.t_itemEquip_id = "A";
    gc.t_itemEquip_name = "B";
    gc.t_itemEquip_job = "C";
    gc.t_itemEquip_type = "D";
    gc.t_itemEquip_displayID = "E";
    gc.t_itemEquip_slotStrengthProperty = "F";
    gc.t_itemEquip_propValue = "G";
    gc.t_itemEquip_propertys = "H";
    gc.t_itemEquip_randomRate = "I";
    gc.t_itemEquip_randomPro = "J";
    gc.t_itemEquip_fixProp = "K";
    gc.t_itemEquip_isUp = "L";
    gc.t_itemEquip_isRare = "M";
    gc.t_itemEquip_isSuper = "N";
    gc.t_itemEquip_gradeBase = "O";
    gc.t_itemEquip_isLocked = "P";
    //---------------t_itemRealm.json----------------
    gc.cfg_t_itemRealm = "shared/t_itemRealm.json";
    gc.t_itemRealm_id = "A";
    gc.t_itemRealm_name = "B";
    gc.t_itemRealm_propertys = "C";
    gc.t_itemRealm_compoundId = "D";
    //---------------t_monster.json----------------
    gc.cfg_t_monster = "shared/t_monster.json";
    gc.t_monster_id = "A";
    gc.t_monster_name = "B";
    gc.t_monster_note = "C";
    gc.t_monster_displayID = "D";
    gc.t_monster_bossLevel = "E";
    gc.t_monster_attackType = "F";
    gc.t_monster_maxHp = "G";
    gc.t_monster_attack = "H";
    gc.t_monster_defense = "I";
    gc.t_monster_magicDefence = "J";
    gc.t_monster_hit = "K";
    gc.t_monster_dodge = "L";
    gc.t_monster_critical = "M";
    gc.t_monster_disCritical = "N";
    gc.t_monster_damageIncrease = "O";
    gc.t_monster_damageDecrease = "P";
    gc.t_monster_benumbPro = "Q";
    gc.t_monster_disBenyumbPro = "R";
    gc.t_monster_immunity = "S";
    gc.t_monster_moveSpeed = "T";
    gc.t_monster_attackTime = "U";
    gc.t_monster_skillIds = "V";
    gc.t_monster_effectsId = "W";
    gc.t_monster_seeDistance = "X";
    gc.t_monster_idleSound = "Y";
    gc.t_monster_attackSound = "Z";
    gc.t_monster_deadSound = "AA";
    gc.t_monster_dropId = "AB";
    gc.t_monster_userExp = "AC";
    gc.t_monster_level = "AD";
    gc.t_monster_scale = "AE";
    gc.t_monster_combat = "AF";
    //---------------t_wing.json----------------
    gc.cfg_t_wing = "shared/t_wing.json";
    gc.t_wing_id = "A";
    gc.t_wing_name = "B";
    gc.t_wing_level = "C";
    gc.t_wing_star = "D";
    gc.t_wing_iconId = "E";
    gc.t_wing_displayID = "F";
    gc.t_wing_needExp = "G";
    gc.t_wing_attack = "H";
    gc.t_wing_maxHp = "I";
    gc.t_wing_defence = "J";
    gc.t_wing_magicDefence = "K";
    //---------------t_wingStrength.json----------------
    gc.cfg_t_wingStrength = "shared/t_wingStrength.json";
    gc.t_wingStrength_id = "A";
    gc.t_wingStrength_lvl = "B";
    gc.t_wingStrength_needWingLvl = "C";
    gc.t_wingStrength_attack = "D";
    gc.t_wingStrength_defence = "E";
    gc.t_wingStrength_maxHp = "F";
    gc.t_wingStrength_magicDefence = "G";
    gc.t_wingStrength_consume = "H";
    gc.t_wingStrength_successPro = "I";
    gc.t_wingStrength_demotePro = "J";
    gc.t_wingStrength_critPro = "K";
    //---------------t_skill.json----------------
    gc.cfg_t_skill = "shared/t_skill.json";
    gc.t_skill_id = "A";
    gc.t_skill_name = "B";
    gc.t_skill_desc = "C";
    gc.t_skill_canExtends = "D";
    gc.t_skill_effect = "E";
    gc.t_skill_cd = "F";
    gc.t_skill_firstCD = "G";
    gc.t_skill_special = "H";
    gc.t_skill_attackDistance = "I";
    gc.t_skill_priority = "J";
    gc.t_skill_targetType = "K";
    gc.t_skill_effectRadius = "L";
    gc.t_skill_damage = "M";
    gc.t_skill_pushType = "N";
    gc.t_skill_pushDistance = "O";
    gc.t_skill_casterPositionType = "P";
    gc.t_skill_buffID = "Q";
    gc.t_skill_callMonsterID = "R";
    gc.t_skill_callMonsterNum = "S";
    gc.t_skill_damageScaleA = "T";
    gc.t_skill_damageScaleB = "U";
    gc.t_skill_damageScaleC = "V";
    gc.t_skill_pushDistanceScaleA = "W";
    gc.t_skill_pushDistanceScaleB = "X";
    gc.t_skill_pushDistanceScaleC = "Y";
    gc.t_skill_castAction = "Z";
    gc.t_skill_combat = "AA";
    gc.t_skill_actionTime = "AB";
    gc.t_skill_casterEffect = "AC";
    gc.t_skill_targetEffect = "AD";
    gc.t_skill_flyEffect = "AE";
    gc.t_skill_beHittedEffect = "AF";
    //---------------t_hero.json----------------
    gc.cfg_t_hero = "shared/t_hero.json";
    gc.t_hero_id = "A";
    gc.t_hero_name = "B";
    gc.t_hero_note = "C";
    gc.t_hero_job = "D";
    gc.t_hero_displayID = "E";
    gc.t_hero_describe = "F";
    gc.t_hero_attackType = "G";
    gc.t_hero_moveSpeed = "H";
    gc.t_hero_attackInterval = "I";
    gc.t_hero_skillIds = "J";
    //---------------c_shop.json----------------
    gc.cfg_c_shop = "shared/c_shop.json";
    gc.c_shop_id = "A";
    gc.c_shop_type = "B";
    gc.c_shop_itemId = "C";
    gc.c_shop_needLvl = "D";
    gc.c_shop_endLvl = "E";
    gc.c_shop_limit = "F";
    gc.c_shop_currencyType = "G";
    gc.c_shop_price = "H";
    gc.c_shop_discount = "K";
    gc.c_shop_rate = "L";
    gc.c_shop_order = "M";
    //---------------c_help.json----------------
    gc.cfg_c_help = "shared/c_help.json";
    gc.c_help_id = "A";
    gc.c_help_system = "B";
    gc.c_help_helpText = "C";
    //---------------c_chatSys.json----------------
    gc.cfg_c_chatSys = "shared/c_chatSys.json";
    gc.c_chatSys_id = "A";
    gc.c_chatSys_type = "B";
    gc.c_chatSys_subType = "C";
    gc.c_chatSys_arg = "D";
    gc.c_chatSys_text = "E";
    gc.c_chatSys_ifNotice = "F";
    gc.c_chatSys_ifImport = "G";
    //---------------c_guildFuncCfg.json----------------
    gc.cfg_c_guildFuncCfg = "shared/c_guildFuncCfg.json";
    gc.c_guildFuncCfg_id = "A";
    gc.c_guildFuncCfg_setEnnoble = "B";
    gc.c_guildFuncCfg_maxMember = "D";
    gc.c_guildFuncCfg_disGuild = "E";
    gc.c_guildFuncCfg_quitGuild = "F";
    gc.c_guildFuncCfg_invite = "G";
    gc.c_guildFuncCfg_agreeApp = "H";
    gc.c_guildFuncCfg_setGuild = "I";
    gc.c_guildFuncCfg_moveMember = "J";
    gc.c_guildFuncCfg_upToChairman = "K";
    gc.c_guildFuncCfg_upToVice = "L";
    gc.c_guildFuncCfg_movePosition = "M";
    gc.c_guildFuncCfg_changeNotice = "N";
    gc.c_guildFuncCfg_resetCopy = "O";
    gc.c_guildFuncCfg_distribution = "P";
    gc.c_guildFuncCfg_signWar = "Q";
    gc.c_guildFuncCfg_sendEmail = "R";
    //---------------c_guildAct.json----------------
    gc.cfg_c_guildAct = "shared/c_guildAct.json";
    gc.c_guildAct_id = "A";
    gc.c_guildAct_name = "B";
    gc.c_guildAct_type = "C";
    gc.c_guildAct_act = "D";
    gc.c_guildAct_num = "E";
    gc.c_guildAct_gold = "F";
    gc.c_guildAct_actCount = "G";
    gc.c_guildAct_icon = "H";
    gc.c_guildAct_uiLink = "I";
    gc.c_guildAct_seniority = "J";
    //---------------c_guildEnnoble.json----------------
    gc.cfg_c_guildEnnoble = "shared/c_guildEnnoble.json";
    gc.c_guildEnnoble_id = "A";
    gc.c_guildEnnoble_ennobleGuildLvlCfg = "B";
    gc.c_guildEnnoble_ennobleLvlCfg = "C";
    gc.c_guildEnnoble_props = "D";
    //---------------c_mysterShop.json----------------
    gc.cfg_c_mysterShop = "shared/c_mysterShop.json";
    gc.c_mysterShop_id = "A";
    gc.c_mysterShop_type = "B";
    gc.c_mysterShop_integralItem1 = "C";
    gc.c_mysterShop_integralItem2 = "D";
    gc.c_mysterShop_integralItem3 = "E";
    gc.c_mysterShop_giftBag1 = "F";
    gc.c_mysterShop_giftBag2 = "G";
    gc.c_mysterShop_picture = "H";
    //---------------t_inheritedEquip.json----------------
    gc.cfg_t_inheritedEquip = "shared/t_inheritedEquip.json";
    gc.t_inheritedEquip_id = "A";
    gc.t_inheritedEquip_nextId = "B";
    gc.t_inheritedEquip_num = "C";
    //---------------c_bossParameter.json----------------
    gc.cfg_c_bossParameter = "shared/c_bossParameter.json";
    gc.c_bossParameter_id = "B";
    gc.c_bossParameter_isOpen = "C";
    gc.c_bossParameter_week = "D";
    gc.c_bossParameter_displayId = "E";
    gc.c_bossParameter_copyId = "F";
    gc.c_bossParameter_repeat = "G";
    gc.c_bossParameter_openLvl = "H";
    gc.c_bossParameter_fightLvl = "I";
    gc.c_bossParameter_maxLvl = "J";
    gc.c_bossParameter_summonCd = "K";
    gc.c_bossParameter_summonCost = "L";
    gc.c_bossParameter_rankAward1 = "M";
    gc.c_bossParameter_rankAward2 = "N";
    gc.c_bossParameter_rankAward3 = "O";
    gc.c_bossParameter_rankAward4 = "P";
    gc.c_bossParameter_summonAward = "Q";
    gc.c_bossParameter_guildAward = "R";
    gc.c_bossParameter_lastShotAward = "S";
    gc.c_bossParameter_awardDesc = "T";
    gc.c_bossParameter_goldRate = "U";
    gc.c_bossParameter_timeLimit = "V";
    gc.c_bossParameter_isLimit = "W";
    gc.c_bossParameter_startTime = "X";
    gc.c_bossParameter_endTime = "Y";
    gc.c_bossParameter_showOnHoliday = "Z";
    gc.c_bossParameter_sort = "AA";
    //---------------t_otherBuff.json----------------
    gc.cfg_t_otherBuff = "shared/t_otherBuff.json";
    gc.t_otherBuff_id = "A";
    gc.t_otherBuff_name = "B";
    gc.t_otherBuff_type = "C";
    gc.t_otherBuff_addHurt = "D";
    gc.t_otherBuff_conTime = "E";
    gc.t_otherBuff_icon = "F";
    gc.t_otherBuff_des = "G";
    //---------------c_bossHurtRate.json----------------
    gc.cfg_c_bossHurtRate = "shared/c_bossHurtRate.json";
    gc.c_bossHurtRate_id = "A";
    gc.c_bossHurtRate_startHurt1 = "B";
    gc.c_bossHurtRate_endHurt1 = "C";
    gc.c_bossHurtRate_gold1 = "D";
    gc.c_bossHurtRate_startHurt2 = "E";
    gc.c_bossHurtRate_endHurt2 = "F";
    gc.c_bossHurtRate_gold2 = "G";
    gc.c_bossHurtRate_startHurt3 = "H";
    gc.c_bossHurtRate_endHurt3 = "I";
    gc.c_bossHurtRate_gold3 = "J";
    gc.c_bossHurtRate_guildStartHurt1 = "K";
    gc.c_bossHurtRate_guildEndHurt1 = "L";
    gc.c_bossHurtRate_guildProgress1 = "M";
    gc.c_bossHurtRate_guildStartHurt2 = "N";
    gc.c_bossHurtRate_guildEndHurt2 = "O";
    gc.c_bossHurtRate_guildProgress2 = "P";
    gc.c_bossHurtRate_guildStartHurt3 = "Q";
    gc.c_bossHurtRate_guildEndHurt3 = "R";
    gc.c_bossHurtRate_guildProgress3 = "S";
    gc.c_bossHurtRate_guildStartHurt4 = "T";
    gc.c_bossHurtRate_guildEndHurt4 = "U";
    gc.c_bossHurtRate_guildProgress4 = "V";
    gc.c_bossHurtRate_guildStartHurt5 = "W";
    gc.c_bossHurtRate_guildEndHurt5 = "X";
    gc.c_bossHurtRate_guildProgress5 = "Y";
    gc.c_bossHurtRate_guildStartHurt6 = "Z";
    gc.c_bossHurtRate_guildEndHurt6 = "AA";
    gc.c_bossHurtRate_guildProgress6 = "AB";
    gc.c_bossHurtRate_guildStartHurt7 = "AC";
    gc.c_bossHurtRate_guildEndHurt7 = "AD";
    gc.c_bossHurtRate_guildProgress7 = "AE";
    gc.c_bossHurtRate_guildStartHurt8 = "AF";
    gc.c_bossHurtRate_guildEndHurt8 = "AG";
    gc.c_bossHurtRate_guildProgress8 = "AH";
    //---------------c_challengeCupRankReward.json----------------
    gc.cfg_c_challengeCupRankReward = "shared/c_challengeCupRankReward.json";
    gc.c_challengeCupRankReward_id = "A";
    gc.c_challengeCupRankReward_name = "B";
    gc.c_challengeCupRankReward_rangeStart = "C";
    gc.c_challengeCupRankReward_rangeEnd = "D";
    gc.c_challengeCupRankReward_gold = "E";
    gc.c_challengeCupRankReward_reward = "F";
    //---------------t_rebirth.json----------------
    gc.cfg_t_rebirth = "shared/t_rebirth.json";
    gc.t_rebirth_id = "A";
    gc.t_rebirth_rebirthLvl = "B";
    gc.t_rebirth_lvl = "C";
    gc.t_rebirth_limitLvl = "D";
    gc.t_rebirth_exp = "E";
    gc.t_rebirth_maxHpTemp = "F";
    gc.t_rebirth_attackTemp = "G";
    gc.t_rebirth_defenceTemp = "H";
    gc.t_rebirth_magicDefenceTemp = "I";
    gc.t_rebirth_hitTemp = "J";
    gc.t_rebirth_dodgeTemp = "K";
    gc.t_rebirth_criticalTemp = "L";
    gc.t_rebirth_disCriticalTemp = "M";
    //---------------c_customParameter.json----------------
    gc.cfg_c_customParameter = "shared/c_customParameter.json";
    gc.c_customParameter_id = "A";
    gc.c_customParameter_gainType = "B";
    gc.c_customParameter_part = "C";
    gc.c_customParameter_job1_itemId0 = "D";
    gc.c_customParameter_job1_itemId1 = "E";
    gc.c_customParameter_job2_itemId0 = "F";
    gc.c_customParameter_job2_itemId1 = "G";
    gc.c_customParameter_job3_itemId0 = "H";
    gc.c_customParameter_job3_itemId1 = "I";
    gc.c_customParameter_equip_lvl_range = "J";
    gc.c_customParameter_vip = "K";
    gc.c_customParameter_color = "L";
    //---------------c_luckyTalos.json----------------
    gc.cfg_c_luckyTalos = "shared/c_luckyTalos.json";
    gc.c_luckyTalos_id = "A";
    gc.c_luckyTalos_itemID = "B";
    gc.c_luckyTalos_amount = "C";
    gc.c_luckyTalos_class = "D";
    gc.c_luckyTalos_color = "E";
    gc.c_luckyTalos_weight = "F";
    gc.c_luckyTalos_spItemId = "G";
    gc.c_luckyTalos_itemLimit = "H";
    gc.c_luckyTalos_subType = "I";
    gc.c_luckyTalos_subTypeDivide = "J";
    //---------------c_everydayCharge.json----------------
    gc.cfg_c_everydayCharge = "shared/c_everydayCharge.json";
    gc.c_everydayCharge_id = "A";
    gc.c_everydayCharge_awardId = "B";
    gc.c_everydayCharge_chargeAmount = "C";
    //---------------t_medal.json----------------
    gc.cfg_t_medal = "shared/t_medal.json";
    gc.t_medal_id = "A";
    gc.t_medal_name = "B";
    gc.t_medal_propertys = "C";
    gc.t_medal_iconId = "D";
    gc.t_medal_staIconId = "E";
    gc.t_medal_text = "F";
    gc.t_medal_grade = "G";
    gc.t_medal_chatIconId = "H";
    gc.t_medal_outputWay = "I";
    gc.t_medal_isAchivement = "J";
    gc.t_medal_lootArg = "K";
    gc.t_medal_metalType = "L";
    //---------------t_medalLvl.json----------------
    gc.cfg_t_medalLvl = "shared/t_medalLvl.json";
    gc.t_medalLvl_id = "A";
    gc.t_medalLvl_lvl = "B";
    gc.t_medalLvl_reqItems = "C";
    gc.t_medalLvl_strengthPro = "D";
    gc.t_medalLvl_grade = "E";
    gc.t_medalLvl_needLvl = "F";
    //---------------t_strengthRefine.json----------------
    gc.cfg_t_strengthRefine = "shared/t_strengthRefine.json";
    gc.t_strengthRefine_lvl = "A";
    gc.t_strengthRefine_needStrLvl = "B";
    gc.t_strengthRefine_consumeStr = "C";
    gc.t_strengthRefine_consumeGold = "D";
    gc.t_strengthRefine_strAddition = "E";
    gc.t_strengthRefine_succeedPro = "F";
    gc.t_strengthRefine_demotePro = "G";
    gc.t_strengthRefine_critPro = "H";
    //---------------c_demonLotus.json----------------
    gc.cfg_c_demonLotus = "shared/c_demonLotus.json";
    gc.c_demonLotus_lvl = "A";
    gc.c_demonLotus_advNeedLvl = "B";
    gc.c_demonLotus_expcAccLimit = "C";
    gc.c_demonLotus_genqiAccLimit = "D";
    gc.c_demonLotus_expOutput = "E";
    gc.c_demonLotus_advSucceedPro = "F";
    gc.c_demonLotus_advCosLotus = "G";
    gc.c_demonLotus_treaNeedUserLvl = "I";
    gc.c_demonLotus_treaSucceedPro = "J";
    gc.c_demonLotus_treaCosGenqi = "K";
    gc.c_demonLotus_treaCosLotus = "L";
    gc.c_demonLotus_treaPropertys = "M";
    //---------------c_genuineQi.json----------------
    gc.cfg_c_genuineQi = "shared/c_genuineQi.json";
    gc.c_genuineQi_lvl = "A";
    gc.c_genuineQi_recovery = "B";
    gc.c_genuineQi_genuLimit = "C";
    //---------------c_heartStunt.json----------------
    gc.cfg_c_heartStunt = "shared/c_heartStunt.json";
    gc.c_heartStunt_id = "A";
    gc.c_heartStunt_name = "B";
    gc.c_heartStunt_skillId = "C";
    gc.c_heartStunt_skillId2 = "D";
    gc.c_heartStunt_series = "E";
    gc.c_heartStunt_layer = "F";
    gc.c_heartStunt_desc = "G";
    gc.c_heartStunt_skillDesc = "H";
    //---------------c_heartStuntLvl.json----------------
    gc.cfg_c_heartStuntLvl = "shared/c_heartStuntLvl.json";
    gc.c_heartStuntLvl_lvl = "A";
    gc.c_heartStuntLvl_succeedPro = "D";
    gc.c_heartStuntLvl_cosGenqi = "E";
    gc.c_heartStuntLvl_cosGold = "F";
    gc.c_heartStuntLvl_addProperty = "G";
    //---------------c_bossWorld.json----------------
    gc.cfg_c_bossWorld = "shared/c_bossWorld.json";
    gc.c_bossWorld_id = "A";
    gc.c_bossWorld_displayId = "B";
    gc.c_bossWorld_copyId = "C";
    gc.c_bossWorld_fightLvl = "D";
    gc.c_bossWorld_rankAward1 = "E";
    gc.c_bossWorld_rankAward2 = "F";
    gc.c_bossWorld_rankAward3 = "G";
    gc.c_bossWorld_rankAward4 = "H";
    gc.c_bossWorld_rankAward5 = "I";
    gc.c_bossWorld_rankAward6 = "J";
    gc.c_bossWorld_rankAward7 = "K";
    gc.c_bossWorld_lastShotAward = "L";
    gc.c_bossWorld_treasureItemRate = "M";
    gc.c_bossWorld_treasurePercentAward = "N";
    gc.c_bossWorld_treasureAward = "O";
    gc.c_bossWorld_failAward1 = "P";
    gc.c_bossWorld_failAward2 = "Q";
    gc.c_bossWorld_failAward3 = "R";
    gc.c_bossWorld_failAward4 = "S";
    gc.c_bossWorld_failAward5 = "T";
    gc.c_bossWorld_failAward6 = "U";
    gc.c_bossWorld_failAward7 = "V";
    gc.c_bossWorld_isLimit = "W";
    gc.c_bossWorld_startTime = "X";
    gc.c_bossWorld_endTime = "Y";
    gc.c_bossWorld_sort = "Z";
    //---------------c_bossRes.json----------------
    gc.cfg_c_bossRes = "shared/c_bossRes.json";
    gc.c_bossRes_id = "A";
    gc.c_bossRes_winRes1 = "B";
    gc.c_bossRes_winCond1 = "C";
    gc.c_bossRes_winRes2 = "D";
    gc.c_bossRes_winCond2 = "E";
    gc.c_bossRes_winRes3 = "F";
    gc.c_bossRes_winCond3 = "G";
    gc.c_bossRes_winRes4 = "H";
    gc.c_bossRes_winCond4 = "I";
    gc.c_bossRes_winRes5 = "J";
    gc.c_bossRes_winCond5 = "K";
    gc.c_bossRes_winRes6 = "L";
    gc.c_bossRes_winCond6 = "M";
    gc.c_bossRes_winRes7 = "N";
    gc.c_bossRes_winCond7 = "O";
    gc.c_bossRes_winRes8 = "P";
    gc.c_bossRes_winCond8 = "Q";
    gc.c_bossRes_winRes9 = "R";
    gc.c_bossRes_winCond9 = "S";
    gc.c_bossRes_winRes10 = "T";
    gc.c_bossRes_winCond10 = "U";
    gc.c_bossRes_failRes1 = "V";
    gc.c_bossRes_failCond1 = "W";
    gc.c_bossRes_failRes2 = "X";
    gc.c_bossRes_failCond2 = "Y";
    gc.c_bossRes_failRes3 = "Z";
    gc.c_bossRes_failCond3 = "AA";
    gc.c_bossRes_failRes4 = "AB";
    gc.c_bossRes_failCond4 = "AC";
    gc.c_bossRes_failRes5 = "AD";
    gc.c_bossRes_failCond5 = "AE";
    gc.c_bossRes_failRes6 = "AF";
    gc.c_bossRes_failCond6 = "AG";
    gc.c_bossRes_failRes7 = "AH";
    gc.c_bossRes_failCond7 = "AI";
    gc.c_bossRes_failRes8 = "AJ";
    gc.c_bossRes_failCond8 = "AK";
    gc.c_bossRes_failRes9 = "AL";
    gc.c_bossRes_failCond9 = "AM";
    gc.c_bossRes_failRes10 = "AN";
    gc.c_bossRes_failCond10 = "AO";
    //---------------c_vipCopy.json----------------
    gc.cfg_c_vipCopy = "shared/c_vipCopy.json";
    gc.c_vipCopy_vipLvl = "A";
    gc.c_vipCopy_copyIds = "B";
    gc.c_vipCopy_name = "C";
    gc.c_vipCopy_lootDesc = "D";
    //---------------c_giftPack.json----------------
    gc.cfg_c_giftPack = "shared/c_giftPack.json";
    gc.c_giftPack_id = "A";
    gc.c_giftPack_content = "B";
    //---------------t_guildCopy.json----------------
    gc.cfg_t_guildCopy = "shared/t_guildCopy.json";
    gc.t_guildCopy_id = "A";
    gc.t_guildCopy_name = "B";
    gc.t_guildCopy_openLvl = "C";
    gc.t_guildCopy_award = "D";
    gc.t_guildCopy_section = "E";
    gc.t_guildCopy_title_icon = "F";
    gc.t_guildCopy_bg = "G";
    gc.t_guildCopy_sub_title_icon = "H";
    //---------------t_guildCopyBoss.json----------------
    gc.cfg_t_guildCopyBoss = "shared/t_guildCopyBoss.json";
    gc.t_guildCopyBoss_bossId = "A";
    gc.t_guildCopyBoss_copyId = "B";
    gc.t_guildCopyBoss_award = "C";
    gc.t_guildCopyBoss_lastShotAward = "D";
    //---------------t_sellItem.json----------------
    gc.cfg_t_sellItem = "shared/t_sellItem.json";
    gc.t_sellItem_id = "A";
    gc.t_sellItem_name = "B";
    gc.t_sellItem_note = "C";
    gc.t_sellItem_items = "D";
    gc.t_sellItem_sells = "E";
    //---------------t_treasure.json----------------
    gc.cfg_t_treasure = "shared/t_treasure.json";
    gc.t_treasure_id = "A";
    gc.t_treasure_name = "B";
    gc.t_treasure_items = "C";
    gc.t_treasure_guardTime = "D";
    //---------------c_guildWarReward.json----------------
    gc.cfg_c_guildWarReward = "shared/c_guildWarReward.json";
    gc.c_guildWarReward_id = "A";
    gc.c_guildWarReward_name = "B";
    gc.c_guildWarReward_rangeBeg = "C";
    gc.c_guildWarReward_rangeEnd = "D";
    gc.c_guildWarReward_diamond = "E";
    gc.c_guildWarReward_diamondSp = "F";
    gc.c_guildWarReward_diamondUser = "G";
    gc.c_guildWarReward_wgold = "H";
    gc.c_guildWarReward_wgoldSp = "I";
    gc.c_guildWarReward_wgoldUser = "J";
    gc.c_guildWarReward_hgold = "K";
    gc.c_guildWarReward_hgoldSp = "L";
    gc.c_guildWarReward_hgoldUser = "M";
    gc.c_guildWarReward_silver = "N";
    gc.c_guildWarReward_silverSp = "O";
    gc.c_guildWarReward_silverUser = "P";
    gc.c_guildWarReward_copper = "Q";
    gc.c_guildWarReward_copperSp = "R";
    gc.c_guildWarReward_copperUser = "S";
    //---------------t_paTaTreasury.json----------------
    gc.cfg_t_paTaTreasury = "shared/t_paTaTreasury.json";
    gc.t_paTaTreasury_copyId = "A";
    gc.t_paTaTreasury_displayId = "B";
    gc.t_paTaTreasury_award = "C";
    gc.t_paTaTreasury_preview = "D";
    gc.t_paTaTreasury_treasury = "E";
    gc.t_paTaTreasury_troHorLamp = "F";
    gc.t_paTaTreasury_exData = "G";
    //---------------t_talisman.json----------------
    gc.cfg_t_talisman = "shared/t_talisman.json";
    gc.t_talisman_id = "A";
    gc.t_talisman_name = "B";
    gc.t_talisman_job = "C";
    gc.t_talisman_iconId = "D";
    gc.t_talisman_effectId = "E";
    gc.t_talisman_imgId = "F";
    gc.t_talisman_sEffect = "G";
    gc.t_talisman_atStart = "H";
    gc.t_talisman_atEnd = "I";
    gc.t_talisman_resonance = "J";
    gc.t_talisman_compound = "K";
    gc.t_talisman_desc = "L";
    gc.t_talisman_skillStar = "M";
    gc.t_talisman_isOpen = "N";
    //---------------t_talismanCom.json----------------
    gc.cfg_t_talismanCom = "shared/t_talismanCom.json";
    gc.t_talismanCom_id = "A";
    gc.t_talismanCom_reqItems1 = "B";
    gc.t_talismanCom_reqCount1 = "C";
    gc.t_talismanCom_needLvl1 = "D";
    gc.t_talismanCom_needStar1 = "E";
    gc.t_talismanCom_reqItems2 = "F";
    gc.t_talismanCom_reqCount2 = "G";
    gc.t_talismanCom_needLvl2 = "H";
    gc.t_talismanCom_needStar2 = "I";
    gc.t_talismanCom_reqItems3 = "J";
    gc.t_talismanCom_reqCount3 = "K";
    gc.t_talismanCom_needLvl3 = "L";
    gc.t_talismanCom_needStar3 = "M";
    //---------------t_talismanLvl.json----------------
    gc.cfg_t_talismanLvl = "shared/t_talismanLvl.json";
    gc.t_talismanLvl_id = "A";
    gc.t_talismanLvl_lvl = "B";
    gc.t_talismanLvl_userLv = "C";
    gc.t_talismanLvl_propertys = "D";
    gc.t_talismanLvl_needItems = "E";
    gc.t_talismanLvl_starLimit = "F";
    //---------------t_talismanRes.json----------------
    gc.cfg_t_talismanRes = "shared/t_talismanRes.json";
    gc.t_talismanRes_id = "A";
    gc.t_talismanRes_name = "B";
    gc.t_talismanRes_desc = "C";
    gc.t_talismanRes_resonance = "D";
    gc.t_talismanRes_type = "E";
    gc.t_talismanRes_extraPro = "F";
    //---------------t_talismanSkill.json----------------
    gc.cfg_t_talismanSkill = "shared/t_talismanSkill.json";
    gc.t_talismanSkill_id = "A";
    gc.t_talismanSkill_name = "B";
    gc.t_talismanSkill_desc = "C";
    gc.t_talismanSkill_icon = "D";
    gc.t_talismanSkill_type = "E";
    gc.t_talismanSkill_effect = "F";
    //---------------t_talismanStar.json----------------
    gc.cfg_t_talismanStar = "shared/t_talismanStar.json";
    gc.t_talismanStar_id = "A";
    gc.t_talismanStar_aptitude = "C";
    gc.t_talismanStar_needItems = "D";
    gc.t_talismanStar_skillId = "E";
    gc.t_talismanStar_getPro = "F";
    //---------------c_luckyMajong.json----------------
    gc.cfg_c_luckyMajong = "shared/c_luckyMajong.json";
    gc.c_luckyMajong_id = "A";
    gc.c_luckyMajong_itemID = "B";
    gc.c_luckyMajong_amount = "C";
    gc.c_luckyMajong_class = "D";
    gc.c_luckyMajong_color = "E";
    gc.c_luckyMajong_weight = "F";
    gc.c_luckyMajong_spItemId = "G";
    gc.c_luckyMajong_itemLimit = "H";
    gc.c_luckyMajong_subType = "I";
    gc.c_luckyMajong_subTypeDivide = "J";
    gc.c_luckyMajong_ifRare = "K";
    gc.c_luckyMajong_cardCount = "L";
    //---------------c_userSurvey.json----------------
    gc.cfg_c_userSurvey = "shared/c_userSurvey.json";
    gc.c_userSurvey_id = "A";
    gc.c_userSurvey_question = "B";
    gc.c_userSurvey_optionContent = "C";
    gc.c_userSurvey_type = "D";
})(gc || (gc = {}));

var gc;
(function (gc) {
    gc.dsConsts = {
        AccountEntity: { id: 1, name: 2, email: 3, pwd: 4, deviceId: 5, status: 6, channelId: 7, sdkData: 8, exData: 9, createTime: 10, createIP: 11, lastUpdateTime: 12, loginCount: 13, loginKey: 14, userServers: 15, rechargeCom: 16, sdkChannelId: 17, bendExpireAt: 18, bendType: 19 },
        ActivityEntity: { id: 1, title: 2, type: 3, iconType: 4, tiIconType: 5, startTime: 6, endTime: 7, items: 8, randomHeroes: 9, exValues: 10, exValues2: 11, exValues3: 12, content: 13, isOpen: 14, sort: 15, exData: 16, templateId: 17 },
        ActivityRecordEntity: { id: 1, userId: 2, activityId: 3, activityType: 4, userLvl: 5, userVip: 6, costDiamond: 7, getDiamond: 8, joinCount: 9, addTime: 10, updateTime: 11 },
        AllRunwatEntity: { id: 1, dateTime: 2, newUser: 3, active: 4, nextDayLeft: 5, weekLeft: 6, runwat: 7, payCount: 8, newPay: 9, ARPU: 10, payRate: 11, ARPPU: 12, runwatNum: 13, userNum: 14 },
        ArenaBakEntity: { id: 1, userId: 2, rank: 3, highRank: 4, fightRanks: 5, reNumData: 6, awardData: 7, winCount: 8, conWinCount: 9, maxConWinCount: 10 },
        ArenaEntity: { id: 1, userId: 2, rank: 3, highRank: 4, fightRanks: 5, reNumData: 6, awardData: 7, winCount: 8, conWinCount: 9, maxConWinCount: 10 },
        ArenaRecordEntity: { id: 1, userId: 2, userLvl: 3, userIconId: 4, userName: 5, userWinCount: 6, enemyId: 7, enemyLvl: 8, enemyIconId: 9, enemyName: 10, enemyWinCount: 11, isWin: 12, fightTime: 13, fightData: 14, fightType: 15, isDeal: 16, isRead: 17, isRevenge: 18 },
        BossBakEntity: { id: 1, bossId: 2, startTime: 3, endTime: 4, killUserId: 5, deathTime: 6, status: 7, lastIsWin: 8, resultData: 9, isPrize: 10, limitStartTime: 11, limitEndTime: 12, isLimit: 13, type: 14, originBossId: 15, deathBossId: 16, repeatCount: 17, repeatTime: 18, callArr: 19, week: 20, errData: 21 },
        BossEntity: { id: 1, bossId: 2, startTime: 3, endTime: 4, killUserId: 5, deathTime: 6, status: 7, lastIsWin: 8, resultData: 9, isPrize: 10, limitStartTime: 11, limitEndTime: 12, isLimit: 13, type: 14, originBossId: 15, deathBossId: 16, repeatCount: 17, repeatTime: 18, callArr: 19, week: 20, errData: 21 },
        ChallengeCupEntity: { id: 1, userId: 2, leftTime: 3, championUserId: 4, startTime: 5, exData: 6, isOpen: 7, worship: 8, worshipCount: 9, buffOpenNum: 10, buffOpenTime: 11, buffEndTime: 12, recordArr: 13 },
        ChallengeCupRankEntity: { id: 1, userId: 2, startTime: 3, endTime: 4, maxTime: 5, iconId: 6, nickName: 7, lvl: 8, vip: 9 },
        CoffersBakEntity: { id: 1, lvl: 2, buildValue: 3, resource: 4, lootResource: 5, beLootResource: 6, defeseData: 7, defeseRecordArr: 8, lootRecordArr: 9, points: 10, todayPoints: 11, buffLvl: 12, buffExpc: 13, buffBase: 14, bakDate: 15, lootUserData: 16, breakTimeData: 17 },
        CoffersEntity: { id: 1, lvl: 2, buildValue: 3, resource: 4, lootResource: 5, beLootResource: 6, defeseData: 7, defeseRecordArr: 8, lootRecordArr: 9, points: 10, todayPoints: 11, buffLvl: 12, buffExpc: 13, buffBase: 14, lootUserData: 15, breakTimeData: 16 },
        CoffersGroupEntity: { id: 1, name: 2, serverArr: 3 },
        ConsumeEntity: { id: 1, recordTime: 2, userId: 3, item_id: 4, amount: 5, shopRecord: 6, channelId: 7 },
        CopyProgressEntity: { id: 1, userId: 2, copyType: 3, pCopyId: 4, winningStreak: 5, pTime: 6, copyObj: 7, refreshTime: 8, timeArr: 9, copyStar: 10, finished: 11, isPickAward: 12, isPickChests: 13, timesPerDay: 14, resetCounts: 15, resetTime: 16, readObj: 17 },
        CouponEntity: { id: 1, userId: 2, name: 3, content: 4, code: 5, type: 6, startTime: 7, endTime: 8, items: 9, channelIds: 10, channelId: 11, isUsed: 12, serverId: 13, period: 14, isNew: 15 },
        DemonLotusEntity: { id: 1, userId: 2, lvl: 3, addUpExpc: 4, lastOpeTime: 5, advanceLvl: 6, treasureLvl: 7 },
        ExpeditionEntity: { id: 1, userId: 2, stageId: 3, fightCount: 4, soulCount: 5 },
        ExpHeroEntity: { id: 1, userId: 2, tempId: 3, quality: 4, intensifyArr: 5, starArr: 6, gemArr: 7, wingArr: 8, expc: 9, lvl: 10, equipData: 11, skillLvlArr: 12, propArr: 13, realmLvl: 14, realmArr: 15, sex: 16, combat: 17, refineArr: 18, starTopArr: 19, talismanAdorn: 20, talismanData: 21, talismanFg: 22, wingSumLvl: 23, gemSumLvl: 24, realmSumLvl: 25, fightSort: 26, soulArr: 27, wearSoulId: 28, recordTime: 29 },
        FiveDaysTargetEntity: { id: 1, userId: 2, userName: 3, iconId: 4, userLvl: 5, pkWinCount: 6, combat: 7, rankType: 8, rankValue: 9 },
        GameCommonEntity: { id: 1, highCopyId: 2, isOpenBoss: 3 },
        GameConfigEntity: { id: 1, guildWarSign: 2, guildWarOpen: 3, guildWarHost: 4, guildWarPort: 5, redisHostArr: 6, noSignServerArr: 7 },
        GameRecordEntity: { id: 1, userId: 2, recordTime: 3, loginCount: 4, copyCount: 5, wipeCount: 6, pkCount: 7, jjcPkCount: 8, rechargeCount: 9, rechargeSum: 10, rechargeRecord: 11, shopRecord: 12, costGoldRecord: 13, costDiamondRecord: 14, costDiamondRecord1: 15, costDiamondRecord2: 16, getDiamondRecord: 17, getDiamondRecord1: 18, getDiamondRecord2: 19, channelId: 20, serverId: 21 },
        GemGainEntity: { id: 1, recordTime: 2, userId: 3, item_id: 4, amount: 5, shopRecord: 6, channelId: 7 },
        GuildEntity: { id: 1, name: 2, iconId: 3, chairmanId: 4, viceChairmanId: 5, guildPopulation: 6, addUpAct: 7, joinCon: 8, joinLvl: 9, lvl: 10, notice: 11, note: 12, appliedMembers: 13, numbersArr: 14, lastExpelTime: 15, ennobleData: 16, guildCopyData: 17, resetCount: 18, resetTime: 19, lastLgTime: 20 },
        GuildGroupEntity: { id: 1, name: 2, serverArr: 3, lastRankData: 4, lastRankTime: 5, redisId: 6 },
        GuildPersonalEntity: { id: 1, userId: 2, guildId: 3, position: 4, viceTime: 5, todayAct: 6, noticeCount: 7, exitGuildCount: 8, lotteryCount: 9, actLastTime: 10, addUpAct: 11, outMsg: 12, appliedMsg: 13, actData: 14, guildAct: 15, lastQuipGuildTime: 16, ennoble: 17 },
        GuildWarRecordEntity: { id: 1, recordData: 2, recordTime: 3, lastRankData: 4 },
        GuildWarSignEntity: { id: 1, serverId: 2, guildId: 3, signTime: 4, groupId: 5, signUserId: 6 },
        HeartStuntEntity: { id: 1, userId: 2, stateArr: 3, heartLvlArr: 4 },
        HeroEntity: { id: 1, userId: 2, tempId: 3, quality: 4, intensifyArr: 5, starArr: 6, gemArr: 7, wingArr: 8, expc: 9, lvl: 10, equipData: 11, skillLvlArr: 12, propArr: 13, realmLvl: 14, realmArr: 15, sex: 16, combat: 17, refineArr: 18, starTopArr: 19, talismanAdorn: 20, talismanData: 21, talismanFg: 22, wingSumLvl: 23, gemSumLvl: 24, realmSumLvl: 25, fightSort: 26, soulArr: 27, wearSoulId: 28 },
        IncognitoEntity: { id: 1, userId: 2, openTime: 3 },
        LootConfigEntity: { id: 1, startTime: 2, endTime: 3, lootTypeArr: 4 },
        LotteryEntity: { id: 1, userId: 2, treasureValue: 3, treasureChestCount: 4 },
        MailEntity: { id: 1, userId: 2, type: 3, fromName: 4, title: 5, content: 6, replaceArgs: 7, items: 8, isPicked: 9, isRead: 10, delHours: 11, delTime: 12, expireTime: 13, addTime: 14, isDelete: 15, taskId: 16 },
        ManagerEntity: { id: 1, name: 2, pwd: 3, groupId: 4 },
        ManagerGroup: { id: 1, name: 2, rights: 3 },
        ManagerLog: { id: 1, managerId: 2, managerName: 3, module: 4, serverId: 5, type: 6, operation: 7, ip: 8, time: 9, tid: 10 },
        MirrorRankViewEntity: { combatEff: 1, isLocked: 2, totalGain: 3 },
        NewFourDaysEntity: { id: 1, userId: 2, userName: 3, iconId: 4, userLvl: 5, pkWinCount: 6, combat: 7, rankType: 8, rankValue: 9 },
        NoticeEntity: { id: 1, title: 2, content: 3, serverIdArr: 4, isOpen: 5, updateTime: 6, iconType: 7, noticeTime: 8, startTime: 9, endTime: 10, sort: 11, exData: 12 },
        PkOutBakEntity: { id: 1, userId: 2, enemyIds: 3, exEnemyId: 4, freshTime: 5, pkValue: 6, highPkValue: 7, killValue: 8, pkValueTime: 9, enemyTypes: 10, todayRefreshNum: 11, todayRefreshTime: 12, winCount: 13, highWinCount: 14, accWinCount: 15 },
        PkOutEntity: { id: 1, userId: 2, enemyIds: 3, exEnemyId: 4, freshTime: 5, pkValue: 6, highPkValue: 7, killValue: 8, pkValueTime: 9, enemyTypes: 10, todayRefreshNum: 11, todayRefreshTime: 12, winCount: 13, highWinCount: 14, accWinCount: 15 },
        ProtocolContentEntity: { id: 1, content: 2, isOpen: 3 },
        RechargeEntity: { id: 1, userId: 2, rechargeId: 3, diamond: 4, rechargeTime: 5, effTime: 6, channelId: 7, transId: 8, currency: 9, ip: 10, payMoney: 11, userLvl: 12 },
        RechargeRankEntity: { id: 1, userId: 2, nickName: 3, serverId: 4, payNum: 5, payCount: 6, payRecord: 7, buyGoldNum: 8, shopRecord: 9 },
        RechargeRequestEntity: { id: 1, accountId: 2, userId: 3, serverId: 4, rechargeId: 5, status: 6, addTime: 7, transId: 8, goodsId: 9, orderNo: 10 },
        RedEnvelopeEntity: { id: 1, redType: 2, userId: 3, guildId: 4, spItemId: 5, diamond: 6, personNum: 7, wish: 8, getData: 9, addTime: 10, expireTime: 11, isDelete: 12 },
        RedEnvelopePersonalEntity: { id: 1, userId: 2, addUpServer: 3, addUpGuild: 4, addUpGet: 5, sendCount: 6, lastSendTime: 7, getData: 8, exData: 9, exAddUpGet: 10 },
        RunwatEntity: { id: 1, dateTime: 2, newUser: 3, active: 4, nextDayLeft: 5, weekLeft: 6, runwat: 7, payCount: 8, newPay: 9, ARPU: 10, payRate: 11, ARPPU: 12, runwatNum: 13, userNum: 14 },
        ServerInfoEntity: { id: 1, name: 2, mergerName: 3, area: 4, host: 5, port: 6, isNew: 7, status: 8, dbLink: 9, sort: 10, appId: 11, serverId: 12, indexId: 13, isClose: 14, closeExplain: 15, serverDate: 16, outLink: 17 },
        ServersGroupEntity: { id: 1, type: 2, name: 3, serverArr: 4, isDelete: 5, case: 6 },
        ShopEntity: { id: 1, userId: 2, type: 3, items: 4, lastTime: 5, refreshCount: 6, refreshCountResetTime: 7 },
        ShopRecordEntity: { id: 1, userId: 2, userLvl: 3, userVip: 4, costGold: 5, shopType: 6, costDiamond: 7, buyItemId: 8, buyAmount: 9, buyTime: 10 },
        SysRedEnvelopeEntity: { id: 1, userId: 2, sendName: 3, redType: 4, guildId: 5, spItemId: 6, amount: 7, viewAmount: 8, personNum: 9, wish: 10, limitZone: 11, addTime: 12, isDeal: 13 },
        SystemMessageEntity: { id: 1, serverId: 2, message: 3, type: 4, color: 5, size: 6, status: 7, times: 8, interval: 9, sendTime: 10, createTime: 11, lastUpdateTime: 12 },
        TaskEntity: { id: 1, userId: 2, dailyTasks: 3, vitality: 4, vitalityChests: 5, refreshTime: 6, tasks: 7, tasksValue: 8, doneTasks: 9 },
        TreasureEntity: { id: 1, userId: 2, treasureId: 3, openTime: 4, isOpen: 5, items: 6, isDelete: 7 },
        TreasureRecordEntity: { id: 1, recordType: 2, userId: 3, guildName: 4, userVip: 5, userName: 6, medalTitle: 7, treasureId: 8, items: 9, recordDate: 10 },
        UserCouponEntity: { id: 1, codeName: 2, userId: 3 },
        UserEntity: { accountId: 1, iconId: 2, nickName: 3, gold: 4, diamond: 5, id: 6, giveDiamond: 7, buyDiamond: 8, lvl: 9, expc: 10, combat: 11, vip: 12, vipScore: 13, strength: 14, strengthReTime: 15, signName: 16, honor: 17, bag: 18, equipBag: 19, equipBagBuyCount: 20, honorData: 21, blueDiamond: 22, sign: 23, activity: 24, record: 25, exData: 26, counts: 27, countsRefreshTime: 28, lastUpdateTime: 29, serverId: 30, lastSkillTime: 31, skillCd: 32, isOpenPk: 33, prestige: 34, redPointData: 35, robotId: 36, createTime: 37, sdkChannelId: 38, serverIndexId: 39, onlineLootData: 40, isKing: 41, rebirthLvl: 42, rebirthExp: 43, coffersPoints: 44, todayCoffersPoints: 45, medalTitle: 46, medalData: 47, genuineQi: 48, propertyData: 49, coffersKillNum: 50, isOpenIn: 51, infuseExpc: 52, highPaTa: 53 },
        UserMirrorCombatViewEntity: { combatEff: 1 },
        UserRankEntity: { id: 1, userId: 2, userName: 3, iconId: 4, userLvl: 5, blueDiamond: 6, pkWinCount: 7, combat: 8, rankType: 9, rankValue: 10 },
        UserSurveyEntity: { id: 1, serverId: 2, userId: 3, userLvl: 4, userVip: 5, activityId: 6, questionId: 7, selectIndex: 8 },
        ExHeartStuntData: { heartStuntData: 1, userData: 2, isSucceed: 3, genuineQiArr: 4 },
        ExDemonLotusData: { demonLotusData: 1, userData: 2, expSum: 3, isSucceed: 4, isWeek: 5, isMonth: 6, delBagItems: 7, genuineQiArr: 8 },
        FightData: { isWin: 1, star: 2, vData: 3, residueHp: 4 },
        BossData: { originHp: 1, curHp: 2, bossId: 3, startTime: 4, endTime: 5, inspireHurt: 6, inspireEndTime: 7, inspireNum: 8, myHurt: 9, myRank: 10, myGuildName: 11, myKey: 12, callUserName: 13, callUserGuildName: 14, lastExitTime: 15, isOver: 16, isFirstEnter: 17, type: 18, isRepeat: 19, callUserId: 20, callUserGuildId: 21 },
        ExBossData: { bossData: 1, userData: 2, bossEntity: 3, delBagItems: 4 },
        ExTreasureBossData: { bossData: 1, bagItem: 2 },
        ExBossEntity: { bossList: 1, otherData: 2, nowDate: 3 },
        BossHurtRank: { userId: 1, rank: 2, icon: 3, userName: 4, guildName: 5, hurt: 6, vip: 7 },
        BossResult: { isWin: 1, totalHurt: 2, myHurtRank: 3, hurtGold: 4, killTotalTime: 5, firstHurtName: 6, killUserName: 7, bossId: 8, items: 9 },
        BossSaveResult: { rank10: 1, callUserId: 2, guildUserIds: 3, callGuildName: 4, hurtDic: 5, isWin: 6, killTotalTime: 7, firstHurtName: 8, killUserName: 9 },
        BossResultData: { rank5: 1, callUserName: 2, callGuildName: 3, firstHurtName: 4, killUserName: 5, myHurt: 6, isWin: 7 },
        FightResult: { winStatus: 1, gold: 2, items: 3, honor: 4, expc: 5, killValue: 6, pkValue: 7, prestige: 8, curRank: 9, changeRank: 10, hasChangeRank: 11, attackMember: 12, beAttackMember: 13, mPkColor: 14, ePkColor: 15, isRevenge: 16, coffersPerson: 17, coffersCommon: 18, coffersStatus: 19, coffersPoints: 20, coffersHurt: 21, guildWarPoints: 22, guildWarStatus: 23, updateUser: 24, updatePkOut: 25, updateArena: 26, bagItems: 27, equipBagItems: 28, guildData: 29, guildPersonalData: 30, updateCoffers: 31 },
        ExCopyProgress: { copyProgress: 1, userData: 2, copyLoot: 3, items: 4, delBagItems: 5, bagItems: 6, equipBagItems: 7, guildData: 8, guildPersonalData: 9, isWin: 10, progress: 11, damage: 12, msg: 13, wipeCount: 14 },
        ServerInfo: { id: 1, area: 2, name: 3, host: 4, port: 5, isNew: 6, status: 7 },
        LoginData: { sdkData: 1, account: 2, user: 3, rechargeData: 4, rank: 5, offLineData: 6, arenaData: 7, copyProgressList: 8, heroList: 9, pkOut: 10, lottery: 11, task: 12, lootTypeArr: 13 },
        SDKData: { id: 1, name: 2, pic: 3, sex: 4, age: 5 },
        ExAccount: { account: 1, loginKey: 2 },
        ExGuildData: { userData: 1, guildData: 2, guildPersonalData: 3, chairmanName: 4, rank: 5, isGuild: 6, isJoin: 7, isAtherGuild: 8, isMembersMax: 9, dissolveId: 10, items: 11, bagItems: 12, equipBagItems: 13, isOpenBoss: 14, isOpenGuildWar: 15, cfgData: 16 },
        ExRedEnvelopeData: { userData: 1, guildPersonalData: 2, redEnvelopeData: 3, redEnvelopePersonalData: 4, isGet: 5, nameObj: 6 },
        ExUserData: { userData: 1, heroData: 2, lotteryData: 3, taskData: 4, gold: 5, expc: 6, eventData: 7, items: 8, arenaData: 9, shopData: 10, isFriend: 11, cheerCombat: 12, friendCount: 13, residueCount: 14, pickAllItemsArr: 15, pickAllItemsList: 16, buyGoldResultArr: 17, copyProgressData: 18, gainArr: 19, treasureValue: 20, cosTreValue: 21, vitality: 22, offlineArr: 23, isMail: 24, isFull: 25, bagItems: 26, delBagItems: 27, equipBagItems: 28, delEquipBagArr: 29, wingExp: 30, isWingCrit: 31, shopIdObj: 32, showMsgArr: 33, rebirthExp: 34, strengthArr: 35, genuineQi: 36, wingCritNum: 37, isGetSkill: 38, baptizeValue: 39 },
        ExCrystalData: { crystalData: 1, beyondPer: 2 },
        ExWarPrintedData: { medalData: 1, medalTitle: 2, isUpdata: 3, delBagItems: 4 },
        ExUserRankData: { userRankList: 1, userRankData: 2, userRank: 3, guildName: 4, value: 5 },
        HeroChangeRecord: { type: 1, fightType: 2, enemyName: 3, heroData: 4, time: 5, gold: 6, isWin: 7 },
        RechargeData: { countMap: 1, cardTimeMap: 2 },
        ExActivity: { activity: 1, activityItems: 2, todayRecharge: 3, allRecharge: 4, todayCost: 5, allCost: 6, isNeedOp: 7, days: 8, bgType: 9, leftTime: 10, maxPaymoney: 11, luckValue: 12 },
        ActivityItem: { items: 1, diamond: 2, rmb: 3, userLvl: 4, limitNum: 5, discount: 6, vipLvl: 7, randomHero: 8, wordSet: 9, vPlan: 10 },
        ExActivityData: { userData: 1, bagItems: 2, equipBagItems: 3, lotteryItemsArr: 4, mysterShopArr: 5, luckyTalosItemArr: 6, exItem: 7, getGold: 8 },
        SdkVipData: { isVip: 1, vipLevel: 2, score: 3 },
        Rank: { rank: 1, name: 2, iconId: 3, lvl: 4, combat: 5, killValue: 6, vip: 7, userId: 8, pkValue: 9, guildName: 10 },
        PkOutUserData: { userId: 1, name: 2, iconId: 3, killValue: 4, gold: 5, expc: 6, lvl: 7, pkValue: 8, vip: 9, combat: 10, guildName: 11, isTreasure: 12 },
        ExPkOut: { pkOutData: 1, heroList: 2, enemyList: 3, otherDataList: 4, userData: 5, hasNewDeal: 6, fightData: 7, guildData: 8, guildPersonalData: 9 },
        ExArena: { arenaData: 1, heroList: 2, otherDataList: 3, fightData: 4, userData: 5 },
        PKUserData: { userId: 1, name: 2, iconId: 3, combat: 4, lvl: 5, rank: 6, vip: 7, guildName: 8 },
        ChatData: { uniqueId: 1, type: 2, sysArgs: 3, userArgs: 4, guildArgs: 5, subType: 6 },
        AllChatData: { worldChat: 1, guildChat: 2, isOri: 3, guildId: 4, userData: 5, delBagItems: 6 },
        AsyncData: { chat: 1, redEnvelope: 2, task: 3, pkDeal: 4, rankPkDeal: 5, kefu: 6, sysMsg: 7, bePkKill: 8, inspire: 9, isBossOpen: 10, buffArr: 11, guildChat: 12, isGuildChange: 13, guildWarIsOpen: 14 },
        AsyncData2: { lastUpdateTime: 1, lootTypeArr: 2 },
        ExTask: { taskData: 1, updateId: 2 },
        HandleRecharge: { userData: 1, addDiamond: 2, isFinish: 3, rechargeId: 4 },
        GuildMember: { lvl: 1, nickName: 2, combat: 3, guildAct: 4, position: 5, ennoble: 6, lastUpdateTime: 7, iconId: 8, vip: 9, userId: 10, offlineHour: 11 },
        BonusInfo: { shareInfo: 1, relations: 2 },
        BonusShareData: { isFirst: 1, relationCount: 2, amountDraw: 3, balance: 4 },
        BonusRelationData: { id: 1, userId: 2, nickName: 3, level: 4, vip: 5, amount: 6 },
        BonusShareUrl: { url: 1, gifted: 2 },
        BonusDrawResult: { added: 1, total: 2 },
        FiveDaysTaret: { day: 1, items: 2 },
        ExFiveDaysTargetData: { value: 1, rank: 2 },
        ShowHeroData: { heroList: 1, otherDataList: 2, fightData: 3 },
        ChallengeCupData: { isOpen: 1, userId: 2, nickName: 3, iconId: 4, lvl: 5, vip: 6, combat: 7, guildName: 8, guildLevel: 9, challengerUserId: 10, leftTime: 11, nextChallengeTime: 12, activityLeftTime: 13, HeroDisplay: 14, upCount: 15, downCount: 16, myOpNum: 17 },
        ChampionDurationTimeRank: { rank: 1, name: 2, iconId: 3, lvl: 4, durationTime: 5, userId: 6, vip: 7 },
        ExChallengeCupFight: { errCode: 1, heroList: 2, otherDataList: 3, fightData: 4, userData: 5 },
        King: { myGuildId: 1, myGuildName: 2, kingGuildId: 3, kingGuildName: 4, kingGuildLvl: 5, kingId: 6, kingName: 7, kingVip: 8, kingLvl: 9, kingHeroDisplay: 10, beWorshipNum: 11, beWorshipCount: 12, buffOpenNum: 13, buffOpenTime: 14, buffEndTime: 15 },
        ExKing: { king: 1, userData: 2, bagItems: 3 },
        Rebirth: { userData: 1, heroList: 2 },
        Opening: { userData: 1, diffExp: 2 },
        ExCoffers: { coffers: 1, userData: 2, heroList: 3, otherDataList: 4, fightData: 5, addBuildValue: 6, addGold: 7, addBuffExpc: 8, delBagItems: 9, coffersLvl: 10, status: 11 },
        CoffersRecord: { isWin: 1, time: 2, attackName: 3, serverName: 4, door: 5, defeseName: 6, recource: 7, points: 8 },
        CofferUser: { userId: 1, serverId: 2, door: 3, rankType: 4, icon: 5, lvl: 6, vip: 7, name: 8, combat: 9, isLoot: 10, isBreak: 11, medalTitle: 12, breakReplaySeconds: 13 },
        ExDefenceData: { cofferUserArr: 1, hpAdd: 2, attackAdd: 3, personResource: 4, coffersResource: 5, lootRate: 6, breakNum: 7, isCanLoot: 8, todayLootNum: 9, coffersLvl: 10, curResource: 11, serverName: 12, serverId: 13 },
        CoffersServer: { serverName: 1, serverId: 2, resource: 3, isLootArr: 4, isBreakArr: 5 },
        WanbaGift: { code: 1, message: 2, userData: 3, getGold: 4, getDiamond: 5, bagItems: 6, equipBagItems: 7 },
        MyGuildWarData: { groupId: 1, guildReNum: 2, guildRank: 3, doorLives: 4, points: 5, nextFightTime: 6, inspireEndTime: 7, warEndTime: 8, guildTotal: 9, isDefence: 10, myGuildRefreshId: 11, serverId: 12 },
        ExMyGuildWarData: { userData: 1, myGuildWarData: 2 },
        GuildWarSyncData: { myGuildWarData: 1, fightRecordArr: 2, guildList: 3, attackData: 4, defenceData: 5 },
        GuildWarFightRecord: { id: 1, type: 2, attackData: 3, beAttackData: 4, time: 5 },
        GuildServer: { serverName: 1, serverId: 2, guildId: 3, guildName: 4, guildLvl: 5, doorLives: 6, points: 7, progress: 8, maxPoints: 9, lastLootTime: 10 },
        GuildWarData: { doorList: 1, guildId: 2, guildName: 3, cd: 4, serverId: 5 },
        GuildFightData: { heroList: 1, otherDataList: 2, fightData: 3, directWin: 4, myGuildWarData: 5, isBreak: 6, getPoints: 7 },
        GuildWarDoor: { door: 1, hp: 2, userId: 3, userName: 4, userIcon: 5, lastUserId: 6, lastUserName: 7, lastUserIcon: 8, isBreak: 9, lastDownTime: 10 },
        GuildWarAllRank: { guildArr: 1, chairArr: 2, userArr: 3 },
        GuildWarRank: { rank: 1, guildId: 2, guildName: 3, points: 4, serverId: 5 },
        GuildWarUserRank: { rank: 1, userId: 2, userName: 3, vip: 4, iconId: 5, guildName: 6, points: 7, serverId: 8 },
        GuildWarDefenceRecord: { isWin: 1, time: 2, door: 3, attackServerId: 4, attackServerName: 5, attackUserName: 6, attackGuildName: 7, defenceUserName: 8, hp: 9, isDirect: 10 },
        GuildWarAttackRecord: { aServerId: 1, aServerName: 2, aUserName: 3, aGuildName: 4, dServerId: 5, dServerName: 6, dUserName: 7, dGuildName: 8, isBreak: 9, door: 10, time: 11 },
        Incognito: { userData: 1, openTime: 2 },
        TreasureInfo: { id: 1, itemId: 2, openTime: 3, status: 4, items: 5 },
        AccountServer: { myServerArr: 1, lastServer: 2, serverArr: 3 },
        ServerNameInfo: { serverId: 1, serverName: 2 },
        ExPkOutInfo: { openTime: 1, treasureInfo: 2 },
        GuildWarServerSyncData: { guildWarObj: 1, syncId: 2 },
        ComposeInfo: { delBagItem: 1, treasureInfo: 2 },
        SyncGuildWarData: { serverName: 1, serverId: 2, serverHost: 3, serverPort: 4, guildId: 5, guildName: 6, guildLvl: 7, doorLives: 8, points: 9, progress: 10, groupId: 11, doorData: 12, rank: 13, chairmanData: 14, lastLootTime: 15, fightRecordArr: 16, refreshId: 17, maxPoints: 18 },
        SyncGuildWarUser: { userId: 1, userName: 2, guildId: 3, guildName: 4, points: 5, vip: 6, iconId: 7, lastLootTime: 8, rank: 9, groupId: 10, nextFightTime: 11, inspireEndTime: 12, guildPosition: 13, nextUpTime: 14, serverId: 15 },
        SignData: { signGroupId: 1, lastGroupId: 2, lastGuildRank: 3, lastUserRank: 4, isPrize: 5 },
        ExpeditionData: { expData: 1, expHeroData: 2, upUserData: 3, finishData: 4, heroList: 5, otherDataList: 6, fightData: 7, finishLvl: 8 }
    };
})(gc || (gc = {}));

var gc;
(function (gc) {
    gc.id_c_game = { initCfg: 1, monsterUpMult: 2, skillRate: 3, copyVipChest: 4, fuckWord: 5, strengthCfg: 6, friends: 7, goldBuySet: 10, pkOutCfg: 11, pkOutYellowLoot: 13, pkOutRedLoot: 14, pkOutHonor: 15, pkOutLootGold: 16, wingCrit: 17, equipGrade: 18, pkOutLootLimit: 19, smeltEquip: 20, smeltIntensify: 21, gemInitial: 22, gemLimit: 27, patchSignCon: 23, killValueMax: 24, refreshTime: 25, copyNeedItem: 26, combatMult: 28, copyIdSection: 29, lotteryCfg: 30, lotteryCostCfg: 31, treasureChestCfg: 32, arenaCfg: 33, arenaRankCfg: 34, shopCfg: 35, lotteryShowCfg: 37, chatCfg: 38, equipBagCfg: 39, vitalityCfg: 41, honorStartCfg1: 42, honorStartCfg2: 43, dailyTasksCfg: 44, offlineCfg: 45, parRingCfg: 46, guide: 47, contactUs: 48, openCfg: 49, otherReward: 50, tuLong: 51, pkValueRange: 52, pkCombatRange: 53, pkCfg1: 56, killChallengeCfg: 57, guideCfg: 58, battleSet: 59, bossLootRate: 60, revengeGolds: 61, smeltGoldCfg: 62, smeltDiamondCfg: 63, smeltGoldLvlCfg: 64, guildSet: 65, gemLvlLimit: 66, bossTesseraReplace: 67, targetRank: 69, guildAct: 70, lootLimit: 71, rebirth: 72, challengeCupCfg: 73, lowOraEquipCfg: 74, mysterShopCfg: 75, worldBossCfg: 76, equipMinRandomCfg: 77, inheritedEquip: 79, redEnvelopeCfg: 80, king: 81, weekMonthCard: 82, blueDiamond: 83, demonLotusCfg: 84, serverPk: 85, coffers: 86, customizationCfg: 87, coffers2: 88, equipRefineCfg: 89, newBossCfg: 90, heartStuntCfg: 92, yellowDiamond: 93, fightProtect: 94, copyVip: 95, coffers3: 96, wxlinkCfg: 97, guildCopyCfg: 98, fourRole: 99, towerCopy: 100, guildWar: 101, littlHorn: 102, treasure: 103, trumpCfg: 104, vPlanCfg: 105, skipFightCfg: 106, newFourRank: 107, newFourNeedValue: 108, buyLingyunCfg: 109, pkLoot: 110, lotteryWillFall: 111, talosWillFall: 113 };
    gc.id_c_msgCode = { inputRoleName: 1, sensitiveInRoleName: 2, roleNameUsed: 3, loginNoUser: 4, loginNotNull: 5, accountLengthNotCorrect: 6, pwdLengthNotCorrect: 7, loginFalse: 8, regHasUser: 9, pwdNotSame: 10, regFalse: 11, cRoleFalse: 12, getRoleDataFalse: 13, noLogin: 14, regSucc: 15, roleNameOutLenght: 16, loginWordWrong: 17, tooFrequently: 18, buyLimitNow: 19, accountLockout: 20, deviceLockout: 21, loggedInOtherDevice: 22, outGame: 23, connectFail: 24, noOpenNow: 25, cantGetNoCharge: 26, cantGetNoDays: 27, ifBuyLimitedItem: 28, totalChargeNotEnough: 29, totalChargeNotEnough1: 30, totalCostNotEnough: 31, engCostNotEnough: 32, coinCostNotEnough: 33, noCdKey: 34, cdKeyRedeemed: 35, alreadyGetcdKey: 36, redeemRewardMail: 37, cdKeyNull: 38, activitiesEnd: 39, getTomorrow: 40, noHeroReward: 41, noEventNow: 42, checkYourNet: 43, collectSuccess: 44, collectRewardMail: 45, collectWrong: 46, noHonor: 47, refreshShop: 48, NoLvlOpen: 49, cantSpeedUp: 50, cantSkip: 51, heroLvMax: 52, noGoldsToUp: 53, ifBuy: 54, vipNotEnough: 55, lvNotEnough: 56, ifHeroUp: 57, noMaterial: 58, noGolds: 59, buyGolds: 60, noDiamond: 61, onGetItems: 62, copyNoPass: 63, vipLess: 64, cantUseMax: 65, noCopyTimes: 66, buyCopyTimes: 67, noCopyItem: 68, buyCopyItem: 69, buyTimesMax: 70, ifPatch: 71, ifResetTime: 72, cantRebirth: 73, copyFightNow: 74, findRival: 75, findRival100: 76, noReputation: 77, noArenaTimes: 78, buyArenaTimes: 79, cleanArenaTime: 80, userFighting: 81, rankChanged: 82, noWord: 83, wordTooLong: 84, wordIllegal: 85, wordTooFast: 86, ifBuyBag: 87, ifBuyRole: 88, noEquipNow: 89, noCopyTimes1: 90, buyCopyTimes1: 91, bagMaxMail: 92, bagMax: 93, noRoleLvl: 94, bagMaxCantGet: 95, rewardMail: 96, ifBuyAll: 97, rewardInMail: 98, nameToRedIfGo: 99, ifClearPKPoint: 100, noPKPoint: 101, pkNoOpen: 102, noLvlAuto: 103, autoOpen: 104, autoClose: 105, goalNotGet: 106, ifQuitGuild: 107, enterGuildCd: 108, enterOriginalGuildCd: 109, enterGuildTimesMax: 110, cantGdisband: 111, ifGdisband: 112, guildNameIsNull: 113, guildNameTooLong: 114, guildNameIllegal: 115, ifCreateGuild: 116, guildIdIsNull: 117, guildIdIsExist: 118, guildMembersMax: 119, noPermission: 120, worshippedTimesMax: 121, worshipTimesMax: 122, ifRetiringGuildMaster: 123, noReceivedReward: 124, fireMembersMax: 125, ifFireMember: 126, positionsMax: 127, quitedTheGuild: 128, ifPromote: 129, ifRelieve: 130, relieveCd: 131, MembersMax: 132, otherGuildEntered: 133, noticeTooLong: 134, noticeMax: 135, noMailTitle: 136, noMailBody: 137, MailTitleIllegal: 138, MailBodyIllegal: 139, MailTitleTooLong: 140, MailBodyTooLong: 141, applicationMax: 142, guildNameSame: 143, permissionRelieved: 144, enterGuildNow: 145, waitForApprove: 146, ifResrtCopy: 147, noGuildActivePoint: 148, rechargeSucceed: 149, noGuildLevel: 150, outGuild: 151, noGuildLv: 152, noTreasure: 153, noGuildList: 154, noPlayerGuildList: 155, ifGquit: 156, cantEnterGuildCd: 157, someoneHoldArena: 158, eventEnded: 159, userBeInFignting: 160, userChangeIfGoOn: 161, noLvlgetKing: 162, userBeInKing: 163, ifSmeltHeirloom: 164, eventNoStart: 165, novLvAutoFight: 166, inspireAdd: 167, challengeBossCd: 168, rewardTime: 169, noLvlchallengeBoss: 170, guildBossEscape: 171, guildBossDead: 172, touristForbidGuild: 173, touristForbidTalk: 174, noLvlToTalk: 175, timeOutCantCall: 176, noExperience: 177, noBuyPrimaryRebirthTimes: 178, noBuyMidRebirthTimes: 179, noBuyAdvancedRebirthTimes: 180, reincarnationOpen: 181, noPosition: 182, noMemberLv: 183, notChooseLv: 184, noFrequency: 185, noIntegral: 186, ifOpenBuff: 187, noBuffTimes: 188, packetMin20: 189, packetMaxToday: 190, packetSuccess: 191, kingCome: 192, noKingNow: 193, noGuild: 194, notOpen: 195, actOver: 196, battleActive: 197, alreadyOver: 198, banish: 199, gatesBroken: 200, noBattlePoint: 201, gatesRobed: 202, ifRobeGates: 203, gatesBrokenByOthers: 204, peaceTimeCantRobe: 205, noLvlUse: 206, outofGuild: 207, mainProperty: 208, fullProperty: 209, choseCareer: 210, noItemName: 211, fuckword: 212, nameToolong: 213, choseProperty: 214, makeItem: 215, yourServerNoOpen: 216, makeLvlBigger: 217, ifSmeltCustom: 218, notEnoughFeather: 219, wingLevelRequire: 220, noMedal: 221, noMedalActivated: 222, bossNegative: 223, reinforceRequire: 224, noMoreBoss: 225, formulaNoOpen: 226, ifLearnFormula: 227, noGas: 228, onlyoneAutoFight: 229, worldBossEscape: 230, noRightarena: 231, gasNoOpen: 232, vipRequire: 233, vipNotimes: 234, noGuardDown: 235, disAgree: 236, noMoreRob: 237, outGuildBoss: 238, guardExist: 239, noCard: 240, noBoom: 241, buyTime: 242, noReset: 243, atkReset: 244, noticeAutoBuyLittleHorn: 245, noticeAutoBuyLittleHornVipNeed: 246, noGuard: 247, beGuard: 248, careerNotOpen: 249, guildLevelRequire: 250, notReportTime: 251, notGuildLeader: 252, fightNotRight: 253, memberFight: 254, haveGuard: 255, beAttacked: 256, buyInspire: 257, buyManyCD: 258, guardDown: 259, buyPerfusion: 260, openNotice: 261, noSnatch: 262, noGuildOut: 263, noGuildDisband: 264, noGuildTransfer: 265, noGuildExpel: 266, noInspire: 267, noLevelDown: 268, towerNotOpen: 269, resetCopy: 270, defendCD: 271, nowAttack: 272, notPerfect: 273, noticket: 274, reGetMatch: 275, vipLock: 276, openMagicLV: 277, haveNoGuard: 278, noMagic: 279, noSll: 280, noYgy: 281, reRecast: 282, noSynthesis: 283, haveTalismen: 284, lowLevelTalismen: 285, lowStarTailsmen: 286, noCareer: 287, talismanNotOpen: 288, noPrivilege: 289, giveUpRecover: 290, openRole4LvNotEnough: 291, noBossTime: 292, reSummonBoss: 293, reSummonLock: 294, noLvlSummonBoss: 295, noLvlActivity: 296, changeheartStunt: 297, cantBusMax: 298, noRole: 299, vipItemRequire: 300, functionOpen: 301, vipCall: 302, sysNotice: 900, offlineGain: 901, firstEnterGame: 902, wxFollow: 903, ifSellItem: 904, ifSellItem2: 905, ifSellItem3: 906, wordBeBend: 1000, errIfaceCode: 11000, vPlan: 907, vPlan2: 909, majongLuckyPoint: 910, majongLuckyPointMax: 911, majongLuckyBonusTips: 912 };
    gc.id_c_open = { openRole2: 1, openRole3: 2, strength: 3, pkOut: 4, wing: 5, star: 6, stone: 7, equipCopy: 8, arena: 9, bossCopy: 10, reamCopy: 11, stoneShop: 12, ream: 13, shop: 14, autoFight: 15, rebirth: 16, challengeCup: 17, guild: 18, redEnvelope: 19, worldboss: 20, expBox: 21, serverPk: 22, coffers: 23, heartStunt1: 27, heartStunt2: 28, heartStunt3: 29, vipheartStunt2: 30, vipheartStunt3: 31, paTa: 32, openRole4: 33, openTrump: 34, fightList: 36, buzhen: 37 };
})(gc || (gc = {}));

var gc;
(function (gc) {
    gc.iface = {
        /**
         * 神秘商店购买礼包
         * @args {activityId:"活动id",index:"栏目项"}
         * @isWorker 1
         * @returns [ds.ExActivity]
         */
        a_activity_buyMysterShop: "a.ac.a",
        a_activity_buyMysterShop_args: {
            activityId: "_0" //活动id
            ,
            index: "_1" //栏目项
        },
        a_activity_getList: "a.ac.e",
        a_activity_receive: "a.ac.f",
        a_activity_receive_args: {
            activityId: "_0" //活动id
            ,
            index: "_1" //栏目项
        },
        a_activity_getIsNeedOperate: "a.ac.h",
        a_activity_patchSign: "a.ac.i",
        a_activity_patchSign_args: {
            activityId: "_0" //活动id
        },
        a_activity_report: "a.ac.j",
        a_activity_report_args: {
            activityId: "_0" //活动id
            ,
            report: "_1" //上报数据
        },
        a_arena_getInfo: "a.ar.a",
        a_arena_resetFightRanks: "a.ar.d",
        a_arena_fightStart: "a.ar.h1",
        a_arena_fightStart_args: {
            rank: "_0" //挑战排行
        },
        a_arena_fightEnd: "a.ar.h2",
        a_arena_fightEnd_args: {
            rank: "_0" //挑战排行
            ,
            isWin: "_1" //是否胜利
            ,
            fightData: "_2" //战斗数据
        },
        a_arena_getFightUserList: "a.ar.l",
        a_arena_buyPKNum: "a.ar.m",
        a_arena_getRecordList: "a.ar.n",
        a_arena_getRecordList_args: {
            index: "_0" //索引id
            ,
            count: "_1" //总数
        },
        a_arena_setRead: "a.ar.o",
        a_arena_pickRankAward: "a.ar.p",
        a_arena_refreshCD: "a.ar.q",
        a_arena_getRankList: "a.ar.r",
        a_arena_getRefreshRemainTime: "a.ar.rt",
        a_bonus_getInfo: "a.bs.a",
        a_bonus_getInfo_args: {
            lastId: "_0" //分页id
        },
        a_bonus_breakRelation: "a.bs.b",
        a_bonus_breakRelation_args: {
            inviteeUserId: "_0" //解散的用户ID
        },
        a_bonus_share: "a.bs.c",
        a_bonus_share_args: {
            serverIndexId: "_0" //服务器ID
        },
        a_bonus_draw: "a.bs.d",
        a_bonus_sendShareGift: "a.bs.e",
        a_boss_getGuildBossList: "a.bo.a",
        a_boss_getWorldBossList: "a.bo.a1",
        a_boss_openBoss: "a.bo.b1",
        a_boss_openBoss_args: {
            bossId: "_0" //bossId
            ,
            isLock: "_1" //是否上锁
        },
        a_boss_enter: "a.bo.b",
        a_boss_enter_args: {
            bossId: "_0" //bossId
        },
        a_boss_startFight: "a.bo.c",
        a_boss_startFight_args: {
            bossId: "_0" //bossId
        },
        a_boss_hurt: "a.bo.d",
        a_boss_hurt_args: {
            bossId: "_0" //bossId
            ,
            hurtDic: "_1" //{英雄id：伤害}
            ,
            isEnd: "_2" //是否最后
            ,
            mData: "_3" //加密
            ,
            hurtArr: "_4" //伤害长度，用于验证
        },
        a_boss_exitFight: "a.bo.e",
        a_boss_exitFight_args: {
            bossId: "_0" //bossId
        },
        a_boss_clearFightCd: "a.bo.e1",
        a_boss_inspire: "a.bo.f",
        a_boss_inspire_args: {
            bossId: "_0" //bossId
        },
        a_boss_getInspireRecordArr: "a.bo.g",
        a_boss_getInspireRecordArr_args: {
            bossId: "_0" //bossId
        },
        a_boss_syncInspire: "a.bo.h",
        a_boss_syncInspire_args: {
            bossId: "_0" //bossId
        },
        a_boss_getHurtRankList: "a.bo.i",
        a_boss_getHurtRankList_args: {
            bossId: "_0" //bossId
        },
        a_boss_getFirstHurtRank: "a.bo.i1",
        a_boss_getFirstHurtRank_args: {
            bossId: "_0" //bossId
        },
        a_boss_getBossResult: "a.bo.j",
        a_boss_getBossResult_args: {
            bossId: "_0" //bossId
            ,
            originBossId: "_1" //originBossId
        },
        a_boss_getResultData: "a.bo.j1",
        a_boss_getResultData_args: {
            originBossId: "_0" //originBossId
        },
        a_demonLotus_getInfo: "a.de.a",
        a_demonLotus_upLotus: "a.de.b",
        a_demonLotus_getRevenue: "a.de.c",
        a_demonLotus_opening: "a.de.d",
        a_demonLotus_lotusAdvance: "a.de.e",
        a_demonLotus_treasureTrain: "a.de.f",
        a_mail_getList: "a.em.a",
        a_mail_pickItems: "a.em.b",
        a_mail_pickItems_args: {
            mailId: "_0" //邮件id
        },
        a_mail_pickAllItems: "a.em.d",
        a_mail_setRead: "a.em.c",
        a_mail_setRead_args: {
            mailId: "_0" //邮件id
        },
        a_mail_getIsNeedOperate: "a.em.e",
        a_mail_getIsNeedOperate_args: {
            mailId: "_0" //邮件id
        },
        a_event_eventBuy: "a.ev.a",
        a_event_eventBuy_args: {
            eventId: "_0" //随机事件id
        },
        a_equip_changeEquip: "a.eq.a",
        a_equip_changeEquip_args: {
            tempId: "_0" //英雄id
            ,
            index: "_1" //装备位置
            ,
            equipId: "_2" //装备id
        },
        a_equip_inheritedEquip: "a.eq.b",
        a_equip_inheritedEquip_args: {
            equipId: "_0" //装备id
            ,
            tempId: "_1" //英雄id
        },
        a_equip_customization: "a.eq.c",
        a_equip_customization_args: {
            certificate: "_0" //凭证id
            ,
            job: "_1" //职业
            ,
            name: "_2" //装备名
            ,
            lvl: "_3" //装备等级
            ,
            abilityIndex: "_4" //属性下标数组
            ,
            equipType: "_5" //部位
        },
        a_equip_upCustomization: "a.eq.d",
        a_equip_upCustomization_args: {
            equipId: "_0" //装备id
        },
        a_equip_updateEquipItemLockStatus: "a.eq.e",
        a_equip_updateEquipItemLockStatus_args: {
            equipId: "_0" //装备id
            ,
            isLocked: "_1" //1
        },
        a_equip_sellEquipItems: "a.eq.f",
        a_equip_sellEquipItems_args: {
            equipIdArr: "_0" //id,id,id
        },
        a_user_getInfo: "a.u.a",
        a_user_changeName: "a.u.b",
        a_user_changeName_args: {
            name: "_0" //名字
            ,
            heroTempId: "_1" //模板id 
        },
        a_user_upLvl: "a.u.c",
        a_user_syncData: "a.u.f",
        a_user_syncData_args: {
            sendData: "_0" //战斗数据是数组[最新聊天id]
        },
        a_user_syncData2: "a.u.f1",
        a_user_getBagChest: "a.u.g",
        a_user_getBagChest_args: {
            chestId: "_0" //宝箱id
            ,
            count: "_1" //宝箱数量
        },
        a_user_buyGold: "a.u.d",
        a_user_buyLingyun: "a.u.d1",
        a_user_getRedPoint: "a.u.h",
        a_user_updateGuide: "a.u.i",
        a_user_updateGuide_args: {
            guideId: "_0" //引导id
        },
        a_user_getWinRecord: "a.u.j",
        a_user_getLoseRecord: "a.u.k",
        a_user_buyToUpLvl: "a.u.m",
        a_user_saveDeskSuccess: "a.u.o",
        a_user_saveDeskSuccess_args: {
            type: "_0" //c_prop.userRecordTypeKey
        },
        a_user_setHeroEmbattle: "a.u.p",
        a_user_setHeroEmbattle_args: {
            heroEmbattle: "_0" //布阵信息
        },
        a_user_buyBagGrid: "a.u.q",
        a_user_updateCombat: "a.u.q1",
        a_user_setAutoFight: "a.u.q2",
        a_user_setAutoFight_args: {
            isAuto: "_0" //是否自动
        },
        a_user_setTimeError: "a.u.q3",
        a_user_setTimeError_args: {
            errorNum: "_0" //异常次数
        },
        a_user_setTodayRankWin: "a.u.q4",
        a_user_setTodayRankWin_args: {
            eid: "_0" //对手userId
        },
        a_user_getWarPrintedList: "a.u.q5",
        a_user_warPrintedStrength: "a.u.q6",
        a_user_warPrintedStrength_args: {
            warPrintedId: "_0" //战印id
        },
        a_user_setMedalTitle: "a.u.q7",
        a_user_setMedalTitle_args: {
            warPrintedId: "_0" //战印id
        },
        a_user_getGenuineQi: "a.u.q8",
        a_user_activeMedal: "a.u.q9",
        a_user_activeMedal_args: {
            warPrintedId: "_0" //战印id
        },
        a_user_getBindPhoneUrl: "a.u.r",
        a_user_getWanbagift: "a.u.s",
        a_user_getWanbagift_args: {
            os: "_0" //ios
            ,
            giftId: "_1" //901
        },
        a_user_updateSetting: "a.u.t",
        a_user_updateSetting_args: {
            catNoVipChat: "_0" //true
            ,
            autoBuyLittleHorn: "_1" //true
        },
        a_user_updateItems4Bag: "a.u.u",
        a_user_updateItems4Bag_args: {
            itemId: "_0" //itemId
        },
        a_friend_getInfo: "a.f.a",
        a_friend_requestFriend: "a.f.b",
        a_friend_requestFriend_args: {
            requestedId: "_0" //被请求用户id
        },
        a_friend_disposeFriendRequest: "a.f.c",
        a_friend_disposeFriendRequest_args: {
            requestId: "_0" //请求用户id
            ,
            isTake: "_1" //是否接受请求  0：不接受  1：接受
        },
        a_friend_eventCheer: "a.f.d",
        a_friend_getRequestInfo: "a.f.e",
        a_fight_pickLoot: "a.fi.a",
        a_fight_pickLoot_args: {
            copyId: "_0" //副本id
            ,
            uidArr: "_1" //掉落唯一id组
            ,
            fightData: "_2" //战斗数据
        },
        a_fight_revive: "a.fi.b",
        a_fight_getAndInitNextLoot: "a.fi.c",
        a_fight_getAndInitNextLoot_args: {
            copyId: "_0" //副本id
            ,
            isBoss: "_1" //是否boss关卡
            ,
            lvl: "_2" //用户等级
        },
        a_fiveDaysTarget_getInfo: "a.ft.e",
        a_fiveDaysTarget_getInfo1: "a.ft.a",
        a_guild_getInfo: "a.g.a",
        a_guild_establishGuild: "a.g.b",
        a_guild_establishGuild_args: {
            name: "_0" //公会名称
        },
        a_guild_seekGuild: "a.g.c",
        a_guild_seekGuild_args: {
            guildId: "_0" //公会id
        },
        a_guild_joinGuild: "a.g.d",
        a_guild_joinGuild_args: {
            guildId: "_0" //公会id
        },
        a_guild_getAppliedMembers: "a.g.e",
        a_guild_appliedMembersSet: "a.g.f",
        a_guild_appliedMembersSet_args: {
            tUserId: "_0" //要设置用户id
            ,
            isConsent: "_1" //是否同意
        },
        a_guild_guildSetting: "a.g.g",
        a_guild_guildSetting_args: {
            joinCon: "_0" //加入条件
            ,
            joinLvl: "_1" //加入最低等级
        },
        a_guild_exitGuild: "a.g.h",
        a_guild_setNotice: "a.g.i",
        a_guild_setNotice_args: {
            notice: "_0" //公告
        },
        a_guild_lottery: "a.g.j",
        a_guild_lottery_args: {
            count: "_0" //次数
        },
        a_guild_setEnnoble: "a.g.k",
        a_guild_setEnnoble_args: {
            targetUserId: "_0" //成员id
            ,
            ennobleType: "_1" //爵位类型
        },
        a_guildPerson_pickAct: "a.gp.a",
        a_guildPerson_pickAct_args: {
            actId: "_0" //贡献id
        },
        a_guildPerson_getMemberList: "a.gp.b",
        a_guildPerson_opMember: "a.gp.c",
        a_guildPerson_opMember_args: {
            targetUserId: "_0" //对方userId
            ,
            op: "_1" //操作类型
        },
        a_guildWar_getInfo: "a.gw.a",
        a_guildWar_getGuildList: "a.gw.a1",
        a_guildWar_getGuildList_args: {
            guildId: "_0" //公会id
        },
        a_guildWar_getWarAttackData: "a.gw.b",
        a_guildWar_getWarAttackData_args: {
            serverId: "_0" //服务器id
            ,
            guildId: "_1" //公会id
        },
        a_guildWar_getWarDefenceData: "a.gw.c",
        a_guildWar_getWarDefenceData_args: {
            guildId: "_0" //公会id
        },
        a_guildWar_getDefenceRecordList: "a.gw.d",
        a_guildWar_getAttackRecordList: "a.gw.e",
        a_guildWar_getGuildWarAllRank: "a.gw.f",
        a_guildWar_getLastRankList: "a.gw.f1",
        a_guildWar_getLastRankList_args: {
            groupId: "_0" //组别id
        },
        a_guildWar_getSignUpData: "a.gw.g",
        a_guildWar_getSignUpData_args: {
            guildId: "_0" //行会id
        },
        a_guildWar_signUp: "a.gw.g1",
        a_guildWar_signUp_args: {
            groupId: "_0" //组别id
        },
        a_guildWar_fightStartDoor: "a.gw.h",
        a_guildWar_fightStartDoor_args: {
            serverId: "_0" //服务器id
            ,
            guildId: "_1" //guildId
            ,
            door: "_2" //door
        },
        a_guildWar_fightEndDoor: "a.gw.h1",
        a_guildWar_fightEndDoor_args: {
            serverId: "_0" //服务器id
            ,
            guildId: "_1" //guildId
            ,
            door: "_2" //door
            ,
            isWin: "_3" //isWin
        },
        a_guildWar_upDoor: "a.gw.i",
        a_guildWar_upDoor_args: {
            door: "_0" //door
        },
        a_guildWar_downDoor: "a.gw.i1",
        a_guildWar_downDoor_args: {
            door: "_0" //door
        },
        a_guildWar_enter: "a.gw.j",
        a_guildWar_clearCd: "a.gw.j1",
        a_guildWar_inspire: "a.gw.j2",
        a_guildWar_syncData: "a.gw.k",
        a_guildWar_syncData_args: {
            sceneType: "_0" //场景
            ,
            attackData: "_1" //[服务器id ，行会id]
        },
        a_honor_getInfo: "a.h.a",
        a_honor_getAward: "a.h.b",
        a_honor_getAward_args: {
            honorId: "_0" //成就id
        },
        a_honor_bugAlter: "a.h.c",
        a_heartStunt_getInfo: "a.hs.a",
        a_heartStunt_choMenCulMethods: "a.hs.b",
        a_heartStunt_choMenCulMethods_args: {
            index: "_0" //槽位下标
            ,
            heartStuntId: "_1" //选择心法id
        },
        a_heartStunt_stuMenCulMethods: "a.hs.c",
        a_heartStunt_stuMenCulMethods_args: {
            index: "_0" //槽位下标
        },
        a_heartStunt_chaMenCulMethods: "a.hs.d",
        a_heartStunt_chaMenCulMethods_args: {
            index: "_0" //槽位下标
            ,
            heartStuntId: "_1" //选择心法id
        },
        a_hero_callHero: "a.he.a",
        a_hero_callHero_args: {
            tempId: "_0" //英雄模板id
            ,
            sex: "_1" //性别
        },
        a_hero_upSkill: "a.he.b",
        a_hero_upSkill_args: {
            tempId: "_0" //英雄模板id
            ,
            index: "_1" //技能下标
        },
        a_hero_clearSkillCd: "a.he.c",
        a_hero_wearRune: "a.he.d",
        a_hero_wearRune_args: {
            tempId: "_0" //英雄模板id
            ,
            index: "_1" //技能下标
        },
        a_hero_upRealm: "a.he.e",
        a_hero_upRealm_args: {
            tempId: "_0" //英雄模板id
        },
        a_hero_strength: "a.he.f",
        a_hero_strength_args: {
            tempId: "_0" //英雄模板id
            ,
            index: "_1" //对应装备位置下标
        },
        a_hero_equipRefine: "a.he.f1",
        a_hero_equipRefine_args: {
            tempId: "_0" //英雄模板id
            ,
            index: "_1" //装备下标
        },
        a_hero_upStar: "a.he.g",
        a_hero_upStar_args: {
            tempId: "_0" //英雄模板id
            ,
            index: "_1" //对应装备位置下标
        },
        a_hero_starTop: "a.he.g1",
        a_hero_starTop_args: {
            tempId: "_0" //英雄模板id
            ,
            index: "_1" //对应装备位置下标
        },
        a_hero_upGem: "a.he.h",
        a_hero_upGem_args: {
            tempId: "_0" //英雄模板id
            ,
            index: "_1" //对应装备位置下标
        },
        a_hero_wingFos: "a.he.z",
        a_hero_wingFos_args: {
            tempId: "_0" //英雄模板id
            ,
            fosType: "_1" //培养类型
        },
        a_hero_wingStrength: "a.he.z1",
        a_hero_wingStrength_args: {
            tempId: "_0" //英雄模板id
            ,
            part: "_1" //部位
            ,
            isReplace: "_2" //是否元宝替代
        },
        a_hero_wingFos2Top: "a.he.z2",
        a_hero_wingFos2Top_args: {
            tempId: "_0" //英雄模板id
            ,
            fosType: "_1" //培养类型
            ,
            isUseDiamond: "_2" //是否使用元宝
        },
        a_hero_upWing: "a.he.k",
        a_hero_upWing_args: {
            tempId: "_0" //英雄模板id
        },
        a_hero_wingActivate: "a.he.l",
        a_hero_wingActivate_args: {
            tempId: "_0" //英雄模板id
        },
        a_hero_calPropAndCombat: "a.he.m",
        a_hero_getMainHeroDisplay: "a.he.n",
        a_hero_getMainHeroDisplay_args: {
            userId: "_0" //用户id
        },
        a_hero_getHeroDisplayByTempId: "a.he.o",
        a_hero_getHeroDisplayByTempId_args: {
            userId: "_0" //用户id
            ,
            tempId: "_1" //英雄模板id
        },
        a_hero_getShowHeroData: "a.he.o1",
        a_hero_getShowHeroData_args: {
            userId: "_0" //用户id
        },
        a_hero_wearAllRune: "a.he.p",
        a_hero_wearAllRune_args: {
            tempId: "_0" //英雄模板id
        },
        a_hero_autoInfuseSwitch: "a.he.q",
        a_hero_autoInfuseSwitch_args: {
            isOpenIn: "_0" //是否开启
        },
        a_hero_extraInfuse: "a.he.q1",
        a_hero_extraInfuse_args: {
            type: "_0" //类型
        },
        a_hero_saveFightList: "a.he.q2",
        a_hero_saveFightList_args: {
            fightArr: "_0" //顺序数组
        },
        a_lottery_lottery: "a.l.a",
        a_lottery_lottery_args: {
            type: "_0" //抽奖类型
            ,
            count: "_1" //抽奖次数
        },
        a_lottery_getTreasureChest: "a.l.b",
        a_lottery_getInfo: "a.l.c",
        a_task_getInfo: "a.t.a",
        a_task_taskAward: "a.t.b",
        a_task_taskAward_args: {
            taskId: "_0" //任务id
        },
        a_task_getVitalityChest: "a.t.c",
        a_task_getVitalityChest_args: {
            index: "_0" //宝箱下标
        },
        a_pk_buyPKNum: "a.p.a",
        a_pk_getPKUserList: "a.p.b",
        a_pk_getPKUserData: "a.p.c",
        a_pk_getPKUserData_args: {
            userId: "_0" //用户id
        },
        a_pk_fight: "a.p.d",
        a_pk_fight_args: {
            enemyId: "_0" //对手id
            ,
            isNPC: "_1" //是否npc 0|1
            ,
            fightType: "_2" //1、排位赛 2、仇人榜
        },
        a_pk_getEnemyList: "a.p.e",
        a_pk_getUserRanks: "a.p.f",
        a_pk_getRank: "a.p.g",
        a_pk_changeSign: "a.p.h",
        a_pk_changeSign_args: {
            sign: "_0" //签名
        },
        a_pk_setRead: "a.p.i",
        a_pk_skip: "a.p.j",
        a_pk_pickRankAward: "a.p.k",
        a_pk_getEnemyRecord: "a.p.l",
        a_pk_getEnemyRecord_args: {
            enemyId: "_0" //敌人id
        },
        a_pk_getList: "a.p.m",
        a_pkOut_open: "a.po.a",
        a_pkOut_getEnemyList: "a.po.b",
        a_pkOut_getRevengeEnemyList: "a.po.b1",
        a_pkOut_refreshEnemy: "a.po.c",
        a_pkOut_start: "a.po.d",
        a_pkOut_start_args: {
            enemyId: "_0" //对手id
            ,
            fightType: "_1" //战斗类型 c_prop.fightTypeKey
            ,
            isRevenge: "_2" //是否复仇
        },
        a_pkOut_end: "a.po.e",
        a_pkOut_end_args: {
            isWin: "_0" //是否胜利
            ,
            enemyId: "_1" //对手的userId
            ,
            fightData: "_2" //战斗数据
            ,
            fightType: "_3" //战斗类型 c_prop.fightTypeKey
            ,
            isRevenge: "_4" //是否复仇
        },
        a_pkOut_getRankList: "a.po.f",
        a_pkOut_getMyRank: "a.po.g",
        a_pkOut_getPkRecordList: "a.po.h",
        a_pkOut_getRankPkRecordList: "a.po.h1",
        a_pkOut_setPkRecordRead: "a.po.i",
        a_pkOut_dealRecord: "a.po.j",
        a_pkOut_dealRecord_args: {
            fightType: "_0" //战斗类型 c_prop.fightTypeKey
        },
        a_pkOut_clearPkValue: "a.po.k",
        a_pkOut_resetBePkKill: "a.po.l",
        a_pkOut_incognito: "a.po.m",
        a_pkOut_getTreasurePkRecordList: "a.po.n",
        a_shop_getInfo: "a.s.a",
        a_shop_getInfo_args: {
            type: "_0" //商店类型c_prop.shopTypeKey.normal
        },
        a_shop_refreshExShop: "a.s.b",
        a_shop_refreshExShop_args: {
            type: "_0" //类型
            ,
            lvlRefresh: "_1" //是否等级刷新
        },
        a_shop_buy: "a.s.c",
        a_shop_buy_args: {
            index: "_0" //用户选择的items下标
            ,
            type: "_1" //商店类型c_prop.shopTypeKey.normal
            ,
            num: "_2" //购买数量
        },
        a_shop_buyAll: "a.s.d",
        a_shop_buyAll_args: {
            type: "_0" //商店类型c_prop.shopTypeKey.normal
        },
        a_copy_getInfo: "a.c.a",
        a_copy_getInfo_args: {
            type: "_0" //副本类型
        },
        a_copy_buyCopyCount: "a.c.b",
        a_copy_buyCopyCount_args: {
            type: "_0" //副本类型
            ,
            copyId: "_1" //副本id
        },
        a_copy_buyEquipTessera: "a.c.c",
        a_copy_buyRealmTessera: "a.c.d",
        a_copy_copyWipe: "a.c.e",
        a_copy_copyWipe_args: {
            copyId: "_0" //副本id
        },
        a_copy_start: "a.c.f",
        a_copy_start_args: {
            copyId: "_0" //副本id
            ,
            biCost: "_1" //消耗log
        },
        a_copy_end: "a.c.g",
        a_copy_end_args: {
            copyId: "_0" //副本id
            ,
            fightData: "_1" //战斗验证数据
            ,
            isWin: "_2" //是否胜利
        },
        a_copy_updateWinningStreak: "a.c.h",
        a_copy_updateWinningStreak_args: {
            copyId: "_0" //副本id
        },
        a_copy_setRead: "a.c.i",
        a_copy_setRead_args: {
            copyId: "_0" //副本id
        },
        a_copy_guildStart: "a.c.j",
        a_copy_guildStart_args: {
            copyId: "_0" //章节id
            ,
            bossId: "_1" //bossid
        },
        a_copy_guildEnd: "a.c.k",
        a_copy_guildEnd_args: {
            copyId: "_0" //章节id
            ,
            bossId: "_1" //bossid
            ,
            isWin: "_2" //结果
        },
        a_copy_guildCopyAward: "a.c.l",
        a_copy_guildCopyAward_args: {
            type: "_0" //boss或章节
            ,
            typeId: "_1" //bossId或章节id
        },
        a_copy_guildCopyReset: "a.c.m",
        a_copy_clearGuildCopy: "a.c.n",
        a_copy_clearGuildCopy_args: {
            bossId: "_0" //bossID
        },
        a_copy_paTaAward: "a.c.o",
        a_copy_paTaAward_args: {
            copyId: "_0" //副本id
        },
        a_copy_paTaTreasury: "a.c.o1",
        a_challengeCup_getInfo: "a.cc.a",
        a_challengeCup_startFight: "a.cc.b",
        a_challengeCup_startFight_args: {
            championUserId: "_0" //挑战擂主的userId
        },
        a_challengeCup_endFight: "a.cc.c",
        a_challengeCup_endFight_args: {
            isWin: "_0" //是否战斗胜利
        },
        a_challengeCup_clearCd: "a.cc.d",
        a_challengeCup_toBeChampion: "a.cc.e",
        a_challengeCup_getDurationTimeRankList: "a.cc.f",
        a_challengeCup_getIsOpen: "a.cc.g",
        a_challengeCup_op: "a.cc.h",
        a_challengeCup_op_args: {
            op: "_0" //0：踩 1 ：顶
        },
        a_crystal_getInfo: "a.cr.a",
        a_crystal_saveProgress: "a.cr.b",
        a_crystal_saveProgress_args: {
            hp: "_0" //剩余血量
            ,
            hpNum: "_1" //剩余血量条
            ,
            nextReplayTime: "_2" //下一次回满时间
        },
        a_crystal_finish: "a.cr.c",
        a_crystal_finish_args: {
            crystalId: "_0" //当前id
        },
        a_crystal_pickAward: "a.cr.d",
        a_crystal_pickAward_args: {
            crystalId: "_0" //当前id
        },
        a_crystal_useSkill: "a.cr.e",
        a_crystal_useSkill_args: {
            index: "_0" //技能下标
        },
        a_crystal_refreshSkillCd: "a.cr.f",
        a_crystal_refreshSkillCd_args: {
            index: "_0" //技能下标
        },
        a_rank_getRankList: "a.r.a",
        a_rank_getRankList_args: {
            rankType: "_0" //排行类型
        },
        a_rank_getUserRank: "a.r.b",
        a_rank_getUserRank_args: {
            rankType: "_0" //排行类型
        },
        a_rank_allRankArr: "a.r.c",
        a_rank_allRankArr_args: {
            rankType: "_0" //排行类型
        },
        a_rank_getGuildRank: "a.r.d",
        a_rank_getGuildRank_args: {
            rankType: "_0" //排行类型
        },
        a_rebirth_rebirth: "a.rb.a",
        a_rebirth_buyRebirth: "a.rb.b",
        a_rebirth_buyRebirth_args: {
            index: "_0" //转生丹index
            ,
            num: "_1" //转生丹数量
        },
        a_recharge_getInfo: "a.rc.a",
        a_recharge_recharge: "a.rc.b",
        a_recharge_recharge_args: {
            rechargeId: "_0" //充值项ID
            ,
            channelId: "_1" //渠道号
            ,
            receiptData: "_2" //苹果验证数据
        },
        a_recharge_getTodayCount: "a.rc.c",
        a_recharge_getAllCount: "a.rc.d",
        a_recharge_getRequest: "a.rc.e",
        a_recharge_getRequest_args: {
            rechargeId: "_0" //充值项ID
            ,
            goodsId: "_1" //渠道物品id
        },
        a_recharge_handleRequest: "a.rc.g",
        a_redEnvelope_getList: "a.re.a",
        a_redEnvelope_sendRedEnvelope: "a.re.b",
        a_redEnvelope_sendRedEnvelope_args: {
            type: "_0" //红包类型
            ,
            spItemId: "_1" //红包物品
            ,
            amount: "_2" //红包金额
            ,
            personNum: "_3" //红包领取份数
            ,
            wish: "_4" //祝福文本
        },
        a_redEnvelope_syncRedEnvelope: "a.re.c",
        a_redEnvelope_getNewList: "a.re.d",
        a_redEnvelope_getNewList_args: {
            lastId: "_0" //最后一条的唯一id
        },
        a_redEnvelope_receiveBonus: "a.re.e",
        a_redEnvelope_receiveBonus_args: {
            redEnvelopeId: "_0" //红包id
        },
        a_redEnvelopePersonal_getInfo: "a.rp.a",
        a_chat_getNewList: "a.ch.a",
        a_chat_getNewList_args: {
            lastId: "_0" //最后一条的唯一id
            ,
            guildId: "_1" //公会id
            ,
            guildLastId: "_2" //最后一条公会的唯一id
        },
        a_chat_getNewSysMsgList: "a.ch.hda",
        a_chat_getNewSysMsgList_args: {
            lastId: "_0" //最后一条的唯一id
        },
        a_chat_sendData: "a.ch.b",
        a_chat_sendData_args: {
            content: "_0" //聊天内容
            ,
            lastId: "_1" //最后一条的唯一id
            ,
            type: "_2" //聊天类型
            ,
            guildId: "_3" //公会id
            ,
            guildLastId: "_4" //公会最后一条的唯一id
            ,
            isLittleHorn: "_5" //true
        },
        a_coupon_use: "a.co.a",
        a_coupon_use_args: {
            code: "_0" //兑换码
        },
        a_coffers_getInfo: "a.cof.a",
        a_coffers_build: "a.cof.b",
        a_coffers_addBuff: "a.cof.b1",
        a_coffers_getLootRecordArr: "a.cof.c",
        a_coffers_getDefeseRecord: "a.cof.c1",
        a_coffers_getDefeseData: "a.cof.d",
        a_coffers_getEnemyDefeseData: "a.cof.d1",
        a_coffers_getEnemyDefeseData_args: {
            serverId: "_0" //服务器id
        },
        a_coffers_getServerArr: "a.cof.e",
        a_coffers_fightStart: "a.cof.f",
        a_coffers_fightStart_args: {
            serverId: "_0" //服务器id
            ,
            door: "_1" //门类型
        },
        a_coffers_fightEnd: "a.cof.f2",
        a_coffers_fightEnd_args: {
            serverId: "_0" //服务器id
            ,
            door: "_1" //门类型
            ,
            isWin: "_2" //是否胜利
            ,
            fightData: "_3" //战斗数据
        },
        a_coffers_fightCoffersStart: "a.cof.g",
        a_coffers_fightCoffersStart_args: {
            serverId: "_0" //服务器id
        },
        a_coffers_fightCoffersEnd: "a.cof.g1",
        a_coffers_fightCoffersEnd_args: {
            hurt: "_0" //伤害数据
            ,
            serverId: "_1" //serverId
            ,
            fightData: "_2" //战斗数据
        },
        a_sdk_getVip: "a.sd.a",
        a_smelt_smelt: "a.sm.a",
        a_smelt_smelt_args: {
            equipArr: "_0" //所要熔炼的装备id数组
            ,
            choColor: "_1" //质量
        },
        a_smelt_compound: "a.sm.b",
        a_smelt_compound_args: {
            compoundId: "_0" //所要合成物品的Id
        },
        a_smelt_wearParRing: "a.sm.c",
        a_smelt_wearParRing_args: {
            tempId: "_0" //英雄id
            ,
            breakId: "_1" //所要装备特戒的Id
        },
        a_smelt_ringBreak: "a.sm.d",
        a_smelt_ringBreak_args: {
            tempId: "_0" //英雄id
            ,
            breakId: "_1" //所要装备特戒的Id
        },
        a_king_getInfo: "a.k.a",
        a_king_worship: "a.k.b",
        a_king_receiveWelfare: "a.k.c",
        a_king_openBuff: "a.k.d",
        a_item_sellItems: "a.it.a",
        a_item_sellItems_args: {
            itemId: "_0" //id
            ,
            itemNum: "_1" //num
        },
        a_treasure_spies: "a.tr.a",
        a_treasure_getExPkOutInfo: "a.tr.b",
        a_treasure_open: "a.tr.c",
        a_treasure_open_args: {
            id: "_0" //id
        },
        a_treasure_compose: "a.tr.d",
        a_treasure_compose_args: {
            itemId: "_0" //id
        },
        a_talisman_useTrumpItem: "a.tm.a",
        a_talisman_useTrumpItem_args: {
            itemId: "_0" //法宝id
        },
        a_talisman_wearTrump: "a.tm.b",
        a_talisman_wearTrump_args: {
            tempId: "_0" //英雄id
            ,
            trumpId: "_1" //法宝id
        },
        a_talisman_upTrumpLvl: "a.tm.c",
        a_talisman_upTrumpLvl_args: {
            tempId: "_0" //英雄id
            ,
            trumpId: "_1" //法宝id
        },
        a_talisman_upTrumpStar: "a.tm.d",
        a_talisman_upTrumpStar_args: {
            tempId: "_0" //英雄id
            ,
            trumpId: "_1" //法宝id
        },
        a_talisman_recastTrump: "a.tm.e",
        a_talisman_recastTrump_args: {
            tempId: "_0" //英雄id
            ,
            trumpId: "_1" //法宝id
        },
        a_talisman_compoundTrump: "a.tm.f",
        a_talisman_compoundTrump_args: {
            tempId: "_0" //英雄id
            ,
            trumpId: "_1" //法宝id
        },
        a_talisman_baptizeTrump: "a.tm.g",
        a_talisman_baptizeTrump_args: {
            tempId: "_0" //英雄id
            ,
            trumpId: "_1" //法宝id
            ,
            isCheck: "_2" //是否开启保险
        },
        a_talisman_confirmBaptizeTrump: "a.tm.h",
        a_talisman_confirmBaptizeTrump_args: {
            tempId: "_0" //英雄id
            ,
            trumpId: "_1" //法宝id
        },
        a_talisman_cancelBaptizeTrump: "a.tm.i",
        a_talisman_cancelBaptizeTrump_args: {
            tempId: "_0" //英雄id
            ,
            trumpId: "_1" //法宝id
        },
        a_expedition_getInfo: "a.ex.a",
        a_expedition_wearSoul: "a.ex.b",
        a_expedition_wearSoul_args: {
            tempId: "_0" //ģ��id
            ,
            soulId: "_1" //ԪӤid
        },
        a_expedition_startBattle: "a.ex.c",
        a_expedition_startBattle_args: {
            stageId: "_0" //�ؿ�id
        },
        a_expedition_endBattle: "a.ex.d",
        a_expedition_endBattle_args: {
            isWin: "_0" //�Ƿ�ʤ��
            ,
            herosHp: "_1" //ʣ��Ѫ��
        },
        a_expedition_buyBlackItem: "a.ex.e",
        a_expedition_buyBlackItem_args: {
            itemId: "_0" //��Ʒ��id
        },
        c_account_enterGame: "c.a.a",
        c_account_enterGame_args: {
            accountId: "_0" //账号id
            ,
            loginKey: "_1" //登录key
            ,
            serverIndexId: "_2" //登录key
        },
        c_account_createUser: "c.a.b",
        c_account_createUser_args: {
            name: "_0" //名字
            ,
            heroTempId: "_1" //模板id 
            ,
            sex: "_2" //性别 
            ,
            serverIndexId: "_3" //登录key
            ,
            shareKey: "_4" //可能的分红模块的分享key
        },
        c_account_getThirdUserInfo: "c.a.hda",
        c_net_connect: "c.n.a",
        c_net_disconnect: "c.n.b",
        c_net_disconnect_args: {
            sessionId: "_0" // sessionId
        },
        c_net_getServerDate: "c.n.c",
        h_account_login: "h.a.a",
        h_account_login_args: {
            name: "_0" //用户名
            ,
            pwd: "_1" //密码
            ,
            channelId: "_2" //渠道id
        },
        h_account_loginBySdk: "h.a.a1",
        h_account_loginBySdk_args: {
            channelId: "_0" //渠道号id
            ,
            sdkData: "_1" //sdk的数据，是一个数组[]
            ,
            deviceId: "_2" //机器码
        },
        h_account_register: "h.a.c",
        h_account_register_args: {
            name: "_0" //账号
            ,
            pwd: "_1" //密码
            ,
            channelId: "_2" //渠道号id
            ,
            deviceId: "_3" //机器码
        },
        h_notice_getNewOne: "h.nc.a",
        h_notice_getList: "h.nc.b",
        h_protocolContent_getInfo: "h.pc.a",
        h_serverInfo_getServerList: "h.s.a",
        h_serverInfo_getServerList_args: {
            isTest: "_0" //是否测试
        },
        h_serverInfo_getServerInfo: "h.s.c",
        h_serverInfo_getServerInfo_args: {
            id: "_0" //服务器id
        },
        h_serverInfo_getServerDate: "h.s.e",
        h_serverInfo_getUserServers: "h.s.f",
        h_serverInfo_getUserServers_args: {
            accountId: "_0" //账号id
        },
        h_serverInfo_getaccountServers: "h.s.g",
        h_serverInfo_getaccountServers_args: {
            openId: "_0" //openId
            ,
            appId: "_1" //wanba
            ,
            isTest: "_2" //1
        },
        h_kefu_getList: "h.cs.hda",
        h_kefu_getList_args: {
            lastId: "_0" //最后一条的唯一id
            ,
            openId: "_1" //openId
        },
        h_kefu_sendData: "h.cs.hdb",
        h_kefu_sendData_args: {
            lastId: "_0" //最后一条的唯一id
            ,
            content: "_1" //聊天内容
            ,
            openId: "_2" //openId
            ,
            nickname: "_3" //nickname
            ,
            vipLevel: "_4" //vip_level
        },
        admin_coffers_lootDefense: "admin.coffers.a",
        admin_coffers_lootDefense_args: {
            attackData: "_0" //[攻击玩家id,攻击玩家名，服务器id,服务器名称,是否胜利]
            ,
            door: "_1" //攻击哪个门
        },
        admin_coffers_lootCoffersDefense: "admin.coffers.a1",
        admin_coffers_lootCoffersDefense_args: {
            hurt: "_0" //伤害
            ,
            breakNum: "_1" //攻破门数
        },
        admin_coffers_getCache: "admin.coffers.b",
        admin_coffers_resetPoints: "admin.coffers.c",
        admin_coffers_updateCache: "admin.coffers.d",
        admin_coffers_updateCache_args: {
            data: "_0" //[[key,value],[key,value]]
        },
        admin_guild_getCache: "admin.guild.a",
        admin_guild_getGuildById: "admin.guild.b",
        admin_guild_getGuildById_args: {
            id: "_0" //id
        },
        admin_guild_updateCache: "admin.guild.c",
        admin_guild_updateCache_args: {
            id: "_0" //id
            ,
            data: "_1" //[[key,value],[key,value]]
        },
        admin_guild_getZombieGuild: "admin.guild.d",
        admin_guild_clearZombieGuild: "admin.guild.e",
        admin_guild_clearZombieGuild_args: {
            id: "_0" //id
            ,
            data: "_1" //[[],[],[],...]
        },
        admin_guild_chairmanImpeach: "admin.guild.f",
        admin_boss_getBossData: "admin.boss.a",
        admin_boss_getBossData_args: {
            bossId: "_0" //bossId
        },
        admin_boss_getUserCache: "admin.boss.a1",
        admin_boss_getUserCache_args: {
            bossId: "_0" //bossId
        },
        admin_boss_getGuildById: "admin.boss.a2",
        admin_boss_getGuildById_args: {
            id: "_0" //id
        },
        admin_boss_updateBossCache: "admin.boss.b",
        admin_boss_updateBossCache_args: {
            data: "_0" //[[key,value],[key,value]]
        },
        admin_boss_updateUserCache: "admin.boss.c",
        admin_boss_updateUserCache_args: {
            id: "_0" //id
            ,
            data: "_1" //[[key,value],[key,value]]
        },
        admin_chat_serversChat: "admin.chat.a",
        admin_chat_serversChat_args: {
            nickName: "_0" //���Ҳ���
            ,
            vip: "_1" //
            ,
            content: "_2" //
            ,
            isGM: "_3" //
            ,
            guildName: "_4" //
            ,
            medalTitle: "_5" //
            ,
            isLittleHorn: "_6" //
        },
        admin_guildWar_lootDefense: "admin.guildWar.a",
        admin_guildWar_lootDefense_args: {
            attackData: "_0" //[攻击玩家id,攻击玩家名，服务器id,服务器名称,是否直接击破]
            ,
            isWin: "_1" //是否胜利
            ,
            defenceData: "_2" //[行会id,攻击哪个门,防守者名字]
        },
        admin_guildWar_pushBeFightRecord: "admin.guildWar.b",
        admin_guildWar_pushBeFightRecord_args: {
            guildId: "_0" //被打行会id
            ,
            data: "_1" //[门，服务器名,行会名,玩家名]
        },
        admin_guildWar_getCurServerGuildWarObj: "admin.guildWar.c",
        admin_guildWar_enter100User: "admin.guildWar.d",
        admin_guildWarSync_getSyncServer: "admin.guildWarSync.a",
        admin_guildWarSync_getSyncServer_args: {
            curServerData: "_0" //[serverGroupId,serverId,serverHost,serverPort]
        },
        admin_treasure_getTreasureCash: "admin.treasure.a",
        admin_treasure_getTreasureByUserId: "admin.treasure.b",
        admin_treasure_setTreasureByUserId: "admin.treasure.c",
        admin_treasure_setTreasureByUserId_args: {
            userId: "_0" //123
        }
    };
})(gc || (gc = {}));

/**
 * Created by SmallAiTT on 2015/5/4.
 */
var g_consts;
(function (g_consts) {
    g_consts.moduleId = {
        index: "IndexScene",
        home: "HomeScene",
        forge: "ForgeScene",
        role: "RoleScene",
        fight: "FightScene",
        guild: "GuildScene",
        guildwar: "GuildWarScene",
        bag: "BagScene",
        shop: "ShopScene",
        gift: "GiftScene",
        //test : "TestScene",  // 测试新建。。。
        //子模块
        mail: "Mail",
        copyEntry: "CopyEntry",
        equipCopy: "Copy",
        stateCopy: "StateCopy",
        bossCopy: "BossCopy",
        vipCopy: "VipCopy",
        rank: "Rank",
        taskDlg: "TaskDlg",
        smelting: "Smelting",
        practice: "Practice",
        firstRecharge: "FirstRecharge",
        vip: "Vip",
        activityDlg: "ActivityNewCenter",
        tuLong: "TuLong",
        treasure: "Treasure",
        recharge: "Recharge",
        arena: "Arena",
        arenaShop: "ArenaShop",
        fiveDay: "FiveDay",
        newFourDay: "NewFiveDay",
        guildListLayer: "GuildListLayer",
        guildMineLayer: "GuildMineLayer",
        fuliDlg: "FuliDlg",
        chuanchen: "Chuanchen",
        worldBoss: "WorldBoss",
        guildBossInspire: "GuildBossInspire",
        worldBossHurtList: "WorldBossHurtList",
        guildBossReward: "GuildBossReward",
        roleEnemyInfo: "RoleEnemyInfo",
        redPacket: "RedPacket",
        redPacketList: "RedPacketList",
        redPacketGet: "RedPacketGet",
        defArena: "DefArena",
        defarenaWinner: "DefarenaWinner",
        king: 'King',
        lotus: "LotusScene",
        rebirth: "Rebirth",
        rebirthExp: "RebirthExp",
        coffers: "CoffersScene",
        coffersServer: "CoffersServerDlg",
        customList: "CustomList",
        custom: "Custom",
        medal: "Medal",
        bossWar: "BossWar",
        guildBossLevelList: "GuildBossLevelList",
        wBossList: "WBossList",
        wBossReward: "WBossReward",
        guildBossCall: "GuildBossCall",
        wBossCall: "WBossCall",
        bindPhone: "BindPhone",
        userAgreement: "UserAgreement",
        guildCopy: "GuildCopy",
        guildCopyBoss: "GuildCopyBoss",
        tower: "Tower",
        heart: "HeartLayer",
        towerTreasury: "TowerTreasury",
        villian: "VillianLayer" //恶人谷
    };
    //战斗场景子模块ID
    g_consts.FS_SUBMID_SMELT = 0; // 1,0熔炼
    g_consts.FS_SUBMID_ACTIVITY = 2; // 1,2活动
    g_consts.FS_SUBMID_PVP_OUT = 3; // 1,3野外PK
    g_consts.FS_SUBMID_CHAT = 4; // 1,4聊天
    g_consts.FS_SUBMID_RECHARGE = 6; // 1,6充值
    g_consts.FS_SUBMID_VIP = 7; // 1,7VIP
    //主城子模块ID
    g_consts.HS_SUBMID_EQUIP_COPY = 0; // 2,0装备副本
    g_consts.HS_SUBMID_BOSS_COPY = 1; // 2,1炼狱副本
    g_consts.HS_SUBMID_STATE_COPY = 2; // 2,2元神副本
    g_consts.HS_SUBMID_ARENA_SHOP = 3; // 2,3竞技场商店
    g_consts.HS_SUBMID_ARENA = 4; // 2,4竞技场
    g_consts.HS_SUBMID_GUILD = 5; // 2,5行会
    g_consts.HS_SUBMID_KING = 6; // 2,6霸主
    g_consts.HS_SUBMID_DAILY = 7; // 2,7日常任务
    g_consts.HS_SUBMID_CUSTOM_LIST = 8; // 2,8订制武器列表
    g_consts.HS_SUBMID_SIGN = 9; // 2,9签到
    g_consts.HS_SUBMID_VIP_COPY = 10; // 2,10 VIP副本
    g_consts.HS_SUBMID_COFFERS_SERVER = 11; // 2,11 仗剑天涯
    g_consts.HS_SUBMID_GUILD_COPY_BOSS = 12; // 2,12 行会副本BOSS界面
    g_consts.HS_SUBMID_TOWER = 13; // 2,13 爬塔
    g_consts.HS_SUBMID_HEART = 14; // 2,14 心法
    //主子模块映射
    g_consts.subModuleMap = {};
    g_consts.subModuleMap[g_consts.moduleId.home] = [g_consts.HS_SUBMID_EQUIP_COPY, g_consts.HS_SUBMID_BOSS_COPY, g_consts.HS_SUBMID_STATE_COPY, g_consts.HS_SUBMID_ARENA,
        g_consts.HS_SUBMID_GUILD, g_consts.HS_SUBMID_KING, g_consts.HS_SUBMID_DAILY, g_consts.HS_SUBMID_CUSTOM_LIST, g_consts.HS_SUBMID_SIGN, g_consts.HS_SUBMID_VIP_COPY, g_consts.HS_SUBMID_COFFERS_SERVER,
        g_consts.HS_SUBMID_GUILD_COPY_BOSS, g_consts.HS_SUBMID_TOWER, g_consts.HS_SUBMID_HEART];
    g_consts.subModuleMap[g_consts.moduleId.fight] = [g_consts.FS_SUBMID_SMELT, g_consts.FS_SUBMID_ACTIVITY, g_consts.FS_SUBMID_PVP_OUT, g_consts.FS_SUBMID_CHAT, g_consts.FS_SUBMID_RECHARGE, g_consts.FS_SUBMID_VIP];
})(g_consts || (g_consts = {}));

/**
 * Created by SmallAiTT on 2015/8/28.
 */
var g_consts;
(function (g_consts) {
    var style;
    (function (style) {
        var opt = {};
        /*
         颜色（1-2位）+ 描边（0无、1有）+颜色细分（2位）
         50+颜色（1位）+状态（2）
         1 : 白色  white_000 = 1000
         2 : 绿色  green_000 = 2000
         3 : 蓝色  blue_000 = 3000
         4 : 紫色  purple_000 = 4000
         5 : 橙色  orange_000 = 5000
         6 : 红色  red_000 = 6000
         7 : ? 待定
         10 : 黑色 black_100 = 10100   //1表示带描边
         11 : 黄色 yellow_100 = 11000
         12 : 棕色 brown_000 = 12000
    
         50 : 按键文字
         */
        style.test = 1;
        // 白色
        style.white_000 = 1000; // 纯白色
        style.white_001 = 1001; // 灰色
        style.white_101 = 1101; // 纯白色加深蓝色描边
        style.white_102 = 1102; // 白色加浅黑色描边
        style.white_103 = 1103; // 白色加红色描边
        opt[style.white_000] = { textColor: 0xFFFFFF };
        opt[style.white_001] = { textColor: 0x858585 };
        opt[style.white_101] = { textColor: 0xFFFFFF, stroke: 2, strokeColor: 0x193452 };
        opt[style.white_102] = { textColor: 0xEBEBEB, stroke: 2, strokeColor: 0x373737 };
        opt[style.white_103] = { textColor: 0xfff6f6, stroke: 2, strokeColor: 0x971c00 };
        // 绿色
        style.green_000 = 2000; // 纯绿色
        style.green_001 = 2001; // 浅绿色
        style.green_002 = 2002; // 浅绿色
        opt[style.green_000] = { textColor: 0x00FF00 };
        opt[style.green_001] = { textColor: 0x00C20E };
        opt[style.green_002] = { textColor: 0X7ECA0E };
        // 蓝色
        style.blue_000 = 3000; // 纯蓝色
        style.blue_001 = 3001; // 深蓝色
        style.blue_002 = 3002; // 浅蓝色
        style.blue_003 = 3003; // 比较亮的浅蓝色
        style.blue_004 = 3004; // 紫蓝色
        style.blue_101 = 3101; // 钻石蓝色
        style.blue_102 = 3102; // 很亮的青蓝色
        opt[style.blue_000] = { textColor: 0x0000FF };
        opt[style.blue_001] = { textColor: 0x193452 };
        opt[style.blue_002] = { textColor: 0x93D3E8 };
        opt[style.blue_003] = { textColor: 0x1786FC };
        opt[style.blue_004] = { textColor: 0x7286CE };
        opt[style.blue_101] = { textColor: 0x93D3E8, stroke: 2, strokeColor: 0x003061 };
        opt[style.blue_102] = { textColor: 0x40fdff, stroke: 2, strokeColor: 0x00586f };
        // 紫色
        style.purple_000 = 4000;
        opt[style.purple_000] = { textColor: 0xe76df5, stroke: 1, strokeColor: 0xE76DF5 }; //公会名称颜色
        // 橙色
        style.orange_000 = 5000; // 纯橙色
        style.orange_001 = 5001; // 浅橙色
        style.orange_002 = 5002; // 发白的浅橙色
        style.orange_101 = 5101; // 淡淡的橙色加棕色描边
        style.orange_102 = 5102; // 亮黄色加红色描边
        style.orange_103 = 5103; // 纯橙色加黑色描边
        opt[style.orange_000] = { textColor: 0xFF9400 };
        opt[style.orange_001] = { textColor: 0xE5B064 };
        opt[style.orange_002] = { textColor: 0xF6E6C2 };
        opt[style.orange_101] = { textColor: 0xFFF1CC, stroke: 2, strokeColor: 0x421707 };
        opt[style.orange_102] = { textColor: 0xFFAB27, stroke: 2, strokeColor: 0x7E0100 };
        opt[style.orange_103] = { textColor: 0xFF9400, stroke: 2 };
        // 红色
        style.red_000 = 6000; // 纯红色
        style.red_001 = 6001; // 常用红色
        style.red_101 = 6101; // 红色加白色描边
        opt[style.red_000] = { textColor: 0xFF0000 };
        opt[style.red_001] = { textColor: 0xF40000 };
        opt[style.red_101] = { textColor: 0xb85a35, stroke: 2, strokeColor: 0xfff8ee };
        // 黑色
        style.black_000 = 10000; // 纯黑色
        style.black_001 = 10001; // 浅黑色
        style.black_002 = 10002; // 灰黑色
        opt[style.black_000] = { textColor: 0x000000 };
        opt[style.black_001] = { textColor: 0x2B2321 };
        opt[style.black_002] = { textColor: 0x3D1E01 };
        // 黄色
        style.yellow_000 = 11000; // 纯黄色
        style.yellow_001 = 11001; // 金黄色
        style.yellow_101 = 11101; // 金币金黄色
        style.yellow_102 = 11102; // 金黄色加棕色描边
        style.yellow_103 = 11103; // 金黄色加深棕色描边
        opt[style.yellow_000] = { textColor: 0xFFFF00 };
        opt[style.yellow_001] = { textColor: 0xF1AA00 };
        opt[style.yellow_101] = { textColor: 0xFFFAA3, stroke: 2, strokeColor: 0x95641D };
        opt[style.yellow_102] = { textColor: 0xf3f0c1, stroke: 2, strokeColor: 0x6c440a };
        opt[style.yellow_103] = { textColor: 0xfffaa3, stroke: 2, strokeColor: 0x2f1d01 };
        // 棕色
        style.brown_001 = 12001; // 棕色1
        opt[style.brown_001] = { textColor: 0x621600 };
        // 按键文字
        // 常态
        style.btn_101 = 60101; // 绿色按键
        style.btn_102 = 60102; // 黄色按键
        style.btn_103 = 60103; // 蓝色按键
        // 按下态
        style.btn_111 = 60111; // 绿色按键
        style.btn_112 = 60112; // 黄色按键
        style.btn_113 = 60113; // 蓝色按键
        // 禁用态
        style.btn_120 = 60120; // 带描边不可用状态
        opt[style.btn_101] = { textColor: 0xE9FFB3, stroke: 2, strokeColor: 0x076005 };
        opt[style.btn_102] = { textColor: 0xFFF9C5, stroke: 2, strokeColor: 0x632800 };
        opt[style.btn_103] = { textColor: 0xD7F6FF, stroke: 2, strokeColor: 0x0C415F };
        opt[style.btn_111] = { textColor: 0xa6b380, stroke: 2, strokeColor: 0x003f00 };
        opt[style.btn_112] = { textColor: 0xb3b395, stroke: 2, strokeColor: 0x451d05 };
        opt[style.btn_113] = { textColor: 0x9db2b3, stroke: 2, strokeColor: 0x002743 };
        opt[style.btn_120] = { textColor: 0x959595, stroke: 2, strokeColor: 0x363636 };
        // 字体样式设置
        mo.registerFontStyle(opt);
    })(style = g_consts.style || (g_consts.style = {}));
})(g_consts || (g_consts = {}));

/**
 * Created by lihex on 11/22/15.
 */
var g_consts;
(function (g_consts) {
    g_consts.GUIDE_LCK = {
        eqpChged: "eqpChged",
        hasSmelting: "hasSmelting",
        buyEquip: "buyEquip",
        everEquiped: "everEquiped",
        popBindPhoneAfterPay: "popBindAfterPay" //第一次支付成功后弹出绑定提示弹窗
    };
})(g_consts || (g_consts = {}));
var g_cache;
(function (g_cache) {
    var _cachedMap = {};
    function setLocalStorageItem(key, v, opt) {
        if (_cachedMap[key] == v)
            return;
        _cachedMap[key] = v;
        return mo.setLocalStorageItem(key, v, opt);
    }
    g_cache.setLocalStorageItem = setLocalStorageItem;
    function getLocalStorageItem(key, opt) {
        if (_cachedMap.hasOwnProperty(key))
            return _cachedMap[key];
        return mo.getLocalStorageItem(key, opt);
    }
    g_cache.getLocalStorageItem = getLocalStorageItem;
    function clearGuideKeyCache() {
        for (var key in g_consts.GUIDE_LCK) {
            delete _cachedMap[key];
            mo.removeLocalStorageItem(key, false);
        }
    }
    g_cache.clearGuideKeyCache = clearGuideKeyCache;
    function initGuideKeyCache() {
        for (var key in g_consts.GUIDE_LCK) {
            _cachedMap[key] = getLocalStorageItem(key);
        }
    }
    g_cache.initGuideKeyCache = initGuideKeyCache;
    function recordGuideDone(key) {
        var flag = getLocalStorageItem(key);
        if (!flag)
            setLocalStorageItem(key, true);
    }
    g_cache.recordGuideDone = recordGuideDone;
})(g_cache || (g_cache = {}));

var ws;
(function (ws) {
    function getChannelId() {
        //把域名解释为渠道
        //var parent = window.parent; //可能会套到iFrame里无法知道来自哪个域名
        //var referrer = parent ? parent.document.referrer : document.referrer;
        var referrer = document.referrer;
        if (referrer) {
            var re = /http:\/\/([^\/]+)\//i;
            var tChannel = referrer.match(re)[1];
            return tChannel;
        }
        return "未知";
    }
    function initRecharge(gameVer) {
        if (egret.isNative)
            return;
        var args = {
            appId: 'A6971D498D982AFCE9BF0CE5C453E52C',
            //            accountId: accountId,
            appVer: gameVer,
            channel: getChannelId(),
            errorReport: true,
            virus: true
        };
        DCAgent.init(args);
    }
    ws.initRecharge = initRecharge;
    function recordRecharge(amount, iapId) {
        if (egret.isNative)
            return;
        var paymentConfig = {
            amount: 0,
            currencyType: "",
            payType: "",
            iapid: "",
            orderId: "",
            payTime: 0
        };
        paymentConfig.amount = amount;
        paymentConfig.currencyType = 'CNY';
        //        paymentConfig.payType = '信用卡';
        //        paymentConfig.orderId = '订单编号';
        paymentConfig.payTime = ~~(Date.newDate().getTime() / 1000);
        if (iapId) {
            paymentConfig.iapid = iapId;
        }
        DCAgent.onPayment(paymentConfig);
    }
    ws.recordRecharge = recordRecharge;
    function recordEvent(eventId, value) {
        if (egret.isNative)
            return;
        // eventId为事件ID，类型为字符串
        var eventId = eventId;
        // duration为耗时，类型数字，单位：秒（此参数暂无实际用处）
        var duration = 1;
        // eventData为本次事件相关数据，仅支持简单类型的键值对（值为数字或字符串）
        var eventData = {
            value: value
        };
        DCAgent.onEvent(eventId, duration, eventData);
    }
    ws.recordEvent = recordEvent;
})(ws || (ws = {}));

/**
 * Created by lihex on 9/6/15.
 */
var gc;
(function (gc) {
    logger.initLogger(gc, "gc");
    var _specialItemIds;
    function isSpecialItem(itemId) {
        if (!_specialItemIds) {
            _specialItemIds = [];
            var spItemIdKey = gc.c_prop.spItemIdKey;
            for (var key in spItemIdKey) {
                _specialItemIds.push(spItemIdKey[key]);
            }
        }
        return _specialItemIds.indexOf(parseInt(itemId)) >= 0;
    }
    gc.isSpecialItem = isSpecialItem;
    function subArr(arr, starIdx, endIdx) {
        var sub = [];
        for (var i = starIdx, li = endIdx ? endIdx : arr.length; i < li; i++) {
            sub.push(arr[i]);
        }
        return sub;
    }
    gc.subArr = subArr;
    function init() {
        //这些资源不会释放
        var globals = ['ico_loading', 'panel_top_notice', 's9g_failinfo', 'btn_0_0_0', 'btn_close_0'];
        //入口图标
        var midEntryIcons = ['ico_first_recharge', 'ico_treasure', 'ico_five_day', 'ico_dinzhisfg', 'ico_zanyingrukou'];
        var bottomEntryIcons = ['ico_heirloom', 'ico_mail', 'ico_phone', 'ico_desktop_share', 'ico_desktop_follow',
            'ico_xiongdi', 'ico_desktop'];
        globals = globals.concat(midEntryIcons);
        globals = globals.concat(bottomEntryIcons);
        mo.R.setGlobal.apply(mo.R, globals);
        //声音配置初始化
        //ws.audio.init();
        //重置网络
        gc.net.reset();
        // 转菊花设置
        mo.setWaitingView(g_base.BaseJuHua.getInstance());
        //初始化dataeye
        //ws.initRecharge("Local");  //todo 临时 game_version
        //注册动画数据解析器
        mo.registerDcParser('@mc', function (oldData, key) {
            var framesInfo = oldData[1][1];
            var resKey = 0;
            var frames = [];
            var res = {};
            for (var i = 0, li = framesInfo.length; i < li; i++, resKey++) {
                var frameInfo = framesInfo[i];
                var resCfg = subArr(frameInfo, 0, 4);
                var frameCfg = subArr(frameInfo, 4);
                frames.push({
                    'res': resKey.toString(),
                    'x': frameCfg[0],
                    'y': frameCfg[1],
                    'duration': frameCfg[2]
                });
                res[resKey.toString()] = {
                    'x': resCfg[0],
                    'y': resCfg[1],
                    'w': resCfg[2],
                    'h': resCfg[3],
                };
            }
            var result = {};
            var mc = result.mc = {};
            var mcInfo = mc[key] = {};
            mcInfo.frameRate = oldData[1][0]; // 帧率
            mcInfo.frames = frames;
            result.res = res;
            return result;
        });
    }
    gc.init = init;
    function initData(cb, target) {
        mo.playWaiting();
        //先同步服务器时间
        mo.request4Http(gc.iface.c_net_getServerDate, function (serverDate) {
            mo.debug("serverDate--->", serverDate);
            Date.setStandard(serverDate);
            mo.stopWaiting();
            if (cb)
                cb.call(target);
        });
    }
    gc.initData = initData;
    /**
     * 获取今日次数的公用方法。
     * @param refreshTime
     * @param cb
     * @param hours
     * @returns {*}
     */
    function getTodayCount(refreshTime, cb, hours) {
        return gc.handleTodayRefresh(refreshTime, cb, hours);
    }
    gc.getTodayCount = getTodayCount;
    /**
     * 处理今日刷新的公用方法。
     * @param refreshTime
     * @param cb
     * @param hours
     * @returns {*}
     */
    function handleTodayRefresh(refreshTime, cb, hours) {
        var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
        hours = hours == null ? c_game[gc.id_c_game.refreshTime][0] : hours;
        var now = Date.newDate();
        if (!refreshTime)
            refreshTime = now.clone();
        else if (typeof refreshTime == "string")
            refreshTime = Date.newDate(refreshTime);
        var needToRefresh = !refreshTime.isAfter(now);
        if (needToRefresh) {
            var ft = Date.today();
            ft.addHours(hours);
            if (!ft.isAfter(now))
                ft.addDays(1);
        }
        return cb(needToRefresh, ft);
    }
    gc.handleTodayRefresh = handleTodayRefresh;
    /*
    * Lazy Cfg Loader
    * H5环境延迟加载配置
    * */
    var Lzcl = (function () {
        function Lzcl() {
        }
        var d = __define,c=Lzcl,p=c.prototype;
        p.init = function () {
            //提前设置登陆按钮特效,等配置文件加载好后会覆盖
            mo._dc["mc"] = { 29: ["@mc", [24, [[330, 492, 327, 240, -165, -152], [1, 494, 327, 239, -165, -154], [1, 251, 327, 241, -165, -157], [688, 1, 325, 243, -164, -160], [342, 247, 343, 243, -179, -158], [342, 1, 344, 244, -179, -158], [1, 1, 339, 248, -176, -160], [687, 247, 328, 243, -165, -155]]]] };
        };
        p.load = function (url) {
            var self = this;
            if (self.loading)
                return;
            if (self.loaded)
                return;
            var b = url;
            var urlloader = new egret.URLLoader;
            var a = new egret.URLRequest;
            a.url = b;
            urlloader.dataFormat = egret.URLLoaderDataFormat.BINARY;
            urlloader.load(a);
            self.loading = true;
            urlloader.addEventListener(egret.IOErrorEvent.IO_ERROR, function () {
                mo.showMsg("E:" + egret.IOErrorEvent.IO_ERROR);
                self.loading = false;
                self.onResult(false);
            }, self);
            urlloader.addEventListener(egret.Event.COMPLETE, function () {
                self.loading = false;
                self.loaded = true;
                var m_zip = new JSZip(urlloader.data);
                //通用配置解压
                var cfgs = m_zip.file(/^[tc].*/);
                for (var i = 0, li = cfgs.length; i < li; i++) {
                    var cfg = cfgs[i];
                    var cfgName = mo.STR.format("shared/%s", cfg.name);
                    res._jsData[cfgName] = JSON.parse(cfg.asText());
                }
                //设置消息数据
                var data = res._jsData[gc.cfg_c_msgCode];
                mo.setMsgData(data);
                //特殊数据配置
                var dcCfgNames = [
                    "dc_mc" //动画配置
                ];
                var suffix = ".json";
                mo._dc["mc"] = JSON.parse(m_zip.file(dcCfgNames[0] + suffix).asText());
                self.onResult(true);
            }, self);
        };
        p.onResult = function (succ) {
            var self = this;
            if (self.playWaiting) {
                mo.stopWaiting();
                self.playWaiting = false;
            }
            if (self.cb)
                self.cb.call(self.ctx, succ);
        };
        p.waitingResult = function (cb, ctx) {
            var self = this;
            if (self.loaded) {
                cb.call(ctx, true);
                return;
            }
            if (self.loading) {
                mo.playWaiting();
                self.playWaiting = true;
                self.cb = cb;
                self.ctx = ctx;
            }
        };
        return Lzcl;
    })();
    gc.Lzcl = Lzcl;
    egret.registerClass(Lzcl,"gc.Lzcl");
})(gc || (gc = {}));

/**
 * Created by lihex on 9/21/15.
 */
var utils;
(function (utils) {
    /**
     * {itemId:count} -> [key, value]
     * @param obj
     * @returns {any[]}
     */
    function obj2KVArr(obj) {
        var key = Object.keys(obj)[0];
        var value = obj[key];
        return [key, value];
    }
    utils.obj2KVArr = obj2KVArr;
    /**
     * {itemId:count, ...} -> [{itemId:itemId, count: count}, {}...]
     * @param obj
     * @returns {Array}
     */
    function itemObj2ObjArr(obj) {
        var arr = [];
        for (var key in obj) {
            arr.push({
                itemId: key,
                count: obj[key]
            });
        }
        return arr;
    }
    utils.itemObj2ObjArr = itemObj2ObjArr;
    /**
     * [{itemId:count},{}, ...} -> [{itemId:itemId, count: count}, {}...]
     * @param objArr
     * @returns {Array}
     */
    function itemObjArr2ObjArr(objArr) {
        var arr = [];
        for (var i = 0, li = objArr.length; i < li; i++) {
            var k = Object.keys(objArr[i])[0];
            var v = objArr[i][k];
            arr.push({
                itemId: k,
                count: v
            });
        }
        return arr;
    }
    utils.itemObjArr2ObjArr = itemObjArr2ObjArr;
    /**
     * 数组转OBJ
     * eg.[[属性KEY1，属性值1], [属性KEY2，属性值2]] => {属性KEY1 : 属性值1, ..}
     * @param kvArr
     * @returns {any|{}}
     */
    function kvArr2KvObj(kvArr) {
        var kvData, kvMap = {};
        for (var i = 0, li = kvArr.length; i < li; i++) {
            kvData = kvArr[i];
            var key = kvData[0];
            var value = kvData[1];
            kvMap[key] = value;
        }
        return kvMap;
    }
    utils.kvArr2KvObj = kvArr2KvObj;
    /**
     * 物品数组转换成对象数组
     * eg. [[itemId, 数量], [itemId, 数量], ...] => [{itemId:itemId, count: count}, {}...]
     * @param kvArr
     */
    function kvArrItems2ObjArr(kvArr) {
        var retArr = [];
        for (var i = 0, li = kvArr.length; i < li; i++) {
            var d = kvArr[i];
            retArr.push({ itemId: d[0], count: d[1] });
        }
        return retArr;
    }
    utils.kvArrItems2ObjArr = kvArrItems2ObjArr;
    /**
     * 获取随机名字
     */
    function getRandomName(sex) {
        var nameData = mo.getJSONWithFileName(gc.cfg_c_nameData);
        var len = Object.keys(nameData).length;
        var firstRandomNumber = 0 | Math.random() * len || 1;
        var firstName = nameData[firstRandomNumber][gc.c_nameData_firstName];
        var secondName = "";
        var secondRandomNumber = 0 | Math.random() * len || 1;
        if (sex == gc.c_prop.sexKey.male) {
            secondName = nameData[secondRandomNumber][gc.c_nameData_maleName];
        }
        else {
            secondName = nameData[secondRandomNumber][gc.c_nameData_femaleName];
        }
        return firstName + secondName || "张德帅";
    }
    utils.getRandomName = getRandomName;
    function filterName(name, sex) {
        if (!name)
            return utils.getRandomName(sex);
        name = name + "";
        var filterArr = ["1758", "68wan", "猎豹"];
        var flag = false;
        for (var i = 0; i < filterArr.length; i++) {
            var f = filterArr[i];
            if (name.indexOf(f) != -1) {
                flag = true;
            }
        }
        if (isNaN(name) && !flag)
            return name;
        return utils.getRandomName(sex);
    }
    utils.filterName = filterName;
    //已万为单位来格式化数字
    function formatByWan(hp, fix) {
        if (fix === void 0) { fix = 1; }
        //亿 万亿 兆 万兆
        var unit = ["万", "亿", "兆", "万兆", "亿兆"];
        var powArrs = [4, 8, 12, 16, 20];
        for (var i = powArrs.length - 1; i >= 0; i--) {
            var n = Math.pow(10, powArrs[i]);
            if (hp >= n) {
                return (hp / n).toFixed(fix) + unit[i];
            }
        }
        if (fix == 0)
            return hp.toFixed(fix);
        return hp.toString();
    }
    utils.formatByWan = formatByWan;
    //已万为单位来格式化数字
    function formatByWan2(num) {
        var leftNum = num;
        var yiNum = leftNum / Math.pow(10, 8) >> 0;
        leftNum -= Math.pow(10, 8) * yiNum;
        var wanNum = leftNum / Math.pow(10, 4) >> 0;
        leftNum -= Math.pow(10, 4) * wanNum;
        var str = "";
        if (yiNum > 0) {
            str += yiNum + "亿";
            if (wanNum > 0) {
                str += wanNum + "万";
            }
        }
        else if (wanNum > 0) {
            str += wanNum + "万";
            if (leftNum > 0) {
                str += leftNum;
            }
        }
        else {
            str += leftNum;
        }
        return str;
    }
    utils.formatByWan2 = formatByWan2;
    /**
     * 将小时转化为x天x小时
     * @param hours
     * @returns {string}
     */
    function formatHour(hours) {
        var d = Math.floor(hours / 24);
        var h = hours % 24;
        return (d > 0 ? d + "天" : "") + (h > 1 / 60 ? h.toFixed(2) + "小时" : "1分钟内");
    }
    utils.formatHour = formatHour;
    //货币类型转换成对应itemId
    function getCurrencyTypeItemId(currencyType) {
        var itemId;
        switch (currencyType) {
            case gc.c_prop.currencyTypeKey.gold:
                itemId = gc.c_prop.spItemIdKey.gold;
                break;
            case gc.c_prop.currencyTypeKey.diamond:
                itemId = gc.c_prop.spItemIdKey.diamond;
                break;
            case gc.c_prop.currencyTypeKey.honor:
                itemId = gc.c_prop.spItemIdKey.honor;
                break;
            case gc.c_prop.currencyTypeKey.prestige:
                itemId = gc.c_prop.spItemIdKey.honor;
                break;
        }
        return itemId;
    }
    utils.getCurrencyTypeItemId = getCurrencyTypeItemId;
})(utils || (utils = {}));

var resHelper;
(function (resHelper) {
    var armPathTemp = "arm_%s.%s";
    var rechargePathTemp = "recharge_%s.%s";
    resHelper.dynamicTemp = "dynamic2/%s_%s.%s";
    var resourceDynamicTemp = "resource/dynamic2/%s_%s.%s";
    var audioTemp = "audio/%s.mp3";
    var fill = "00000";
    var smallPathTemp = "resource/ui2/ui_activity/%s.png";
    /**
     * 动态资源模块映射
     */
    resHelper.dynamic = {
        role: "role",
        hero: "role",
        monster: "role",
        effect: "effect",
        ui: "ui",
        fight: "fight",
        map: "map",
        skill: "skill",
        task: "task",
        item: "item",
        gift: "gift",
        gift_skill: "gift_skill",
        gift_img: "gift_img",
        vip: "vip",
        death: "death",
        buff: "buff",
        icon: "icon",
        event: "event",
        head: "head",
        wing: "wing",
        clothes: "ui_clothes",
        weapon: "ui_weapon",
        ui_wing: "ui_wing",
        recharge: "recharge",
        ui_gboss: "ui_gboss",
        ui_heart: "ui_heart",
        medal: "medal",
        title: "title"
    };
    /**
     * 获取资源名称
     * @param pre
     * @param resId
     * @param post
     * @returns {string}
     */
    function getResName(pre, resId, post) {
        return pre + "_" + mo.STR.fill(resId, "00000") + (post ? "_" + post : "");
    }
    resHelper.getResName = getResName;
    /**
     * 获取动态资源路径
     * @param pre
     * @param resId
     * @param {String|Null} extname
     * @returns {string}
     */
    function getDynamicResPath(pre, resId, extname, post) {
        if (extname) {
            extname = extname.substring(0, 1) == "." ? extname.substring(1) : extname;
        }
        else {
            extname = "png";
        }
        return mo.STR.format(resHelper.dynamicTemp, pre, mo.STR.fill(resId, fill) + (post ? ("_" + post) : ""), extname);
    }
    resHelper.getDynamicResPath = getDynamicResPath;
    function getResourceDynamicResPath(pre, resId, extname, post) {
        if (extname) {
            extname = extname.substring(0, 1) == "." ? extname.substring(1) : extname;
        }
        else {
            extname = "png";
        }
        return mo.STR.format(resourceDynamicTemp, pre, mo.STR.fill(resId, fill) + (post ? ("_" + post) : ""), extname);
    }
    resHelper.getResourceDynamicResPath = getResourceDynamicResPath;
    /**
     * 获取动态cca路径配置
     * @param pre
     * @param resId
     * @returns {{png: string, plist: string, exportJson: string}}
     */
    function getCcaRes(pre, resId) {
        //例如 ui/ui_00001
        var str = pre + "/" + pre + "_" + mo.STR.fill(resId, "00000");
        return {
            png: mo.STR.format(armPathTemp, str + "_texture", "png"),
            plist: mo.STR.format(armPathTemp, str + "_texture", "json"),
            exportJson: mo.STR.format(armPathTemp, str + "_ske", "json")
        };
    }
    resHelper.getCcaRes = getCcaRes;
    /**
     * 根据cca名称获取到cca的路径配置。
     * @param name
     * @returns {{png: string, plist: string, exportJson: string}}
     */
    function getCcaResByName(name) {
        var arr = name.split("_");
        return getCcaRes(arr[0], arr[1]);
    }
    resHelper.getCcaResByName = getCcaResByName;
    /**
     * 获取buff的cca名称
     * @param resId
     * @returns {string}
     */
    function getBuffCcaName(resId) {
        return resHelper.getResName(resHelper.dynamic.buff, resId);
    }
    resHelper.getBuffCcaName = getBuffCcaName;
    /**
     * 获取buff的cca的路径配置
     * @param resId
     * @returns {{png: string, plist: string, exportJson: string}}
     */
    function getBuffCcaRes(resId) {
        return resHelper.getCcaRes(resHelper.dynamic.buff, resId);
    }
    resHelper.getBuffCcaRes = getBuffCcaRes;
    /**
     * 获取技能特效的cca名称
     * @param resId
     * @returns {string}
     */
    function getSkillEffectCcaName(resId) {
        return resHelper.getResName(resHelper.dynamic.effect, resId);
    }
    resHelper.getSkillEffectCcaName = getSkillEffectCcaName;
    /**
     * 获取受击特效的cca的路径配置
     * @param resId
     * @returns {{png: string, plist: string, exportJson: string}}
     */
    function getSkillEffectCcaRes(resId) {
        return resHelper.getCcaRes(resHelper.dynamic.effect, resId);
    }
    resHelper.getSkillEffectCcaRes = getSkillEffectCcaRes;
    function getEffectPath(resId, extname) {
        return resHelper.getResourceDynamicResPath(resHelper.dynamic.effect, resId, extname);
    }
    resHelper.getEffectPath = getEffectPath;
    function getRechargeIconPath(resId) {
        return resHelper.getDynamicResPath(resHelper.dynamic.recharge, resId, "png");
    }
    resHelper.getRechargeIconPath = getRechargeIconPath;
    function getHeroClothesIconPath(displayId) {
        return mo.STR.format(resHelper.dynamicTemp, resHelper.dynamic.clothes, mo.STR.fill(displayId, "00000"), "png");
    }
    resHelper.getHeroClothesIconPath = getHeroClothesIconPath;
    function getHeroWeaponIconPath(displayId) {
        return mo.STR.format(resHelper.dynamicTemp, resHelper.dynamic.weapon, mo.STR.fill(displayId, "00000"), "png");
    }
    resHelper.getHeroWeaponIconPath = getHeroWeaponIconPath;
    function getHeroWingIconPath(displayId) {
        return mo.STR.format(resHelper.dynamicTemp, resHelper.dynamic.ui_wing, mo.STR.fill(displayId, "00000"), "png");
    }
    resHelper.getHeroWingIconPath = getHeroWingIconPath;
    function getBuffIconPath(buffId) {
        var showId;
        var t_buff = mo.getJSONWithFileNameAndID(gc.cfg_t_otherBuff, buffId);
        if (t_buff) {
            showId = t_buff[gc.t_otherBuff_icon];
        }
        if (!showId)
            showId = buffId;
        return mo.STR.format(resHelper.dynamicTemp, resHelper.dynamic.buff, mo.STR.fill(showId, "00000"), "png");
    }
    resHelper.getBuffIconPath = getBuffIconPath;
    /**
     * 获取角色（英雄和怪物）的icon
     * @param resId
     * @returns {string}
     */
    function getRoleIconPath(resId) {
        return mo.STR.format(armPathTemp, "role/role_" + mo.STR.fill(resId, "00000") + "_ico", "png");
    }
    resHelper.getRoleIconPath = getRoleIconPath;
    /**
     * 获取角色（英雄和怪物）半身像路径
     * @param resId
     * @returns {string}
     */
    function getRoleBodyPath(resId) {
        return mo.STR.format(armPathTemp, "role/role_" + mo.STR.fill(resId, "00000") + "_body", "png");
    }
    resHelper.getRoleBodyPath = getRoleBodyPath;
    function getSpecialIconPath(itemId) {
        return 'ico_item_' + mo.STR.fill(itemId, '00000');
    }
    resHelper.getSpecialIconPath = getSpecialIconPath;
    /**
     * 获取ui图标资源
     * @param tempId
     * @returns {*}
     */
    function getUIIconPath(tempId) {
        return 'ico_item_' + mo.STR.fill(tempId, '00000');
    }
    resHelper.getUIIconPath = getUIIconPath;
    /**
     * 获取战斗场景背景资源路径
     * @param resId
     * @returns {string}
     */
    function getFightBgPath(resId) {
        resId = resId + "";
        if (resId.substring(0, 1) == "-")
            resId = resId.substring(1);
        return resHelper.getDynamicResPath(resHelper.dynamic.fight, resId, "jpg");
    }
    resHelper.getFightBgPath = getFightBgPath;
    /**
     * 获取副本地图的json文件的路径
     * @param resId
     * @returns {string}
     */
    function getMapJsonPath(resId) {
        return resHelper.getDynamicResPath(resHelper.dynamic.map, resId, "json");
    }
    resHelper.getMapJsonPath = getMapJsonPath;
    /**
     * 获取技能图标的资源路径
     * @param resId
     * @returns {string}
     */
    function getSkillIconPath(resId) {
        return resHelper.getDynamicResPath(resHelper.dynamic.skill, resId, "png");
    }
    resHelper.getSkillIconPath = getSkillIconPath;
    /**
     * 获取VIP图标的资源路径
     * @param rechargeId
     * @returns {string}
     */
    function getVipIconPath(rechargeId) {
        return resHelper.getDynamicResPath(resHelper.dynamic.vip, rechargeId, "png");
    }
    resHelper.getVipIconPath = getVipIconPath;
    /**
     * 获取ui的音效路径。
     * @param {String|Number} resId
     * @returns {String}
     */
    function getUIAudioPath(resId) {
        return path.join("audio/" + resHelper.getResName(resHelper.dynamic.ui, resId) + ".mp3");
    }
    resHelper.getUIAudioPath = getUIAudioPath;
    function getEventIconPath(iconId) {
        return resHelper.getDynamicResPath(resHelper.dynamic.event, iconId, "png");
    }
    resHelper.getEventIconPath = getEventIconPath;
    function getArmPath(pre, resId) {
        return mo.STR.format(armPathTemp, pre + "/" + pre + "_" + mo.STR.fill(resId, "00000"), "arm");
    }
    resHelper.getArmPath = getArmPath;
    function getBorderByQuality(type, quality) {
        quality = quality || 1; //默认给1
        return (type == 1 ? 'border_' : 'border_2_') + quality;
    }
    resHelper.getBorderByQuality = getBorderByQuality;
    /**
     * 获取物品icon。注意，英雄碎片，获取到的为对应的英雄的头像icon。
     * @param itemId
     * @returns {string}
     */
    function getItemIconPath(itemId) {
        var itemTmp = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
        var resId = itemTmp[gc.t_item_iconId] || itemId;
        //var resId = 99999;
        if (isNaN(parseInt(resId))) {
            return mo.STR.format(resHelper.dynamicTemp, resHelper.dynamic.item, resId, "png");
        }
        else {
            return mo.STR.format(resHelper.dynamicTemp, resHelper.dynamic.item, mo.STR.fill(resId, "000000"), "png");
        }
    }
    resHelper.getItemIconPath = getItemIconPath;
    function getGiftIcon(itemId) {
        var itemTmp = mo.getJSONWithFileNameAndID(gc.cfg_t_talisman, itemId);
        var resId = itemTmp[gc.t_talisman_imgId] || itemId;
        if (isNaN(parseInt(resId))) {
            return mo.STR.format(resHelper.dynamicTemp, resHelper.dynamic.gift_img, resId, "png");
        }
        else {
            return mo.STR.format(resHelper.dynamicTemp, resHelper.dynamic.gift_img, mo.STR.fill(resId, "000000"), "png");
        }
    }
    resHelper.getGiftIcon = getGiftIcon;
    function getGiftIconWordPath(itemId) {
        var itemTmp = mo.getJSONWithFileNameAndID(gc.cfg_t_talisman, itemId);
        var resId = itemTmp[gc.t_talisman_iconId] || itemId;
        if (isNaN(parseInt(resId))) {
            return mo.STR.format(resHelper.dynamicTemp, resHelper.dynamic.gift, resId, "png");
        }
        else {
            return mo.STR.format(resHelper.dynamicTemp, resHelper.dynamic.gift, mo.STR.fill(resId, "000000"), "png");
        }
    }
    resHelper.getGiftIconWordPath = getGiftIconWordPath;
    function getGiftSkillIconPath(skillId) {
        var itemTmp = mo.getJSONWithFileNameAndID(gc.cfg_t_talismanSkill, skillId);
        var resId = itemTmp[gc.t_talismanSkill_icon] || skillId;
        return mo.STR.format(resHelper.dynamicTemp, resHelper.dynamic.gift_skill, resId, "png");
    }
    resHelper.getGiftSkillIconPath = getGiftSkillIconPath;
    function getMonsterHeadIconPath(monsterId) {
        var monster = mo.getJSONWithFileNameAndID(gc.cfg_t_monster, monsterId);
        var headId = monster[gc.t_monster_displayID];
        return getDynamicResPath(resHelper.dynamic.head, headId, "png");
    }
    resHelper.getMonsterHeadIconPath = getMonsterHeadIconPath;
    /**
     * 获得翅膀icon
     * @param wingId
     * @returns {string}
     */
    function getWingIconPath(wingId) {
        var t_wing = mo.getJSONWithFileNameAndID(gc.cfg_t_wing, wingId);
        return resHelper.getDynamicResPath(resHelper.dynamic.wing, t_wing[gc.t_wing_iconId], "png");
    }
    resHelper.getWingIconPath = getWingIconPath;
    /**
     * 获取任务图标的资源路径
     * @param taskId
     * @returns {string}
     */
    function getTaskIconPath(iconId) {
        return resHelper.getDynamicResPath(resHelper.dynamic.task, iconId, "png");
    }
    resHelper.getTaskIconPath = getTaskIconPath;
    /**
     * 获取世界Boss的资源路径
     * @param taskId
     * @returns {string}
     */
    function getWorldBossIconPath(iconId) {
        return resHelper.getDynamicResPath(resHelper.dynamic.ui_gboss, iconId, "png");
    }
    resHelper.getWorldBossIconPath = getWorldBossIconPath;
    /**
     * 通过勋章物品id获取战印图标
     * @param medalId 勋章id
     */
    function getWarPrintIconPath(medalId) {
        var iconId = mo.getJSONWithFileNameAndID(gc.cfg_t_medal, medalId)[gc.t_medal_staIconId];
        return resHelper.getDynamicResPath(resHelper.dynamic.medal, iconId, "png");
    }
    resHelper.getWarPrintIconPath = getWarPrintIconPath;
    /**
     * 获取在聊天界面的称号图标
     * @param medalId
     */
    function getChatTitle(medalId) {
        var iconId = mo.getJSONWithFileNameAndID(gc.cfg_t_medal, medalId)[gc.t_medal_chatIconId];
        return resHelper.getDynamicResPath(resHelper.dynamic.title, iconId, "png");
    }
    resHelper.getChatTitle = getChatTitle;
    function getHeartIconPath(heartId) {
        return resHelper.getDynamicResPath(resHelper.dynamic.ui_heart, "b_" + heartId, "png");
    }
    resHelper.getHeartIconPath = getHeartIconPath;
    function getHeartTitlePath(heartId) {
        return resHelper.getDynamicResPath(resHelper.dynamic.ui_heart, "t_" + heartId, "png");
    }
    resHelper.getHeartTitlePath = getHeartTitlePath;
    function getHeartNamePath(heartId) {
        return resHelper.getDynamicResPath(resHelper.dynamic.ui_heart, "c_" + heartId, "png");
    }
    resHelper.getHeartNamePath = getHeartNamePath;
    function getSmallItemPath(itemId) {
        var itemTmp = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
        var resId = itemTmp[gc.t_item_iconId] || itemId;
        var numStr = resHelper.getResName("small", resId);
        var imgPath = mo.STR.format(smallPathTemp, numStr);
        //console.log("imgPath...."+imgPath);
        return imgPath;
    }
    resHelper.getSmallItemPath = getSmallItemPath;
})(resHelper || (resHelper = {}));

/**
 * Created by lihex on 6/30/15.
 */
var uiHelper;
(function (uiHelper) {
    uiHelper.resIco = {};
    uiHelper.resIco[gc.c_prop.spItemIdKey.gold] = "ico_gold";
    uiHelper.resIco[gc.c_prop.spItemIdKey.honor] = "ico_hornor";
    uiHelper.resIco[gc.c_prop.spItemIdKey.diamond] = "ico_yuanbao";
    uiHelper.resIco[gc.c_prop.spItemIdKey.vitality] = "ico_active";
    //设置资源和数量
    function setResGrp(group, itemId, count) {
        var icon = group.getChildByName('icon');
        var num = group.getChildByName('num');
        var source = uiHelper.resIco[itemId];
        var scale = source ? 1 : 0.5;
        source = source ? source : resHelper.getItemIconPath(itemId);
        icon.source = source;
        if (scale != icon.scaleX) {
            icon.scaleX = scale;
            icon.scaleY = scale;
        }
        num.text = count + "";
    }
    uiHelper.setResGrp = setResGrp;
    //设置vip等级,用户昵称,等级
    function setVipGrp(group, name, lvl, vip) {
        if (vip != null) {
            var grp_vip = group.getChildByName('grp_vip');
            var isVip = parseInt(vip) > 0;
            if (grp_vip && isVip) {
                grp_vip.includeInLayout = isVip;
                grp_vip.visible = isVip;
                var label_vipLvl = grp_vip.getChildByName('label_vipLvl');
                label_vipLvl.text = vip + "";
            }
        }
        var label_name = group.getChildByName('label_name');
        label_name.text = name;
        var label_level = group.getChildByName('label_level');
        label_level.text = lvl + "";
    }
    uiHelper.setVipGrp = setVipGrp;
    /**
     * 设置物品列表
     * @param group
     * @param items 数组,[{itemId:xxx,count:xxx},{itemId:xxx,count:xxx}, ...]
     */
    function setItemsGrp(group, items) {
        //重置物品列表:隐藏ico_item组件
        uiHelper.resetItemsGrp(group, "ico_item");
        var item, ico_item;
        for (var i = 0, li = items.length; i < li; i++) {
            item = items[i]; //{itemId:xxx, count:xxx}
            ico_item = group.getChildByName('ico_item' + i);
            if (ico_item) {
                ico_item.visible = true;
                ico_item.includeInLayout = true;
                ico_item.setData(item);
            }
        }
    }
    uiHelper.setItemsGrp = setItemsGrp;
    //grp中的元素重置
    function resetItemsGrp(group, prefix) {
        var i = 0, ico_item;
        ico_item = group.getChildByName(prefix + i);
        while (ico_item) {
            ico_item.visible = false;
            ico_item.includeInLayout = false;
            ++i;
            ico_item = group.getChildByName(prefix + i);
        }
    }
    uiHelper.resetItemsGrp = resetItemsGrp;
    //设置星星数量
    function setStarGrp(group, star) {
        uiHelper.resetItemsGrp(group, "img_star");
        var img_star;
        for (var i = 0, li = star; i < li; i++) {
            img_star = group.getChildByName('img_star' + i);
            if (img_star) {
                img_star.visible = true;
                img_star.includeInLayout = true;
            }
        }
    }
    uiHelper.setStarGrp = setStarGrp;
    uiHelper.qualityColorMap = {
        1: 0xffffff,
        2: 0x00b654,
        3: 0x1e6fff,
        4: 0x6800ca,
        5: 0xd55000,
        6: 0xd2000f //红色
    };
    //获得品阶颜色
    function getColorByQuality(q) {
        return uiHelper.qualityColorMap[q] || 0xffffff;
    }
    uiHelper.getColorByQuality = getColorByQuality;
    //获得玩家名颜色
    function getUserNameColor(pkValue) {
        var cfg = mo.getJSONWithFileName(gc.cfg_c_game)[gc.id_c_game.pkOutCfg];
        /*    参数6：黄名需要pk值
         参数7：红名需要pk值*/
        var color = 0xffffff;
        if (pkValue >= cfg[5])
            color = 0xfff000;
        if (pkValue >= cfg[6])
            color = 0xff0000;
        return color;
    }
    uiHelper.getUserNameColor = getUserNameColor;
    //------------部位资源 开始-----------------
    uiHelper.partRes = [
        ["ntc_ico_weapon", "txt_part_weapon", "txt_part_weapon"],
        ["ntc_ico_clothes", "txt_part_body", "txt_part_weapon"],
        ["ntc_ico_bracelet", "txt_part_bracelet", "txt_part_weapon"],
        ["ntc_ico_ring", "txt_part_ring", "txt_part_weapon"],
        ["ntc_ico_ring_mb", "txt_part_ring_mb", "txt_part_weapon"],
        ["ntc_ico_ring_recover", "txt_part_ring_recover", "txt_part_weapon"],
        ["ntc_ico_ring_body", "txt_part_ring_protect", "txt_part_weapon"],
        ["ntc_ico_ring_hurt", "txt_part_ring_hurt", "txt_part_weapon"],
        ["ntc_ico_ring", "txt_part_ring", "txt_part_weapon"],
        ["ntc_ico_bracelet", "txt_part_bracelet", "txt_part_weapon"],
        ["ntc_ico_helmet", "txt_part_head", "txt_part_weapon"],
        ["ntc_ico_necklace", "txt_part_necklace", "txt_part_weapon"]
    ];
    function getPartRes(part) {
        return uiHelper.partRes[parseInt(part)];
    }
    uiHelper.getPartRes = getPartRes;
    //------------部位资源 结束-----------------
    //type:0为圆形，1为方形
    function getHeroIcon(iconId, type) {
        if (type === void 0) { type = 1; }
        return mo.STR.format("avatar_%s_%s_%s", Math.floor((iconId - 1) / 2) + 1, iconId % 2, type);
    }
    uiHelper.getHeroIcon = getHeroIcon;
    //播UI特效
    function playUIEffect(effectNode, play) {
        if (!effectNode)
            return;
        if (play) {
            effectNode.visible = true;
            effectNode.play(-1);
        }
        else {
            effectNode.visible = false;
            effectNode.gotoAndStop(1);
        }
    }
    uiHelper.playUIEffect = playUIEffect;
    function setLabelGreenOrRed(labelNode, b) {
        labelNode.textColor = b ? 0x00ff00 : 0xff0000;
    }
    uiHelper.setLabelGreenOrRed = setLabelGreenOrRed;
    function setEventTime(label, startTime, endTime) {
        label.text = mo.STR.format("%s--%s", startTime.toFormat("MM月DD日HH24:MI"), endTime.toFormat("MM月DD日HH24:MI"));
    }
    uiHelper.setEventTime = setEventTime;
    var ScrollerHelper = (function () {
        function ScrollerHelper(list) {
            this._sc = list.scroller;
            this._sc.addEventListener(egret.Event.CHANGE, this.chgFunc, this);
            this._sc.addEventListener(egret.gui.UIEvent.CHANGE_END, this.chgEnd, this);
        }
        var d = __define,c=ScrollerHelper,p=c.prototype;
        p.chgFunc = function (e) {
            var self = this;
            if (self._isPause) {
                if (self._scrollTopOnPause)
                    e.target.scrollTop = self._scrollTopOnPause;
                if (self._scrollLeftOnPause)
                    e.target.scrollLeft = self._scrollLeftOnPause;
            }
        };
        p.chgEnd = function () {
            this._isPause = false;
            this._scrollLeftOnPause = null;
            this._scrollTopOnPause = null;
        };
        p.pauseScrollV = function () {
            this._isPause = true;
            this._scrollTopOnPause = this._sc.scrollTop;
        };
        p.pauseScrollH = function () {
            this._isPause = true;
            this._scrollLeftOnPause = this._sc.scrollLeft;
        };
        p.resumeScroll = function () {
            this.chgEnd();
        };
        p.doDtor = function () {
            this._sc.removeEventListener(egret.Event.CHANGE, this.chgFunc, this);
            this._sc.removeEventListener(egret.gui.UIEvent.CHANGE_END, this.chgEnd, this);
            this._sc = null;
        };
        return ScrollerHelper;
    })();
    uiHelper.ScrollerHelper = ScrollerHelper;
    egret.registerClass(ScrollerHelper,"uiHelper.ScrollerHelper");
})(uiHelper || (uiHelper = {}));

/**
 * Created by Administrator on 2015/9/22.
 */
var gd;
(function (gd) {
    var CommonUtils = (function () {
        function CommonUtils() {
        }
        var d = __define,c=CommonUtils,p=c.prototype;
        /**
         * 获取最后一次的刷新具体时间,默认5点
         * @param hours
         * @returns {Date}
         */
        p.getCurLastRefreshTime = function (hours) {
            hours = hours || 5;
            var curHour = Date.newDate().getHours();
            var reTime = null;
            if (curHour < hours) {
                reTime = Date.newDate().addDays(-1).clearTime().addHours(hours);
            }
            else {
                reTime = Date.newDate().clearTime().addHours(hours);
            }
            return reTime;
        };
        /**
         * 计算每日刷新次数
         * @param reNum
         * @param lastReplayTime
         * @param maxNum
         * @returns {any[]} [最终次数,最终时间]
         */
        p.calRefreshData = function (reNum, lastReplayTime, maxNum) {
            //计算每日购买次数
            var curLastTime = gd.commonUtils.getCurLastRefreshTime();
            if (!lastReplayTime || !curLastTime.equalsDay(new Date(lastReplayTime))) {
                reNum = maxNum; //参数2：竞技场每天挑战次数
                lastReplayTime = curLastTime;
            }
            return [reNum, lastReplayTime];
        };
        return CommonUtils;
    })();
    gd.CommonUtils = CommonUtils;
    egret.registerClass(CommonUtils,"gd.CommonUtils");
    gd.commonUtils = new CommonUtils();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/9/22.
 */
var gd;
(function (gd) {
    var HeroUtils = (function () {
        function HeroUtils() {
        }
        var d = __define,c=HeroUtils,p=c.prototype;
        //添加属性
        p.addPropValue = function (prop, key, value) {
            switch (key) {
                case gc.c_prop.heroPropKey.maxHp:
                    prop.maxHp += value;
                    break;
                case gc.c_prop.heroPropKey.maxHpScale:
                    prop.maxHpScale += value;
                    break;
                case gc.c_prop.heroPropKey.attack:
                    prop.attack += value;
                    break;
                case gc.c_prop.heroPropKey.attackScale:
                    prop.attackScale += value;
                    break;
                case gc.c_prop.heroPropKey.defence:
                    prop.defence += value;
                    break;
                case gc.c_prop.heroPropKey.defenceScale:
                    prop.defenceScale += value;
                    break;
                case gc.c_prop.heroPropKey.magicDefence:
                    prop.magicDefence += value;
                    break;
                case gc.c_prop.heroPropKey.magicDefenceScale:
                    prop.magicDefenceScale += value;
                    break;
                case gc.c_prop.heroPropKey.hit:
                    prop.hit += value;
                    break;
                case gc.c_prop.heroPropKey.hitScale:
                    prop.hitScale += value;
                    break;
                case gc.c_prop.heroPropKey.dodge:
                    prop.dodge += value;
                    break;
                case gc.c_prop.heroPropKey.dodgeScale:
                    prop.dodgeScale += value;
                    break;
                case gc.c_prop.heroPropKey.critical:
                    prop.critical += value;
                    break;
                case gc.c_prop.heroPropKey.criticalScale:
                    prop.criticalScale += value;
                    break;
                case gc.c_prop.heroPropKey.disCritical:
                    prop.disCritical += value;
                    break;
                case gc.c_prop.heroPropKey.disCriticalScale:
                    prop.disCriticalScale += value;
                    break;
                case gc.c_prop.heroPropKey.luckyValue:
                    prop.luckyValue += value;
                    break;
                case gc.c_prop.heroPropKey.luckyValueScale:
                    prop.luckyValueScale += value;
                    break;
                case gc.c_prop.heroPropKey.moveSpeed:
                    prop.moveSpeed += value;
                    break;
                case gc.c_prop.heroPropKey.moveSpeedScale:
                    prop.moveSpeedScale += value;
                    break;
                case gc.c_prop.heroPropKey.attackInterval:
                    prop.attackInterval += value;
                    break;
                case gc.c_prop.heroPropKey.attackIntervalScale:
                    prop.attackIntervalScale += value;
                    break;
                case gc.c_prop.heroPropKey.damageIncrease:
                    prop.damageIncrease += value;
                    break;
                case gc.c_prop.heroPropKey.damageDecrease:
                    prop.damageDecrease += value;
                    break;
                case gc.c_prop.heroPropKey.benumbPro:
                    prop.benumbPro += value;
                    break;
                case gc.c_prop.heroPropKey.disBenumbPro:
                    prop.disBenumbPro += value;
                    break;
                case gc.c_prop.heroPropKey.poisoningRecoveryProb:
                    prop.poisoningRecoveryProb += value;
                    break;
                case gc.c_prop.heroPropKey.benumbProSpan:
                    prop.benumbProSpan += value;
                    break;
                case gc.c_prop.heroPropKey.reviveCount:
                    prop.reviveCount += value;
                    break;
                case gc.c_prop.heroPropKey.reviveHPScale:
                    prop.reviveHPScale += value;
                    break;
                case gc.c_prop.heroPropKey.maxHp2:
                    prop.maxHp2 += value;
                    break;
                case gc.c_prop.heroPropKey.disMaxHp2:
                    prop.disMaxHp2 += value;
                    break;
                case gc.c_prop.heroPropKey.maxHpTemp:
                    prop.maxHpTemp += value;
                    break;
                case gc.c_prop.heroPropKey.attackTemp:
                    prop.attackTemp += value;
                    break;
                case gc.c_prop.heroPropKey.defenceTemp:
                    prop.defenceTemp += value;
                    break;
                case gc.c_prop.heroPropKey.magicDefenceTemp:
                    prop.magicDefenceTemp += value;
                    break;
                case gc.c_prop.heroPropKey.hitTemp:
                    prop.hitTemp += value;
                    break;
                case gc.c_prop.heroPropKey.dodgeTemp:
                    prop.dodgeTemp += value;
                    break;
                case gc.c_prop.heroPropKey.criticalTemp:
                    prop.criticalTemp += value;
                    break;
                case gc.c_prop.heroPropKey.disCriticalTemp:
                    prop.disCriticalTemp += value;
                    break;
                case gc.c_prop.heroPropKey.luckyValueTemp:
                    prop.luckyValueTemp += value;
                    break;
                case gc.c_prop.heroPropKey.moveSpeedTemp:
                    prop.moveSpeedTemp += value;
                    break;
                case gc.c_prop.heroPropKey.attackIntervalTemp:
                    prop.attackIntervalTemp += value;
                    break;
                case gc.c_prop.heroPropKey.damageIncreaseTemp:
                    prop.damageIncreaseTemp += value;
                    break;
                case gc.c_prop.heroPropKey.damageDecreaseTemp:
                    prop.damageDecreaseTemp += value;
                    break;
            }
        };
        p.getPropValue = function (prop, key, value) {
        };
        return HeroUtils;
    })();
    gd.HeroUtils = HeroUtils;
    egret.registerClass(HeroUtils,"gd.HeroUtils");
    gd.heroUtils = new HeroUtils();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/6/1.
 */
var gd;
(function (gd) {
    var UserUtils = (function () {
        function UserUtils() {
        }
        var d = __define,c=UserUtils,p=c.prototype;
        //获取某种类型的物品数量
        p.getNumOfItems = function (items, type) {
            var num = 0;
            if (!items)
                return num;
            var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            for (var key in items) {
                var locId = key;
                var locItemData = t_item[locId];
                if (!locItemData)
                    continue;
                var locNum = parseInt(items[key]);
                if (locItemData[gc.t_item_type] == type) {
                    num += locNum;
                }
            }
            return num;
        };
        //获取新背包数据  delBagItems：所要删除的items{}   bagItems：所要添加的items{}
        p.getNewBag = function (delBagItems, bagItems) {
            var bag = gd.userCtrl.getBag();
            var bag1 = JSON.parse(JSON.stringify(bag));
            for (var key in delBagItems) {
                var value = parseInt(bag1[key]) || 0;
                bag1[key] = value - parseInt(delBagItems[key]);
                if (bag1[key] <= 0)
                    delete bag1[key];
            }
            for (var key in bagItems) {
                var value = parseInt(bag1[key]) || 0;
                bag1[key] = value + parseInt(bagItems[key]);
            }
            return bag1;
        };
        p.getNewBag4update = function (updatebagItems) {
            var bag = gd.userCtrl.getBag();
            var bag1 = JSON.parse(JSON.stringify(bag));
            for (var key in updatebagItems) {
                bag1[key] = parseInt(updatebagItems[key]);
                if (bag1[key] <= 0)
                    delete bag1[key];
            }
            return bag1;
        };
        //获取新装备背包数据  delEquipBagArr：所要删除的装备id数组【】   equipBagItems：所要添加的装备items{}
        p.getNewEquipBag = function (delEquipBagArr, equipBagItems) {
            var equipBag = gd.userCtrl.getEquipBag();
            var equipBag1 = JSON.parse(JSON.stringify(equipBag));
            for (var i = 0; i < delEquipBagArr.length; i++) {
                delete equipBag1[delEquipBagArr[i]];
                delete gd.userCtrl._equipBk[delEquipBagArr[i]];
            }
            for (var key in equipBagItems) {
                equipBag1[key] = equipBagItems[key];
            }
            return equipBag1;
        };
        //装备评分计算        templateId:装备模板id  randomArr:额外属性数组
        p.getEquipGrade = function (templateId, randomArr, arr) {
            var self = this;
            var t_itemEquip = mo.getJSONWithFileName(gc.cfg_t_itemEquip);
            var gradeBase = 0;
            if (arr) {
                var propertysArr = [];
                var propertys = t_itemEquip[templateId][gc.t_itemEquip_propertys];
                for (var i = 0; i < arr.length; i++) {
                    propertysArr.push(propertys[arr[i]]);
                }
                gradeBase = self._calEquipGrade(propertysArr);
            }
            else {
                gradeBase = t_itemEquip[templateId][gc.t_itemEquip_gradeBase]; //模板装备基础评分z
            }
            gradeBase += self._calEquipGrade(randomArr);
            return gradeBase;
        };
        p._calEquipGrade = function (randomArr) {
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var extraGrade = 0; //额外评分
            var equipGrade = 0; //装备附加参数
            for (var i = 0; i < randomArr.length; i++) {
                var abilityId = randomArr[i][0]; //属性id
                var abilityValue = randomArr[i][1]; //属性值
                switch (abilityId) {
                    case gc.c_prop.equipPropKey.maxHpTemp:
                        equipGrade = c_game[gc.id_c_game.equipGrade][0];
                        break;
                    case gc.c_prop.equipPropKey.attackTemp:
                        equipGrade = c_game[gc.id_c_game.equipGrade][1];
                        break;
                    case gc.c_prop.equipPropKey.defenceTemp:
                        equipGrade = c_game[gc.id_c_game.equipGrade][2];
                        break;
                    case gc.c_prop.equipPropKey.magicDefenceTemp:
                        equipGrade = c_game[gc.id_c_game.equipGrade][3];
                        break;
                    case gc.c_prop.equipPropKey.hitTemp:
                        equipGrade = c_game[gc.id_c_game.equipGrade][4];
                        break;
                    case gc.c_prop.equipPropKey.dodgeTemp:
                        equipGrade = c_game[gc.id_c_game.equipGrade][5];
                        break;
                    case gc.c_prop.equipPropKey.criticalTemp:
                        equipGrade = c_game[gc.id_c_game.equipGrade][6];
                        break;
                    case gc.c_prop.equipPropKey.disCriticalTemp:
                        equipGrade = c_game[gc.id_c_game.equipGrade][7];
                        break;
                }
                extraGrade += equipGrade * abilityValue;
            }
            return extraGrade;
        };
        p.isLoot = function (itemId) {
            var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            var itemData = t_item[itemId];
            if (!itemData)
                return false;
            var lootType = itemData[gc.t_item_lootType] || 0;
            if (lootType == 0)
                return true;
            var lootTypeArr = gd.userCtrl.getLootTypeArr();
            if (!lootTypeArr)
                return false;
            if (lootTypeArr.indexOf(lootType) > -1) {
                return true;
            }
            else {
                return false;
            }
        };
        p.getLoots = function (sheetLoots) {
            if (sheetLoots instanceof Array) {
                var loots = [];
                for (var i = 0; i < sheetLoots.length; ++i) {
                    if (sheetLoots[i] instanceof Array) {
                        if (this.isLoot(sheetLoots[i][0])) {
                            loots.push([sheetLoots[i][0], sheetLoots[i][1]]);
                        }
                    }
                    else if (sheetLoots[i] instanceof Object) {
                        if (this.isLoot(sheetLoots[i].itemId)) {
                            loots.push({ itemId: sheetLoots[i].itemId, count: sheetLoots[i].count });
                        }
                    }
                    else {
                        if (this.isLoot(sheetLoots[i])) {
                            loots.push(sheetLoots[i]);
                        }
                    }
                }
                return loots;
            }
            else if (sheetLoots instanceof Object) {
                var lootObj = {};
                for (var key in sheetLoots) {
                    if (this.isLoot(key)) {
                        lootObj[key] = sheetLoots[key];
                    }
                }
                return lootObj;
            }
            else {
            }
        };
        return UserUtils;
    })();
    gd.UserUtils = UserUtils;
    egret.registerClass(UserUtils,"gd.UserUtils");
    gd.userUtils = new UserUtils();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/5/27.
 */
var gd;
(function (gd) {
    var AccountCtrl = (function (_super) {
        __extends(AccountCtrl, _super);
        function AccountCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=AccountCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.AccountEntity;
        };
        //获取id
        p.getId = function () {
            if (!this._data)
                return 0;
            return this._data[gc.dsConsts.AccountEntity.id];
        };
        //获取状态
        p.getStatus = function () {
            if (!this._data)
                return 0;
            return this._data[gc.dsConsts.AccountEntity.status];
        };
        //获取sdk数据
        p.getSdkData = function () {
            if (!this._data)
                return {};
            return this._data[gc.dsConsts.AccountEntity.sdkData];
        };
        //判断是否游客
        p.isGuest = function () {
            var self = this;
            var sdkData = self.getSdkData();
            var isGuest = false;
            /*            if(userCtrl.getData()&&userCtrl.getLvl()>50){
                            isGuest = false;
                        }else {
                            if(sdkData["is_guest"]) isGuest = true;
                        }*/
            if (sdkData["is_guest"] == "1")
                isGuest = true;
            return isGuest;
        };
        //获取登录的key
        p.getLoginKey = function () {
            return this.loginKey;
        };
        AccountCtrl.login = function (name, pwd, channelId, cb, target) {
            var self = this;
            var argsObj = gc.iface.h_account_login_args, args = {};
            args[argsObj.name] = name;
            args[argsObj.pwd] = pwd;
            args[argsObj.channelId] = channelId;
            mo.requestWaiting4Http(gc.iface.h_account_login, args, function (data) {
                //ws.recordEvent("登陆成功的人数", 1);
                var accountData = data[gc.dsConsts.ExAccount.account];
                gd.accountCtrl.loginKey = data[gc.dsConsts.ExAccount.loginKey];
                gd.accountCtrl.init(accountData);
                if (cb)
                    cb.call(target, accountData);
            });
        };
        AccountCtrl.loginBySdk = function (channelId, sdkData, cb, target) {
            var self = this;
            var args = {};
            var argsKeys = gc.iface.h_account_loginBySdk_args;
            args[argsKeys.channelId] = channelId;
            args[argsKeys.sdkData] = sdkData;
            args[argsKeys.deviceId] = mo.getDeviceId();
            //注意了，同步账号比较特殊，需要调用的是request4Http接口
            mo.requestWaiting4Http(gc.iface.h_account_loginBySdk, args, function (data) {
                //ws.recordEvent("登陆成功的人数", 1);
                var accountData = data[gc.dsConsts.ExAccount.account];
                gd.accountCtrl.loginKey = data[gc.dsConsts.ExAccount.loginKey];
                gd.accountCtrl.init(accountData);
                if (cb)
                    cb.call(target, accountData);
            });
        };
        //注册
        AccountCtrl.registerAccount = function (name, pwd, channelId, cb, target) {
            var self = this;
            var argsObj = gc.iface.h_account_register_args, args = {};
            args[argsObj.name] = name;
            args[argsObj.pwd] = pwd;
            args[argsObj.channelId] = channelId;
            args[argsObj.deviceId] = mo.getDeviceId();
            mo.requestWaiting4Http(gc.iface.h_account_register, args, function (data) {
                //ws.recordEvent("注册帐号的人数", 1);
                var accountData = data[gc.dsConsts.ExAccount.account];
                gd.accountCtrl.loginKey = data[gc.dsConsts.ExAccount.loginKey];
                gd.accountCtrl.init(accountData);
                if (cb)
                    cb.call(target, accountData);
            });
        };
        return AccountCtrl;
    })(mo.DataController);
    gd.AccountCtrl = AccountCtrl;
    egret.registerClass(AccountCtrl,"gd.AccountCtrl");
    gd.accountCtrl = AccountCtrl.getInstance();
})(gd || (gd = {}));

var gd;
(function (gd) {
    var ActivityCtrl = (function (_super) {
        __extends(ActivityCtrl, _super);
        function ActivityCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=ActivityCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.AccountEntity;
            this._dataList = [];
        };
        /**************************************************************首充*********************************************************************/
        //是否已经领取首充
        p.hasReceiveFirstRecharge = function () {
            var self = this;
            var fData = self.getFirstRecharge();
            if (!fData)
                return true;
            var id = self.getActivityValue(fData, gc.dsConsts.ActivityEntity.id);
            var receiveData = self.getReceiveData(id);
            if (receiveData[0])
                return true;
            return false;
        };
        /**
         * 是否已经充过值了。
         * @returns {boolean}
         */
        p.hasRecharged = function () {
            return gd.rechargeCtrl.getAllCostRMB() > 0;
        };
        /**
         * 获取首冲信息
         * @returns {gc.dsConsts.ExActivity}
         */
        p.getFirstRecharge = function () {
            var self = this;
            var exActivity = self._getExActivityByType(gc.c_prop.activityTypeKey.firstRecharge);
            return exActivity;
        };
        p.getFirstRechargeItems = function () {
            var self = this;
            var exActivity = self.getFirstRecharge();
            return exActivity[gc.dsConsts.ExActivity.activityItems][0][gc.dsConsts.ActivityItem.items];
        };
        /**
         * 获取累充领取状态
         * @param id
         * @param index
         * @returns {number} 0:已经领取，1：可领取，2:不可领取
         */
        p.getAllChargeCountStatus = function (id, index) {
            var self = this;
            var exActivity = self._getExActivityById(id);
            var receiveData = self.getReceiveData(id);
            var activityItems = exActivity[gc.dsConsts.ExActivity.activityItems];
            var allRecharge = exActivity[gc.dsConsts.ExActivity.allRecharge];
            var itemData = activityItems[index];
            var needCount = itemData[gc.dsConsts.ActivityItem.rmb] || 0;
            //判断是否可以领取
            //判断累充钻石是否达到
            if (allRecharge < needCount)
                return 2;
            //领取次数
            var receiveCount = receiveData[index] || 0;
            //未领取过，则可领取
            if (receiveCount <= 0)
                return 1;
            return 0;
        };
        /**
         * 领取首充礼包。
         * @param cb
         * @param target
         */
        p.receiveFirstRecharge = function (cb, target) {
            var self = this;
            if (!self.hasRecharged()) {
                return mo.showMsg(gc.id_c_msgCode.cantGetNoCharge);
            }
            if (self.hasReceiveFirstRecharge())
                return mo.showMsg("首充礼包已经领过，不能再领取！");
            //ws.recordEvent("领取首充奖励次数", 1);
            var fData = self.getFirstRecharge();
            var id = self.getActivityValue(fData, gc.dsConsts.ActivityEntity.id);
            self.receive(id, 0, function () {
                self.pushNotify(self.__class.ON_FIRST_REWARD_RECEIVED);
                cb.call(target);
            }, self);
        };
        /**************************************************************七天*********************************************************************/
        /**
         * 获取7天登录领取状态
         * @param index
         * @returns {number} 0:已经领取，1：可领取，2:不可领取
         */
        p.getSevenLoginStatus = function (index) {
            var self = this;
            var exActivity = self._getExActivityByType(gc.c_prop.activityTypeKey.sevenLogin);
            var id = self.getActivityValue(exActivity, gc.dsConsts.ActivityEntity.id);
            var receiveData = self.getReceiveData(id);
            if (receiveData.length <= 0) {
                if (index == 0)
                    return 1;
                else
                    return 2;
            }
            var lasDay = receiveData[receiveData.length - 1];
            lasDay = new Date(lasDay);
            if (index > receiveData.length) {
                return 2;
            }
            //大于当前天数，不可领取
            if (index < receiveData.length) {
                return 0;
            }
            else {
                if (!lasDay.equalsDay(Date.newDate())) {
                    return 1;
                }
                else {
                    return 2;
                }
            }
            /*
                        //当前天数判断是否可以领取
                        if(index==receiveData.length){
                            var receiveTime = receiveData[index-1];
                            if(!receiveTime) {
                                return 1;
                            }
                            receiveTime = new Date(receiveTime);
                            if(!receiveTime.equalsDay(Date.newDate())){
                                return 1;
                            }
                        }*/
            return 0;
        };
        /**************************************************************签到*********************************************************************/
        /**
         * 获取签到信息
         * @returns {gc.dsConsts.ExActivity}
         */
        p.getSignActivity = function () {
            var self = this;
            var exActivity = self._getExActivityByType(gc.c_prop.activityTypeKey.sign);
            return exActivity;
        };
        //获取签到物品
        p.getSignItems = function () {
            var self = this;
            var exActivity = self.getSignActivity();
            if (!exActivity)
                return {};
            var activity = exActivity[gc.dsConsts.ExActivity.activity];
            if (!activity)
                return {};
            var signItems = activity[gc.dsConsts.ActivityEntity.exValues];
            return signItems;
        };
        /**************************************************************神秘商店*********************************************************************/
        /**
         * 神秘商店购买礼包
         * @param activityId 活动id
         * @param index 栏目项
         * @param cb
         * @param target
         * @return [是否暴击,获得积分]
         */
        p.buyMysterShop = function (activityId, index, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_activity_buyMysterShop_args;
            var args = {};
            args[argKeys.activityId] = activityId;
            args[argKeys.index] = index;
            var currencyType = 0;
            var consume = 999999;
            var cfg_c_mysterShop = mo.getJSONWithFileName(gc.cfg_c_mysterShop);
            var exActivity = self._getExActivityByType(gc.c_prop.activityTypeKey.mysterShop);
            if (!exActivity)
                return mo.showMsg(gc.id_c_msgCode.activitiesEnd);
            var activity = exActivity[gc.dsConsts.ExActivity.activity];
            if (!activity)
                return mo.showMsg(gc.id_c_msgCode.activitiesEnd);
            var exValues = activity[gc.dsConsts.ActivityEntity.exValues];
            if (!exValues[0])
                return mo.showMsg("参数错误");
            var mysterShop = cfg_c_mysterShop[exValues[0]];
            if (!mysterShop)
                return mo.showMsg("参数错误");
            switch (index) {
                case 0:
                    var giftBag1 = mysterShop[gc.c_mysterShop_giftBag1];
                    currencyType = giftBag1[2];
                    consume = giftBag1[3];
                    break;
                case 1:
                    var giftBag2 = mysterShop[gc.c_mysterShop_giftBag2];
                    currencyType = giftBag2[2];
                    consume = giftBag2[3];
                    break;
            }
            if (currencyType == 1) {
                if (gd.userCtrl.getGold() < consume) {
                    gd.userCtrl.noGolds(function () {
                        self.buyMysterShop(activityId, index, cb, target);
                    }, self);
                    return;
                }
            }
            else if (currencyType == 2) {
                if (gd.userCtrl.getDiamond() < consume)
                    return mo.showMsg(gc.id_c_msgCode.noDiamond);
            }
            else {
                return mo.showMsg("参数错误");
            }
            mo.requestWaiting4Server(gc.iface.a_activity_buyMysterShop, args, function (data) {
                var userData = data[gc.dsConsts.ExActivityData.userData] || {};
                var bagItems = data[gc.dsConsts.ExActivityData.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExActivityData.equipBagItems] || {};
                var mysterShopArr = data[gc.dsConsts.ExActivityData.mysterShopArr] || [];
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                self.getInfo(function () {
                    self.pushNotify(self.__class.ACTIVITY_OP, {});
                }, self);
                cb.call(target, mysterShopArr);
            });
        };
        p.buyAppMysterShop = function (activityId, index, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_activity_buyMysterShop_args;
            var args = {};
            args[argKeys.activityId] = activityId;
            args[argKeys.index] = index;
            var currencyType = 0;
            var consume = 999999;
            var cfg_c_mysterShop = mo.getJSONWithFileName(gc.cfg_c_mysterShop);
            var exActivity = self._getExActivityByType(gc.c_prop.activityTypeKey.appMysterShop);
            if (!exActivity)
                return mo.showMsg(gc.id_c_msgCode.activitiesEnd);
            var activity = exActivity[gc.dsConsts.ExActivity.activity];
            if (!activity)
                return mo.showMsg(gc.id_c_msgCode.activitiesEnd);
            var exValues = activity[gc.dsConsts.ActivityEntity.exValues];
            if (!exValues[0])
                return mo.showMsg("参数错误");
            var mysterShop = cfg_c_mysterShop[exValues[0]];
            if (!mysterShop)
                return mo.showMsg("参数错误");
            switch (index) {
                case 0:
                    var giftBag1 = mysterShop[gc.c_mysterShop_giftBag1];
                    currencyType = giftBag1[2];
                    consume = giftBag1[3];
                    break;
                case 1:
                    var giftBag2 = mysterShop[gc.c_mysterShop_giftBag2];
                    currencyType = giftBag2[2];
                    consume = giftBag2[3];
                    break;
            }
            if (currencyType == 1) {
                if (gd.userCtrl.getGold() < consume) {
                    gd.userCtrl.noGolds(function () {
                        self.buyMysterShop(activityId, index, cb, target);
                    }, self);
                    return;
                }
            }
            else if (currencyType == 2) {
                if (gd.userCtrl.getDiamond() < consume)
                    return mo.showMsg(gc.id_c_msgCode.noDiamond);
            }
            else {
                return mo.showMsg("参数错误");
            }
            mo.requestWaiting4Server(gc.iface.a_activity_buyMysterShop, args, function (data) {
                var userData = data[gc.dsConsts.ExActivityData.userData] || {};
                var bagItems = data[gc.dsConsts.ExActivityData.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExActivityData.equipBagItems] || {};
                var mysterShopArr = data[gc.dsConsts.ExActivityData.mysterShopArr] || [];
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                self.getInfo(function () {
                    self.pushNotify(self.__class.ACTIVITY_OP, {});
                }, self);
                cb.call(target, mysterShopArr);
            });
        };
        //获取神秘商店数据 activityId:活动id  startTime:活动开始时间  endTime：活动结束时间
        //return  [积分,[领取次数,领取次数,领取次数]]
        p.getMysterShopArr = function (activityId, startTime, endTime) {
            var self = this;
            var activity = gd.userCtrl.getActivity()[activityId];
            var returnArr = [];
            if (!activity) {
                returnArr = [0, []]; //[积分,[领取次数,领取次数,领取次数],积分最后获得时间]
            }
            else {
                if (activity[2]) {
                    var actTime = Date.newDate(activity[2]);
                    if (startTime && (Date.newDate(startTime).isAfter(actTime) || Date.newDate(endTime).isBefore(actTime))) {
                        returnArr = [0, []];
                    }
                    else {
                        returnArr = [activity[0], activity[1]];
                    }
                }
            }
            return returnArr;
        };
        p.exChangeMysterShop = function (activityId, index, cb, target) {
            var self = this;
            self.receive(activityId, index, function () {
                mo.showMsg(gc.id_c_msgCode.redeemRewardMail);
                cb.call(target);
            }, self);
        };
        /**************************************************************探宝*********************************************************************/
        /**
         * 获取探宝信息
         * @returns {gc.dsConsts.ExActivity}
         */
        p.getLotteryActivity = function () {
            var self = this;
            var exActivity = self._getExActivityByType(gc.c_prop.activityTypeKey.lottery);
            return exActivity;
        };
        /**
         * 探宝次数
         * @param index  1,10
         * @param cb
         * @returns {Array}  [{"id":num,...},..]
         */
        p.lottery = function (index, cb, cbtx) {
            var self = this;
            var fData = self.getLotteryActivity();
            if (!fData)
                return cb();
            var ownDiamond = gd.userCtrl.getDiamond();
            var costDiamond = self.getLotteryCost(index);
            if (index == 1 || index == 10) {
                if (ownDiamond < costDiamond)
                    return mo.showMsg(gc.id_c_msgCode.noDiamond); //钻石不足
            }
            else {
                return mo.showMsg("参数错误！");
            }
            //判断钻石1
            var id = self.getActivityValue(fData, gc.dsConsts.ActivityEntity.id);
            self.receive(id, index, function (data) {
                var lotteryItemsArr = data[gc.dsConsts.ExActivityData.lotteryItemsArr] || [];
                cb.call(cbtx, lotteryItemsArr);
            }, self);
        };
        p.getLotteryCost = function (index) {
            var self = this;
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var disCount = cfg_c_game[gc.id_c_game.lotteryCostCfg][8] || 1;
            var cost1Diamond = cfg_c_game[gc.id_c_game.lotteryCostCfg][0] * disCount;
            var cost10Diamond = cfg_c_game[gc.id_c_game.lotteryCostCfg][1] * disCount;
            if (index == 1)
                return cost1Diamond;
            return cost10Diamond;
        };
        //五日目标
        p.getFiveTargetActivity = function () {
            var self = this;
            var exActivity = self._getExActivityByType(gc.c_prop.activityTypeKey.fiveDaysTarget);
            return exActivity;
        };
        //新四日
        p.getNewFourActivity = function () {
            var self = this;
            var exActivity = self._getExActivityByType(gc.c_prop.activityTypeKey.newFourDays);
            return exActivity;
        };
        //幸运卡罗牌
        p.luckyTalos = function (id, index, cb, cbtx) {
            var self = this;
            var lData = self.getLuckyTalosActivity(id);
            if (!lData) {
                console.log("找不到该活动");
                return cb();
            }
            if (index < 0 || index > 3)
                return cb("参数错误");
            var exData = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exData);
            if (!exData)
                return cb("参数错误");
            var exValues = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exValues);
            var spItemId = exData[gc.c_prop.activityExDataTypeKey.spItemId];
            if (!spItemId)
                return cb("参数错误");
            var ownValue = gd.userCtrl.getItemNum(spItemId);
            var costValue = exValues[0];
            if (spItemId == gc.c_prop.spItemIdKey.gold) {
                if (ownValue < costValue) {
                    gd.userCtrl.noGolds(function () { }, this);
                    return;
                }
            }
            else if (spItemId == gc.c_prop.spItemIdKey.diamond) {
                //判断钻石是否足够
                if (ownValue < costValue)
                    return mo.showMsg(gc.id_c_msgCode.noDiamond);
            }
            else {
                if (ownValue < costValue)
                    return mo.showMsg("材料不足！");
            }
            //判断钻石1
            self.receive(id, index, function (data) {
                var luckyTalosItemArr = data[gc.dsConsts.ExActivityData.luckyTalosItemArr] || [];
                cb.call(cbtx, luckyTalosItemArr);
            }, self, spItemId);
        };
        p.getLuckyTalosCost = function (index, id) {
            var self = this;
            var costDiamond = 9999;
            var lData = self.getLuckyTalosActivity(id);
            if (!lData)
                return;
            var exValues = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exValues);
            return exValues[0] || costDiamond;
        };
        p.getLuckyTalosActivity = function (id) {
            var self = this;
            var exActivity = self._getExActivityById(id);
            return exActivity;
        };
        p.getActivity = function (id) {
            var self = this;
            var exActivity = self._getExActivityById(id);
            return exActivity;
        };
        //获取活动ui信息
        p.getUiInfoActivity = function (id) {
            var self = this;
            var lData = self.getLuckyTalosActivity(id);
            if (!lData)
                return;
            var exData = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exData);
            return [exData[gc.c_prop.activityExDataTypeKey.titleIcon], exData[gc.c_prop.activityExDataTypeKey.desIcon]]; //titleIcon, desIcon
        };
        //限时抢购
        p.limitPanicBuying = function (id, index, cb, cbtx) {
            var self = this;
            var lData = self._getExActivityById(id);
            if (!lData) {
                return cb(mo.showMsg("找不到该活动"));
            }
            var receiveCount = self.getLimitPanicBuyCount(id);
            var exValues2 = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exValues2);
            var limitNum = exValues2[0] || 0;
            if (receiveCount >= limitNum)
                return mo.showMsg(gc.id_c_msgCode.activitiesEnd);
            var exData = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exData);
            if (!exData)
                return mo.showMsg("参数错误");
            var exValues = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exValues);
            var spItemId = exData[gc.c_prop.activityExDataTypeKey.spItemId];
            if (!spItemId)
                return mo.showMsg("参数错误");
            var vipLimit = exData[gc.c_prop.activityExDataTypeKey.vipLimitLvl] || 0;
            var vip = gd.userCtrl.getVip();
            if (vip < vipLimit) {
                return mo.showMsg("vip" + vipLimit + "以上才可购买");
            }
            var ownValue = gd.userCtrl.getItemNum(spItemId);
            var costValue = exValues[0];
            if (spItemId == gc.c_prop.spItemIdKey.gold) {
                if (ownValue < costValue) {
                    gd.userCtrl.noGolds(function () { }, this);
                    return;
                }
            }
            else if (spItemId == gc.c_prop.spItemIdKey.diamond) {
                //判断钻石是否足够
                if (ownValue < costValue)
                    return mo.showMsg(gc.id_c_msgCode.noDiamond);
            }
            else {
                if (ownValue < costValue)
                    return mo.showMsg("材料不足！");
            }
            self.receive(id, index, function (data) {
                mo.showMsg("购买成功,请到邮箱领取奖励！");
                cb.call(cbtx, data);
            }, self);
        };
        p.getLimitPanicBuyCount = function (id) {
            var activity = gd.userCtrl.get(gc.dsConsts.UserEntity.activity);
            var receiveCount = activity[id] || 0;
            return receiveCount;
        };
        p.getLimitNum = function (id) {
            var self = this;
            var lData = self._getExActivityById(id);
            if (!lData)
                return 0;
            var exValues2 = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exValues2);
            return exValues2[0] || 0;
        };
        //天天充值
        p.everydayCharge = function (id, index, cb, cbtx) {
            var self = this;
            var eData = self._getExActivityById(id);
            if (!eData) {
                return cb(mo.showMsg("找不到该活动"));
            }
            //验证是否可领取
            var days = eData[gc.dsConsts.ExActivity.days] || 0; //已充值到第几天
            if (index + 1 > days) {
                return mo.showMsg(gc.id_c_msgCode.goalNotGet);
            }
            var activity = gd.userCtrl.get(gc.dsConsts.UserEntity.activity);
            var receiveData = activity[id] || [];
            var receiveCount = receiveData[index] || 0;
            if (receiveCount) {
                return mo.showMsg("已领取请查看邮件!");
            }
            self.receive(id, index, function (data) {
                mo.showMsg("领取成功,请到邮箱领取奖励！");
                cb.call(cbtx, data);
            }, self);
        };
        /**
         * 获得消费返利领取状态
         * @param id
         * @param index
         * @returns {number} 1:已经领取，0：可领取，2:不可领取
         */
        p.getAllRebateStatus = function (id, index) {
            var self = this;
            var exActivity = self._getExActivityById(id);
            var receiveData = self.getReceiveData(id);
            var activityItems = exActivity[gc.dsConsts.ExActivity.activityItems];
            var allCost = exActivity[gc.dsConsts.ExActivity.allCost];
            var itemData = activityItems[index];
            var needCount = itemData[gc.dsConsts.ActivityItem.diamond] || 0;
            //判断是否可以领取
            //判断累充钻石是否达到
            if (allCost < needCount)
                return 2;
            //领取次数
            var r = receiveData[1] || [];
            var receiveCount = r[index] || 0;
            //未领取过，则可领取
            return receiveCount;
        };
        /**
         * 获得消费返利领取状态
         * @param id
         * @param index
         * @returns {number} 1:已经领取，0：可领取，2:不可领取
         */
        p.getDayRechargeStatus = function (id, index) {
            var self = this;
            var exActivity = self._getExActivityById(id);
            var receiveData = self.getReceiveData(id);
            var activityItems = exActivity[gc.dsConsts.ExActivity.activityItems];
            var todayRecharge = exActivity[gc.dsConsts.ExActivity.todayRecharge];
            var days = exActivity[gc.dsConsts.ExActivity.days];
            var itemData = activityItems[index];
            var needCount = itemData[gc.dsConsts.ActivityItem.rmb] || 0;
            //判断是否可以领取
            //判断累充钻石是否达到
            if (todayRecharge < needCount)
                return 2;
            //领取次数
            var r = receiveData[days] || [];
            var receiveCount = r[index] || 0;
            //未领取过，则可领取
            return receiveCount;
        };
        /**
         * 获得集字返利兑换次数
         * @param id
         * @param index
         * @returns {number}
         */
        p.getSetTheWordCount = function (id, index) {
            var self = this;
            var receiveData = self.getReceiveData(id);
            return receiveData[index] || 0;
        };
        //集字换礼
        p.setTheWord = function (id, index, cb, cbtx) {
            var self = this;
            var eData = self._getExActivityById(id);
            if (!eData) {
                return mo.showMsg("找不到该活动");
            }
            self.receive(id, index, function (data) {
                mo.showMsg("兑换成功,请到邮箱领取奖励！");
                cb.call(cbtx, data);
            }, self);
        };
        /**
         * 获得V计划领取状态
         * @param id
         * @param index
         * @returns {number} 1:已经领取，0：可领取，2:不可领取
         */
        p.getVPlanStatus = function (id, index) {
            var self = this;
            var receiveData = self.getReceiveData(id);
            var receiveCount = receiveData[index] || 0;
            ;
            //未领取过，则可领取
            return receiveCount;
        };
        /**
         * 领取V计划奖励
         * @param id
         * @param index
         * @returns {number} 1:已经领取，0：可领取，2:不可领取
         */
        p.vPlan = function (id, index, cb, cbtx) {
            var self = this;
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var exActivity = self._getExActivityById(id);
            if (!exActivity) {
                return cb(mo.showMsg("找不到该活动"));
            }
            var receiveData = self.getReceiveData(id);
            var activityItems = exActivity[gc.dsConsts.ExActivity.activityItems];
            var rmb = exActivity[gc.dsConsts.ExActivity.maxPaymoney]; //当前单笔充值最高金额
            var itemData = activityItems[index];
            var need = itemData[gc.dsConsts.ActivityItem.vPlan];
            var vipIndex = 0;
            var needCreatDay = 30;
            if (need[0] == 10500) {
                vipIndex = 0;
            }
            else {
                vipIndex = 1;
            }
            var needVip = cfg_c_game[gc.id_c_game.vPlanCfg][vipIndex] || 7;
            needCreatDay = cfg_c_game[gc.id_c_game.vPlanCfg][vipIndex + 2] || 30;
            if (gd.userCtrl.getVip() < needVip || rmb < need[1]) {
                return mo.showMsg(gc.id_c_msgCode.vPlan, need[1]);
            }
            var now = Date.newDate();
            if (now.isBefore(new Date(gd.userCtrl.get(gc.dsConsts.UserEntity.createTime)).clone().addDays(needCreatDay))) {
                return mo.showMsg("需要至少创角" + needCreatDay + "天才可领取");
            }
            self.receive(id, index, function (data) {
                mo.showMsg("兑换成功,请到邮箱领取奖励！");
                cb.call(cbtx, data);
            }, self);
        };
        //幸运麻将牌
        p.luckyMajong = function (id, index, cb, cbtx) {
            var self = this;
            var lData = self.getActivity(id);
            if (!lData) {
                console.log("找不到该活动");
                return cb();
            }
            if (index < 0 || index > 6)
                return cb("参数错误");
            var exData = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exData);
            if (!exData)
                return cb("参数错误");
            var exValues = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exValues);
            var spItemId = exData[gc.c_prop.activityExDataTypeKey.spItemId];
            if (!spItemId)
                return cb("参数错误");
            var ownValue = gd.userCtrl.getItemNum(spItemId);
            var costValue = exValues[0];
            if (spItemId == gc.c_prop.spItemIdKey.gold) {
                if (ownValue < costValue) {
                    gd.userCtrl.noGolds(function () { }, this);
                    return;
                }
            }
            else if (spItemId == gc.c_prop.spItemIdKey.diamond) {
                //判断钻石是否足够
                if (ownValue < costValue)
                    return mo.showMsg(gc.id_c_msgCode.noDiamond);
            }
            else {
                if (ownValue < costValue)
                    return mo.showMsg("材料不足！");
            }
            var oldValue = self.getLuckValue(id);
            //判断钻石1
            self.receive(id, index, function (data) {
                var luckyTalosItemArr = data[gc.dsConsts.ExActivityData.luckyTalosItemArr] || [];
                var newValue = self.getLuckValue(id);
                if (newValue > oldValue) {
                    mo.showMsg(gc.id_c_msgCode.majongLuckyPoint, self.getAddLuckValue(id));
                }
                else {
                    //mo.showMsg(gc.id_c_msgCode.majongLuckyPointMax);
                    var exItem = data[gc.dsConsts.ExActivityData.exItem];
                    for (var itemId in exItem) {
                        var itemTmp = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
                        var itemName = itemTmp[gc.t_item_name] || "";
                        mo.showMsg(gc.id_c_msgCode.majongLuckyBonusTips, itemName, exItem[itemId]);
                        break;
                    }
                }
                cb.call(cbtx, luckyTalosItemArr);
            }, self, spItemId);
        };
        //返回幸运值
        p.getLuckValue = function (id) {
            var self = this;
            var activity = gd.userCtrl.get(gc.dsConsts.UserEntity.activity);
            var receiveCount = activity[id] || 0;
            return receiveCount;
        };
        //幸运值增量
        p.getAddLuckValue = function (id) {
            var self = this;
            var lData = self.getActivity(id);
            var exValues3 = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exValues3);
            return exValues3[0] || 5;
        };
        //用户调研
        p.userSurvey = function (activityId, index, report, cb, cbtx) {
            var self = this;
            var lData = self.getActivity(activityId);
            if (!lData) {
                return mo.showMsg("找不到该活动");
            }
            var args = {};
            var argsKey = gc.iface.a_activity_report_args;
            args[argsKey.activityId] = activityId;
            args[argsKey.report] = report;
            mo.requestWaiting4Server(gc.iface.a_activity_report, args, function (data) {
                self.receive(activityId, index, function (data) {
                    if (cb)
                        cb.call(cbtx, data);
                });
            }, self);
        };
        //得到用户调研领奖状态
        p.getUserSurveyStatus = function (activityId) {
            var self = this;
            var activity = gd.userCtrl.get(gc.dsConsts.UserEntity.activity);
            var receiveCount = activity[activityId] || 0;
            if (receiveCount != 1) {
                return 0;
            }
            else {
                return 1;
            }
        };
        //返回新麻将牌幸运值
        p.getNewLuckValue = function (id) {
            var self = this;
            var activity = gd.userCtrl.get(gc.dsConsts.UserEntity.activity);
            var receiveData = activity[id] || [];
            return receiveData[0] || 0;
        };
        //新幸运麻将牌
        p.newLuckyMajong = function (id, index, cb, cbtx) {
            var self = this;
            var lData = self.getActivity(id);
            if (!lData) {
                return mo.showMsg("找不到该活动");
            }
            var exData = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exData);
            if (!exData)
                return mo.showMsg("参数错误");
            var exValues = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exValues);
            var spItemId = exData[gc.c_prop.activityExDataTypeKey.spItemId];
            if (!spItemId)
                return mo.showMsg("参数错误");
            var ownValue = gd.userCtrl.getItemNum(spItemId);
            var costValue = exValues[0];
            var count = self.getTodayActivityCount(id);
            var freeCount = self.getFreeDay(id);
            var totalDay = self.getTotalDay(id);
            if (count >= totalDay) {
                return mo.showMsg("已达最大次数");
            }
            if (count >= freeCount) {
                if (spItemId == gc.c_prop.spItemIdKey.gold) {
                    if (ownValue < costValue) {
                        gd.userCtrl.noGolds(function () {
                        }, this);
                        return;
                    }
                }
                else if (spItemId == gc.c_prop.spItemIdKey.diamond) {
                    //判断钻石是否足够
                    if (ownValue < costValue)
                        return mo.showMsg(gc.id_c_msgCode.noDiamond);
                }
                else {
                    if (ownValue < costValue)
                        return mo.showMsg("材料不足！");
                }
            }
            var oldValue = self.getLuckValue(id);
            //判断钻石1
            self.receive(id, index, function (data) {
                var luckyTalosItemArr = data[gc.dsConsts.ExActivityData.luckyTalosItemArr] || [];
                var newValue = self.getLuckValue(id);
                if (newValue > oldValue) {
                    mo.showMsg(gc.id_c_msgCode.majongLuckyPoint, self.getAddLuckValue(id));
                }
                else {
                    //mo.showMsg(gc.id_c_msgCode.majongLuckyPointMax);
                    var exItem = data[gc.dsConsts.ExActivityData.exItem];
                    for (var itemId in exItem) {
                        var itemTmp = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
                        var itemName = itemTmp[gc.t_item_name] || "";
                        mo.showMsg(gc.id_c_msgCode.majongLuckyBonusTips, itemName, exItem[itemId]);
                        break;
                    }
                }
                cb.call(cbtx, luckyTalosItemArr);
            }, self, spItemId);
        };
        /**
         * 得到活动今日已参与次数
         * @param activityId
         */
        p.getTodayNewLimitPanicBuyCount = function (activityId) {
            var self = this;
            var activity = gd.userCtrl.get(gc.dsConsts.UserEntity.activity);
            var receiveData = activity[activityId] || [0, Date.newDate()];
            var count = receiveData[0];
            var refreshTime = Date.newDate(receiveData[1]);
            if (refreshTime) {
                refreshTime = Date.newDate(refreshTime);
                if (!refreshTime.equalsDay(Date.newDate())) {
                    refreshTime = Date.newDate();
                    count = 0;
                }
            }
            receiveData[0] = count;
            receiveData[1] = refreshTime;
            activity[activityId] = receiveData;
            gd.userCtrl.set(gc.dsConsts.UserEntity.activity, activity);
            return count;
        };
        //新每日限时抢购
        p.newLimitPanicBuy = function (id, index, cb, cbtx) {
            var self = this;
            var lData = self.getActivity(id);
            if (!lData) {
                return mo.showMsg("找不到该活动");
            }
            var exData = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exData);
            if (!exData)
                return mo.showMsg("参数错误");
            var vipLimit = exData[gc.c_prop.activityExDataTypeKey.vipLimitLvl] || 0;
            var fnName = exData[gc.c_prop.activityExDataTypeKey.funcName];
            var vip = gd.userCtrl.getVip();
            if (fnName && typeof gc[fnName] == "function") {
                var vipEnable = gc[fnName](vip, vipLimit);
                if (!vipEnable) {
                    return mo.showMsg("vip" + vipLimit + "以上才可购买");
                }
            }
            else if (vip < vipLimit) {
                return mo.showMsg("vip" + vipLimit + "以上才可购买");
            }
            var exValues = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exValues);
            var spItemId = exData[gc.c_prop.activityExDataTypeKey.spItemId];
            if (!spItemId)
                return mo.showMsg("参数错误");
            var ownValue = gd.userCtrl.getItemNum(spItemId);
            var costValue = exValues[0];
            var count = self.getTodayNewLimitPanicBuyCount(id);
            var totalDay = self.getTotalDay(id);
            if (count >= totalDay) {
                return mo.showMsg("已达今日购买最大次数");
            }
            if (spItemId == gc.c_prop.spItemIdKey.gold) {
                if (ownValue < costValue) {
                    gd.userCtrl.noGolds(function () {
                    }, this);
                    return;
                }
            }
            else if (spItemId == gc.c_prop.spItemIdKey.diamond) {
                //判断钻石是否足够
                if (ownValue < costValue)
                    return mo.showMsg(gc.id_c_msgCode.noDiamond);
            }
            else {
                if (ownValue < costValue)
                    return mo.showMsg("材料不足！");
            }
            var oldValue = self.getLuckValue(id);
            //判断钻石1
            self.receive(id, index, function (data) {
                mo.showMsg("领取成功,请到邮箱领取奖励！");
                cb.call(cbtx, data);
            }, self);
        };
        /**************************************************************公用*********************************************************************/
        /**
         * 领取
         * @param id
         * @param index
         * @param cb
         * @param target
         */
        p.receive = function (activityId, index, cb, target, spItemId) {
            if (spItemId === void 0) { spItemId = 0; }
            var self = this;
            var args = {};
            var argsKey = gc.iface.a_activity_receive_args;
            args[argsKey.activityId] = activityId;
            args[argsKey.index] = index;
            mo.requestWaiting4Server(gc.iface.a_activity_receive, args, function (data) {
                var userData = data[gc.dsConsts.ExActivityData.userData] || {};
                var bagItems = data[gc.dsConsts.ExActivityData.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExActivityData.equipBagItems] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                egret.setTimeout(function () {
                    self.getInfo(function () {
                        self.pushNotify(self.__class.ACTIVITY_OP, {});
                    }, self);
                }, self, 500);
                if (cb)
                    cb.call(target, data);
                if (spItemId > 0 && spItemId == gc.c_prop.spItemIdKey.gold) {
                    var getGold = data[gc.dsConsts.ExActivityData.getGold] || 0;
                    if (getGold > 0) {
                        var clickTime = egret.setTimeout(function () {
                            mo.showMsg("获得金币: " + getGold);
                            egret.clearTimeout(clickTime);
                        }, self, 400);
                    }
                }
            });
        };
        //获取领取的数据
        p.getReceiveData = function (id) {
            var activity = gd.userCtrl.get(gc.dsConsts.UserEntity.activity);
            var receiveData = activity[id] || [];
            return receiveData;
        };
        p.getActivityValue = function (exActivity, key) {
            var activity = exActivity[gc.dsConsts.ExActivity.activity];
            return activity[key];
        };
        /**
         * 获取主要活动列表
         * @returns [gc.dsConsts.ExActivity]
         */
        p.getMainList = function () {
            var self = this;
            var reList = [];
            for (var i = 0; i < self._dataList.length; i++) {
                var locData = self._dataList[i];
                var locType = self.getActivityValue(locData, gc.dsConsts.ActivityEntity.type);
                if (locType == gc.c_prop.activityTypeKey.firstRecharge)
                    continue;
                if (locType == gc.c_prop.activityTypeKey.lottery)
                    continue;
                if (locType == gc.c_prop.activityTypeKey.fiveDaysTarget)
                    continue;
                if (locType == gc.c_prop.activityTypeKey.sign)
                    continue;
                if (locType == gc.c_prop.activityTypeKey.sevenLogin)
                    continue;
                if (locType == gc.c_prop.activityTypeKey.redeemCode)
                    continue;
                if (locType == gc.c_prop.activityTypeKey.challengeCup)
                    continue;
                reList.push(locData);
            }
            reList.sort(function (ex1, ex2) {
                return ex1[gc.dsConsts.ExActivity.activity][gc.dsConsts.ActivityEntity.sort] - ex2[gc.dsConsts.ExActivity.activity][gc.dsConsts.ActivityEntity.sort];
            });
            return reList;
        };
        p.getFuliList = function () {
            var self = this;
            var reList = [];
            for (var i = 0; i < self._dataList.length; i++) {
                var locData = self._dataList[i];
                var locType = self.getActivityValue(locData, gc.dsConsts.ActivityEntity.type);
                if (locType == gc.c_prop.activityTypeKey.sign
                    || locType == gc.c_prop.activityTypeKey.sevenLogin
                    || locType == gc.c_prop.activityTypeKey.redeemCode) {
                    reList.push(locData);
                }
            }
            reList.sort(function (ex1, ex2) {
                return ex1[gc.dsConsts.ExActivity.activity][gc.dsConsts.ActivityEntity.sort] - ex2[gc.dsConsts.ExActivity.activity][gc.dsConsts.ActivityEntity.sort];
            });
            return reList;
        };
        /**
         * 获取精彩活动列表。
         * @param cb
         * @param ctx
         * @returns gc.dsConsts.ActivityData
         */
        p.getInfo = function (cb, ctx) {
            var self = this;
            mo.request4Server(gc.iface.a_activity_getList, {}, function (dataList) {
                self._dataList = dataList;
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.activity);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.fuli);
                if (cb)
                    cb.call(ctx, dataList);
            });
        };
        //判断是否红点
        p.isPointEffect = function () {
            var self = this;
            var mainDataList = self.getMainList();
            for (var i = 0; i < mainDataList.length; i++) {
                var locData = mainDataList[i];
                var isNeedOp = locData[gc.dsConsts.ExActivity.isNeedOp];
                if (isNeedOp)
                    return true;
            }
            return false;
        };
        //判断是否红点
        p.isFuliPointEffect = function () {
            var self = this;
            var mainDataList = self.getFuliList();
            for (var i = 0; i < mainDataList.length; i++) {
                var locData = mainDataList[i];
                var isNeedOp = locData[gc.dsConsts.ExActivity.isNeedOp];
                if (isNeedOp)
                    return true;
            }
            return false;
        };
        //判断是否红点
        p.isPoint = function (id) {
            var self = this;
            var mainDataList = self.getMainList();
            for (var i = 0; i < mainDataList.length; i++) {
                var locData = mainDataList[i];
                var locId = self.getActivityValue(locData, gc.dsConsts.ActivityEntity.id);
                if (id != locId)
                    continue;
                var isNeedOp = locData[gc.dsConsts.ExActivity.isNeedOp];
                if (isNeedOp)
                    return true;
            }
            var fuliDataList = self.getFuliList();
            for (var i = 0; i < fuliDataList.length; i++) {
                var locData = fuliDataList[i];
                var locId = self.getActivityValue(locData, gc.dsConsts.ActivityEntity.id);
                if (id != locId)
                    continue;
                var isNeedOp = locData[gc.dsConsts.ExActivity.isNeedOp];
                if (isNeedOp)
                    return true;
            }
            return false;
        };
        /**
         * 根据类型获取ExActivity
         * @param type
         * @returns {*}
         */
        p._getExActivityByType = function (type) {
            var self = this;
            for (var i = 0; i < self._dataList.length; i++) {
                var locData = self._dataList[i];
                var locType = self.getActivityValue(locData, gc.dsConsts.ActivityEntity.type);
                if (locType == type) {
                    return locData;
                }
            }
            return null;
        };
        /**
         * 根据类型获取ExActivity
         * @param id
         * @returns {*}
         */
        p._getExActivityById = function (id) {
            var self = this;
            for (var i = 0; i < self._dataList.length; i++) {
                var locData = self._dataList[i];
                var locId = self.getActivityValue(locData, gc.dsConsts.ActivityEntity.id);
                if (locId == id) {
                    return locData;
                }
            }
            return null;
        };
        //得到活动每日免费次数
        p.getFreeDay = function (activityId) {
            var self = this;
            var lData = self.getActivity(activityId);
            var exData = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exData);
            return exData[gc.c_prop.activityExDataTypeKey.freeDay] || 0;
            ;
        };
        //得到活动每日总次数
        p.getTotalDay = function (activityId) {
            var self = this;
            var lData = self.getActivity(activityId);
            var exData = self.getActivityValue(lData, gc.dsConsts.ActivityEntity.exData);
            return exData[gc.c_prop.activityExDataTypeKey.totalDay] || 0;
            ;
        };
        /**
         * 得到活动今日已参与次数
         * @param activityId
         */
        p.getTodayActivityCount = function (activityId) {
            var self = this;
            var activity = gd.userCtrl.get(gc.dsConsts.UserEntity.activity);
            var receiveData = activity[activityId] || [0, [0, Date.newDate()]];
            var count = receiveData[1][0];
            var refreshTime = Date.newDate(receiveData[1][1]);
            if (refreshTime) {
                refreshTime = Date.newDate(refreshTime);
                if (!refreshTime.equalsDay(Date.newDate())) {
                    refreshTime = Date.newDate();
                    count = 0;
                }
            }
            receiveData[1][0] = count;
            receiveData[1][1] = refreshTime;
            activity[activityId] = receiveData;
            gd.userCtrl.set(gc.dsConsts.UserEntity.activity, activity);
            return count;
        };
        ActivityCtrl.ON_FIRST_REWARD_RECEIVED = "on_first_";
        ActivityCtrl.ACTIVITY_OP = "ACTIVITY_OP";
        return ActivityCtrl;
    })(mo.DataController);
    gd.ActivityCtrl = ActivityCtrl;
    egret.registerClass(ActivityCtrl,"gd.ActivityCtrl");
    gd.activityCtrl = ActivityCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/5/27.
 */
var gd;
(function (gd) {
    var ArenaCtrl = (function (_super) {
        __extends(ArenaCtrl, _super);
        function ArenaCtrl() {
            _super.apply(this, arguments);
            this._hasNotReadNewArenaRecord = 0;
        }
        var d = __define,c=ArenaCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.ArenaEntity;
        };
        p.initData = function (hasNotReadNewArenaRecord) {
            this._hasNotReadNewArenaRecord = hasNotReadNewArenaRecord;
        };
        p.updateEntity = function (data) {
            _super.prototype.updateEntity.call(this, data);
            gd.pointCtrl.cal(gc.c_prop.pointRedKey.arena1);
        };
        /**
         * 获取数据
         * @param cb
         * @param target
         * @returns ds.ArenaEntity
         */
        p.getInfo = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_arena_getInfo, {}, function (data) {
                self.init(data);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.arena1);
                if (cb)
                    cb.call(target, data);
            });
        };
        /*
                //是否有未阅读的记录
                hasNotReadNewArenaRecord(){
                    return this._hasNotReadNewArenaRecord > 0;
                }

                //设置记录阅读
                setRead(cb,target){
                    var self = this;
                    mo.request4Server(gc.iface.a_arena_setRead, {}, function (data) {
                        self._hasNotReadNewArenaRecord = 0;
                        if(cb) cb.call(target,data);
                    });
                }
        */
        //获取排名
        p.getRank = function () {
            var self = this;
            if (!self._data)
                return 0;
            return self.get(gc.dsConsts.ArenaEntity.rank);
        };
        //获取历史最高排名
        p.getHighRank = function () {
            var self = this;
            if (!self._data)
                return 0;
            return self.get(gc.dsConsts.ArenaEntity.highRank);
        };
        /**
         * 重置竞技场挑战对手
         * @param cb
         * @param target
         */
        p.resetArenaFightRanks = function (cb, target) {
            var self = this;
            var diamond = gd.userCtrl.getDiamond();
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.arenaCfg);
            var reNumData = self.get(gc.dsConsts.ArenaEntity.reNumData);
            var lastResetTime = reNumData[gc.c_prop.arenaDataKey.lastResetTime];
            if (lastResetTime) {
                var gameCds = c_game[6] || 999999;
                var nowTime = Date.newDate();
                var cds = (nowTime.getTime() - Date.newDate(lastResetTime).getTime()) / 1000;
                if (cds < gameCds) {
                    var cosDiamond = c_game[7] || 999999;
                    if (diamond < cosDiamond)
                        return mo.showMsg(gc.id_c_msgCode.noDiamond); //钻石不足
                }
            }
            mo.requestWaiting4Server(gc.iface.a_arena_resetFightRanks, {}, function (data) {
                self.updateEntity(data);
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * 获取战斗用户列表
         * @param cb
         * @param target
         * @returns [gc.dsConsts.PKUserData]
         */
        p.getFightUserList = function (cb, target) {
            //获取用户列表
            mo.requestWaiting4Server(gc.iface.a_arena_getFightUserList, {}, function (data) {
                if (cb)
                    cb.call(target, data);
            });
        };
        //获取下一次挑战次数恢复时间,返回空则不需要倒计时
        p.getReNumNextSeconds = function () {
            var self = this;
            var reNum = self.getRePKNum();
            if (reNum >= 0)
                return null;
            var curTime = gd.commonUtils.getCurLastRefreshTime();
            //计算下一次恢复时间
            var reSeconds = Date.newDate().getSecondsBetween(curTime.addDays(1));
            return reSeconds;
        };
        //购买次数
        p.buyPKNum = function (cb, target) {
            var self = this;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var calBuyPKDiamond = c_game[gc.id_c_game.arenaCfg][4]; //参数5：购买挑战次数需要元宝
            //没有挑战次数！挑战次数不足，是否花费[ubb color=#6dd1ff]%s元宝[/ubb][/br]购买1次挑战次数？
            mo.showMsg(gc.id_c_msgCode.noArenaTimes, calBuyPKDiamond, function () {
                mo.requestWaiting4Server(gc.iface.a_arena_buyPKNum, {}, function (data) {
                    gd.userCtrl.updateEntity(data[gc.dsConsts.ExUserData.userData]);
                    self.updateEntity(data[gc.dsConsts.ExUserData.arenaData]);
                    if (cb)
                        cb.call(target, data);
                });
            });
        };
        //获取剩余pk次数
        p.getRePKNum = function () {
            var self = this;
            if (!self._data)
                return 0;
            self._calReNumData();
            return self.get(gc.dsConsts.ArenaEntity.reNumData)[0] || 0;
        };
        //获取下一次挑战次数恢复时间,返回空则不需要倒计时
        p.getCDSeconds = function () {
            var self = this;
            var nextFightTime = self.get(gc.dsConsts.ArenaEntity.reNumData)[gc.c_prop.arenaDataKey.nextFightTime] || Date.newDate();
            nextFightTime = new Date(nextFightTime);
            //计算下一次恢复时间
            var reSeconds = Date.newDate().getSecondsBetween(nextFightTime);
            if (reSeconds < 0)
                reSeconds = 0;
            return reSeconds;
        };
        //刷新cd
        p.refreshCD = function (cb, target) {
            var self = this;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var freshDiamond = c_game[gc.id_c_game.arenaCfg][3]; //参数4：cd需要元宝
            //是否花费[ubb color=#6dd1ff]%s元宝[/ubb][/br]清除cd？
            mo.showMsg(gc.id_c_msgCode.cleanArenaTime, freshDiamond, function () {
                mo.requestWaiting4Server(gc.iface.a_arena_refreshCD, {}, function (data) {
                    gd.userCtrl.updateEntity(data[gc.dsConsts.ExUserData.userData]);
                    self.updateEntity(data[gc.dsConsts.ExUserData.arenaData]);
                    if (cb)
                        cb.call(target, data);
                });
            });
        };
        /**
         * 挑战开始
         * @param rank
         * @param cb
         * @param target
         * @returns [ds.HeroEntityCtrl]
         */
        p.fightStart = function (rank, cb, target) {
            var self = this;
            if (gd.fightCtrl.isSpFighting)
                return mo.showMsg("还在挑战中，请稍后");
            if (gd.fightCtrl.isDie)
                return mo.showMsg("复活中，请稍后");
            var argsObj = gc.iface.a_arena_fightStart_args, args = {};
            args[argsObj.rank] = rank;
            var cdSeconds = self.getCDSeconds();
            if (cdSeconds > 0) {
                self.refreshCD(function () {
                    self.fightStart(rank, cb, target);
                }, self);
                return;
            }
            var rePkNum = self.getRePKNum();
            if (rePkNum <= 0) {
                self.buyPKNum(function () {
                    self.fightStart(rank, cb, target);
                }, self);
                return;
            }
            mo.requestWaiting4Server(gc.iface.a_arena_fightStart, args, function (data) {
                self._fightRank = rank;
                var updateArena = data[gc.dsConsts.ExArena.arenaData];
                if (updateArena)
                    self.updateEntity(updateArena);
                var userData = data[gc.dsConsts.ExArena.userData];
                if (userData)
                    gd.userCtrl.updateEntity(userData);
                var heroList = data[gc.dsConsts.ExArena.heroList];
                var otherDataList = data[gc.dsConsts.ExArena.otherDataList];
                var fightData = data[gc.dsConsts.ExArena.fightData];
                var heroCtrlList = [];
                for (var i = 0; i < heroList.length; i++) {
                    var locHero = heroList[i];
                    var locHeroEntityCtrl = gd.HeroEntityCtrl.createNewEnemy(locHero, fightData, otherDataList[i]);
                    heroCtrlList.push(locHeroEntityCtrl);
                }
                heroCtrlList.sort(gd.heroCtrl._sortHeroList);
                gd.fightCtrl.isSpFighting = true;
                if (cb)
                    cb.call(target, heroCtrlList);
            });
        };
        /**
         * 战斗
         * @param isWin
         * @param fightData
         * @param cb
         * @param target
         * @returns ds.FightResult
         */
        p.fightEnd = function (isWin, fightData, cb, target) {
            var self = this;
            if (!self._fightRank)
                return;
            var argsObj = gc.iface.a_arena_fightEnd_args, args = {};
            args[argsObj.rank] = self._fightRank;
            args[argsObj.isWin] = isWin;
            args[argsObj.fightData] = fightData;
            mo.requestWaiting4Server(gc.iface.a_arena_fightEnd, args, function (fightResult) {
                var updateArena = fightResult[gc.dsConsts.FightResult.updateArena];
                if (updateArena) {
                    self.updateEntity(updateArena);
                }
                var updateUser = fightResult[gc.dsConsts.FightResult.updateUser];
                if (updateUser) {
                    gd.userCtrl.updateEntity(updateUser);
                }
                var guildData = fightResult[gc.dsConsts.FightResult.guildData];
                if (guildData)
                    gd.guildCtrl.updateData(guildData);
                var guildPersonalData = fightResult[gc.dsConsts.FightResult.guildPersonalData];
                if (guildPersonalData)
                    gd.guildPersonalCtrl.updateData(guildPersonalData);
                var hasChangeRank = fightResult[gc.dsConsts.FightResult.hasChangeRank];
                if (hasChangeRank)
                    mo.showMsg(gc.id_c_msgCode.rankChanged);
                if (cb)
                    cb.call(target, fightResult);
            });
        };
        /**
         * 获取战斗记录
         * @param cb
         * @param target
         * @returns [ArenaRecordEntity]
         */
        p.getRecordList = function (cb, target) {
            var self = this;
            var argsObj = gc.iface.a_arena_getRecordList_args, args = {};
            args[argsObj.index] = 0;
            args[argsObj.count] = 20;
            mo.requestWaiting4Server(gc.iface.a_arena_getRecordList, args, function (data) {
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * 获取剩余更新时间/s
         * @param cb
         * @param target
         */
        p.getRefreshRemainTime = function (cb) {
            mo.request4Server(gc.iface.a_arena_getRefreshRemainTime, {}, function (data) {
                return cb(data);
            });
        };
        /**
         * 获取排行榜列表,50条
         * @param cb
         * @param target
         * @returns [gc.dsConsts.Rank]
         */
        p.getRankList = function (cb, target) {
            mo.requestWaiting4Server(gc.iface.a_arena_getRankList, {}, function (data) {
                if (cb)
                    cb.call(target, data);
            });
        };
        //获取排名奖励和段位奖励
        //return [金币，元宝，声望]
        p.getRankReward = function (rank) {
            var c_arenaRankReward = mo.getJSONWithFileName(gc.cfg_c_arenaRankReward);
            var prestige = 0;
            var gold = 0;
            var diamond = 0;
            var curData = null;
            for (var i = 1; i < 50; i++) {
                var locData = c_arenaRankReward[i];
                if (!locData)
                    break;
                if (rank >= locData[gc.c_arenaRankReward_rangeStart] && rank <= locData[gc.c_arenaRankReward_rangeEnd]) {
                    curData = locData;
                    break;
                }
            }
            if (curData) {
                var rewardId = curData[gc.c_arenaRankReward_rewardId];
                var c_reward = mo.getJSONWithFileName(gc.cfg_c_reward);
                var c_rewardData = c_reward[rewardId];
                prestige = c_rewardData[gc.c_reward_prestige];
                gold = c_rewardData[gc.c_reward_gold];
                diamond = c_rewardData[gc.c_reward_diamond];
            }
            return [gold, diamond, prestige];
        };
        //计算排位赛信息，主要是恢复挑战次数
        p._calReNumData = function () {
            var self = this;
            //[剩余挑战次数，上一次恢复次数时间，下一次可以挑战的时间(cd)]
            //计算次数恢复
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var reNumData = self.get(gc.dsConsts.ArenaEntity.reNumData);
            //计算每日购买次数
            var reNum = reNumData[0] || 0;
            var lastReplayTime = reNumData[1];
            var maxNum = c_game[gc.id_c_game.arenaCfg][1]; //参数2：竞技场每天挑战次数
            var refreshData = gd.commonUtils.calRefreshData(reNum, lastReplayTime, maxNum);
            reNumData[0] = refreshData[0];
            reNumData[1] = refreshData[1];
        };
        return ArenaCtrl;
    })(mo.DataController);
    gd.ArenaCtrl = ArenaCtrl;
    egret.registerClass(ArenaCtrl,"gd.ArenaCtrl");
    gd.arenaCtrl = ArenaCtrl.getInstance();
})(gd || (gd = {}));

/**
* Created by huanghaiying on 14/12/16.
*/
var gd;
(function (gd) {
    var bagTypeKey = gc.c_prop.bagTypeKey, filterKey = 'bagTag';
    var filterOptionMap = {};
    var filterOption = mo.ARR.filterOption;
    filterOptionMap[0] = filterOption; // 全部
    filterOptionMap[1] = filterOption.bind({ list: [[filterKey, bagTypeKey.equip]] }); // 装备
    filterOptionMap[2] = filterOption.bind({ list: [[filterKey, bagTypeKey.item]] }); // 道具
    filterOptionMap[3] = filterOption.bind({ list: [[filterKey, bagTypeKey.rebirth]] }); // 境界
    filterOptionMap[4] = filterOption.bind({ list: [[filterKey, bagTypeKey.chest]] }); // 宝箱
    filterOptionMap[5] = filterOption.bind({ list: [[filterKey, bagTypeKey.medal]] }); // 勋章
    //
    var sortOptMap = {};
    var sTempId = 'tempId';
    var sLvl = 'lvl';
    var sItemLvl = 'itemLvl';
    var sQuality = 'quality';
    var sCount = 'count';
    var sScore = 'score';
    var sIsReachedUseLvl = 'isReachedUseLvl';
    var sIsOpenNoCost = 'isOpenNoCost';
    var sItemType = 'getItemTypeWeight';
    var sortOption = mo.ARR.sortOption;
    sortOptMap[0] = sortOption.bind({ list: [sTempId] }); // 全部
    sortOptMap[1] = sortOption.bind({ list: [sQuality, sItemLvl, sTempId] }); // 装备
    sortOptMap[2] = sortOption.bind({ list: [
            sIsReachedUseLvl,
            sItemType,
            sQuality,
            sItemLvl,
            { type: 1, name: sTempId }] //物品ID：低〉高
    }); // 道具
    sortOptMap[3] = sortOption.bind({ list: [sQuality, sLvl, sTempId] }); // 境界
    sortOptMap[4] = sortOption.bind({ list: [
            sIsReachedUseLvl,
            sIsOpenNoCost,
            sQuality,
            { type: 1, name: sItemLvl },
            { type: 1, name: sTempId }] //物品ID：低〉高
    }); // 宝箱
    sortOptMap[5] = sortOption.bind({ list: [sCount, sTempId] }); // 勋章
    var BagDataCtrl = (function (_super) {
        __extends(BagDataCtrl, _super);
        function BagDataCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=BagDataCtrl,p=c.prototype;
        //@override
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self._tempCfgName = gc.cfg_t_item;
            self.tempId = null;
            self._temp = null;
            self._isRequesting = false;
            self.pileCount = 0;
            self.islock = 0;
        };
        p.init = function (tempId, count, islock) {
            _super.prototype.init.call(this, null);
            var self = this;
            self.tempId = parseInt(tempId);
            var temp = self.temp = self._temp = mo.getJSONWithFileNameAndID(self._tempCfgName, tempId);
            self.name = temp[gc.t_item_name];
            self.type = temp[gc.t_item_type];
            if (self.type == gc.c_prop.itemTypeKey.equip) {
                var equipTemp = mo.getJSONWithFileNameAndID(gc.cfg_t_itemEquip, tempId);
                self.equipId = count; //是装备时count做equipId用
                self.job = equipTemp[gc.t_itemEquip_job];
                self.jobName = gc.c_prop.heroJob[self.job];
                self.proptys = equipTemp[gc.t_itemEquip_propertys];
                self.equipType = equipTemp[gc.t_itemEquip_type];
                self.equipTypeName = gc.c_prop.equipType[self.equipType];
                if (self.equipId) {
                    //订制武器
                    var trans = gd.equipCtrl.equipTrans(self.equipId);
                    if (trans.isCustomEquip) {
                        self.name = trans.name;
                        self.proptys = trans.basePropArr;
                    }
                    self.score = trans.score;
                }
                self.count = 1;
                self.islock = islock;
            }
            else {
                self.count = count || 0;
            }
            self.price = temp[gc.t_item_price] || 0;
            //self.explain = temp[uw.t_item_explain] || "";
            self.note = temp[gc.t_item_note] || "";
            self.quality = temp[gc.t_item_color];
            self.level = temp[gc.t_item_level];
            self.itemLvl = temp[gc.t_item_itemLvl];
            self.vip = temp[gc.t_item_vip];
            //self.maxGet = temp[uw.t_item_maxGet];
            self.bagTag = temp[gc.t_item_bagTag]; //设置分类用的值
        };
        p.isEquip = function () {
            return this.type == gc.c_prop.itemTypeKey.equip;
        };
        p._changeCount = function (num) {
            if (num === void 0) { num = 0; }
            var self = this;
            var count = self.count;
            count += num;
            count = count < 0 ? 0 : count;
            self.count = count;
            // 通知监听器
            self.pushNotify(self.__class.ON_COUNT_CHANGED, count);
        };
        p.addCount = function (num) {
            if (num === void 0) { num = 1; }
            var self = this;
            self._changeCount(num);
            // 更新单例数据
            //gd.userCtrl.addItem(self.tempId, num);
        };
        p.setCount = function (num) {
            this.count = num;
            this._changeCount();
        };
        p.getTempValue = function (key) {
            return this._temp[key];
        };
        p.getLogicTempValue = function (key) {
            //var logicTemp = mo.getJSONWithFileNameAndID(uw.cfg_t_itemLogic, this.tempId);
            //return logicTemp[key];
        };
        /**
         * 返回物品可兑现的专属经验
         * @returns {*}
         */
        p.getExclusiveExp = function () {
            return this.exclusiveExp;
        };
        //已达使用等级
        p.isReachedUseLvl = function () {
            return gd.userCtrl.getLvl() >= this.level ? 1 : 0;
        };
        //开启不需要消耗
        p.isOpenNoCost = function () {
            var t_itemLogic = mo.getJSONWithFileNameAndID(gc.cfg_t_itemLogic, this.tempId);
            if (!t_itemLogic)
                return 1;
            return t_itemLogic[gc.t_itemLogic_needItems] != null ? 0 : 1;
        };
        //获取物品类型权重
        p.getItemTypeWeight = function () {
            var cfg = gd.BagDataCtrl.ITEM_TYPE_SORT_CFG;
            if (!cfg) {
                cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.initCfg)[7].split(',');
                for (var i = 0, li = cfg.length; i < li; i++) {
                    cfg[i] = parseInt(cfg[i]);
                }
                gd.BagDataCtrl.ITEM_TYPE_SORT_CFG = cfg;
            }
            var idx = cfg.indexOf(this.type);
            return idx >= 0 ? (cfg.length - idx) : idx;
        };
        BagDataCtrl.getSortOpt = function (type) {
            return sortOptMap[type];
        };
        BagDataCtrl.getFilterOpt = function (type) {
            return filterOptionMap[type];
        };
        BagDataCtrl.getList = function (filterOpt, sortOpt) {
            var items = gd.userCtrl.getBag();
            // 进行物品堆叠
            var results = this.pileItems(items);
            if (filterOpt)
                results = results.filter(filterOpt);
            if (sortOpt)
                results = results.sort(sortOpt);
            return results;
        };
        //根据职业，类型获取未穿戴的装备
        BagDataCtrl.getEquipList = function (equipArr) {
            var equipBag = gd.userCtrl.getEquipBag();
            var results = [];
            var equipData, itemCtrl;
            var itemEquip = mo.getJSONWithFileName(gc.cfg_t_itemEquip);
            for (var i = 0, li = equipArr.length; i < li; i++) {
                var equipId = equipArr[i];
                var equipData = equipBag[equipId];
                var tempId = equipData[0];
                var islock = 0;
                if (equipData[6] == undefined) {
                    var itemInfo = itemEquip[tempId];
                    if (itemInfo && itemInfo[gc.t_itemEquip_isLocked]) {
                        islock = itemInfo[gc.t_itemEquip_isLocked];
                    }
                }
                else {
                    islock = equipData[6];
                }
                itemCtrl = gd.BagDataCtrl.create(tempId, equipId, islock);
                results.push(itemCtrl);
            }
            results.sort(gd.BagDataCtrl.getSortOpt(1));
            return results;
        };
        //根据职业，类型获取未穿戴, 未上锁的装备
        BagDataCtrl.getEquipListUnlocked = function (equipArr) {
            var equipBag = gd.userCtrl.getEquipBag();
            var results = [];
            var equipData, itemCtrl;
            var itemEquip = mo.getJSONWithFileName(gc.cfg_t_itemEquip);
            for (var i = 0, li = equipArr.length; i < li; i++) {
                var equipId = equipArr[i];
                var equipData = equipBag[equipId];
                var tempId = equipData[0];
                var islock = 0;
                if (equipData[6] == undefined) {
                    var itemInfo = itemEquip[tempId];
                    if (itemInfo && itemInfo[gc.t_itemEquip_isLocked]) {
                        islock = itemInfo[gc.t_itemEquip_isLocked];
                    }
                }
                else {
                    islock = equipData[6];
                }
                if (!islock) {
                    itemCtrl = gd.BagDataCtrl.create(tempId, equipId, islock);
                    results.push(itemCtrl);
                }
            }
            return results;
        };
        BagDataCtrl.getEquipSalesInfo = function () {
            var obj = { 1: [], 2: [], 3: [], 4: [], 5: [], 'below': [] };
            obj['below'] = [];
            var equipIds = gd.equipCtrl.getEquipList();
            var equipBag = gd.userCtrl.getEquipBag();
            var sellitem = mo.getJSONWithFileName(gc.cfg_t_sellItem);
            var itemEquip = mo.getJSONWithFileName(gc.cfg_t_itemEquip);
            for (var i = 0, li = equipIds.length; i < li; i++) {
                var equipId = equipIds[i];
                var equipData = equipBag[equipId];
                var tempId = equipData[0];
                var islock = 0;
                if (equipData[6] == undefined) {
                    var itemInfo = itemEquip[tempId];
                    if (itemInfo && itemInfo[gc.t_itemEquip_isLocked]) {
                        islock = itemInfo[gc.t_itemEquip_isLocked];
                    }
                }
                else {
                    islock = equipData[6];
                }
                if (islock)
                    continue;
                var itemCtrl = gd.BagDataCtrl.create(tempId, equipId, islock);
                var color = itemCtrl.quality;
                var arr = obj[color];
                if (!arr) {
                    arr = [itemCtrl];
                    obj[color] = arr;
                }
                else {
                    arr.push(itemCtrl);
                }
                if (itemCtrl.level <= gd.userCtrl.getLvl() - 30) {
                    obj['below'].push(itemCtrl);
                }
                if (sellitem[tempId]) {
                    itemCtrl.rewards = sellitem[tempId][gc.t_sellItem_items];
                }
            }
            return obj;
        };
        /**
         * 进行物品堆叠
         * @param items
         * @returns {Array}
         */
        BagDataCtrl.pileItems = function (items) {
            var results = [];
            var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            for (var itemId in items) {
                var count = items[itemId];
                var temp = t_item[itemId];
                var maxRepeat = temp[gc.t_item_count], maxRepeatGroup, itemCtrl;
                maxRepeat = (maxRepeat == null) ? 1 : maxRepeat; //没填表示1
                if (maxRepeat != 0) {
                    maxRepeatGroup = Math.floor(count / maxRepeat);
                    for (var i = 0; i < maxRepeatGroup; i++) {
                        itemCtrl = gd.BagDataCtrl.create(itemId, maxRepeat);
                        results.push(itemCtrl);
                        count -= maxRepeat;
                    }
                }
                if (count > 0) {
                    itemCtrl = gd.BagDataCtrl.create(itemId, count);
                    results.push(itemCtrl);
                }
            }
            return results;
        };
        BagDataCtrl.ON_BATCH_USE_EXP_ITEM = "onBatchUseExpItem";
        BagDataCtrl.ON_SOLD = "onSold"; //出售
        BagDataCtrl.ON_COUNT_CHANGED = "onCountChanged"; //数量变化
        return BagDataCtrl;
    })(mo.DataController);
    gd.BagDataCtrl = BagDataCtrl;
    egret.registerClass(BagDataCtrl,"gd.BagDataCtrl");
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/12/17.
 */
var gd;
(function (gd) {
    var BossCtrl = (function (_super) {
        __extends(BossCtrl, _super);
        function BossCtrl() {
            _super.apply(this, arguments);
            this._bossListData = null;
        }
        var d = __define,c=BossCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.BossData;
            this._isOpen = 0;
        };
        p.isGuildBoss = function (bossId) {
            var self = this;
            var cfg_c_bossParameter = mo.getJSONWithFileName(gc.cfg_c_bossParameter);
            return cfg_c_bossParameter[bossId] != null;
        };
        /**
         * 找回boss资源opt
         * @param bossId
         * @param combat 战力
         * @param type 找回类型 0:胜利 1:失败
         */
        p.getBackResOpt = function (bossId, combat, type) {
            if (type === void 0) { type = 0; }
            var cfg_c_bossRes = mo.getJSONWithFileName(gc.cfg_c_bossRes);
            var c_bossRes = cfg_c_bossRes[bossId];
            var res = [], costDimond = 0, combatNeed = 0;
            var winCondtionKeys = [
                gc.c_bossRes_winCond1, gc.c_bossRes_winCond2, gc.c_bossRes_winCond3, gc.c_bossRes_winCond4, gc.c_bossRes_winCond5,
                gc.c_bossRes_winCond6, gc.c_bossRes_winCond7, gc.c_bossRes_winCond8, gc.c_bossRes_winCond9, gc.c_bossRes_winCond10
            ];
            var winResKeys = [
                gc.c_bossRes_winRes1, gc.c_bossRes_winRes2, gc.c_bossRes_winRes3, gc.c_bossRes_winRes4, gc.c_bossRes_winRes5,
                gc.c_bossRes_winRes6, gc.c_bossRes_winRes7, gc.c_bossRes_winRes8, gc.c_bossRes_winRes9, gc.c_bossRes_winRes10
            ];
            var failCondtionKeys = [
                gc.c_bossRes_failCond1, gc.c_bossRes_failCond2, gc.c_bossRes_failCond3, gc.c_bossRes_failCond4, gc.c_bossRes_failCond5,
                gc.c_bossRes_failCond6, gc.c_bossRes_failCond7, gc.c_bossRes_failCond8, gc.c_bossRes_failCond9, gc.c_bossRes_failCond10
            ];
            var failResKeys = [
                gc.c_bossRes_failRes1, gc.c_bossRes_failRes2, gc.c_bossRes_failRes3, gc.c_bossRes_failRes4, gc.c_bossRes_failRes5,
                gc.c_bossRes_failRes6, gc.c_bossRes_failRes7, gc.c_bossRes_failRes8, gc.c_bossRes_failRes9, gc.c_bossRes_failRes10
            ];
            var condtionKeys = (type == 0) ? winCondtionKeys : failCondtionKeys;
            var resKeys = (type == 0) ? winResKeys : failResKeys;
            //通过战力计算单位和找回花费
            for (var i = 0, li = condtionKeys.length; i < li; i++) {
                var WCKey = condtionKeys[i];
                var g = c_bossRes[WCKey];
                if (!g)
                    break;
                combatNeed = g[0];
                costDimond = g[1];
                if (combat >= combatNeed) {
                    res = c_bossRes[resKeys[i]];
                    break;
                }
            }
            var opt = {
                items: res,
                combatNeed: combatNeed,
                costDimond: costDimond
            };
            return opt;
        };
        //获取剩余战斗次数
        p.getReFightNum = function () {
            var todayCount = gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.enterBoss);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var maxCount = c_game[gc.id_c_game.worldBossCfg][9];
            ; //获取最大次数
            var reNum = maxCount - todayCount;
            if (reNum <= 0)
                reNum = 0;
            return reNum;
        };
        //获取剩余复活次数
        p.getReRepeatNum = function () {
            var todayCount = gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.repeatBoss);
            var c_vip = mo.getJSONWithFileName(gc.cfg_c_vip);
            var maxCount = c_vip[gd.userCtrl.getVip()][gc.c_vip_guildBoss]; //获取最大次数
            var reNum = maxCount - todayCount;
            if (reNum <= 0)
                reNum = 0;
            return reNum;
        };
        BossCtrl.ON_BOSS_CALL_UPDATE = "ON_BOSS_CALL_UPDATE";
        BossCtrl.ON_WORLD_BOSS_OPEN_CHANGE = "ON_WORLD_BOSS_OPEN_CHANGE";
        return BossCtrl;
    })(mo.DataController);
    gd.BossCtrl = BossCtrl;
    egret.registerClass(BossCtrl,"gd.BossCtrl");
    gd.bossCtrl = BossCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/12/17.
 */
var gd;
(function (gd) {
    var BossFightCtrl = (function (_super) {
        __extends(BossFightCtrl, _super);
        function BossFightCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=BossFightCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this._entityDic = {};
            this._isAutoFight = false;
            this._openBossIds = [];
        };
        //获取开启的bossid组
        p.getOpenIds = function () {
            return this._openBossIds;
        };
        //通过类型获取
        p.getOpenIdsByType = function (type, isLimit) {
            var self = this;
            var openBossIds = [];
            var guildBossIds = [];
            var worldBossIds = [];
            var limitBossIds = [];
            for (var i = 0; i < self._openBossIds.length; i++) {
                var locBossId = self._openBossIds[i];
                if (gd.bossCtrl.isGuildBoss(locBossId)) {
                    if (gd.bossGuildCtrl.isLimitTime(locBossId)) {
                        limitBossIds.push(locBossId);
                    }
                    else {
                        guildBossIds.push(locBossId);
                    }
                }
                else {
                    worldBossIds.push(locBossId);
                }
            }
            switch (type) {
                case gc.c_prop.worldBossTypeKey.world:
                    openBossIds = worldBossIds;
                    break;
                case gc.c_prop.worldBossTypeKey.guild:
                    if (isLimit) {
                        openBossIds = limitBossIds;
                    }
                    else {
                        openBossIds = guildBossIds;
                    }
                    break;
            }
            return openBossIds;
        };
        p.setOpenIds = function (openBossIds) {
            openBossIds = openBossIds || [];
            var self = this;
            var oldIds = self._openBossIds.concat();
            self._openBossIds = openBossIds;
            //如果存在，被移除，则关闭
            //如果不存在，
            for (var i = 0; i < oldIds.length; i++) {
                var locBossId = oldIds[i];
                //开启
                if (self._openBossIds.indexOf(locBossId) == -1) {
                    gd.bossFightCtrl.getEntity(locBossId).setIsOpen(0);
                }
            }
            for (var i = 0; i < self._openBossIds.length; i++) {
                var locBossId = self._openBossIds[i];
                gd.bossFightCtrl.getEntity(locBossId).setIsOpen(1);
            }
        };
        //是否自动战斗
        p.isAutoFight = function () {
            return this._isAutoFight;
        };
        p.startAutoFight = function () {
            var self = this;
            self._isAutoFight = true;
            self.startUpdateInterval2();
        };
        p.endAutoFight = function () {
            var self = this;
            self._isAutoFight = false;
            self.clearUpdateIntervalId2();
        };
        p.getEntity = function (bossId) {
            var self = this;
            var entity = self._getEntity(bossId);
            if (gd.bossCtrl.isGuildBoss(bossId)) {
                var bossData = gd.bossGuildCtrl.getBossData(bossId);
                if (bossData) {
                    var startTime = bossData[gc.dsConsts.BossEntity.startTime];
                    var eStartTime = entity.getStartTime();
                    if (eStartTime && startTime) {
                        startTime = Date.newDate(startTime);
                        if (!eStartTime.equals(startTime)) {
                            self.delEntity(bossId);
                            entity = self._getEntity(bossId);
                        }
                    }
                    entity.setStartTime(startTime);
                }
            }
            return entity;
        };
        p._getEntity = function (bossId) {
            var self = this;
            var entity = self._entityDic[bossId];
            if (entity)
                return entity;
            entity = new gd.BossFightEntityCtrl();
            entity.setBossId(bossId);
            self._entityDic[bossId] = entity;
            return entity;
        };
        p.delEntity = function (bossId) {
            var self = this;
            var entity = self._entityDic[bossId];
            if (!entity)
                return;
            entity.clearUpdateIntervalId1();
            delete self._entityDic[bossId];
        };
        p.syncInspire = function () {
            var self = this;
            for (var key in self._entityDic) {
                var locEntity = self._entityDic[key];
                locEntity.syncInspire();
            }
        };
        p.startUpdateInterval2 = function () {
            var self = this;
            self.clearUpdateIntervalId2();
            self._syncIntervalId2 = mo.setInterval(self._update2, self, 2 * 1000);
        };
        p.clearUpdateIntervalId2 = function () {
            var self = this;
            if (self._syncIntervalId2) {
                mo.clearInterval(self._syncIntervalId2);
                self._syncIntervalId2 = null;
            }
        };
        p._update2 = function () {
            var self = this;
            if (!self._isAutoFight)
                return;
            if (!self._autoBossId)
                return;
            var curEntity = self.getEntity(self._autoBossId);
            if (curEntity.getFightCd() > 0)
                return;
            if (!gd.fightCtrl.isSpFighting && !curEntity.isOver()) {
                self.pushNotify(self.__class.ON_BOSS_AUTO_FIGHT);
                curEntity.startFight(function () { }, this);
                self.clearUpdateIntervalId2();
            }
        };
        //设置自动bossid
        p.setAutoBossId = function (bossId) {
            this._autoBossId = bossId;
        };
        //获取自动bossid
        p.getAutoBossId = function () {
            return this._autoBossId;
        };
        //设置当前正在挑战的bossId
        p.setCurFightBossId = function (bossId) {
            this._curFightBossId = bossId;
        };
        //获取当前正在挑战的bossId
        p.getCurFightBossId = function () {
            return this._curFightBossId;
        };
        //获取最后退出时间
        p.getLastExitTime = function () {
            return this._lastExitTime;
        };
        //设置最后退出时间
        p.setLastExitTime = function (time) {
            this._lastExitTime = time;
        };
        //是否有自动挑战的boss
        p.hasAutoFightBoss = function () {
            return this._autoBossId && this._isAutoFight;
        };
        BossFightCtrl.ON_BOSS_CALL_UPDATE = "ON_BOSS_CALL_UPDATE";
        BossFightCtrl.ON_BOSS_AUTO_FIGHT = "ON_BOSS_AUTO_FIGHT";
        BossFightCtrl.ON_WORLD_BOSS_OPEN_CHANGE = "ON_WORLD_BOSS_OPEN_CHANGE";
        BossFightCtrl.BOSS_STATUS = { fighting: 2, sleep: 3, cd: 4, canCall: 5, prize: 6 }; //2，正在挑战中 ,3，Boss正在休息 ,4，已被击杀,cd中 ,5，可召唤,6，结算中
        return BossFightCtrl;
    })(mo.DataController);
    gd.BossFightCtrl = BossFightCtrl;
    egret.registerClass(BossFightCtrl,"gd.BossFightCtrl");
    gd.bossFightCtrl = BossFightCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/12/17.
 */
var gd;
(function (gd) {
    var BossFightEntityCtrl = (function (_super) {
        __extends(BossFightEntityCtrl, _super);
        function BossFightEntityCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=BossFightEntityCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.BossData;
            this._hurtArr = [];
            this._isOver = true;
            this._isOpen = 0;
            this._roundHurt = 0;
        };
        p.setStartTime = function (time) {
            var self = this;
            if (time)
                time = Date.newDate(time);
            self._startTime = time;
        };
        p.getStartTime = function () {
            return this._startTime;
        };
        p.isOpen = function () {
            return this._isOpen != 0;
        };
        //设置是否开启
        p.setIsOpen = function (value) {
            var self = this;
            var oldValue = self._isOpen;
            if (self._isOpen != value) {
                self._isOpen = value;
                if (gd.bossCtrl.isGuildBoss(self._bossId)) {
                    gd.bossGuildCtrl.freshData(function () {
                        self.pushNotify(self.__class.ON_WORLD_BOSS_OPEN_CHANGE);
                    }, self);
                }
                else {
                    gd.bossWorldCtrl.freshData(function () {
                        self.pushNotify(self.__class.ON_WORLD_BOSS_OPEN_CHANGE);
                    }, self);
                }
                if (oldValue == 1) {
                    self.onOver();
                }
            }
        };
        p.initilized = function () {
            var self = this;
            return self._data ? true : false;
        };
        p.setBossId = function (bossId) {
            this._bossId = bossId;
        };
        p.mData = function (hurtArr, isEnd) {
            var self = this;
            var str = JSON.stringify(hurtArr);
            var key = self.getMyKey();
            return mo.md5(key + str + isEnd);
        };
        //进入系统
        p.enter = function (cb, target) {
            var self = this;
            var args = {};
            var argsKeys = gc.iface.a_boss_enter_args;
            args[argsKeys.bossId] = self._bossId;
            mo.requestWaiting4Server(gc.iface.a_boss_enter, args, function (data) {
                self.init(data);
                var lastExitTime = self.get(gc.dsConsts.BossData.lastExitTime);
                gd.bossFightCtrl.setLastExitTime(lastExitTime);
                var isOver = self.get(gc.dsConsts.BossData.isOver);
                self._isOver = isOver;
                cb.call(target, data);
            });
        };
        //是否自己复活
        p.isSelfRepeat = function () {
            var self = this;
            var isRepeat = self.get(gc.dsConsts.BossData.isRepeat);
            var callUserId = self.get(gc.dsConsts.BossData.callUserId);
            if (isRepeat && callUserId == gd.userCtrl.getId()) {
                return true;
            }
            else {
                return false;
            }
        };
        //是否行会召唤
        p.isSelfCall = function () {
            var self = this;
            var callUserGuildId = self.get(gc.dsConsts.BossData.callUserGuildId);
            if (callUserGuildId == gd.guildCtrl.getId()) {
                return true;
            }
            else {
                return false;
            }
        };
        //获取我的key值
        p.getMyKey = function () {
            return this.get(gc.dsConsts.BossData.myKey);
        };
        //获取BOSS总血量
        p.getTotalHp = function () {
            return this.get(gc.dsConsts.BossData.originHp);
        };
        //获取BOSS当前血量killTime
        p.getCurHp = function () {
            return this.get(gc.dsConsts.BossData.curHp);
        };
        //获取活动剩余时间
        p.getReOverSeconds = function () {
            var self = this;
            var type = self.getType();
            if (type == gc.c_prop.worldBossTypeKey.guild) {
                return gd.bossGuildCtrl.getReDisappearSeconds(self._bossId);
            }
            else {
                return gd.bossWorldCtrl.getReDisappearSeconds(self._bossId);
            }
        };
        //获取开启cd
        p.getOpenCd = function () {
            var self = this;
            var type = self.getType();
            if (type == gc.c_prop.worldBossTypeKey.guild) {
                return gd.bossGuildCtrl.getOpenCd(self._bossId);
            }
            else {
                return gd.bossWorldCtrl.getOpenCd(self._bossId);
            }
        };
        //获取战斗cd，返回秒
        p.getFightCd = function () {
            var self = this;
            var lastExitTime = gd.bossFightCtrl.getLastExitTime();
            if (!lastExitTime)
                return 0;
            lastExitTime = Date.newDate(lastExitTime);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var exitCd = c_game[gc.id_c_game.worldBossCfg][1];
            var reSeconds = Date.newDate().getSecondsBetween(lastExitTime.clone().addSeconds(exitCd));
            reSeconds = reSeconds > 0 ? reSeconds : 0;
            return reSeconds;
        };
        //清除退出cd
        p.clearFightCd = function (cb, target) {
            var self = this;
            var args = {};
            mo.requestWaiting4Server(gc.iface.a_boss_clearFightCd, args, function (data) {
                gd.userCtrl.updateEntity(data);
                gd.bossFightCtrl.setLastExitTime(Date.newDate().addDays(-1));
                cb.call(target, data);
            });
        };
        //获取我的伤害
        p.getMyHurt = function () {
            return this.get(gc.dsConsts.BossData.myHurt);
        };
        //获取类型
        p.getType = function () {
            var self = this;
            var isGuildBoss = gd.bossCtrl.isGuildBoss(self._bossId);
            if (isGuildBoss) {
                return gc.c_prop.worldBossTypeKey.guild;
            }
            else {
                return gc.c_prop.worldBossTypeKey.world;
            }
        };
        //获取我的伤害
        p.getMyRank = function () {
            return this.get(gc.dsConsts.BossData.myRank);
        };
        //对boss造成伤害
        p.hurt = function (hurt, heroId) {
            var self = this;
            var curHp = self.getCurHp();
            if (curHp < 0)
                return;
            if (self.isLimitHp()) {
                self._hurtArr.push([hurt, heroId, 0]);
            }
            else {
                self._roundHurt += hurt;
                curHp -= hurt;
                self._hurtArr.push([hurt, heroId, 1]);
            }
            if (curHp < 0) {
                curHp = 0;
                self._pushHurt(1);
            }
            self.set(gc.dsConsts.BossData.curHp, curHp);
        };
        p.isLimitHp = function () {
            var self = this;
            if (!gd.bossCtrl.isGuildBoss(self._bossId))
                return false;
            var totalHp = this.getTotalHp();
            var per = this._roundHurt / totalHp;
            return per > 0.1;
        };
        p._pushHurt = function (isEnd) {
            var self = this;
            if (self._isOver)
                return;
            isEnd = isEnd || 0;
            if (self._hurtArr.length <= 0)
                return;
            var hurtDic = {};
            var hurtCount = 0;
            var hurtNum = 0;
            for (var i = 0; i < self._hurtArr.length; i++) {
                var locHurtData = self._hurtArr[i];
                var locHurt = locHurtData[0];
                var locHeroId = locHurtData[1];
                var locIsHurt = locHurtData[2];
                var locHeroData = hurtDic[locHeroId] || [0, 0, 0];
                var locHurtCount = locHeroData[0] || 0;
                var locHurtNum = locHeroData[1] || 0;
                var locCurHurtCount = locHeroData[2] || 0; //真实伤害
                locHurtCount = locHurtCount + locHurt;
                locHurtNum++;
                if (locIsHurt) {
                    locCurHurtCount = locCurHurtCount + locHurt;
                }
                hurtCount += locHurt;
                hurtNum++;
                hurtDic[locHeroId] = [locHurtCount, locHurtNum, locCurHurtCount];
            }
            self._hurtArr.length = 0;
            //var mData =self.mData(hurtDic,isEnd);
            var args = {};
            var argsKeys = gc.iface.a_boss_hurt_args;
            args[argsKeys.hurtDic] = hurtDic;
            args[argsKeys.isEnd] = isEnd;
            args[argsKeys.mData] = 1;
            args[argsKeys.bossId] = self.getBossId();
            args[argsKeys.hurtArr] = [hurtCount, hurtNum];
            mo.request4Server(gc.iface.a_boss_hurt, args, function (data) {
                var bossData = data[gc.dsConsts.ExTreasureBossData.bossData];
                var bagItem = data[gc.dsConsts.ExTreasureBossData.bagItem];
                if (!bossData)
                    return;
                if (bagItem) {
                    var userData = {};
                    var bag = gd.userUtils.getNewBag({}, bagItem);
                    userData[gc.dsConsts.UserEntity.bag] = bag;
                    gd.userCtrl.updateEntity(userData);
                }
                var isOver = bossData[gc.dsConsts.BossData.isOver];
                self.updateEntity(bossData);
                if (isOver)
                    self.onOver();
            });
        };
        //获取bossId,怪物id
        p.getBossId = function () {
            return this._bossId;
        };
        //获取鼓舞加成万分比
        p.getInspireHurt = function () {
            var self = this;
            if (!self._data)
                return 0;
            if (self.getInspireReSeconds() <= 0)
                return 0;
            return self.get(gc.dsConsts.BossData.inspireHurt);
        };
        //获取召唤者的名字
        p.getCallUserName = function () {
            return this.get(gc.dsConsts.BossData.callUserName);
        };
        //获取召唤者的公会
        p.getCallUserGuildName = function () {
            return this.get(gc.dsConsts.BossData.callUserGuildName);
        };
        //鼓舞
        p.inspire = function (cb, target) {
            var self = this;
            var args = {};
            var argsKeys = gc.iface.a_boss_inspire_args;
            args[argsKeys.bossId] = self.getBossId();
            mo.requestWaiting4Server(gc.iface.a_boss_inspire, args, function (data) {
                var userData = data[gc.dsConsts.ExBossData.userData];
                if (userData)
                    gd.userCtrl.updateEntity(userData);
                var bossData = data[gc.dsConsts.ExBossData.bossData];
                if (bossData)
                    self.updateEntity(bossData);
                //inspireAdd
                mo.showMsg(gc.id_c_msgCode.inspireAdd);
                cb.call(target, data);
            });
        };
        //获取鼓舞剩余时间(秒)
        p.getInspireReSeconds = function () {
            var self = this;
            var inspireEndTime = self.get(gc.dsConsts.BossData.inspireEndTime);
            inspireEndTime = Date.newDate(inspireEndTime);
            var reSeconds = Date.newDate().getSecondsBetween(inspireEndTime);
            reSeconds = reSeconds > 0 ? reSeconds : 0;
            return reSeconds;
        };
        //获取鼓舞次数
        p.getInspireNum = function () {
            var self = this;
            if (!self._data)
                return 0;
            return self.get(gc.dsConsts.BossData.inspireNum);
        };
        /**
         * 获取鼓舞名字列表
         * @param cb
         * @param target
         */
        p.getInspireRecordArr = function (cb, target) {
            var self = this;
            var args = {};
            var argsKeys = gc.iface.a_boss_getInspireRecordArr_args;
            args[argsKeys.bossId] = self.getBossId();
            mo.requestWaiting4Server(gc.iface.a_boss_getInspireRecordArr, args, function (data) {
                cb.call(target, data);
            });
        };
        //同步鼓舞
        p.syncInspire = function () {
            var self = this;
            if (!self._data)
                return;
            var args = {};
            var argsKeys = gc.iface.a_boss_syncInspire_args;
            args[argsKeys.bossId] = self.getBossId();
            mo.requestWaiting4Server(gc.iface.a_boss_syncInspire, args, function (data) {
                if (data)
                    self.updateEntity(data);
            });
        };
        //获取第一名伤害排名     gc.dsConsts.BossHurtRank
        p.getFirstHurtRank = function (cb, target) {
            var self = this;
            if (!self._firstHurtLastTime) {
                self._firstHurtLastTime = Date.newDate();
            }
            if (self._firstHurtRankData && self._firstHurtLastTime.getSecondsBetween(Date.newDate()) < 10) {
                return cb.call(target, self._firstHurtRankData);
            }
            self._firstHurtLastTime = Date.newDate();
            self._getFirstHurtRank(cb, target);
        };
        p._getFirstHurtRank = function (cb, target) {
            var self = this;
            var args = {};
            var argsKeys = gc.iface.a_boss_getFirstHurtRank_args;
            args[argsKeys.bossId] = self.getBossId();
            mo.request4Server(gc.iface.a_boss_getFirstHurtRank, args, function (data) {
                self._firstHurtRankData = data;
                cb.call(target, data);
            });
        };
        //获取前20伤害排名     [gc.dsConsts.BossHurtRank]
        p.getHurtRankList = function (cb, target) {
            var self = this;
            var args = {};
            var argsKeys = gc.iface.a_boss_getHurtRankList_args;
            args[argsKeys.bossId] = self.getBossId();
            mo.request4Server(gc.iface.a_boss_getHurtRankList, args, function (data) {
                cb.call(target, data);
            });
        };
        //可以参与战斗的用户等级
        p.getFightableLvl = function () {
            var self = this;
            var type = self.getType(), bossId = self.getBossId();
            var fightLvl = 0;
            if (type == gc.c_prop.worldBossTypeKey.guild) {
                var c_bossParameter = mo.getJSONWithFileName(gc.cfg_c_bossParameter);
                var c_data = c_bossParameter[bossId];
                fightLvl = c_data[gc.c_bossParameter_fightLvl];
            }
            return fightLvl;
        };
        //可以参与战斗的用户等级
        p.getFightMaxLvl = function () {
            var self = this;
            var type = self.getType(), bossId = self.getBossId();
            var fightLvl = 99999;
            if (type == gc.c_prop.worldBossTypeKey.guild) {
                var c_bossParameter = mo.getJSONWithFileName(gc.cfg_c_bossParameter);
                var c_data = c_bossParameter[bossId];
                fightLvl = c_data[gc.c_bossParameter_maxLvl];
            }
            return fightLvl;
        };
        //参与战斗
        p.startFight = function (cb, target) {
            var self = this;
            var bossId = self.getBossId();
            //判断再次挑战的CD
            if (self.getFightCd() > 0)
                return mo.showMsg(gc.id_c_msgCode.challengeBossCd);
            //判断等级
            var fightLvl = self.getFightableLvl();
            var maxLvl = self.getFightMaxLvl();
            if (gd.userCtrl.getLvl() < fightLvl || gd.userCtrl.getLvl() > maxLvl)
                return mo.showMsg(gc.id_c_msgCode.noLvlchallengeBoss, fightLvl, maxLvl);
            if (gd.fightCtrl.isSpFighting)
                return mo.showMsg("还在挑战中，请稍后");
            var args = {};
            var argsKeys = gc.iface.a_boss_startFight_args;
            args[argsKeys.bossId] = bossId;
            mo.requestWaiting4Server(gc.iface.a_boss_startFight, args, function (data) {
                self._roundHurt = 0;
                var bossData = data[gc.dsConsts.ExBossData.bossData];
                var userData = data[gc.dsConsts.ExBossData.userData];
                if (userData)
                    gd.userCtrl.updateEntity(userData);
                var isFirstEnter = bossData[gc.dsConsts.BossData.isFirstEnter];
                if (isFirstEnter)
                    self._hurtArr.length = 0;
                self._isOver = false;
                gd.fightCtrl.isSpFighting = true;
                gd.bossFightCtrl.setCurFightBossId(bossId);
                self._startUpdateInterval1();
                gd.bossFightCtrl.clearUpdateIntervalId2();
                gd.curBFECtrl = self; //设置当前使用的bossFightEntityCtrl
                //进入战斗场景
                if (mo.moduleMgr.curModule.name == g_consts.moduleId.home) {
                    mo.moduleMgr.runModule(g_consts.moduleId.fight);
                }
                else {
                    self.pushNotify(self.__class.START_FIGHT_BOSS_IN_FIGHT_SCENE);
                }
                gd.fightLayer.onEnterWorldBoss({ bossId: self.getBossId() });
                self.pushNotify(self.__class.ON_START_FIGHT_BOSS);
                cb.call(target, bossData);
            });
        };
        //退出战斗
        p.exitFight = function (cb, target) {
            var self = this;
            var bossId = self.getBossId();
            var args = {};
            var argsKeys = gc.iface.a_boss_exitFight_args;
            args[argsKeys.bossId] = bossId;
            self._pushHurt(1);
            mo.requestWaiting4Server(gc.iface.a_boss_exitFight, args, function (data) {
                self.clearUpdateIntervalId1();
                gd.bossFightCtrl.startUpdateInterval2();
                gd.bossFightCtrl.setLastExitTime(Date.newDate());
                gd.bossFightCtrl.setCurFightBossId(null);
                cb.call(target, data);
            });
        };
        /**
         * 获取战斗结果
         * @param cb
         * @param target
         * @returns ds.BossResult
         */
        p.getBossResult = function (cb, target) {
            var self = this;
            var bossId = self.getBossId();
            var args = {};
            var argsKeys = gc.iface.a_boss_getBossResult_args;
            args[argsKeys.bossId] = bossId;
            args[argsKeys.originBossId] = self.getOriginBossId();
            mo.requestWaiting4Server(gc.iface.a_boss_getBossResult, args, function (data) {
                cb.call(target, data);
            });
        };
        /**
         * 获取原始id
         * @returns {*|*|*|*|*|*|*|*|*|*|*}
         */
        p.getOriginBossId = function () {
            var self = this;
            var type = self.getType();
            if (type == gc.c_prop.worldBossTypeKey.guild) {
                return gd.bossGuildCtrl.getOriginBossId(self._bossId);
            }
            else {
                return gd.bossWorldCtrl.getOriginBossId(self._bossId);
            }
        };
        /**
         * 获取结算结果
         * @param cb
         * @param target
         * @returns ds.BossResultData
         */
        p.getResultData = function (cb, target) {
            var self = this;
            var args = {};
            var argsKeys = gc.iface.a_boss_getResultData_args;
            args[argsKeys.originBossId] = self.getOriginBossId();
            mo.requestWaiting4Server(gc.iface.a_boss_getResultData, args, function (data) {
                cb.call(target, data);
            });
        };
        p.isOver = function () {
            return this._isOver;
        };
        p._startUpdateInterval1 = function () {
            var self = this;
            self.clearUpdateIntervalId1();
            self._syncIntervalId1 = mo.setInterval(self._update1, self, 3 * 1000); //3秒
        };
        p._update1 = function () {
            var self = this;
            self._pushHurt(0);
        };
        p.clearUpdateIntervalId1 = function () {
            var self = this;
            if (self._syncIntervalId1) {
                mo.clearInterval(self._syncIntervalId1);
                self._syncIntervalId1 = null;
            }
        };
        /********************************************/
        //监听数据改变
        p.onChangeData = function () {
            //数据改动
        };
        p.onOver = function () {
            //结束
            var self = this;
            if (self._isOver)
                return;
            self._isOver = true;
            gd.bossFightCtrl.endAutoFight();
            self._hurtArr.length = 0;
            self.setIsOpen(0);
            self._getFirstHurtRank(function () { }, this);
            self.clearUpdateIntervalId1();
            //有伤害才弹出
            var myHurt = self.getMyHurt();
            if (myHurt > 0) {
                gd.fightLayer.onWorldBossOver(self);
            }
            self.exitFight(function () { }, self);
        };
        BossFightEntityCtrl.START_FIGHT_BOSS_IN_FIGHT_SCENE = "START_FIGHT_BOSS_IN_FIGHT_SCENE";
        BossFightEntityCtrl.ON_START_FIGHT_BOSS = "ON_START_FIGHT_BOSS";
        BossFightEntityCtrl.ON_WORLD_BOSS_OPEN_CHANGE = "ON_WORLD_BOSS_OPEN_CHANGE";
        return BossFightEntityCtrl;
    })(mo.DataController);
    gd.BossFightEntityCtrl = BossFightEntityCtrl;
    egret.registerClass(BossFightEntityCtrl,"gd.BossFightEntityCtrl");
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/12/17.
 */
var gd;
(function (gd) {
    var BossGuildCtrl = (function (_super) {
        __extends(BossGuildCtrl, _super);
        function BossGuildCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=BossGuildCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.BossData;
            this._bossListData = {};
        };
        /**
         * 获取boss信息
         * @param cb
         * @param target
         */
        p.getInfo = function (cb, target) {
            var self = this;
            self._initGuild(function () {
                mo.requestWaiting4Server(gc.iface.a_boss_getGuildBossList, {}, function (data) {
                    var otherData = data[gc.dsConsts.ExBossEntity.otherData];
                    self._otherData = otherData;
                    var dataList = data[gc.dsConsts.ExBossEntity.bossList];
                    self._bossListData = {};
                    for (var i = 0; i < dataList.length; i++) {
                        var locData = dataList[i];
                        var locBossId = locData[gc.dsConsts.BossEntity.bossId];
                        self._bossListData[locBossId] = locData;
                    }
                    cb.call(target);
                });
            }, self);
        };
        //获取boss
        p.getBossData = function (bossId) {
            var self = this;
            return self._bossListData[bossId];
        };
        /**
         * 刷新boss信息
         * @param cb
         * @param target
         */
        p.freshData = function (cb, target) {
            var self = this;
            self._initGuild(function () {
                mo.request4Server(gc.iface.a_boss_getGuildBossList, {}, function (data) {
                    var otherData = data[gc.dsConsts.ExBossEntity.otherData];
                    self._otherData = otherData;
                    var dataList = data[gc.dsConsts.ExBossEntity.bossList];
                    self._bossListData = {};
                    for (var i = 0; i < dataList.length; i++) {
                        var locData = dataList[i];
                        var locBossId = locData[gc.dsConsts.BossEntity.bossId];
                        self._bossListData[locBossId] = locData;
                    }
                    cb.call(target);
                });
            }, self);
        };
        p._initGuild = function (cb, target) {
            if (gd.guildCtrl.getData()) {
                cb.call(target);
            }
            else {
                gd.guildCtrl.getInfo(cb, target);
            }
        };
        //是否已经存在挑战的boss
        p.hasFightingBoss = function () {
            var self = this;
            for (var key in self._bossListData) {
                var locBossId = key;
                var locStatus = self.getBossStatus(locBossId);
                if (locStatus == gd.BossFightCtrl.BOSS_STATUS.fighting) {
                    return true;
                }
            }
            return false;
        };
        //本行会是否正在挑战boss
        p.hasGuildFightingBoss = function () {
            var self = this;
            for (var key in self._bossListData) {
                var locBossId = key;
                var locStatus = self.getBossStatus(locBossId);
                if (locStatus == gd.BossFightCtrl.BOSS_STATUS.fighting) {
                    var locOtherData = self.getOtherData(locBossId);
                    var locGuildId = locOtherData[0];
                    if (locGuildId && gd.guildCtrl.getData() && locGuildId == gd.guildCtrl.get(gc.dsConsts.GuildEntity.id))
                        return true;
                }
            }
            return false;
        };
        /**
         * 获取其他数据
         * @param bossId
         * @returns [行会id,行会名称，是否上锁]
         */
        p.getOtherData = function (bossId) {
            var self = this;
            var otherData = self._otherData[bossId];
            return otherData;
        };
        //是否限时
        p.isLimitTime = function (bossId) {
            var self = this;
            var bossData = self._bossListData[bossId];
            var isLimit = bossData[gc.dsConsts.BossEntity.isLimit];
            return isLimit;
        };
        //获取限时开始时间
        p.getLimitStartTime = function (bossId) {
            var self = this;
            var bossData = self._bossListData[bossId];
            return bossData[gc.dsConsts.BossEntity.limitStartTime];
        };
        //获取限时结束时间
        p.getLimitEndTime = function (bossId) {
            var self = this;
            var bossData = self._bossListData[bossId];
            return bossData[gc.dsConsts.BossEntity.limitEndTime];
        };
        //获取原始id
        p.getOriginBossId = function (bossId) {
            var self = this;
            var bossData = self._bossListData[bossId];
            return bossData[gc.dsConsts.BossEntity.originBossId];
        };
        /**
         * 判断boss状态
         * @param bossId
         * @returns {number} 1，未开启 ,2，正在挑战中 ,3，Boss正在休息 ,4，已被击杀,cd中 ,5，可召唤,6，结算中
         */
        p.getBossStatus = function (bossId) {
            var self = this;
            //没工会未开启
            //if (!guildCtrl.getData()) return 1;
            //var guildLvl = guildCtrl.get(gc.dsConsts.GuildEntity.lvl);
            //var c_bossParameter = mo.getJSONWithFileName(gc.cfg_c_bossParameter);
            //var c_data = c_bossParameter[bossId];
            //var openLvl = c_data[gc.c_bossParameter_openLvl];
            //未开启
            //if (guildLvl < openLvl) return 1;
            var bossData = self._bossListData[bossId];
            var status = bossData[gc.dsConsts.BossEntity.status];
            //正在挑战中
            if (status == 1)
                return gd.BossFightCtrl.BOSS_STATUS.fighting;
            //结算中
            if (status == 2)
                return gd.BossFightCtrl.BOSS_STATUS.prize;
            //Boss正在休息
            var nowDate = Date.newDate();
            if (nowDate.isBefore(self.getOpenStartTime()) || nowDate.isAfter(self.getOpenEndTime())) {
                return gd.BossFightCtrl.BOSS_STATUS.sleep;
            }
            var cd = self.getOpenCd(bossId);
            //已被击杀,cd中
            if (cd > 0)
                return gd.BossFightCtrl.BOSS_STATUS.cd;
            //可召唤
            return gd.BossFightCtrl.BOSS_STATUS.canCall;
        };
        //获取开始时间
        p.getOpenStartTime = function () {
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var startTime = c_game[gc.id_c_game.worldBossCfg][5];
            var startTimeHours = parseInt(startTime.split(";")[0]);
            var startTimeMinutes = parseInt(startTime.split(";")[1]);
            var reTime = Date.newDate().clearTime();
            reTime.addHours(startTimeHours).addMinutes(startTimeMinutes);
            return reTime;
        };
        //获取结束时间
        p.getOpenEndTime = function () {
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var startTime = c_game[gc.id_c_game.worldBossCfg][6];
            var startTimeHours = parseInt(startTime.split(";")[0]);
            var startTimeMinutes = parseInt(startTime.split(";")[1]);
            var reTime = Date.newDate().clearTime();
            reTime.addHours(startTimeHours).addMinutes(startTimeMinutes);
            return reTime;
        };
        /**
         * 获取开启cd
         * @returns {number}
         */
        p.getOpenCd = function (bossId) {
            var self = this;
            /*            var status = self.getBossStatus(bossId);
             if(status!=1) return 0;*/
            var bossData = self._bossListData[bossId];
            var c_bossParameter = mo.getJSONWithFileName(gc.cfg_c_bossParameter);
            var c_data = c_bossParameter[bossId];
            var summonCd = c_data[gc.c_bossParameter_summonCd];
            var deathTime = bossData[gc.dsConsts.BossEntity.deathTime] || Date.newDate().addDays(-10);
            deathTime = new Date(deathTime);
            var diffSeconds = deathTime.getSecondsBetween(Date.newDate());
            var cd = summonCd - diffSeconds;
            cd = cd > 0 ? cd : 0;
            return cd;
        };
        //获取剩余消失时间
        p.getReDisappearSeconds = function (bossId) {
            var self = this;
            var bossData = self._bossListData[bossId];
            var startTime = bossData[gc.dsConsts.BossEntity.startTime];
            startTime = new Date(startTime);
            var c_boss = mo.getJSONWithFileNameAndID(gc.cfg_c_bossParameter, bossId);
            var aliveTime = c_boss[gc.c_bossParameter_timeLimit];
            var diffSeconds = Date.newDate().getSecondsBetween(startTime.clone().addSeconds(aliveTime));
            diffSeconds = diffSeconds > 0 ? diffSeconds : 0;
            return diffSeconds;
        };
        //获取结算剩余时间
        p.getRePrizeSeconds = function (bossId) {
            var self = this;
            var bossData = self._bossListData[bossId];
            var endTime = bossData[gc.dsConsts.BossEntity.endTime];
            endTime = new Date(endTime);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var prizeTime = c_game[gc.id_c_game.worldBossCfg][8];
            var diffSeconds = Date.newDate().getSecondsBetween(endTime.clone().addSeconds(prizeTime));
            diffSeconds = diffSeconds > 0 ? diffSeconds : 0;
            return diffSeconds;
        };
        //是否在限时内
        p.isInStartTime = function (bossId) {
            var self = this;
            var ret = true;
            var bossData = self._bossListData[bossId];
            var isLimit = self.isLimitTime(bossId);
            if (isLimit) {
                var startTime = Date.newDate(self.getLimitStartTime(bossId));
                var endTime = Date.newDate(self.getLimitEndTime(bossId));
                var nowTime = Date.newDate();
                if (nowTime.isBefore(startTime) || nowTime.isAfter(endTime)) {
                    ret = false;
                }
            }
            return ret;
        };
        //是否在周几内
        p.isInWeek = function (bossId) {
            var self = this;
            var bossData = self._bossListData[bossId];
            var week = bossData[gc.dsConsts.BossEntity.week];
            if (week <= 0)
                return true;
            var nowDate = Date.newDate();
            var day = nowDate.getDay();
            if (week == 7 && day == 0)
                return true;
            if (week == day)
                return true;
            return false;
        };
        //获取在周几内
        p.getWeek = function (bossId) {
            var self = this;
            var bossData = self._bossListData[bossId];
            var week = bossData[gc.dsConsts.BossEntity.week];
            return week;
        };
        /**
         * 获取每周boss数据
         * @returns {"周几":[bossId,bossId]}
         */
        p.getWeekBossData = function () {
            var self = this;
            var reData = {};
            var c_bossParameter = mo.getJSONWithFileName(gc.cfg_c_bossParameter);
            for (var key in self._bossListData) {
                if (!self.isInStartTime(key))
                    continue;
                if (!self.isLimitTime(key))
                    continue;
                var obj = c_bossParameter[key];
                if (!obj[gc.c_bossParameter_isOpen])
                    continue;
                var week = self._bossListData[key][gc.dsConsts.BossEntity.week];
                var locArr = reData[week] || [];
                locArr.push(key);
                reData[week] = locArr;
            }
            return reData;
        };
        //获取限时boss列表
        p.getLimitBossList = function (isFight) {
            var self = this;
            var array = [];
            var c_bossParameter = mo.getJSONWithFileName(gc.cfg_c_bossParameter);
            for (var key in self._bossListData) {
                if (!self.isInStartTime(key))
                    continue;
                if (!self.isLimitTime(key))
                    continue;
                if (!self.isInWeek(key))
                    continue;
                var obj = c_bossParameter[key];
                if (!obj[gc.c_bossParameter_isOpen])
                    continue;
                var status = self.getBossStatus(key);
                if (isFight) {
                    if (status != gd.BossFightCtrl.BOSS_STATUS.fighting)
                        continue;
                }
                else {
                    if (status == gd.BossFightCtrl.BOSS_STATUS.fighting)
                        continue;
                }
                array.push(obj);
            }
            array.sort(function (a, b) {
                return a[gc.c_bossParameter_sort] - b[gc.c_bossParameter_sort];
            });
            return array;
        };
        //获取行会boss
        p.getBossList = function (isFight, level) {
            var self = this;
            var array = [];
            var c_bossParameter = mo.getJSONWithFileName(gc.cfg_c_bossParameter);
            for (var key in self._bossListData) {
                if (!self.isInStartTime(key))
                    continue;
                if (self.isLimitTime(key))
                    continue;
                var obj = c_bossParameter[key];
                if (!obj[gc.c_bossParameter_isOpen])
                    continue;
                var status = self.getBossStatus(key);
                if (isFight) {
                    if (status != gd.BossFightCtrl.BOSS_STATUS.fighting)
                        continue;
                }
                else {
                    if (status == gd.BossFightCtrl.BOSS_STATUS.fighting)
                        continue;
                    var monsterInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_monster, key);
                    if (monsterInfo[gc.t_monster_level] != level)
                        continue;
                }
                array.push(obj);
            }
            array.sort(function (a, b) {
                return a[gc.c_bossParameter_sort] - b[gc.c_bossParameter_sort];
            });
            return array;
        };
        p.getLockCost = function () {
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            return c_game[gc.id_c_game.newBossCfg][2];
        };
        p.getOpenChannelCost = function () {
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            return c_game[gc.id_c_game.newBossCfg][1];
        };
        //获取复活次数
        p.getRepeatCount = function (bossId) {
            var self = this;
            var bossData = self._bossListData[bossId];
            var repeatTime = bossData[gc.dsConsts.BossEntity.repeatTime];
            if (!repeatTime)
                repeatTime = Date.newDate();
            repeatTime = Date.newDate(repeatTime);
            bossData[gc.dsConsts.BossEntity.repeatTime] = repeatTime;
            if (!(Date.newDate()).equalsDay(bossData[gc.dsConsts.BossEntity.repeatTime])) {
                bossData[gc.dsConsts.BossEntity.repeatCount] = 0;
            }
            return bossData[gc.dsConsts.BossEntity.repeatCount];
        };
        //获取复活消耗
        p.getRepeatCost = function (bossId, isLock) {
            var self = this;
            var costDiamond = 0;
            var repeatCount = self.getRepeatCount(bossId);
            var t_monsterData = mo.getJSONWithFileNameAndID(gc.cfg_t_monster, bossId);
            var bossEntity = gd.bossFightCtrl.getEntity(bossId);
            var openCd = bossEntity.getOpenCd();
            var repeatCost = gc.calGuildBossRepeat(t_monsterData[gc.t_monster_level], openCd, repeatCount);
            repeatCost = parseInt(repeatCost.toString());
            costDiamond += repeatCost;
            //判断上锁
            if (isLock) {
                var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
                var lockCost = c_game[gc.id_c_game.newBossCfg][2]; //副本字段区间
                costDiamond += lockCost;
            }
            return costDiamond;
        };
        //召唤系统
        p.openBoss = function (bossId, isLock, cb, target) {
            var self = this;
            if (!gd.guildCtrl.isOpenBoss())
                return mo.showMsg("此功能暂时关闭！");
            //限时控制
            if (!self.isInStartTime(bossId)) {
                return mo.showMsg(gc.id_c_msgCode.timeOutCantCall);
            }
            var args = {};
            var argsKeys = gc.iface.a_boss_openBoss_args;
            args[argsKeys.bossId] = bossId;
            args[argsKeys.isLock] = isLock;
            mo.requestWaiting4Server(gc.iface.a_boss_openBoss, args, function (data) {
                gd.bossFightCtrl.delEntity(bossId);
                var bossEntity = data[gc.dsConsts.ExBossData.bossEntity];
                self._bossListData[bossId] = bossEntity;
                var userData = data[gc.dsConsts.ExBossData.userData];
                var delBagItems = data[gc.dsConsts.ExBossData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                self.pushNotify(self.__class.ON_BOSS_CALL_UPDATE);
                cb.call(target, data);
            });
        };
        //获取未击杀数量
        p.getNotKillNumByLvl = function (lvl) {
            //BOSS_STATUS = {fighting:2,sleep:3,cd:4,canCall:5,prize:6};//2，正在挑战中 ,3，Boss正在休息 ,4，已被击杀,cd中 ,5，可召唤,6，结算中
            var self = this;
            var reNum = 0;
            var c_bossParameter = mo.getJSONWithFileName(gc.cfg_c_bossParameter);
            for (var key in self._bossListData) {
                if (!self.isInStartTime(key))
                    continue;
                if (self.isLimitTime(key))
                    continue;
                var obj = c_bossParameter[key];
                if (!obj[gc.c_bossParameter_isOpen])
                    continue;
                var monsterInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_monster, key);
                if (monsterInfo[gc.t_monster_level] != lvl)
                    continue;
                var status = self.getBossStatus(key);
                if (status == gd.BossFightCtrl.BOSS_STATUS.cd || status == gd.BossFightCtrl.BOSS_STATUS.prize)
                    continue;
                reNum++;
            }
            return reNum;
        };
        p.checkAndShowLvlEnough = function (bossId) {
            var self = this;
            var c_bossParameter = mo.getJSONWithFileName(gc.cfg_c_bossParameter);
            var c_boss = c_bossParameter[bossId];
            if (gd.userCtrl.getLvl() < c_boss[gc.c_bossParameter_fightLvl]) {
                mo.showMsg(gc.id_c_msgCode.noLvlchallengeBoss, c_boss[gc.c_bossParameter_fightLvl]);
                return false;
            }
            return true;
        };
        BossGuildCtrl.ON_BOSS_CALL_UPDATE = "ON_BOSS_CALL_UPDATE";
        BossGuildCtrl.ON_WORLD_BOSS_OPEN_CHANGE = "ON_WORLD_BOSS_OPEN_CHANGE";
        return BossGuildCtrl;
    })(mo.DataController);
    gd.BossGuildCtrl = BossGuildCtrl;
    egret.registerClass(BossGuildCtrl,"gd.BossGuildCtrl");
    gd.bossGuildCtrl = BossGuildCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/12/17.
 */
var gd;
(function (gd) {
    var BossWorldCtrl = (function (_super) {
        __extends(BossWorldCtrl, _super);
        function BossWorldCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=BossWorldCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.BossData;
        };
        /**
         * 获取boss信息
         * @param cb
         * @param target
         */
        p.getInfo = function (cb, target) {
            var self = this;
            self._initGuild(function () {
                mo.requestWaiting4Server(gc.iface.a_boss_getWorldBossList, {}, function (data) {
                    var otherData = data[gc.dsConsts.ExBossEntity.otherData];
                    self._otherData = otherData;
                    var nowDate = data[gc.dsConsts.ExBossEntity.nowDate];
                    self._nowDate = Date.newDate(nowDate);
                    var dataList = data[gc.dsConsts.ExBossEntity.bossList];
                    self._bossListData = {};
                    for (var i = 0; i < dataList.length; i++) {
                        var locData = dataList[i];
                        var locBossId = locData[gc.dsConsts.BossEntity.bossId];
                        self._bossListData[locBossId] = locData;
                    }
                    cb.call(target);
                });
            }, self);
        };
        /**
         * 刷新boss信息
         * @param cb
         * @param target
         */
        p.freshData = function (cb, target) {
            var self = this;
            self._initGuild(function () {
                mo.request4Server(gc.iface.a_boss_getWorldBossList, {}, function (data) {
                    var otherData = data[gc.dsConsts.ExBossEntity.otherData];
                    self._otherData = otherData;
                    var dataList = data[gc.dsConsts.ExBossEntity.bossList];
                    self._bossListData = {};
                    for (var i = 0; i < dataList.length; i++) {
                        var locData = dataList[i];
                        var locBossId = locData[gc.dsConsts.BossEntity.bossId];
                        self._bossListData[locBossId] = locData;
                    }
                    cb.call(target);
                });
            }, self);
        };
        p._initGuild = function (cb, target) {
            if (gd.guildCtrl.getData()) {
                cb.call(target);
            }
            else {
                gd.guildCtrl.getInfo(cb, target);
            }
        };
        //
        p.getBossData = function (bossId) {
            var self = this;
            for (var key in self._bossListData) {
                return self._bossListData[key];
            }
            return null;
            //todo 目前只有1个
            //var bossData = self._bossListData[bossId];
        };
        /**
         * 获取其他数据
         * @param bossId
         * @returns []
         */
        p.getOtherData = function (bossId) {
            var self = this;
            var otherData = self._otherData[bossId];
            return otherData;
        };
        //是否限时
        p.isLimitTime = function (bossId) {
            var self = this;
            var bossData = self.getBossData(bossId);
            var isLimit = bossData[gc.dsConsts.BossEntity.isLimit];
            return isLimit;
        };
        //获取限时开始时间
        p.getLimitStartTime = function (bossId) {
            var self = this;
            var bossData = self.getBossData(bossId);
            return bossData[gc.dsConsts.BossEntity.limitStartTime];
        };
        //获取限时结束时间
        p.getLimitEndTime = function (bossId) {
            var self = this;
            var bossData = self.getBossData(bossId);
            return bossData[gc.dsConsts.BossEntity.limitEndTime];
        };
        //获取原始id
        p.getOriginBossId = function (bossId) {
            var self = this;
            var bossData = self.getBossData(bossId);
            return bossData[gc.dsConsts.BossEntity.originBossId];
        };
        /**
         * 判断boss状态
         * @param bossId
         * @returns {number} 1，未开启 ,2，正在挑战中 ,3，Boss正在休息 ,4，已被击杀,cd中 ,5，可召唤,6，结算中
         */
        p.getBossStatus = function (bossId) {
            var self = this;
            var bossData = self.getBossData(bossId);
            var status = bossData[gc.dsConsts.BossEntity.status];
            //正在挑战中
            if (status == 1)
                return gd.BossFightCtrl.BOSS_STATUS.fighting;
            //结算中
            if (status == 2)
                return gd.BossFightCtrl.BOSS_STATUS.prize;
            var openStartTime = self.getOpenStartTime(bossId);
            var openEndTime = self.getOpenEndTime(bossId);
            if (self._nowDate.isBefore(openStartTime) || self._nowDate.isAfter(openEndTime)) {
                return gd.BossFightCtrl.BOSS_STATUS.sleep;
            }
            var deathTime = bossData[gc.dsConsts.BossEntity.deathTime];
            if (deathTime) {
                deathTime = Date.newDate(deathTime);
                if (self._nowDate.isAfter(openStartTime) && self._nowDate.isBefore(openEndTime)) {
                    return gd.BossFightCtrl.BOSS_STATUS.cd;
                }
            }
            return gd.BossFightCtrl.BOSS_STATUS.fighting;
        };
        //通过当前bossId获取当前正结算中/已被击杀的bossId
        p.getDeathBossId = function (bossId) {
            var self = this;
            var bossData = self.getBossData(bossId);
            return bossData[gc.dsConsts.BossEntity.deathBossId] || bossId;
        };
        //获取开始时间
        p.getOpenStartTime = function (bossId) {
            var c_bossWorldData = mo.getJSONWithFileNameAndID(gc.cfg_c_bossWorld, bossId);
            var startTime = c_bossWorldData[gc.c_bossWorld_startTime];
            var startTimeHours = parseInt(startTime[0]);
            var startTimeMinutes = parseInt(startTime[1]);
            var reTime = this._nowDate.clone().clearTime();
            reTime.addHours(startTimeHours).addMinutes(startTimeMinutes);
            return reTime;
        };
        //获取结束时间
        p.getOpenEndTime = function (bossId) {
            var c_bossWorldData = mo.getJSONWithFileNameAndID(gc.cfg_c_bossWorld, bossId);
            var endTime = c_bossWorldData[gc.c_bossWorld_endTime];
            var endTimeHours = parseInt(endTime[0]);
            var endTimeMinutes = parseInt(endTime[1]);
            var reTime = this._nowDate.clone().clearTime();
            reTime.addHours(endTimeHours).addMinutes(endTimeMinutes);
            return reTime;
        };
        //获取剩余消失时间
        p.getReDisappearSeconds = function (bossId) {
            var self = this;
            var openEndTime = self.getOpenEndTime(bossId);
            var diffSeconds = this._nowDate.clone().getSecondsBetween(openEndTime);
            diffSeconds = diffSeconds > 0 ? diffSeconds : 0;
            return diffSeconds;
        };
        //获取结算剩余时间
        p.getRePrizeSeconds = function (bossId) {
            var self = this;
            var bossData = self.getBossData(bossId);
            var endTime = bossData[gc.dsConsts.BossEntity.endTime];
            endTime = Date.newDate(endTime);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var prizeTime = c_game[gc.id_c_game.worldBossCfg][8];
            var diffSeconds = self._nowDate.getSecondsBetween(endTime.clone().addSeconds(prizeTime));
            diffSeconds = diffSeconds > 0 ? diffSeconds : 0;
            return diffSeconds;
        };
        //是否在限时内
        p.isInStartTime = function (bossId) {
            var self = this;
            var ret = true;
            var bossData = self.getBossData(bossId);
            var isLimit = self.isLimitTime(bossId);
            if (isLimit) {
                var startTime = Date.newDate(self.getLimitStartTime(bossId));
                var endTime = Date.newDate(self.getLimitEndTime(bossId));
                var nowTime = self._nowDate.clone();
                if (nowTime.isBefore(startTime) || nowTime.isAfter(endTime)) {
                    ret = false;
                }
            }
            return ret;
        };
        //获取boss列表
        p.getBossList = function () {
            var self = this;
            var array = [];
            var c_bossWorld = mo.getJSONWithFileName(gc.cfg_c_bossWorld);
            for (var key in self._bossListData) {
                if (!self.isInStartTime(key))
                    continue;
                var obj = c_bossWorld[key];
                array.push(obj);
            }
            array.sort(function (a, b) {
                return a[gc.c_bossParameter_sort] - b[gc.c_bossParameter_sort];
            });
            return array;
        };
        /**
         * 获取开启cd
         * @returns {number}
         */
        p.getOpenCd = function (bossId) {
            var self = this;
            return 0;
        };
        BossWorldCtrl.ON_BOSS_CALL_UPDATE = "ON_BOSS_CALL_UPDATE";
        BossWorldCtrl.ON_WORLD_BOSS_OPEN_CHANGE = "ON_WORLD_BOSS_OPEN_CHANGE";
        BossWorldCtrl.BOSS_STATUS = { fighting: 2, sleep: 3, cd: 4, canCall: 5, prize: 6 }; //2，正在挑战中 ,3，Boss正在休息 ,4，已被击杀,cd中 ,5，可召唤,6，结算中
        return BossWorldCtrl;
    })(mo.DataController);
    gd.BossWorldCtrl = BossWorldCtrl;
    egret.registerClass(BossWorldCtrl,"gd.BossWorldCtrl");
    gd.bossWorldCtrl = BossWorldCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/5/27.
 */
var gd;
(function (gd) {
    var ChatCtrl = (function (_super) {
        __extends(ChatCtrl, _super);
        function ChatCtrl() {
            _super.apply(this, arguments);
            this._channelMsg = [];
            this._syncSeconds = 5; //几秒钟同步一次
            this.isFollowNormalUser = 1;
            this.isAutoBuyLaba = 0;
        }
        var d = __define,c=ChatCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            self._lastId = 0;
            self._lastTime = Date.newDate();
            //self._noticeList = [];
            self._allList = [];
            self._vipList = [];
            self._importantList = [];
            //self._noticeList = [];
            self._lotteryList = [];
            self._guildLotteryList = [];
            self._guildLastId = 0;
            self._guildList = [];
        };
        p.initData = function (data) {
            var self = this;
            self.syncData();
        };
        //获取最后的id
        p.getLastId = function () {
            return this._lastId;
        };
        //获取公会最后的id
        p.getGuildLastId = function () {
            return this._guildLastId;
        };
        /**
         * 获取走马灯消息
         * @returns [gc.dsConsts.ChatData]
         */
        p.getNoticeList = function () {
            return null; //return this._noticeList;
        };
        //删除一条信息
        p.delNotice = function (uniqueId) {
            /*
             var self = this;
             for(var i = 0;i<self._noticeList.length;i++){
             var locData = self._noticeList[i];
             if(locData[gc.dsConsts.ChatData.uniqueId]==uniqueId){
             self._noticeList.splice(i, 1);
             break;
             }
             }
             */
        };
        /**
         * 获取所有消息
         * @returns [gc.dsConsts.ChatData]
         */
        p.getAllList = function () {
            var self = this;
            if (self.isFollowNormalUser) {
                return self._allList;
            }
            else {
                return self._vipList;
            }
        };
        /**
         * 获取重要信息
         * @returns {any}
         */
        p.getImportantList = function () {
            return this._importantList;
        };
        /**
         * 获取当前公会所有消息
         * @returns [gc.dsConsts.ChatData]
         */
        p.getGuildAllList = function () {
            return this._guildList;
        };
        /**
         * 获取探宝消息
         * @returns [gc.dsConsts.ChatData]
         */
        p.getLotteryList = function () {
            return this._lotteryList;
        };
        /**
         * 获取公会探宝消息
         * @returns [gc.dsConsts.ChatData]
         */
        p.getGuildLotteryList = function () {
            return this._guildLotteryList;
        };
        /**
         * 获取现在离最后一条消息的秒数
         * @returns {number}
         */
        p.getLastDiffSeconds = function () {
            return 0;
        };
        p.followModeChange = function () {
            var self = this;
            self.pushNotify(self.__class.ON_MODE_UPDATE);
        };
        //发送数据
        p.sendData = function (content, type, islaba, cb, cbTarget) {
            var self = this;
            if (type != gc.c_prop.chatTypeKey.user && type != gc.c_prop.chatTypeKey.guild)
                return mo.showMsg("聊天类型错误");
            if (gd.accountCtrl.isGuest())
                return mo.showMsg(gc.id_c_msgCode.touristForbidTalk);
            if (gd.accountCtrl.getStatus() < 4 && gd.userCtrl.getLvl() < 30)
                return mo.showMsg(gc.id_c_msgCode.noLvlToTalk);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var sensitiveArr = c_game[gc.id_c_game.fuckWord][0].split(",");
            var cd = c_game[gc.id_c_game.chatCfg][1];
            var maxLength = c_game[gc.id_c_game.chatCfg][3];
            if (content == null || content == "") {
                return mo.showMsg(gc.id_c_msgCode.noWord);
            }
            else if (mo.STR.getStringLength(content) > maxLength) {
                return mo.showMsg(gc.id_c_msgCode.wordTooLong);
            }
            else if (mo.STR.checkSensitiveWord(content, sensitiveArr)) {
                return mo.showMsg(gc.id_c_msgCode.wordIllegal);
            }
            //综合聊天限制时间限制5秒
            if (self._lastSendTime && type == gc.c_prop.chatTypeKey.user) {
                if (self._lastSendTime.getSecondsBetween(Date.newDate()) < cd)
                    return mo.showMsg(gc.id_c_msgCode.wordTooFast);
            }
            self._lastSendTime = Date.newDate();
            var guildId = 0;
            if (gd.guildCtrl.getData())
                guildId = gd.guildPersonalCtrl.getGuildId();
            var argKeys = gc.iface.a_chat_sendData_args;
            var args = {};
            args[argKeys.content] = content;
            args[argKeys.type] = type;
            args[argKeys.lastId] = self._lastId;
            args[argKeys.guildId] = guildId;
            args[argKeys.guildLastId] = self._guildLastId;
            args[argKeys.isLittleHorn] = islaba ? 1 : 0;
            mo.requestWaiting4Server(gc.iface.a_chat_sendData, args, function (data) {
                var dataList = data[gc.dsConsts.AllChatData.worldChat];
                var dataGuildList = data[gc.dsConsts.AllChatData.guildChat];
                var isOri = data[gc.dsConsts.AllChatData.isOri]; //是否原公会
                if (!isOri) {
                    var guildId = data[gc.dsConsts.AllChatData.guildId];
                    gd.guildPersonalCtrl.set(gc.dsConsts.GuildPersonalEntity.guildId, guildId);
                    self.pushNotify(self.__class.ON_GUILD_CHANGED);
                }
                self._updateData(dataList);
                self._updateGuildData(dataGuildList, isOri);
                var userData = data[gc.dsConsts.AllChatData.userData];
                var delBagItem = data[gc.dsConsts.AllChatData.delBagItems];
                if (userData) {
                    var bag = gd.userUtils.getNewBag(delBagItem, {});
                    userData[gc.dsConsts.UserEntity.bag] = bag;
                    gd.userCtrl.updateEntity(userData);
                }
                cb.call(cbTarget);
            });
        };
        //打开窗口时调用
        p.openWindow = function () {
            var self = this;
            self.syncData();
            self.onNewAll();
        };
        //关闭窗口时调用
        p.closeWindow = function () {
        };
        p.updateNewMsg = function (newId) {
            var self = this;
            if (newId > self._lastId) {
                self.syncData();
            }
        };
        //同步数据
        p.syncData = function () {
            var self = this;
            var guildId = 0;
            if (gd.guildCtrl.getData())
                guildId = gd.guildPersonalCtrl.getGuildId();
            var argKeys = gc.iface.a_chat_getNewList_args;
            var args = {};
            args[argKeys.lastId] = self._lastId;
            args[argKeys.guildId] = guildId;
            args[argKeys.guildLastId] = self._guildLastId;
            mo.request4Server(gc.iface.a_chat_getNewList, args, function (data) {
                var dataList = data[gc.dsConsts.AllChatData.worldChat];
                var dataGuildList = data[gc.dsConsts.AllChatData.guildChat];
                var isOri = data[gc.dsConsts.AllChatData.isOri]; //是否原公会
                if (!isOri) {
                    var guildId = data[gc.dsConsts.AllChatData.guildId];
                    gd.guildPersonalCtrl.set(gc.dsConsts.GuildPersonalEntity.guildId, guildId);
                    self.pushNotify(self.__class.ON_GUILD_CHANGED);
                }
                self._updateData(dataList);
                self._updateGuildData(dataGuildList, isOri);
            });
        };
        p.getChatDataStr = function (chatData) {
            var self = this;
            var type = chatData[gc.dsConsts.ChatData.type];
            var str = "";
            if (type == gc.c_prop.chatTypeKey.user) {
                var userArgs = chatData[gc.dsConsts.ChatData.userArgs];
                var isGM = userArgs[3];
                var guildName = userArgs[4];
                var chatContent = userArgs[2];
                if (isGM) {
                    str = mo.STR.format("[ubb color=#ff0000]【GM %s】%s[/ubb]", userArgs[0], chatContent);
                }
                else {
                    if (userArgs[1] > 0) {
                        str = mo.STR.format("[ubb color=#ffad00]VIP%s [/ubb][ubb color=#00cdff]%s: [/ubb][ubb color=#ffffff]%s[/ubb]", userArgs[1], userArgs[0], chatContent);
                    }
                    else {
                        str = mo.STR.format("[ubb color=#00cdff]%s: [/ubb][ubb color=#ffffff]%s[/ubb]", userArgs[0], chatContent);
                    }
                    if (guildName != "") {
                        str = mo.STR.format("[ubb color=#e76df5]%s[/ubb]", mo.trans4UBB(mo.STR.format("[%s]", guildName))) + str;
                    }
                }
            }
            else if (type == gc.c_prop.chatTypeKey.guild) {
                var guildArgs = chatData[gc.dsConsts.ChatData.guildArgs]; //玩家公会聊天参数 [用户名,vip,头衔,聊天内容]
                //[公会头衔][vip4 名字]: 内容 普通成员不显示头衔
                str = mo.STR.format("%s%s[ubb color=#00cdff]%s: [/ubb][ubb color=#ffffff]%s[/ubb]", guildArgs[2] == gc.c_prop.guildPostKey.rankFile ? "" : mo.STR.format("[ubb color=#F6EC6B][%s][/ubb]", gc.c_prop.guildPost[guildArgs[2]]), guildArgs[1] > 0 ? mo.STR.format("[ubb color=#ffad00]VIP%s [/ubb]", guildArgs[1]) : "", guildArgs[0], guildArgs[3]);
            }
            else {
                var sysArgs = chatData[gc.dsConsts.ChatData.sysArgs];
                var sysInfo = mo.getJSONWithFileNameAndID(gc.cfg_c_chatSys, sysArgs[0]);
                str = "【系统】";
                if (sysArgs.length == 2) {
                    str += mo.STR.format(sysInfo[gc.c_chatSys_text], sysArgs[1]);
                }
                else if (sysArgs.length == 3) {
                    str += mo.STR.format(sysInfo[gc.c_chatSys_text], sysArgs[1], sysArgs[2]);
                }
                else if (sysArgs.length == 4) {
                    str += mo.STR.format(sysInfo[gc.c_chatSys_text], sysArgs[1], sysArgs[2], sysArgs[3]);
                }
                else if (sysArgs.length == 5) {
                    str += mo.STR.format(sysInfo[gc.c_chatSys_text], sysArgs[1], sysArgs[2], sysArgs[3], sysArgs[4]);
                }
                else if (sysArgs.length == 6) {
                    str += mo.STR.format(sysInfo[gc.c_chatSys_text], sysArgs[1], sysArgs[2], sysArgs[3], sysArgs[4], sysArgs[5]);
                }
                else if (sysArgs.length == 7) {
                    str += mo.STR.format(sysInfo[gc.c_chatSys_text], sysArgs[1], sysArgs[2], sysArgs[3], sysArgs[4], sysArgs[5], sysArgs[6]);
                }
                else if (sysArgs.length == 8) {
                    str += mo.STR.format(sysInfo[gc.c_chatSys_text], sysArgs[1], sysArgs[2], sysArgs[3], sysArgs[4], sysArgs[5], sysArgs[6], sysArgs[7]);
                }
            }
            return str;
        };
        p._updateData = function (dataList) {
            var self = this;
            var c_chatSys = mo.getJSONWithFileName(gc.cfg_c_chatSys);
            var updateType = {};
            var noticesList = []; //跑马灯消息
            if (self._channelMsg.length > 0) {
                var obj = self._channelMsg.slice(-1)[0];
                //深拷贝, 消息显示部分有修改数据的逻辑...
                noticesList.push({ 1: obj['1'], 2: obj['2'], 3: [obj['3'][0], obj['3'][1]] });
            }
            var hasInspire = 0;
            for (var i = 0; i < dataList.length; i++) {
                var locData = dataList[i];
                var locType = locData[gc.dsConsts.ChatData.type];
                if (locType == gc.c_prop.chatTypeKey.sys || locType == gc.c_prop.chatTypeKey.lottery) {
                    var locSysArgs = locData[gc.dsConsts.ChatData.sysArgs];
                    var locId = locSysArgs[0];
                    //黑科技~=============>
                    //霸主上线
                    if (locId == 51) {
                        var locNickName = locSysArgs[1];
                        if (locNickName != gd.userCtrl.getName())
                            mo.showMsg(gc.id_c_msgCode.kingCome, locSysArgs[1]);
                    }
                    //成为霸主
                    if (locId == 50) {
                        var locNickName = locSysArgs[2];
                        if (locNickName == gd.userCtrl.getName()) {
                            gd.userCtrl.setIsKing(true);
                            gd.heroCtrl.calPropAndCombat();
                        }
                    }
                    //擂台开始
                    if (locId == 60) {
                        if (gd.userCtrl.getIsKing()) {
                            gd.heroCtrl.calPropAndCombat();
                            gd.userCtrl.setIsKing(false);
                        }
                    }
                    if (locId == 39) {
                        var locGuildName = locSysArgs[1];
                        if (gd.guildCtrl.getData() && locGuildName == gd.guildCtrl.get(gc.dsConsts.GuildEntity.name)) {
                            hasInspire = 1;
                        }
                    }
                    if (locId == 75) {
                        //秘宝消息 , 被抢了
                        var treasureId = locSysArgs[3];
                        var targetId = locSysArgs[4];
                        if (targetId == gd.userCtrl.getId()) {
                            //gd.userCtrl.deleteItem(treasureId,1);
                            gd.userCtrl.updateBagItems(treasureId, function () { }, self);
                        }
                        //最后两个字段是用来做黑科技的,不能显示出来
                        locSysArgs[3] = "";
                        locSysArgs[4] = "";
                    }
                    //黑科技~<=============
                    var locC_chatSysData = c_chatSys[locId];
                    if (locC_chatSysData[gc.c_chatSys_ifNotice]) {
                        updateType[0] = 1;
                        //self._pushNotice(locData);
                        noticesList.push(locData);
                    }
                    else {
                        //重要消息
                        if (locC_chatSysData[gc.c_chatSys_ifImport]) {
                            updateType[4] = 1;
                            self._pushImportantList(locData);
                        }
                        else {
                            updateType[1] = 1;
                            self._pushAllList(locData);
                            self._pushVipList(locData);
                        }
                    }
                }
                if (locType == gc.c_prop.chatTypeKey.user) {
                    updateType[1] = 1;
                    self._pushAllList(locData);
                    if (locData[gc.dsConsts.ChatData.userArgs][0] == gd.userCtrl.getName() || locData[gc.dsConsts.ChatData.userArgs][1] > 0 ||
                        locData[gc.dsConsts.ChatData.userArgs][6] == 1) {
                        //Vip聊天 , 我的信息 , 喇叭信息
                        self._pushVipList(locData);
                    }
                }
                if (locType == gc.c_prop.chatTypeKey.lottery) {
                    updateType[2] = 1;
                    self._pushLotteryList(locData);
                }
                if (locType == gc.c_prop.chatTypeKey.guildLottery) {
                    updateType[3] = 1;
                    self._pushGuildLotteryList(locData);
                }
                self._lastId = locData[gc.dsConsts.ChatData.uniqueId];
                if (hasInspire)
                    gd.bossFightCtrl.syncInspire();
            }
            if (dataList.length > 0) {
                this._lastTime = Date.newDate();
            }
            if (updateType[0]) {
                //self.onNewNotice();
                gd.hoodinnCtlr.pushNotices(noticesList);
            }
            if (updateType[1]) {
                self.onNewAll();
            }
            if (updateType[2]) {
                self.onNewLottery();
            }
            if (updateType[3]) {
                self.onNewGuildLottery();
            }
            if (updateType[4]) {
                self.onNewImportant();
            }
        };
        p._updateGuildData = function (dataGuildList, isOri) {
            var self = this;
            var updateType = {};
            for (var i = 0; i < dataGuildList.length; i++) {
                var locData = dataGuildList[i];
                var locType = locData[gc.dsConsts.ChatData.type];
                if (locType == gc.c_prop.chatTypeKey.guild) {
                    updateType[1] = 1;
                    self._pushGuildAllList(locData);
                }
                self._guildLastId = locData[gc.dsConsts.ChatData.uniqueId];
            }
            if (updateType[1]) {
                self.onNewGuildChat(); //todo
            }
        };
        /*
         private _pushNotice(data){
         this._noticeList.push(data);

         }
         */
        p._pushAllList = function (data) {
            var self = this;
            self._allList.push(data);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var limit = c_game[gc.id_c_game.chatCfg][2];
            if (self._allList.length > limit) {
                self._allList.shift();
            }
        };
        p._pushImportantList = function (data) {
            var self = this;
            self._importantList.push(data);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var limit = c_game[gc.id_c_game.chatCfg][2];
            if (self._importantList.length > limit) {
                self._importantList.shift();
            }
        };
        p._pushGuildAllList = function (data) {
            var self = this;
            self._guildList.push(data);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var limit = c_game[gc.id_c_game.chatCfg][2];
            if (self._guildList.length > limit) {
                self._guildList.shift();
            }
        };
        p._pushLotteryList = function (data) {
            var self = this;
            self._lotteryList.push(data);
            if (self._lotteryList.length > 10) {
                self._lotteryList.shift();
            }
        };
        p._pushGuildLotteryList = function (data) {
            var self = this;
            self._guildLotteryList.push(data);
            if (self._guildLotteryList.length > 10) {
                self._guildLotteryList.shift();
            }
        };
        p._pushVipList = function (data) {
            var self = this;
            self._vipList.push(data);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var limit = c_game[gc.id_c_game.chatCfg][2];
            if (self._vipList.length > limit) {
                self._vipList.shift();
            }
        };
        /*
         //有新的走马灯通知
         onNewNotice(){
         var self = this;
         self.pushNotify(self.__class.ON_NOTICE_UPDATE, self.getNoticeList());
         }
         */
        p.newChannelNotice = function (msg) {
            var self = this;
            self._channelMsg.push(msg);
        };
        //有新的聊天消息
        p.onNewAll = function () {
            var self = this;
            self.pushNotify(self.__class.ON_CHAT_UPDATE, self.getAllList());
        };
        //有新的探宝消息
        p.onNewLottery = function () {
            var self = this;
            self.pushNotify(self.__class.ON_LOTTERY_UPDATE, self.getLotteryList());
        };
        //有新的公会探宝消息
        p.onNewGuildLottery = function () {
            var self = this;
            self.pushNotify(self.__class.ON_GUILD_LOTTERY_UPDATE, self.getGuildLotteryList());
        };
        p.onNewGuildChat = function () {
            var self = this;
            self.pushNotify(self.__class.ON_GUILD_CHAT_UPDATE, self.getGuildAllList());
        };
        p.onNewImportant = function () {
            var self = this;
            self.pushNotify(self.__class.ON_IMPOTANT_UPDATE, self.getImportantList());
        };
        ChatCtrl.ON_GUILD_CHAT_UPDATE = "ON_GUILD_CHAT_UPDATE";
        ChatCtrl.ON_CHAT_UPDATE = "ON_CHAT_UPDATE";
        ChatCtrl.ON_NOTICE_UPDATE = "ON_NOTICE_UPDATE";
        ChatCtrl.ON_LOTTERY_UPDATE = "ON_LOTTERY_UPDATE";
        ChatCtrl.ON_GUILD_LOTTERY_UPDATE = "ON_GUILD_LOTTERY_UPDATE";
        ChatCtrl.ON_GUILD_CHANGED = "ON_GUILD_CHANGED";
        ChatCtrl.ON_IMPOTANT_UPDATE = "ON_IMPOTANT_UPDATE";
        ChatCtrl.ON_MODE_UPDATE = "ON_MODE_UPDATE";
        ChatCtrl.ON_TREASURE_LOST = "ON_TREASURE_LOST";
        return ChatCtrl;
    })(mo.DataController);
    gd.ChatCtrl = ChatCtrl;
    egret.registerClass(ChatCtrl,"gd.ChatCtrl");
    gd.chatCtrl = ChatCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/5/27.
 */
var gd;
(function (gd) {
    var CoffersCtrl = (function (_super) {
        __extends(CoffersCtrl, _super);
        function CoffersCtrl() {
            _super.apply(this, arguments);
            //获取当前行动力数据
            this.getActionData = function (nowDate) {
                var startTime = (Date.newDate()).clearTime();
                nowDate = nowDate || Date.newDate();
                var coffersCfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.coffers);
                var intervalMinutes = parseInt(coffersCfg[20]);
                var baseAction = parseInt(coffersCfg[21]);
                var intervalAction = parseInt(coffersCfg[22]);
                var diffMinutes = startTime.getMinutesBetween(nowDate);
                var actionNum = Math.floor(diffMinutes / intervalMinutes);
                var reSeconds = intervalMinutes * 60 - startTime.getSecondsBetween(nowDate) + actionNum * intervalMinutes * 60;
                var actionTotal = baseAction + actionNum * intervalAction;
                return [actionTotal, reSeconds];
            };
        }
        var d = __define,c=CoffersCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.CoffersEntity;
            this._lastData = [];
        };
        p.getInfo = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_coffers_getInfo, {}, function (data) {
                self.init(data);
                if (cb)
                    cb.call(target, data);
            });
        };
        //获取下一次积分
        p.getNextWinPoints = function () {
            var coffers2Cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.coffers2);
            var coffersWin = gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.coffersWin);
            var points = coffers2Cfg[8];
            if (coffersWin > 0) {
                points += coffers2Cfg[6];
            }
            return points;
        };
        //获取今天连胜
        p.getCoffersWin = function () {
            return gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.coffersWin);
        };
        //获取个人红利
        p.getPersonResource = function () {
            var self = this;
            //a:当前玩家等级 b:当前金币贮藏量 c:领取金币参数1 d;领取金币参数2
            var userLvl = gd.userCtrl.getLvl();
            var curRecource = self.get(gc.dsConsts.CoffersEntity.resource);
            var coffersCfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.coffers);
            var prame = coffersCfg[5];
            var prameArr = prame.split(",");
            var ret = gc.calCoffersPersonRecource(userLvl, curRecource, parseFloat(prameArr[0]), parseFloat(prameArr[1]));
            return ret;
        };
        /**
         * 获取英雄记录掠夺记录
         * @param cb
         * @param target
         * @returns [gc.dsConsts.CoffersRecord]
         */
        p.getLootRecordArr = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_coffers_getLootRecordArr, {}, function (data) {
                cb.call(target, data.reverse());
            });
        };
        //添砖建设
        p.build = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_coffers_build, {}, function (data) {
                var coffers = data[gc.dsConsts.ExCoffers.coffers];
                self.updateEntity(coffers);
                var userData = data[gc.dsConsts.ExCoffers.userData];
                gd.userCtrl.updateEntityNotShow(userData);
                mo.showMsg("金币+" + data[gc.dsConsts.ExCoffers.addGold] + " " + "建设值+" + data[gc.dsConsts.ExCoffers.addBuildValue]);
                if (cb)
                    cb.call(target, data);
            });
        };
        //获取今天建设次数
        p.getBuildNum = function () {
            return gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.coffersBuild);
        };
        //激励
        p.addBuff = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_coffers_addBuff, {}, function (data) {
                var coffers = data[gc.dsConsts.ExCoffers.coffers];
                self.updateEntity(coffers);
                var userData = data[gc.dsConsts.ExCoffers.userData];
                var delBagItems = data[gc.dsConsts.ExCoffers.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntityNotShow(userData);
                mo.showMsg("激励值+" + data[gc.dsConsts.ExCoffers.addBuffExpc]);
                if (cb)
                    cb.call(target, data);
            });
        };
        //获取今天激励次数
        p.getAddBuffNum = function () {
            return gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.coffersBuffNum);
        };
        p.getAddPropByBuff = function () {
            var baseValue = gd.coffersCtrl.get(gc.dsConsts.CoffersEntity.buffBase) / 100;
            var curLv = gd.coffersCtrl.get(gc.dsConsts.CoffersEntity.buffLvl);
            var gameInfo = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.coffers2);
            var adds = gameInfo[4].split(",");
            var curAdd = parseInt(adds[curLv]) / 100;
            return baseValue + curAdd;
        };
        //获取今天剩余行动力
        p.getReAction = function () {
            var actionData = this.getActionData();
            var actionTotal = actionData[0];
            var toDayAction = gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.coffersAction);
            var reAction = actionTotal - toDayAction;
            if (reAction < 0)
                reAction = 0;
            return reAction;
        };
        //获取下一次恢复的时间（秒）
        p.getActionReseconds = function () {
            var actionData = this.getActionData();
            return actionData[1];
        };
        /**
         * 获取己方守卫数据
         * @param cb
         * @param target
         * @returns [gc.dsConsts.CofferUser]
         */
        p.getDefeseData = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_coffers_getDefeseData, {}, function (data) {
                cb.call(target, data);
            });
        };
        /**
         * 获取敌方守卫数据
         * @param serverId
         * @param serverName
         * @param cb
         * @param target
         * @returns gc.dsConsts.ExDefenceData
         */
        p.getEnemyDefeseData = function (serverId, serverName, cb, target) {
            var self = this;
            self._lastData[0] = serverId;
            self._lastData[1] = serverName;
            var args = {};
            var argsKeys = gc.iface.a_coffers_getEnemyDefeseData_args;
            args[argsKeys.serverId] = serverId;
            mo.requestWaiting4Server(gc.iface.a_coffers_getEnemyDefeseData, args, function (data) {
                data[gc.dsConsts.ExDefenceData.serverName] = serverName;
                data[gc.dsConsts.ExDefenceData.serverId] = serverId;
                cb.call(target, data);
            });
        };
        //获取最近的服务器的国库数据
        p.getLastEnemyDefeseData = function (cb, target) {
            var self = this;
            var serverId = self._lastData[0];
            var serverName = self._lastData[1];
            self.getEnemyDefeseData(serverId, serverName, cb, target);
        };
        /**
         * 获取防守记录
         * @param cb
         * @param target
         * @returns [gc.dsConsts.CoffersRecord]
         */
        p.getDefeseRecord = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_coffers_getDefeseRecord, {}, function (data) {
                cb.call(target, data.reverse());
            });
        };
        /**
         * 获取服务器列表状态
         * @param cb
         * @param target
         * @returns [gc.dsConsts.CoffersServer]
         */
        p.getServerArr = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_coffers_getServerArr, {}, function (data) {
                cb.call(target, data);
            });
        };
        //战斗开始
        p.fightStart = function (serverId, door, cb, target) {
            var self = this;
            if (gd.fightCtrl.isSpFighting)
                return mo.showMsg("还在挑战中，请稍后");
            if (gd.fightCtrl.isDie)
                return mo.showMsg("复活中，请稍后");
            var args = {};
            var argsKeys = gc.iface.a_coffers_fightStart_args;
            args[argsKeys.serverId] = serverId;
            args[argsKeys.door] = door;
            self._fightServerId = serverId;
            self._fightDoor = door;
            mo.requestWaiting4Server(gc.iface.a_coffers_fightStart, args, function (data) {
                var status = data[gc.dsConsts.ExCoffers.status];
                if (status == 1) {
                    mo.showMsg(gc.id_c_msgCode.gatesBroken, function () {
                        gd.coffersCtrl.getLastEnemyDefeseData(function (defData) {
                            self.pushNotify(self.__class.ON_COFFERS_DEF_DATA_CHANGED, defData);
                        }, self);
                    });
                    return;
                }
                var userData = data[gc.dsConsts.ExCoffers.userData];
                gd.userCtrl.updateEntity(userData);
                var heroList = data[gc.dsConsts.ExCoffers.heroList];
                var otherDataList = data[gc.dsConsts.ExCoffers.otherDataList];
                var fightData = data[gc.dsConsts.ExCoffers.fightData];
                var heroCtrlList = [];
                for (var i = 0; i < heroList.length; i++) {
                    var locHero = heroList[i];
                    var locHeroEntityCtrl = gd.HeroEntityCtrl.createNewEnemy(locHero, fightData, otherDataList[i]);
                    heroCtrlList.push(locHeroEntityCtrl);
                }
                heroCtrlList.sort(gd.heroCtrl._sortHeroList);
                gd.fightCtrl.isSpFighting = true;
                var myList = gd.heroCtrl.getFightList();
                gd.fightCtrl.startPvpFight(myList, heroCtrlList, gc.c_prop.fightTypeKey.coffers);
                process.nextTick(function () {
                    process.nextTick(function () {
                        process.nextTick(function () {
                            process.nextTick(function () {
                                self.pushNotify(self.__class.ON_COFFERS_FIGHT, serverId, door);
                            });
                        });
                    });
                });
                if (cb)
                    cb.call(target, heroCtrlList);
            });
        };
        /**
         * 战斗结束
         * @param isWin
         * @param cb
         * @param target
         * @returns gc.dsConsts.FightResult
         */
        p.fightEnd = function (isWin, cb, target) {
            var self = this;
            var args = {};
            var argsKeys = gc.iface.a_coffers_fightEnd_args;
            args[argsKeys.serverId] = self._fightServerId;
            args[argsKeys.door] = self._fightDoor;
            args[argsKeys.isWin] = isWin;
            mo.requestWaiting4Server(gc.iface.a_coffers_fightEnd, args, function (data) {
                var updateUser = data[gc.dsConsts.FightResult.updateUser] || {};
                var bagItems = data[gc.dsConsts.FightResult.bagItems];
                var bag = gd.userUtils.getNewBag({}, bagItems);
                updateUser[gc.dsConsts.UserEntity.bag] = bag;
                if (updateUser)
                    gd.userCtrl.updateEntity(updateUser);
                var updateCoffers = data[gc.dsConsts.FightResult.updateCoffers];
                if (updateCoffers)
                    self.updateEntity(updateCoffers);
                var coffersStatus = data[gc.dsConsts.FightResult.coffersStatus];
                //黑科技~
                if (coffersStatus == 3) {
                    mo.showMsg("跨服数据请求失败！");
                }
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * 掠夺国库开始
         * @param serverId
         * @param cb
         * @param target
         * @returns 国库等级
         */
        p.fightCoffersStart = function (serverId, cb, target) {
            var self = this;
            if (gd.fightCtrl.isSpFighting)
                return mo.showMsg("还在挑战中，请稍后");
            if (gd.fightCtrl.isDie)
                return mo.showMsg("复活中，请稍后");
            var args = {};
            var argsKeys = gc.iface.a_coffers_fightCoffersStart_args;
            args[argsKeys.serverId] = serverId;
            self._fightServerId = serverId;
            mo.requestWaiting4Server(gc.iface.a_coffers_fightCoffersStart, args, function (data) {
                var userData = data[gc.dsConsts.ExCoffers.userData];
                gd.userCtrl.updateEntity(userData);
                var coffersLvl = data[gc.dsConsts.ExCoffers.coffersLvl];
                var lvInfo = mo.getJSONWithFileNameAndID(gc.cfg_c_lvl, coffersLvl);
                gd.fightCtrl.isSpFighting = true;
                if (mo.moduleMgr.curModule.name != g_consts.moduleId.fight) {
                    mo.moduleMgr.runModule(g_consts.moduleId.fight);
                    gd.fightLayer.onEnterCopy({ pveType: gc.c_prop.fightTypeKey.coffersBoss, copyID: 4003, loots: [[]], bossId: lvInfo[gc.c_lvl_cofferBoss] });
                }
                if (cb)
                    cb.call(target, coffersLvl);
            });
        };
        /**
         * 掠夺国库结束
         * @param hurt
         * @param cb
         * @param target
         * @returns gc.dsConsts.FightResult
         */
        p.fightCoffersEnd = function (hurt, cb, target) {
            var self = this;
            var args = {};
            var argsKeys = gc.iface.a_coffers_fightCoffersEnd_args;
            args[argsKeys.hurt] = hurt;
            args[argsKeys.serverId] = self._fightServerId;
            mo.requestWaiting4Server(gc.iface.a_coffers_fightCoffersEnd, args, function (data) {
                var updateUser = data[gc.dsConsts.FightResult.updateUser] || {};
                var bagItems = data[gc.dsConsts.FightResult.bagItems];
                var bag = gd.userUtils.getNewBag({}, bagItems);
                updateUser[gc.dsConsts.UserEntity.bag] = bag;
                if (updateUser)
                    gd.userCtrl.updateEntity(updateUser);
                var updateCoffers = data[gc.dsConsts.FightResult.updateCoffers];
                if (updateCoffers)
                    self.updateEntity(updateCoffers);
                var coffersStatus = data[gc.dsConsts.FightResult.coffersStatus];
                //黑科技~
                if (coffersStatus == 3) {
                    mo.showMsg("跨服数据请求失败！");
                }
                if (cb)
                    cb.call(target, data);
            });
        };
        //获取今天掠夺次数
        p.getTodayLootNum = function () {
            return 10;
        };
        CoffersCtrl.ON_COFFERS_FIGHT = "ON_COFFERS_FIGHT";
        CoffersCtrl.ON_COFFERS_DEF_DATA_CHANGED = "ON_COFFERS_DEF_DATA_CHANGED";
        return CoffersCtrl;
    })(mo.DataController);
    gd.CoffersCtrl = CoffersCtrl;
    egret.registerClass(CoffersCtrl,"gd.CoffersCtrl");
    gd.coffersCtrl = CoffersCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/5/27.
 */
var gd;
(function (gd) {
    var CopyCtrl = (function (_super) {
        __extends(CopyCtrl, _super);
        function CopyCtrl() {
            _super.apply(this, arguments);
            this._curCopyId = -1;
            this._biCost = 0;
        }
        var d = __define,c=CopyCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this._copyProgressMap = {};
            this._copyEquipArr = [];
            this._copyBossArr = [];
            this._copyStateArr = [];
            this._tempLootArr = [];
        };
        p.initData = function (copyProgressList) {
            var self = this;
            for (var i = 0; i < copyProgressList.length; i++) {
                var locCopyProgress = copyProgressList[i];
                var copyProgressCtrl = new gd.CopyProgressEntityCtrl();
                copyProgressCtrl.init(locCopyProgress);
                self._copyProgressMap[locCopyProgress[gc.dsConsts.CopyProgressEntity.copyType]] = copyProgressCtrl;
            }
        };
        p.getInfo = function (cb, target) {
            var self = this;
            //_initCtrlByType
            async.parallel([
                function (cb1) {
                    self._initCtrlByType(gc.c_prop.copyTypeKey.vip, cb1, self);
                },
                function (cb1) {
                    self._initCtrlByType(gc.c_prop.copyTypeKey.guild, cb1, self);
                }
            ], function () {
                cb.call(target);
            });
        };
        //获取普通副本当前副本id
        p.getNormalCurCopyId = function () {
            var self = this;
            var progressCtrl = self.getCopyProgressCtrl(gc.c_prop.copyTypeKey.normal);
            if (!progressCtrl)
                return 1;
            var copyObj = progressCtrl.get(gc.dsConsts.CopyProgressEntity.copyObj) || {};
            var keys = Object.keys(copyObj);
            var curCopyId = keys[keys.length - 1] || 1;
            var id = parseInt(curCopyId.toString());
            return id;
        };
        /**
         * 获取连胜数据
         * @returns [当前连胜，最高连胜]
         */
        p.getWinningStreak = function () {
            var self = this;
            var copyId = self.getNormalCurCopyId();
            var t_copy = mo.getJSONWithFileName(gc.cfg_t_copy);
            var maxWin = t_copy[copyId][gc.t_copy_monsterCount];
            var progressCtrl = self.getCopyProgressCtrl(gc.c_prop.copyTypeKey.normal);
            var curWin = progressCtrl.get(gc.dsConsts.CopyProgressEntity.winningStreak);
            return [curWin, maxWin];
        };
        //更新连胜
        p.updateWinningStreak = function (cb, target) {
            var self = this;
            var copyId = self.getNormalCurCopyId();
            var winData = self.getWinningStreak();
            var curWin = winData[0];
            if (winData[0] >= winData[1])
                return;
            curWin++;
            var progressCtrl = self.getCopyProgressCtrl(gc.c_prop.copyTypeKey.normal);
            progressCtrl.set(gc.dsConsts.CopyProgressEntity.winningStreak, curWin);
            var argKeys = gc.iface.a_copy_updateWinningStreak_args;
            var args = {};
            args[argKeys.copyId] = copyId;
            mo.request4Server(gc.iface.a_copy_updateWinningStreak, args, function (data) {
                if (cb)
                    cb.call(target);
            });
        };
        //获取副本进度
        p.getCopyProgressCtrl = function (copyType) {
            var self = this;
            //判断时间
            return self._copyProgressMap[copyType];
        };
        //更新数据
        p.updateCopyProgressCtrl = function (copyType, data) {
            var self = this;
            var copyProgressCtrl = this.getCopyProgressCtrl(copyType);
            if (!copyProgressCtrl) {
                copyProgressCtrl = new gd.CopyProgressEntityCtrl();
                copyProgressCtrl.init(data);
                self._copyProgressMap[copyType] = copyProgressCtrl;
            }
            else {
                copyProgressCtrl.updateEntity(data);
            }
        };
        //扫荡
        p.copyWipe = function (copyId, cb, target) {
            var self = this;
            var t_copy = mo.getJSONWithFileName(gc.cfg_t_copy);
            var type = t_copy[copyId][gc.t_copy_type];
            if (type == gc.c_prop.copyTypeKey.equip) {
                //背包满并且包含装备
                if (gd.userCtrl.isEquipBagReddot() && gd.copyCtrl._checkHasEquip()) {
                    mo.showMsg(gc.id_c_msgCode.bagMaxCantGet);
                }
            }
            var argKeys = gc.iface.a_copy_copyWipe_args;
            var args = {};
            args[argKeys.copyId] = copyId;
            mo.requestWaiting4Server(gc.iface.a_copy_copyWipe, args, function (data) {
                var userData = data[gc.dsConsts.ExCopyProgress.userData] || {};
                var copyProgressData = data[gc.dsConsts.ExCopyProgress.copyProgress] || {};
                var bagItems = data[gc.dsConsts.ExCopyProgress.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExCopyProgress.equipBagItems] || {};
                var delBagItems = data[gc.dsConsts.ExCopyProgress.delBagItems] || {};
                var wipeCount = data[gc.dsConsts.ExCopyProgress.wipeCount] || 0;
                var items = data[gc.dsConsts.ExCopyProgress.items] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                if (userData)
                    gd.userCtrl.updateEntity(userData);
                if (copyProgressData)
                    self.updateCopyProgressCtrl(self.getCopyType(copyId), copyProgressData);
                self.pushNotify(self.__class.ON_CHALLENGE_NUM);
                cb.call(target, [items, wipeCount]);
            });
        };
        /**
         * 副本开始
         * @param copyId
         * @param cb
         * @param target
         * @returns [[uid,[[物品id,物品数量],[物品id,物品数量]]]]
         */
        p.start = function (copyId, cb, target) {
            var self = this;
            var copyType = self.getCopyType(copyId);
            if (self.isCopyLocked(copyId))
                return mo.showMsg("副本未开启");
            var con = self.checkPassCon(copyId);
            if (con) {
                var type = con[0], arg = con[1];
                if (type == 999)
                    return mo.showMsg("副本暂未开启");
                if (type == 1) {
                    return mo.showMsg(gc.id_c_msgCode.noRoleLvl, arg);
                }
                if (type == 2) {
                    return mo.showMsg("副本未开启");
                }
                if (type == 3) {
                    return mo.showMsg("副本未开启");
                }
            }
            if (gd.fightCtrl.isSpFighting)
                return mo.showMsg("还在挑战中，请稍后");
            if (gd.fightCtrl.isDie)
                return mo.showMsg("复活中，请稍后");
            this._curCopyId = copyId;
            var argKeys = gc.iface.a_copy_start_args;
            var args = {};
            args[argKeys.copyId] = copyId;
            var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            var copyCount = self.getCopyCount(copyId);
            var needItemId = 0;
            if (copyType == gc.c_prop.copyTypeKey.equip) {
                //装备副本,装备入场券
                needItemId = gc.c_prop.spItemIdKey.equipTessera;
                if (copyCount < 1) {
                    self.noCopyTimes1(copyId, function () {
                        self.start(copyId, cb, target);
                    }, this);
                    return;
                }
            }
            else if (copyType == gc.c_prop.copyTypeKey.hell) {
                //boss试炼副本,boss令牌
                needItemId = self.getBoosCopyEnterCost()[0];
                if (copyCount < 1) {
                    self.noCopyTimes(copyId, function (data) {
                        self._biCost = data;
                        self.start(copyId, cb, target);
                    }, this);
                    return;
                }
            }
            else if (copyType == gc.c_prop.copyTypeKey.state) {
                //境界副本，入场券
                //潘福安入场券
                needItemId = gc.c_prop.spItemIdKey.realmTessera;
                if (copyCount < 1) {
                    self.noCopyTimes1(copyId, function () {
                        self.start(copyId, cb, target);
                    }, this);
                    return;
                }
            }
            else if (copyType == gc.c_prop.copyTypeKey.vip) {
                if (copyCount < 1)
                    return mo.showMsg(gc.id_c_msgCode.vipNotimes);
            }
            if (needItemId) {
                var ownNum = gd.userCtrl.getItemNum(needItemId) || 0;
                if (ownNum < 1) {
                    var needDiamond = t_item[needItemId][gc.t_item_price] || 0;
                    var diamond = gd.userCtrl.getDiamond();
                    //判断元宝
                    if (diamond < needDiamond)
                        return mo.showMsg(gc.id_c_msgCode.noDiamond);
                }
            }
            gd.fightCtrl.isSpFighting = true;
            args[argKeys.biCost] = this._biCost;
            mo.requestWaiting4Server(gc.iface.a_copy_start, args, function (data) {
                var userData = data[gc.dsConsts.ExCopyProgress.userData] || {};
                var delBagItems = data[gc.dsConsts.ExCopyProgress.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var copyProgressData = data[gc.dsConsts.ExCopyProgress.copyProgress] || {};
                if (userData)
                    gd.userCtrl.updateEntity(userData);
                if (copyProgressData)
                    self.updateCopyProgressCtrl(self.getCopyType(copyId), copyProgressData);
                var copyLoot = data[gc.dsConsts.ExCopyProgress.copyLoot] || [];
                var keys = Object.keys(copyLoot);
                var lastKey = keys[keys.length - 1];
                var lootArr = [[lastKey, copyLoot[lastKey]]];
                self._tempLootArr = lootArr;
                self._biCost = 0;
                cb.call(target, lootArr);
            });
        };
        p.isCanStartHell = function (cb, target) {
            var self = this;
            var c_open = mo.getJSONWithFileName(gc.cfg_c_open);
            var needLvl = c_open[gc.id_c_open.bossCopy][gc.c_open_lvlRequired];
            if (gd.userCtrl.getLvl() < needLvl)
                cb.call(target, false);
            self.getCopyBossList(function (copyIds) {
                var ownNum = gd.userCtrl.getItemNum(gc.c_prop.spItemIdKey.bossTessera) || 0;
                var hasCount = false;
                for (var i = 0; i < copyIds.length; i++) {
                    var locCopyId = copyIds[i];
                    var locCount = self.getCopyCount(locCopyId);
                    if (locCount > 0) {
                        hasCount = true;
                        break;
                    }
                }
                var isCan = ownNum > 0 && hasCount;
                cb.call(target, isCan);
            }, self);
        };
        p._checkHasEquip = function () {
            var self = this;
            var hasEquip = false;
            var t_itemEquip = mo.getJSONWithFileName(gc.cfg_t_itemEquip);
            for (var i = 0; i < self._tempLootArr.length; i++) {
                var locLoot = self._tempLootArr[i];
                if (!locLoot)
                    continue;
                var locItemArr = locLoot[1] || [];
                for (var j = 0; j < locItemArr.length; j++) {
                    var locItemData = locItemArr[j] || [];
                    var locItemId = locItemData[0];
                    var locItemNum = locItemData[1];
                    if (t_itemEquip[locItemId]) {
                        hasEquip = true;
                        break;
                    }
                }
            }
            return hasEquip;
        };
        //副本结束
        p.end = function (isWin, fightData, cb, target) {
            if (this._curCopyId == -1)
                return;
            var self = this;
            //背包满并且包含装备
            if (gd.userCtrl.isEquipBagReddot() && self._checkHasEquip()) {
                mo.showMsg(gc.id_c_msgCode.bagMaxCantGet);
            }
            var argKeys = gc.iface.a_copy_end_args;
            var args = {};
            var copyID = this._curCopyId;
            self._curCopyId = -1;
            args[argKeys.copyId] = copyID;
            args[argKeys.fightData] = fightData;
            args[argKeys.isWin] = isWin;
            mo.requestWaiting4Server(gc.iface.a_copy_end, args, function (data) {
                var userData = data[gc.dsConsts.ExCopyProgress.userData] || {};
                var copyProgressData = data[gc.dsConsts.ExCopyProgress.copyProgress] || {};
                var bagItems = data[gc.dsConsts.ExCopyProgress.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExCopyProgress.equipBagItems] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                if (userData)
                    gd.userCtrl.updateEntity(userData);
                if (copyProgressData)
                    self.updateCopyProgressCtrl(self.getCopyType(copyID), copyProgressData);
                self.pushNotify(self.__class.ON_COPY_CHANGE);
                gd.pointCtrl.cal(gc.c_prop.pointGreenKey.copy_equip);
                //公会贡献
                var guildData = data[gc.dsConsts.ExCopyProgress.guildData];
                if (guildData)
                    gd.guildCtrl.updateData(guildData);
                var guildPersonalData = data[gc.dsConsts.ExCopyProgress.guildPersonalData];
                if (guildPersonalData)
                    gd.guildPersonalCtrl.updateData(guildPersonalData);
                cb.call(target, data);
            });
        };
        /**
         * 获取副本掉落列表
         * @param copyId
         * @returns {any|Array}
         */
        p.getCopyLootList = function (copyId) {
            var self = this;
            var copyData = mo.getJSONWithFileNameAndID(gc.cfg_t_copy, copyId);
            if (!copyData[gc.t_copy_lootDisplay])
                return [];
            var copyLoot = mo.getJSONWithFileNameAndID(gc.cfg_t_copyLoot, copyData[gc.t_copy_lootDisplay]);
            return copyLoot[gc.t_copyLoot_showItems] || [];
        };
        /**
         * 返回普通副本战斗收益：
         * [每小时获得金币，每小时获得经验, 每小时获得刷怪数量, 每小时获得装备掉落, 下级, 升级需要经验，升级需要小时]
         */
        p.getNormalCopyProfit = function () {
            var self = this;
            var copyId = gd.copyCtrl.getNormalCurCopyId();
            var copyData = mo.getJSONWithFileNameAndID(gc.cfg_t_copy, copyId);
            var attk = gd.heroCtrl.getAllHeroAttack();
            var allMonHp = 0;
            var randMonsters = copyData[gc.t_copy_randMonsters];
            var monsterId = randMonsters[0];
            var t_monster = mo.getJSONWithFileNameAndID(gc.cfg_t_monster, monsterId);
            for (var i = 0, li = randMonsters.length; i < li; i++) {
                t_monster = mo.getJSONWithFileNameAndID(gc.cfg_t_monster, monsterId);
                allMonHp += t_monster[gc.t_monster_maxHp];
            }
            //单位时间
            var tUnit = attk / allMonHp;
            //金币收益
            var t_copyLoot = mo.getJSONWithFileNameAndID(gc.cfg_t_copyLoot, copyData[gc.t_copy_loot]);
            var moneyMax = t_copyLoot[gc.t_copyLoot_moneyMax];
            var goldProfit = Math.floor(moneyMax * t_copyLoot[gc.t_copyLoot_moneyProbability] / 10000 * 3600);
            //装备掉落
            var equipDrop = Math.floor((0.06 + gd.userCtrl.getLvl() * 0.001) * tUnit * 3600);
            var heroDps = 0;
            var monsterTotal = copyData[gc.t_copy_monsterTotal]; //一波怪的数量
            var heroList = gd.heroCtrl.getList();
            for (var i = 0; i < heroList.length; i++) {
                var locHero = heroList[i];
                heroDps += locHero.getDamagePerSec(t_monster);
            }
            var findMonsterSec = 5.3; //每波怪寻怪时间
            var sumHp = monsterTotal * t_monster[gc.t_monster_maxHp]; //一波怪总血量
            var aMonsterTime = sumHp / heroDps + findMonsterSec; //击杀一波怪所需秒数
            if (aMonsterTime < 5)
                aMonsterTime = 5;
            var wavePerHour = Math.round(3600 / aMonsterTime); //一个小时杀怪波数
            var exp = t_monster[gc.t_monster_userExp]; //一只怪多少经验
            //技能影响
            var skillPro = 0;
            var t_talismanSkill = mo.getJSONWithFileName(gc.cfg_t_talismanSkill);
            var userData = gd.userCtrl.getData();
            var exData = userData[gc.dsConsts.UserEntity.exData] || {};
            if (exData[gc.c_prop.userExDataKey.talismanSkill] && exData[gc.c_prop.userExDataKey.talismanSkill][gc.c_prop.talismanSkillTypeKey.exp]) {
                var skillArr = exData[gc.c_prop.userExDataKey.talismanSkill][gc.c_prop.talismanSkillTypeKey.exp];
                for (var i = 0; i < skillArr.length; i++) {
                    var skillId = skillArr[i];
                    if (t_talismanSkill[skillId]) {
                        skillPro += parseInt(t_talismanSkill[skillId][gc.t_talismanSkill_effect][0][0]);
                    }
                }
            }
            exp = exp * (skillPro / 10000 + 1);
            var expProfit = wavePerHour * monsterTotal * exp; //每小时多少经验
            var goldProfit = t_copyLoot[gc.t_copyLoot_moneyMax] * wavePerHour; //每小时多少金币
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var lootLimitLvl = c_game[gc.id_c_game.lootLimit][0]; //副本字段区间
            var monsterLvl = t_monster[gc.t_monster_level];
            if (gd.userCtrl.getLvl() - monsterLvl > lootLimitLvl) {
                exp = 0;
                equipDrop = 0;
            }
            //获取升级信息
            var nextLvl = 0;
            var upLvlReqExp = 0;
            var upLvllReqHour = 0;
            if (!gd.userCtrl.isMaxLvl()) {
                var curLvl = gd.userCtrl.getLvl();
                nextLvl = curLvl + 1;
                var c_lvl = mo.getJSONWithFileNameAndID(gc.cfg_c_lvl, curLvl);
                upLvlReqExp = c_lvl[gc.c_lvl_reqExp] - gd.userCtrl.getExp();
                upLvllReqHour = upLvlReqExp / expProfit;
            }
            //宝箱掉落
            var exItems = t_copyLoot[gc.t_copyLoot_exItems];
            var boxItems = [];
            var keyItems = [];
            if (exItems) {
                for (var i = 0; i < exItems.length; i++) {
                    var chestsNum = exItems[i][2] * 1800 / 10000 * exItems[i][1];
                    var exItemsId = exItems[i][0];
                    chestsNum = parseFloat(chestsNum.toFixed(1));
                    if ((exItemsId / 100 >> 0) == 53) {
                        boxItems.push([exItemsId, chestsNum]);
                    }
                    if ((exItemsId / 100 >> 0) == 52) {
                        boxItems.push([exItemsId, chestsNum]);
                    }
                    if ((exItemsId / 100 >> 0) == 51) {
                        boxItems.push([exItemsId, chestsNum]);
                    }
                    if (exItemsId == 1545 || exItemsId == 1550 || exItemsId == 1551) {
                        keyItems.push([exItemsId, chestsNum]);
                    }
                }
            }
            return [goldProfit, expProfit, wavePerHour, equipDrop, nextLvl, upLvlReqExp, upLvllReqHour, Math.round(exp), boxItems, keyItems];
        };
        //检查副本是否锁定
        p.isCopyLocked = function (copyId) {
            var self = this;
            //装备副本
            var index = self._copyEquipArr.indexOf(copyId);
            if (index != -1) {
                return ((self._copyEquipArr.length - 1) == index) && (self.checkPassCon(copyId) != null);
            }
            //Boss副本
            if (self.getCopyType(copyId) == gc.c_prop.copyTypeKey.hell) {
                index = self._copyBossArr.indexOf(copyId);
                return index < 0;
            }
            //境界副本
            index = self._copyStateArr.indexOf(copyId);
            if (index != -1) {
                return ((self._copyStateArr.length - 1) == index) && (self.checkPassCon(copyId) != null);
            }
            return false;
        };
        p.getPassCon = function (copyId) {
            var self = this;
            var copyData = mo.getJSONWithFileNameAndID(gc.cfg_t_copy, copyId);
            return copyData[gc.t_copy_cond];
        };
        //获取VIP副本剩余的次数
        p.getVipCopyReTimes = function (copyVip) {
            var self = this;
            var copyCfgArr = self.getVipCopyCfg(copyVip);
            var startCopyId = copyCfgArr[0];
            if (!startCopyId)
                return 0;
            return self.getCopyCount(copyCfgArr[0]);
        };
        /***
         * 获取某级VIP副本区间
         * @param copyVip vip等级
         * @returns {number[]}
         */
        p.getVipCopyCfg = function (copyVip) {
            var self = this;
            var c_vipCopy = mo.getJSONWithFileNameAndID(gc.cfg_c_vipCopy, copyVip);
            var copyCfgArr = c_vipCopy[gc.c_vipCopy_copyIds]; //副本字段区间
            return copyCfgArr;
        };
        p.getVipLootDesc = function (copyVip) {
            var self = this;
            var desc = "";
            var cfg_c_vipCopy = mo.getJSONWithFileName(gc.cfg_c_vipCopy);
            var cfg = cfg_c_vipCopy[copyVip];
            if (cfg)
                desc = cfg[gc.c_vipCopy_lootDesc];
            return desc;
        };
        p.checkPassCon = function (copyId) {
            var self = this;
            var passCons = self.getPassCon(copyId);
            for (var i = 0, li = passCons.length; i < li; i++) {
                var locCond = passCons[i] || [];
                var locType = locCond[0];
                var locValue = locCond[1];
                var passed = self._checkPassCon(locType, locValue);
                if (!passed)
                    return [locType, locValue];
            }
            return null;
        };
        /**
         * 检查开启条件
         * @param 条件类型，参数
         * ret : true 开启 false 不开启
         */
        p._checkPassCon = function (type, arg) {
            /*
             0,或者空值:无条件
             1等级
             2普通副本通关
             3境界要求
             999不开启
             */
            var self = this;
            var ret = true;
            switch (type) {
                case 1:
                    ret = gd.userCtrl.getLvl() >= arg;
                    break;
                case 2:
                    var copyProgressCtrl = self.getCopyProgressCtrl(gc.c_prop.copyTypeKey.normal);
                    var copyObj = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.copyObj);
                    ret = !!copyObj[arg] || (arg == 0 || arg == 1);
                    break;
                case 3:
                    var realmLvl = gd.heroCtrl.getMaxStateLvl();
                    ret = realmLvl >= arg;
                    break;
                case 4:
                    ret = gd.userCtrl.getVip() >= arg;
                    break;
                case 999:
                    ret = false;
            }
            return ret;
        };
        //获取副本波数
        p.getCurMaxWaveCount = function () {
            var self = this;
            var copyData = mo.getJSONWithFileNameAndID(gc.cfg_t_copy, self.getNormalCurCopyId());
            return copyData[gc.t_copy_monsterCount];
        };
        /*********************************************************************************/
        //获取装备副本列表  [id,id,id,...]  最后一个为未开启
        p.getCopyEquipList = function (cb, target) {
            var self = this;
            var returnArr = [];
            var t_copy = mo.getJSONWithFileName(gc.cfg_t_copy);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var copyIdSectionArr = c_game[gc.id_c_game.copyIdSection][gc.c_prop.copyTypeKey.equip].split(","); //副本字段区间
            var normalCopyProgressCtrl = self.getCopyProgressCtrl(gc.c_prop.copyTypeKey.normal);
            self._initCtrlByType(gc.c_prop.copyTypeKey.equip, function (equipCopyProgressCtrl) {
                var copyObj = normalCopyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.copyObj); //普通副本数据
                for (var i = copyIdSectionArr[0]; i <= copyIdSectionArr[1]; i++) {
                    if (self.checkPassCon(i) == null) {
                        returnArr.push(parseInt(i));
                    }
                    else {
                        returnArr.push(parseInt(i));
                        break;
                    }
                }
                self._copyEquipArr = returnArr;
                cb.call(target, returnArr);
            }, self);
        };
        //获取vip副本列表
        p.getVipCopyList = function (vip) {
            var self = this;
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_vipCopy, vip)[gc.c_vipCopy_copyIds];
            var ret = [];
            for (var copyId = parseInt(cfg[0]), li = parseInt(cfg[1]); copyId <= li; copyId++) {
                ret.push(copyId);
                var conNotPass = gd.copyCtrl.checkPassCon(copyId);
                if (conNotPass)
                    break; //玩家等级不足
            }
            return ret.reverse();
        };
        p._initCtrlByType = function (type, cb, target) {
            var self = this;
            var copyProgressCtrl = self.getCopyProgressCtrl(type);
            if (copyProgressCtrl)
                return cb(null, copyProgressCtrl);
            var args = {};
            var argKeys = gc.iface.a_copy_getInfo_args;
            args[argKeys.type] = type;
            mo.request4Server(gc.iface.a_copy_getInfo, args, function (data) {
                self.updateCopyProgressCtrl(type, data);
                var copyProgressCtrl = self.getCopyProgressCtrl(gc.c_prop.copyTypeKey.equip);
                cb(null, copyProgressCtrl);
            });
        };
        //获取Boss副本列表  [id,id,id,...]    最后一个为未开启
        p.getCopyBossList = function (cb, target) {
            var self = this;
            var returnArr = [];
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var t_copy = mo.getJSONWithFileName(gc.cfg_t_copy);
            var copyIdSectionArr = c_game[gc.id_c_game.copyIdSection][gc.c_prop.copyTypeKey.hell].split(","); //副本字段区间
            self._initCtrlByType(gc.c_prop.copyTypeKey.hell, function (ctrl) {
                for (var i = parseInt(copyIdSectionArr[0]), li = parseInt(copyIdSectionArr[1]); i <= li; i++) {
                    if (self.checkPassCon(i) == null) {
                        returnArr.push(i);
                    }
                }
                self._copyBossArr = returnArr;
                cb.call(target, returnArr);
            }, self);
        };
        //获取境界副本列表  [id,id,id,...]  最后一个为未开启
        p.getCopyStateList = function (cb, target) {
            var self = this;
            var returnArr = [];
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var t_copy = mo.getJSONWithFileName(gc.cfg_t_copy);
            var copyIdSectionArr = c_game[gc.id_c_game.copyIdSection][gc.c_prop.copyTypeKey.state].split(","); //副本字段区间
            self._initCtrlByType(gc.c_prop.copyTypeKey.state, function (ctrl) {
                var heroCtrlList = gd.heroCtrl.getList();
                var stateLvl = 0;
                for (var key in heroCtrlList) {
                    var realmLvl = heroCtrlList[key].get(gc.dsConsts.HeroEntity.realmLvl);
                    if (realmLvl > stateLvl)
                        stateLvl = realmLvl;
                }
                for (var i = copyIdSectionArr[0]; i <= copyIdSectionArr[1]; i++) {
                    if (self.checkPassCon(i) == null) {
                        returnArr.push(parseInt(i));
                    }
                    else {
                        returnArr.push(parseInt(i));
                        break;
                    }
                }
                self._copyStateArr = returnArr;
                cb.call(target, returnArr);
            }, self);
        };
        //是否有未阅读的副本
        p.hasNotReadEquip = function (type, cb, target) {
            var self = this;
            self._getListByType(type, function (list) {
                var hasNotRead = false;
                for (var i = 0; i < list.length - 1; i++) {
                    var locId = list[0];
                    var locIsRead = self.isRead(locId);
                    if (!locIsRead) {
                        hasNotRead = true;
                        break;
                    }
                }
                cb.call(target, hasNotRead);
            }, self);
        };
        p._getListByType = function (type, cb, target) {
            var self = this;
            switch (type) {
                case gc.c_prop.copyTypeKey.equip:
                    self.getCopyEquipList(cb, target);
                    break;
                case gc.c_prop.copyTypeKey.hell:
                    self.getCopyBossList(cb, target);
                    break;
                case gc.c_prop.copyTypeKey.state:
                    self.getCopyStateList(cb, target);
                    break;
                default:
                    cb.call(target, []);
                    break;
            }
        };
        p.setRead = function (copyId) {
            var self = this;
            if (self.isRead(copyId))
                return;
            var argKeys = gc.iface.a_copy_setRead_args;
            var args = {};
            args[argKeys.copyId] = copyId;
            mo.request4Server(gc.iface.a_copy_setRead, args, function (data) {
                if (data)
                    self.updateCopyProgressCtrl(self.getCopyType(copyId), data);
            });
        };
        //判断是否阅读
        p.isRead = function (copyId) {
            var self = this;
            var type = self.getCopyType(copyId);
            var copyProgressCtrl = self.getCopyProgressCtrl(type);
            var readObj = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.readObj);
            if (readObj[copyId])
                return true;
            return false;
        };
        //通过副本id获取对应副本类型
        p.getCopyType = function (copyId) {
            var t_copy = mo.getJSONWithFileName(gc.cfg_t_copy);
            var copyType = t_copy[copyId][gc.t_copy_type];
            return copyType;
        };
        /**
         * 查询进入副本所需的道具：[道具id，数量]
         * @param type 副本类型 gc.c_prop.copyTypeKey
         * @returns {any}
         */
        p.queryCopyNeedItem = function (type) {
            var self = this;
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.copyNeedItem);
            var data;
            switch (type) {
                case gc.c_prop.copyTypeKey.equip:
                    data = cfg[0];
                    break;
                case gc.c_prop.copyTypeKey.state:
                    data = cfg[1];
                    break;
                case gc.c_prop.copyTypeKey.hell:
                    data = cfg[2];
                    break;
            }
            if (data) {
                return data.split(",");
            }
            mo.error("未找到副本类型为%s对应所需配置", type);
            return null;
        };
        //炼狱副本需要消耗的道具：[道具id，数量]
        p.getBoosCopyEnterCost = function () {
            /*
            1.优先消耗BOSS令牌，当BOSS令牌没有的时候，显示BOSS替代令
             2.当所有进入道具数量均为0时，弹出BOSS令牌的获得途径
             3.炼狱BOSS副本，1个BOSS令牌=N个BOSS替代令，读取配置【c_game(游戏配置)】【67】参数1
             4.每日可使用BOSS替代令挑战副本的次数有限制，读取配置【c_game(游戏配置)】【67】参数2，次数每日0点重置
             */
            var self = this;
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.bossTesseraReplace);
            var exchangNum = cfg[0];
            var maxUseTimes = cfg[1];
            var nowUseTimes = gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.bossTesseraReplace);
            var spItemKey = gc.c_prop.spItemIdKey;
            var data = self.queryCopyNeedItem(gc.c_prop.copyTypeKey.hell);
            var bossTesseraReplaceId = spItemKey.bossTesseraReplace; //令牌替换令
            var tesseraId = data[0];
            var tesseraNum = data[1];
            var costItemId = gd.userCtrl.getItemNum(tesseraId) > 0 ? tesseraId : bossTesseraReplaceId;
            if (costItemId == bossTesseraReplaceId) {
                var num = gd.userCtrl.getItemNum(bossTesseraReplaceId);
                costItemId = (num >= exchangNum) ? bossTesseraReplaceId : tesseraId;
                //判断使用次数
                costItemId = (nowUseTimes >= maxUseTimes) ? tesseraId : costItemId;
            }
            var costNum = (costItemId == tesseraId) ? tesseraNum : exchangNum;
            return [costItemId, costNum];
        };
        //获取副本今日剩余次数
        p.getCopyCount = function (copyId) {
            var self = this;
            var c_vip = mo.getJSONWithFileName(gc.cfg_c_vip);
            var copyProgressCtrl = self.getCopyProgressCtrl(self.getCopyType(copyId)); //todo
            var copyType = self.getCopyType(copyId); //副本类型
            var vip = gd.userCtrl.getVip() || 0; //vip等级
            var maxTimes = 0;
            var vipExt = 0;
            var perKey = copyId;
            switch (copyType) {
                case gc.c_prop.copyTypeKey.equip:
                    maxTimes = c_vip[vip][gc.c_vip_equipCount];
                    vipExt = maxTimes - c_vip[0][gc.c_vip_equipCount];
                    break;
                case gc.c_prop.copyTypeKey.hell:
                    maxTimes = c_vip[vip][gc.c_vip_bossCount];
                    vipExt = maxTimes - c_vip[0][gc.c_vip_bossCount];
                    break;
                case gc.c_prop.copyTypeKey.state:
                    maxTimes = c_vip[vip][gc.c_vip_realmCount];
                    vipExt = maxTimes - c_vip[0][gc.c_vip_realmCount];
                    break;
                case gc.c_prop.copyTypeKey.vip:
                    var copyVip = self.getCopyVip(copyId);
                    perKey = copyVip;
                    maxTimes = self.getMaxVipCopyTimes(copyVip);
                    vipExt = maxTimes;
                    break;
            }
            if (!copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.refreshTime))
                return maxTimes;
            var refreshTime = Date.newDate(copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.refreshTime)); //最后一次通关子副本时间
            var timesPerDay = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.timesPerDay); //子副本剩余挑战次数
            if (!refreshTime || !refreshTime.equalsDay(Date.newDate()) || !timesPerDay.hasOwnProperty(perKey))
                return maxTimes;
            return parseInt(timesPerDay[perKey]) + vipExt;
        };
        /**
         * 查询玩家当前vip等级下,可以打相应VIP副本的次数
         * @param copyVip 副本VIP等级
         * @returns {number}
         */
        p.getMaxVipCopyTimes = function (copyVip) {
            var self = this;
            var vip = gd.userCtrl.getVip() || 0; //vip等级
            var c_vip = mo.getJSONWithFileName(gc.cfg_c_vip);
            var maxTimes = 0;
            if (copyVip == 7)
                maxTimes = c_vip[vip][gc.c_vip_copyCountV7];
            if (copyVip == 10)
                maxTimes = c_vip[vip][gc.c_vip_copyCountV10];
            if (copyVip == 14)
                maxTimes = c_vip[vip][gc.c_vip_copyCountV14];
            if (copyVip == 17)
                maxTimes = c_vip[vip][gc.c_vip_copyCountV17];
            if (copyVip == 19)
                maxTimes = c_vip[vip][gc.c_vip_copyCountV19];
            return maxTimes;
        };
        //查找copyId对应vip等级
        p.getCopyVip = function (copyId) {
            var c_vipCopy = mo.getJSONWithFileName(gc.cfg_c_vipCopy);
            for (var key in c_vipCopy) {
                var vipCopyData = c_vipCopy[key];
                var copyIds = vipCopyData[gc.c_vipCopy_copyIds]; //副本字段区间
                if (copyId >= parseInt(copyIds[0]) && copyId <= parseInt(copyIds[1])) {
                    return vipCopyData[gc.c_vipCopy_vipLvl];
                }
            }
            return 0;
        };
        //获取副本购买次数
        p.getBuyCopyCount = function (copyId) {
            var self = this;
            var copyProgressCtrl = self.getCopyProgressCtrl(self.getCopyType(copyId));
            var buyCopyCount = 0;
            var resetTime = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.resetTime); //购买时间
            var resetCounts = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.resetCounts); //子副本今日购买次数
            if (!resetTime || !Date.newDate(resetTime).equalsDay(Date.newDate()))
                copyProgressCtrl.set(gc.dsConsts.CopyProgressEntity.resetCounts, {});
            if (!resetTime || !Date.newDate(resetTime).equalsDay(Date.newDate()) || !resetCounts.hasOwnProperty(copyId))
                return buyCopyCount;
            return resetCounts[copyId];
        };
        //获取副本星级
        p.getCopyStar = function (copyId) {
            var self = this;
            var copyProgressCtrl = self.getCopyProgressCtrl(self.getCopyType(copyId));
            var copyStar = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.copyStar); //子副本星级
            var starCount = copyStar[copyId] || 0;
            return starCount;
        };
        //获取入场劵数量
        p.getTesseraCount = function (itemId) {
            var tesseraCount = gd.userCtrl.getItemNum(itemId);
            return tesseraCount;
        };
        p.getTesseraPrice = function (itemId) {
            var self = this;
            var t_item = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
            return t_item[gc.t_item_price] || 0;
        };
        //获取当前装备副本挑战次数价格
        p.getEquipCopyPrice = function (copyId) {
            var self = this;
            var buyCopyCount = 1;
            var copyProgressCtrl = self.getCopyProgressCtrl(self.getCopyType(copyId));
            var resetTime = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.resetTime); //购买时间
            var resetCounts = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.resetCounts); //购买次数
            //如果时间在昨天或者不存在  更新购买次数数据
            if (!resetTime || !Date.newDate(resetTime).equalsDay(Date.newDate())) {
                copyProgressCtrl.set(gc.dsConsts.CopyProgressEntity.resetCounts, {});
            }
            if (!resetTime || !Date.newDate(resetTime).equalsDay(Date.newDate()) || !resetCounts.hasOwnProperty(copyId))
                return gc.calBuyEquip(buyCopyCount);
            buyCopyCount = parseInt(resetCounts[copyId]) + 1;
            return gc.calBuyEquip(buyCopyCount);
        };
        //获取当前Boss副本挑战次数价格
        p.getBossCopyPrice = function (copyId) {
            var self = this;
            var buyCopyCount = 1;
            var copyProgressCtrl = self.getCopyProgressCtrl(self.getCopyType(copyId));
            var resetTime = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.resetTime); //购买时间
            var resetCounts = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.resetCounts); //购买次数
            //如果时间在昨天或者不存在  更新购买次数数据
            if (!resetTime || !Date.newDate(resetTime).equalsDay(Date.newDate())) {
                copyProgressCtrl.set(gc.dsConsts.CopyProgressEntity.resetCounts, {});
            }
            if (!resetTime || !Date.newDate(resetTime).equalsDay(Date.newDate()) || !resetCounts.hasOwnProperty(copyId))
                return gc.calBuyBoss(buyCopyCount);
            buyCopyCount = parseInt(resetCounts[copyId]) + 1;
            return gc.calBuyBoss(buyCopyCount);
        };
        //获取当前境界副本挑战次数价格
        p.getRealmCopyPrice = function (copyId) {
            var self = this;
            var buyCopyCount = 1;
            var copyProgressCtrl = self.getCopyProgressCtrl(self.getCopyType(copyId));
            var resetTime = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.resetTime); //购买时间
            var resetCounts = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.resetCounts); //购买次数
            //如果时间在昨天或者不存在  更新购买次数数据
            if (!resetTime || !Date.newDate(resetTime).equalsDay(Date.newDate())) {
                copyProgressCtrl.set(gc.dsConsts.CopyProgressEntity.resetCounts, {});
            }
            if (!resetTime || !Date.newDate(resetTime).equalsDay(Date.newDate()) || !resetCounts.hasOwnProperty(copyId))
                return gc.calBuyRealm(buyCopyCount);
            buyCopyCount = parseInt(resetCounts[copyId]) + 1;
            return gc.calBuyRealm(buyCopyCount);
        };
        //购买境界副本、装备副本挑战次数
        p.buyCopyCount1 = function (copyId, cb, target) {
            var self = this;
            var copyType = self.getCopyType(copyId); //副本类型
            var argKeys = gc.iface.a_copy_buyCopyCount_args;
            var args = {};
            args[argKeys.copyId] = copyId;
            args[argKeys.type] = copyType;
            var price = 0; //价格
            switch (copyType) {
                case gc.c_prop.copyTypeKey.equip:
                    price = self.getEquipCopyPrice(copyId);
                    break;
                case gc.c_prop.copyTypeKey.state:
                    price = self.getRealmCopyPrice(copyId);
                    break;
            }
            mo.showMsg(gc.id_c_msgCode.buyCopyTimes1, price, function () {
                var diamond = gd.userCtrl.get(gc.dsConsts.UserEntity.diamond);
                if (diamond < price)
                    return mo.showMsg(gc.id_c_msgCode.noDiamond); //钻石不足
                mo.requestWaiting4Server(gc.iface.a_copy_buyCopyCount, args, function (data) {
                    var userData = data[gc.dsConsts.ExUserData.userData] || {};
                    var copyProgressData = data[gc.dsConsts.ExUserData.copyProgressData] || {};
                    gd.userCtrl.updateEntity(userData);
                    self.updateCopyProgressCtrl(self.getCopyType(copyId), copyProgressData);
                    cb.call(target, data);
                });
            });
        };
        //购买BOSS副本挑战次数
        p.buyCopyCount = function (copyId, cb, target) {
            var self = this;
            var copyType = self.getCopyType(copyId); //副本类型
            var argKeys = gc.iface.a_copy_buyCopyCount_args;
            var args = {};
            args[argKeys.copyId] = copyId;
            args[argKeys.type] = copyType;
            var cfg_c_vip = mo.getJSONWithFileName(gc.cfg_c_vip);
            var resetCounts = self.getBuyCopyCount(copyId);
            var buyBossCount = cfg_c_vip[gd.userCtrl.getVip() || 0][gc.c_vip_buyBossCount];
            if (resetCounts >= buyBossCount)
                return mo.showMsg(gc.id_c_msgCode.cantUseMax, resetCounts);
            var price = self.getBossCopyPrice(copyId), buyCount = self.getBuyCopyCount(copyId), maxCount = cfg_c_vip[gd.userCtrl.getVip() || 0][gc.c_vip_buyBossCount];
            mo.showMsg(gc.id_c_msgCode.buyCopyTimes, price, buyCount, maxCount, function () {
                var diamond = gd.userCtrl.get(gc.dsConsts.UserEntity.diamond);
                if (diamond < price)
                    return mo.showMsg(gc.id_c_msgCode.noDiamond); //钻石不足
                mo.requestWaiting4Server(gc.iface.a_copy_buyCopyCount, args, function (data) {
                    var userData = data[gc.dsConsts.ExUserData.userData] || {};
                    var copyProgressData = data[gc.dsConsts.ExUserData.copyProgressData] || {};
                    gd.userCtrl.updateEntity(userData);
                    self.updateCopyProgressCtrl(self.getCopyType(copyId), copyProgressData);
                    cb.call(target, data);
                });
            });
        };
        /**
         * 购买入场卷
         * @param itemId 入场券id
         * @param cb
         * @param target
         */
        p.buyTessera = function (itemId, cb, target) {
            var self = this;
            var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            var price = t_item[itemId][gc.t_item_price] || 0;
            mo.showMsg(gc.id_c_msgCode.buyCopyItem, price, gc.c_prop.spItemId[itemId], function () {
                switch (itemId) {
                    case gc.c_prop.spItemIdKey.equipTessera:
                        self.buyEquipTessera(cb, target);
                        break;
                    case gc.c_prop.spItemIdKey.realmTessera:
                        self.buyRealmTessera(cb, target);
                        break;
                    default:
                        mo.error("未知入场券id");
                        break;
                }
            });
        };
        //购买装备入场卷
        p.buyEquipTessera = function (cb, target) {
            var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            var price = t_item[gc.c_prop.spItemIdKey.equipTessera][gc.t_item_price] || 0; //价格
            var diamond = gd.userCtrl.get(gc.dsConsts.UserEntity.diamond);
            if (diamond < price)
                return mo.showMsg(gc.id_c_msgCode.noDiamond); //钻石不足
            mo.requestWaiting4Server(gc.iface.a_copy_buyEquipTessera, {}, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var bagItems = data[gc.dsConsts.ExUserData.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                cb.call(target, data);
            });
        };
        //购买境界入场卷
        p.buyRealmTessera = function (cb, target) {
            var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            var price = t_item[gc.c_prop.spItemIdKey.realmTessera][gc.t_item_price] || 0; //价格
            var diamond = gd.userCtrl.get(gc.dsConsts.UserEntity.diamond);
            if (diamond < price)
                return mo.showMsg(gc.id_c_msgCode.noDiamond); //钻石不足
            mo.requestWaiting4Server(gc.iface.a_copy_buyRealmTessera, {}, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var bagItems = data[gc.dsConsts.ExUserData.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                cb.call(target, data);
            });
        };
        //获取所有boss副本id
        p.getBossCopyTempList = function () {
            var self = this;
            var copyIds = [];
            var copyIdSection = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.copyIdSection)[1].split(',');
            var starId = parseInt(copyIdSection[0]);
            var endId = parseInt(copyIdSection[1]);
            for (var i = starId, li = endId; i <= li; i++) {
                copyIds.push(i);
            }
            return copyIds;
        };
        //获取boss副本长度
        p.getBossCopyLength = function () {
            var copyIdSection = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.copyIdSection)[1].split(',');
            var starId = parseInt(copyIdSection[0]);
            var endId = parseInt(copyIdSection[1]);
            return endId - starId + 1;
        };
        //获取最近解锁的BOSS副本ID
        p.getCurBossCopyId = function () {
            var self = this;
            if (self._copyBossArr.length == self.getBossCopyLength()) {
                return self._copyBossArr[self._copyBossArr.length - 1];
            }
            return self._copyBossArr[self._copyBossArr.length - 1] || self.getBossCopyTempList()[0];
        };
        //购买装备副本、境界副本次数（直接进入）
        p.noCopyTimes1 = function (copyId, cb, target) {
            var self = this;
            var cfg_t_copy = mo.getJSONWithFileName(gc.cfg_t_copy);
            var type = cfg_t_copy[copyId][gc.t_copy_type];
            var costDiamond = 0;
            switch (type) {
                case gc.c_prop.copyTypeKey.equip:
                    costDiamond = self.getEquipCopyPrice(copyId);
                    break;
                case gc.c_prop.copyTypeKey.state:
                    costDiamond = self.getRealmCopyPrice(copyId);
                    break;
            }
            //挑战次数不足，是否花费[ubb color=#6dd1ff]%s元宝[/ubb][/br]购买1次并进入？
            mo.showMsg(gc.id_c_msgCode.noCopyTimes1, costDiamond, function () {
                //计算消耗的钻石
                if (gd.userCtrl.getDiamond() < costDiamond)
                    return mo.showMsg(gc.id_c_msgCode.noDiamond); //钻石不足
                var copyType = self.getCopyType(copyId); //副本类型
                var argKeys = gc.iface.a_copy_buyCopyCount_args;
                var args = {};
                args[argKeys.copyId] = copyId;
                args[argKeys.type] = copyType;
                mo.requestWaiting4Server(gc.iface.a_copy_buyCopyCount, args, function (data) {
                    var userData = data[gc.dsConsts.ExUserData.userData] || {};
                    var copyProgressData = data[gc.dsConsts.ExUserData.copyProgressData] || {};
                    gd.userCtrl.updateEntity(userData);
                    self.updateCopyProgressCtrl(self.getCopyType(copyId), copyProgressData);
                    cb.call(target, data);
                });
            });
        };
        //购买BOSS副本次数（直接进入）
        p.noCopyTimes = function (copyId, cb, target) {
            var self = this;
            var cfg_c_vip = mo.getJSONWithFileName(gc.cfg_c_vip);
            var costDiamond = self.getBossCopyPrice(copyId);
            var buyCount = self.getBuyCopyCount(copyId), maxCount = cfg_c_vip[gd.userCtrl.getVip() || 0][gc.c_vip_buyBossCount];
            //挑战次数不足，是否花费[ubb color=#6dd1ff]%s元宝[/ubb][/br]购买1次并进入？[/br]（今日剩余购买%s/%s次）
            mo.showMsg(gc.id_c_msgCode.noCopyTimes, costDiamond, buyCount, maxCount, function () {
                //今日已达使用上限[/br][/br][ubb size=60]（今日已使用%s次）[/ubb]
                if (buyCount >= maxCount)
                    return mo.showMsg(gc.id_c_msgCode.cantUseMax, buyCount);
                //计算消耗的钻石
                if (gd.userCtrl.getDiamond() < costDiamond)
                    return mo.showMsg(gc.id_c_msgCode.noDiamond); //钻石不足
                var copyType = self.getCopyType(copyId); //副本类型
                var argKeys = gc.iface.a_copy_buyCopyCount_args;
                var args = {};
                args[argKeys.copyId] = copyId;
                args[argKeys.type] = copyType;
                mo.requestWaiting4Server(gc.iface.a_copy_buyCopyCount, args, function (data) {
                    var userData = data[gc.dsConsts.ExUserData.userData] || {};
                    var copyProgressData = data[gc.dsConsts.ExUserData.copyProgressData] || {};
                    gd.userCtrl.updateEntity(userData);
                    self.updateCopyProgressCtrl(self.getCopyType(copyId), copyProgressData);
                    cb.call(target, costDiamond);
                });
            });
        };
        /**
         * 返回开启等级
         * @param copyType gc.c_prop.copyTypeKey
         * @returns {number}
         */
        p.getOpenLvl = function (copyType) {
            var self = this;
            var c_open = mo.getJSONWithFileName(gc.cfg_c_open);
            var needLvl = 0;
            switch (copyType) {
                case gc.c_prop.copyTypeKey.equip:
                    needLvl = c_open[gc.id_c_open.equipCopy][gc.c_open_lvlRequired];
                    break;
                case gc.c_prop.copyTypeKey.state:
                    needLvl = c_open[gc.id_c_open.reamCopy][gc.c_open_lvlRequired];
                    break;
                case gc.c_prop.copyTypeKey.hell:
                    needLvl = c_open[gc.id_c_open.bossCopy][gc.c_open_lvlRequired];
                    break;
            }
            return needLvl;
        };
        p.getPracticeOpenLvl = function (copyType) {
            var self = this;
            var c_open = mo.getJSONWithFileName(gc.cfg_c_open);
            var needLvl = 0;
            switch (copyType) {
                case gc.c_prop.practiceTypeKey.heart:
                    needLvl = c_open[gc.id_c_open.heartStunt1][gc.c_open_lvlRequired];
                    break;
                case gc.c_prop.practiceTypeKey.medal:
                    needLvl = 0;
                    break;
                case gc.c_prop.practiceTypeKey.gift:
                    needLvl = c_open[gc.id_c_open.openTrump][gc.c_open_lvlRequired];
                    ;
                    break;
            }
            return needLvl;
        };
        //-------------------- 爬塔 开始 --------------------
        //奖励数组      [是否可领，是否已领]   true：可领/已领取   false：不可领/未领取
        p.getIsAwardArr = function (copyId) {
            var self = this;
            var copyProgressCtrl = self.getCopyProgressCtrl(gc.c_prop.copyTypeKey.paTa);
            var copyObj = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.copyObj); //{copyId:[最低血量,是否领取],copyId:[最低血量,是否领取],.....}
            if (!copyObj[copyId] || !copyObj[copyId][0] || copyObj[copyId][0] != -1)
                return [false, false];
            if (!copyObj[copyId][1])
                return [true, false];
            return [false, true];
        };
        //获取当前层数copyId
        p.getHighPata = function () {
            var self = this;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var section = c_game[gc.id_c_game.towerCopy][0].split(","); //爬塔副本id区间
            var highCopyId = parseInt(section[0]);
            var highPaTa = gd.userCtrl.get(gc.dsConsts.UserEntity.highPaTa) || 0; //爬塔最高层数
            highCopyId = highPaTa + highCopyId;
            return highCopyId;
        };
        p.isFirstTowerCopyId = function () {
            var self = this;
            return self.getHighPata() == self.getTowerCopyIdRange()[0];
        };
        p.getTowerCopyIdRange = function () {
            var self = this;
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.towerCopy);
            var copyIdRange = c_game[0].split(',');
            var starCopyId = parseInt(copyIdRange[0]), endCopyId = parseInt(copyIdRange[1]);
            return [starCopyId, endCopyId];
        };
        //当前聚焦的副本id
        p.getFocusTowerCopyId = function () {
            var self = this;
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.towerCopy);
            var copyIdRange = c_game[0].split(',');
            var starCopyId = parseInt(copyIdRange[0]), endCopyId = parseInt(copyIdRange[1]);
            var curCopyId = self.getHighPata();
            var preCopyId = curCopyId - 1;
            if (preCopyId >= starCopyId) {
                //检查有未领的没
                var awardInfoArr = self.getIsAwardArr(preCopyId);
                if (!awardInfoArr[1])
                    curCopyId = preCopyId;
            }
            if (curCopyId > endCopyId)
                curCopyId = endCopyId;
            return curCopyId;
        };
        //获取今日剩余免费寻宝次数
        p.getPaTaTreasuryCount = function () {
            var self = this;
            var type = gc.c_prop.copyTypeKey.paTa;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var maxTimes = c_game[gc.id_c_game.towerCopy][1];
            var copyProgressCtrl = self.getCopyProgressCtrl(type);
            if (!copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.refreshTime))
                return maxTimes;
            var refreshTime = Date.newDate(copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.refreshTime)); //最后一次通关子副本时间
            var timesPerDay = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.timesPerDay); //子副本剩余挑战次数
            if (!refreshTime || !refreshTime.equalsDay(Date.newDate()) || !timesPerDay.hasOwnProperty(type))
                return maxTimes;
            maxTimes = timesPerDay[type];
            if (maxTimes < 0)
                maxTimes = 0;
            return maxTimes;
        };
        //获取每日最大免费探宝次数
        p.getMaxFreeTowerTimes = function () {
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var maxTimes = c_game[gc.id_c_game.towerCopy][1];
            return maxTimes;
        };
        //获取今日购买寻宝次数
        p.getPaTaTreasuryBuyCount = function () {
            var self = this;
            var type = gc.c_prop.copyTypeKey.paTa;
            var copyProgressCtrl = self.getCopyProgressCtrl(type);
            var buyCopyCount = 0;
            var resetTime = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.resetTime); //购买时间
            var resetCounts = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.resetCounts); //子副本今日购买次数
            if (!resetTime || !Date.newDate(resetTime).equalsDay(Date.newDate()))
                copyProgressCtrl.set(gc.dsConsts.CopyProgressEntity.resetCounts, {});
            if (!resetTime || !Date.newDate(resetTime).equalsDay(Date.newDate()) || !resetCounts.hasOwnProperty(type))
                return buyCopyCount;
            return resetCounts[type];
        };
        //获取当前需要花费元宝
        p.getPaTaTreasuryNeedDia = function () {
            var self = this;
            var returnDia = 0;
            var count = self.getPaTaTreasuryCount();
            if (count > 0)
                return returnDia;
            var paTaTreasuryBuyCount = self.getPaTaTreasuryBuyCount() + 1;
            var highPaTa = gd.userCtrl.get(gc.dsConsts.UserEntity.highPaTa) || 0; //爬塔最高层数
            returnDia = gc.calPaTaAward(paTaTreasuryBuyCount, highPaTa);
            return returnDia;
        };
        //爬塔初始化
        p.getPaTaInfo = function (cb, target) {
            var self = this;
            var type = gc.c_prop.copyTypeKey.paTa;
            var copyProgressCtrl = self.getCopyProgressCtrl(type);
            if (copyProgressCtrl)
                return cb.call(target, copyProgressCtrl);
            self._initCtrlByType(type, function (data) {
                cb.call(target, data);
            }, self);
        };
        //爬塔领取奖励
        p.paTaAward = function (copyId, cb, target) {
            var self = this;
            var type = gc.c_prop.copyTypeKey.paTa;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var section = c_game[gc.id_c_game.towerCopy][0].split(","); //爬塔副本id区间
            if (copyId < section[0] || copyId > section[1])
                return mo.showMsg("数据异常");
            var copyProgressCtrl = self.getCopyProgressCtrl(type);
            var awardArr = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.copyObj)[copyId] || []; //{copyId:[最低血量,是否领取],copyId:[最低血量,是否领取],.....}
            if (!awardArr[0] || awardArr[0] != -1)
                return mo.showMsg("还未通关该boss");
            if (awardArr[1] && awardArr[1] == 1)
                return mo.showMsg("已领取过该奖励！");
            var argKeys = gc.iface.a_copy_paTaAward_args;
            var args = {};
            args[argKeys.copyId] = copyId;
            mo.requestWaiting4Server(gc.iface.a_copy_paTaAward, args, function (data) {
                var userData = data[gc.dsConsts.ExCopyProgress.userData] || {};
                var copyProgressData = data[gc.dsConsts.ExCopyProgress.copyProgress] || {};
                var bagItems = data[gc.dsConsts.ExCopyProgress.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExCopyProgress.equipBagItems] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                if (userData)
                    gd.userCtrl.updateEntity(userData);
                if (copyProgressData)
                    gd.copyCtrl.updateCopyProgressCtrl(type, copyProgressData);
                cb.call(target, bagItems);
            });
        };
        //爬塔宝库抽奖
        p.paTaTreasury = function (cb, target) {
            var self = this;
            var lvl = gd.userCtrl.getLvl();
            var type = gc.c_prop.copyTypeKey.paTa;
            var c_open = mo.getJSONWithFileName(gc.cfg_c_open);
            var paTaOpen = c_open[gc.id_c_open.paTa][gc.c_open_lvlRequired];
            if (lvl < paTaOpen)
                return mo.showMsg(gc.id_c_msgCode.towerNotOpen, paTaOpen);
            var highPaTa = gd.userCtrl.get(gc.dsConsts.UserEntity.highPaTa) || 0; //爬塔最高层数
            if (highPaTa < 1)
                return mo.showMsg(gc.id_c_msgCode.noLevelDown);
            //元宝判断
            if (self.getPaTaTreasuryNeedDia() > gd.userCtrl.getDiamond()) {
                return mo.showMsg(gc.id_c_msgCode.noDiamond);
            }
            mo.requestWaiting4Server(gc.iface.a_copy_paTaTreasury, {}, function (data) {
                var userData = data[gc.dsConsts.ExCopyProgress.userData] || {};
                var copyProgressData = data[gc.dsConsts.ExCopyProgress.copyProgress] || {};
                var bagItems = data[gc.dsConsts.ExCopyProgress.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExCopyProgress.equipBagItems] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                if (userData)
                    gd.userCtrl.updateEntity(userData);
                if (copyProgressData)
                    gd.copyCtrl.updateCopyProgressCtrl(type, copyProgressData);
                self.pushNotify(self.__class.ON_TOWER_TANBAO);
                cb.call(target, bagItems);
            });
        };
        //获取3个爬塔怪副本
        p.getTowerMonList = function () {
            var self = this;
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.towerCopy);
            var copyIdRange = c_game[0].split(',');
            var starCopyId = parseInt(copyIdRange[0]), endCopyId = parseInt(copyIdRange[1]);
            var curCopyId = self.getHighPata();
            var preCopyId = curCopyId - 1;
            if (preCopyId >= starCopyId) {
                //检查有未领的没
                var awardInfoArr = self.getIsAwardArr(preCopyId);
                if (!awardInfoArr[1])
                    curCopyId = preCopyId;
            }
            if (curCopyId > endCopyId)
                curCopyId = endCopyId;
            var curPassCount = curCopyId - starCopyId;
            var group = Math.floor(curPassCount / 3);
            var ret = [];
            for (var i = 0, li = 3; i < li; i++) {
                var copyId = starCopyId + group * 3 + i;
                ret.push(copyId);
            }
            return ret;
        };
        //获取层数
        p.getTowerIndex = function (copyId) {
            var self = this;
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.towerCopy);
            var copyIdRange = c_game[0].split(',');
            var starCopyId = parseInt(copyIdRange[0]);
            return parseInt(copyId) - starCopyId + 1;
        };
        //该塔是否已经通过
        p.isTwerPassed = function (copyId) {
            var self = this;
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.towerCopy);
            var copyIdRange = c_game[0].split(',');
            var starCopyId = parseInt(copyIdRange[0]);
            return parseInt(copyId) < self.getHighPata();
        };
        //以copyId开始,往后查找有特殊奖励的copyId
        p.findSpAward = function (copyId) {
            var self = this;
            var c_paTa = mo.getJSONWithFileName(gc.cfg_t_paTaTreasury);
            for (var i = parseInt(copyId);; ++i) {
                var cfg = c_paTa[i];
                if (!cfg)
                    break;
                if (cfg[gc.t_paTaTreasury_preview]) {
                    return i;
                }
            }
            return null;
        };
        //获取可抽奖层数
        p.getTowerBaokuNum = function () {
            var self = this;
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.towerCopy);
            var copyIdRange = c_game[0].split(',');
            var starCopyId = parseInt(copyIdRange[0]), endCopyId = parseInt(copyIdRange[1]);
            var curCopyId = self.getHighPata();
            if (curCopyId - 1 < starCopyId)
                return starCopyId;
            if (curCopyId - 1 >= endCopyId)
                return endCopyId;
            return curCopyId - 1;
        };
        CopyCtrl.ON_COPY_CHANGE = "ON_COPY_CHANGE";
        CopyCtrl.ON_TOWER_TANBAO = "ON_TOWER_TANBAO";
        CopyCtrl.ON_CHALLENGE_NUM = "ON_CHALLENGE_NUM";
        return CopyCtrl;
    })(mo.DataController);
    gd.CopyCtrl = CopyCtrl;
    egret.registerClass(CopyCtrl,"gd.CopyCtrl");
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/9/8.
 */
var gd;
(function (gd) {
    var CopyProgressEntityCtrl = (function (_super) {
        __extends(CopyProgressEntityCtrl, _super);
        function CopyProgressEntityCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=CopyProgressEntityCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.CopyProgressEntity;
        };
        return CopyProgressEntityCtrl;
    })(mo.DataController);
    gd.CopyProgressEntityCtrl = CopyProgressEntityCtrl;
    egret.registerClass(CopyProgressEntityCtrl,"gd.CopyProgressEntityCtrl");
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/5/27.
 */
var gd;
(function (gd) {
    var CouponCtrl = (function (_super) {
        __extends(CouponCtrl, _super);
        function CouponCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=CouponCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
        };
        //使用兑换码
        p.use = function (code, cb, target) {
            if (code == "")
                return mo.showMsg(gc.id_c_msgCode.cdKeyNull);
            var argKeys = gc.iface.a_coupon_use_args;
            var args = {};
            args[argKeys.code] = code;
            mo.requestWaiting4Server(gc.iface.a_coupon_use, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData];
                gd.userCtrl.updateEntity(userData);
                mo.showMsg(gc.id_c_msgCode.redeemRewardMail);
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.mail);
                if (cb)
                    cb.call(target, data);
            });
        };
        return CouponCtrl;
    })(mo.DataController);
    gd.CouponCtrl = CouponCtrl;
    egret.registerClass(CouponCtrl,"gd.CouponCtrl");
    gd.couponCtrl = CouponCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Sara on 2015/12/4.
 */
var gd;
(function (gd) {
    var GuildCtrl = (function (_super) {
        __extends(GuildCtrl, _super);
        function GuildCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=GuildCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.GuildEntity;
            this._isOpenBoss = false;
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
            self._memberList = [];
        };
        p.isOpenBoss = function () {
            return this._isOpenBoss;
        };
        //更新数据
        p.updateData = function (data) {
            var self = this;
            if (!self._data)
                return;
            self.updateEntity(data);
        };
        p.updateEntity = function (data) {
            var self = this;
            var oldData = JSON.parse(JSON.stringify(self.getData()));
            _super.prototype.updateEntity.call(this, data);
            if (data[gc.dsConsts.GuildEntity.lvl]) {
                var oldLvl = oldData[gc.dsConsts.GuildEntity.lvl];
                var newLvl = data[gc.dsConsts.GuildEntity.lvl];
                if (oldLvl != newLvl) {
                    gd.heroCtrl.calPropAndCombat();
                }
            }
        };
        //获取公会宝库级别  0：未开启或无公会 1：初级 2：中级3：高级
        p.getLevel = function () {
            var self = this;
            var lvl = self.get(gc.dsConsts.GuildEntity.lvl);
            if (lvl && lvl >= 5) {
                if (lvl >= 5 && lvl < 15)
                    return 1;
                if (lvl >= 15 && lvl < 30)
                    return 2;
                if (lvl >= 30)
                    return 3;
            }
            else {
                return 0;
            }
        };
        p.getLvl = function () {
            var self = this;
            if (!self._data)
                return 0;
            return self.get(gc.dsConsts.GuildEntity.lvl);
        };
        p.getId = function () {
            var self = this;
            if (!self._data)
                return 0;
            return self.get(gc.dsConsts.GuildEntity.id);
        };
        p.getExitGuildCD = function () {
            return mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.guildSet)[5];
        };
        //获取公会人数上限
        p.getMaxMember = function (lvl) {
            var info = mo.getJSONWithFileNameAndID(gc.cfg_c_lvl, lvl);
            return info[gc.c_lvl_guildMan];
        };
        //获取公会所需经验
        p.getNeedExp = function (lvl) {
            var info = mo.getJSONWithFileNameAndID(gc.cfg_c_lvl, lvl);
            return info[gc.c_lvl_guildExp];
        };
        /**
         * 获取公会排名
         * @param cb
         * @param target
         * @returns
         */
        p.getRank = function (cb, target) {
            var self = this;
        };
        /**
         * 获取公会数据
         * @param cb
         * @param target
         * @returns [是否有公会（true：有，false：没有）,gc.dsConsts.GuildPersonalEntity,gc.dsConsts.GuildEntity,会长名称，公会排名]
         */
        p.getInfo = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_guild_getInfo, {}, function (data) {
                var isGuild = data[gc.dsConsts.ExGuildData.isGuild];
                var guildPersonalData = data[gc.dsConsts.ExGuildData.guildPersonalData] || {};
                var guildData = data[gc.dsConsts.ExGuildData.guildData] || {};
                var chairmanName = data[gc.dsConsts.ExGuildData.chairmanName] || "";
                var rank = data[gc.dsConsts.ExGuildData.rank] || 0;
                if (gd.guildPersonalCtrl.getData()) {
                    gd.guildPersonalCtrl.updateEntity(guildPersonalData);
                }
                else {
                    gd.guildPersonalCtrl.initData(guildPersonalData);
                }
                if (self.getData()) {
                    self.updateEntity(guildData);
                }
                else {
                    self.initData(guildData);
                }
                gd.heroCtrl.calPropAndCombat();
                if (data[gc.dsConsts.ExGuildData.isOpenBoss]) {
                    self._isOpenBoss = true;
                }
                else {
                    self._isOpenBoss = false;
                }
                var isOpenGuildWar = data[gc.dsConsts.ExGuildData.isOpenGuildWar];
                gd.guildWarCtrl.setIsOpen(isOpenGuildWar);
                var cfgData = data[gc.dsConsts.ExGuildData.cfgData];
                gd.guildWarCtrl.setCfgData(cfgData);
                cb.call(target, [isGuild, guildPersonalData, guildData, chairmanName, rank]);
            });
        };
        /**
         * 创建公会
         * @param name 公会名称
         * @param cb
         * @param target
         * @returns gc.dsConsts.GuildEntity
         */
        p.establishGuild = function (name, cb, target) {
            var self = this;
            var sensitiveArr = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.fuckWord)[0].split(",");
            if (name == null || name == "") {
                return mo.showMsg(gc.id_c_msgCode.guildNameIsNull);
            }
            else if (mo.STR.getStringLength(name) > 12) {
                return mo.showMsg(gc.id_c_msgCode.guildNameTooLong);
            }
            else if (mo.STR.checkSensitiveWord(name, sensitiveArr)) {
                return mo.showMsg(gc.id_c_msgCode.guildNameIllegal);
            }
            else if (name.indexOf("'") > -1) {
                return mo.showMsg("不能包含单引号");
            }
            else if (name.indexOf('"') > -1) {
                return mo.showMsg("不能包含双引号");
            }
            else if (name.indexOf('\\') > -1) {
                return mo.showMsg("不能包含斜杠");
            }
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var lvl = gd.userCtrl.getLvl();
            var openCon = c_game[gc.id_c_game.guildSet][0];
            if (lvl < openCon)
                return mo.showMsg("未开启行会系统");
            var argKeys = gc.iface.a_guild_establishGuild_args;
            var args = {};
            args[argKeys.name] = name;
            mo.requestWaiting4Server(gc.iface.a_guild_establishGuild, args, function (data) {
                var userData = data[gc.dsConsts.ExGuildData.userData] || {};
                var guildData = data[gc.dsConsts.ExGuildData.guildData] || {};
                var guildPersonalData = data[gc.dsConsts.ExGuildData.guildPersonalData] || {};
                gd.guildPersonalCtrl.updateEntity(guildPersonalData);
                if (self.getData()) {
                    self.updateEntity(guildData);
                }
                else {
                    self.initData(guildData);
                }
                gd.userCtrl.updateEntity(userData);
                gd.heroCtrl.calPropAndCombat();
                cb.call(target, guildData);
            });
        };
        /**
         * 搜索公会
         * @param cb
         * @param guildId 公会id
         * @param target
         * @returns gc.dsConsts.GuildEntity
         */
        p.seekGuild = function (guildId, cb, target) {
            if (guildId == "")
                return mo.showMsg(gc.id_c_msgCode.guildIdIsNull);
            var self = this;
            var argKeys = gc.iface.a_guild_seekGuild_args;
            var args = {};
            args[argKeys.guildId] = guildId;
            mo.requestWaiting4Server(gc.iface.a_guild_seekGuild, args, function (data) {
                cb.call(target, data);
            });
        };
        /**
         * 申请加入公会
         * @param cb
         * @param guildId 公会id
         * @param target
         * @returns [gc.dsConsts.GuildPersonalEntity,gc.dsConsts.GuildEntity]
         */
        p.joinGuild = function (guildId, cb, target) {
            var self = this;
            if (gd.accountCtrl.isGuest())
                return mo.showMsg(gc.id_c_msgCode.touristForbidGuild);
            var lastQuipGuildTime = gd.guildPersonalCtrl.get(gc.dsConsts.GuildPersonalEntity.lastQuipGuildTime);
            if (lastQuipGuildTime) {
                //var quitGuildCount = 0;
                //var actLastTime = gd.guildPersonalCtrl.get(gc.dsConsts.GuildPersonalEntity.actLastTime);
                //if (actLastTime && Date.newDate(actLastTime).equalsDay(Date.newDate())) quitGuildCount = gd.guildPersonalCtrl.get(gc.dsConsts.GuildPersonalEntity.exitGuildCount);
                //var quitGuildCd = gc.calQuitGuildCfg(quitGuildCount);
                var quitGuildCd = parseInt(self.getExitGuildCD()) * 60 * 60;
                var joinTime = Date.newDate(lastQuipGuildTime).getTime() + quitGuildCd * 1000;
                if (Date.newDate(joinTime) > Date.newDate()) {
                    var cantEnterGuildCd = Math.ceil(((joinTime - Date.newDate().getTime()) / 3600000)); //小时
                    return mo.showMsg(gc.id_c_msgCode.cantEnterGuildCd, cantEnterGuildCd);
                }
                else {
                    self._joinGuild(guildId, cb, target);
                }
            }
            else {
                self._joinGuild(guildId, cb, target);
            }
        };
        p._joinGuild = function (guildId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_guild_joinGuild_args;
            var args = {};
            args[argKeys.guildId] = guildId;
            var cfg_c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            self.seekGuild(guildId, function (guildData) {
                if (!guildData)
                    return mo.showMsg("该行会已经不存在！");
                var guildMan = cfg_c_lvl[guildData[gc.dsConsts.GuildEntity.lvl]][gc.c_lvl_guildMan];
                var guildPopulation = guildData[gc.dsConsts.GuildEntity.guildPopulation];
                if (guildPopulation >= guildMan) {
                    mo.showMsg(gc.id_c_msgCode.guildMembersMax, function () {
                        mo.requestWaiting4Server(gc.iface.a_guild_joinGuild, args, function (data) {
                            var isJoin = data[gc.dsConsts.ExGuildData.isJoin];
                            var guildData = data[gc.dsConsts.ExGuildData.guildData] || {};
                            var guildPersonalData = data[gc.dsConsts.ExGuildData.guildPersonalData] || {};
                            gd.guildPersonalCtrl.updateEntity(guildPersonalData);
                            if (self.getData()) {
                                self.updateEntity(guildData);
                            }
                            else {
                                self.initData(guildData);
                            }
                            cb.call(target, isJoin);
                        });
                    });
                }
                else {
                    mo.requestWaiting4Server(gc.iface.a_guild_joinGuild, args, function (data) {
                        var isJoin = data[gc.dsConsts.ExGuildData.isJoin];
                        var guildData = data[gc.dsConsts.ExGuildData.guildData] || {};
                        var guildPersonalData = data[gc.dsConsts.ExGuildData.guildPersonalData] || {};
                        gd.guildPersonalCtrl.updateEntity(guildPersonalData);
                        if (self.getData()) {
                            self.updateEntity(guildData);
                        }
                        else {
                            self.initData(guildData);
                        }
                        cb.call(target, isJoin);
                    });
                }
            }, self);
        };
        /**
         * 获取申请列表
         * @param cb
         * @param target
         * @returns [gc.dsConsts.UserEntity]
         */
        p.getAppliedMembers = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_guild_getAppliedMembers, {}, function (data) {
                cb.call(target, data);
            });
        };
        /**
         * 申请列表管理
         * @param cb
         * @param guildId 公会id
         * @param tUserId
         * @param isConsent 是否同意  true：同意  false：拒绝
         * @param target
         * @returns gc.dsConsts.GuildEntity
         */
        p.appliedMembersSet = function (tUserId, isConsent, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_guild_appliedMembersSet_args;
            var args = {};
            args[argKeys.tUserId] = tUserId;
            args[argKeys.isConsent] = isConsent;
            mo.requestWaiting4Server(gc.iface.a_guild_appliedMembersSet, args, function (data) {
                var guildData = data[gc.dsConsts.ExGuildData.guildData] || {};
                var guildPersonalData = data[gc.dsConsts.ExGuildData.guildPersonalData] || {};
                var isAtherGuild = data[gc.dsConsts.ExGuildData.isAtherGuild];
                var isMembersMax = data[gc.dsConsts.ExGuildData.isMembersMax];
                gd.guildPersonalCtrl.updateEntity(guildPersonalData);
                if (self.getData()) {
                    self.updateEntity(guildData);
                }
                else {
                    self.initData(guildData);
                }
                if (isAtherGuild)
                    mo.showMsg(gc.id_c_msgCode.otherGuildEntered);
                if (isMembersMax)
                    mo.showMsg(gc.id_c_msgCode.MembersMax);
                cb.call(target, guildData);
                self.pushNotify(gd.GuildCtrl.ON_GUILD_INFO_CHANGED);
            });
        };
        /**
         * 工会设置
         * @param cb
         * @param joinCon  加入条件
         * @param joinLvl  加入最低等级
         * @param target
         * @returns gc.dsConsts.GuildEntity
         */
        p.guildSetting = function (joinCon, joinLvl, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_guild_guildSetting_args;
            var args = {};
            args[argKeys.joinCon] = joinCon;
            args[argKeys.joinLvl] = joinLvl;
            mo.requestWaiting4Server(gc.iface.a_guild_guildSetting, args, function (data) {
                var guildData = data[gc.dsConsts.ExGuildData.guildData] || {};
                if (self.getData()) {
                    self.updateEntity(guildData);
                }
                else {
                    self.initData(guildData);
                }
                cb.call(target, guildData);
                self.pushNotify(gd.GuildCtrl.ON_GUILD_INFO_CHANGED, guildData);
            });
        };
        /**
         * 修改公告
         * @param cb
         * @param notice  公告
         * @param target
         * @returns gc.dsConsts.GuildEntity
         */
        p.setNotice = function (notice, cb, target) {
            var self = this;
            var sensitiveArr = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.fuckWord)[0].split(",");
            if (mo.STR.getStringLength(notice) > 60) {
                return mo.showMsg(gc.id_c_msgCode.noticeTooLong);
            }
            else if (mo.STR.checkSensitiveWord(notice, sensitiveArr)) {
                return mo.showMsg("公告内容不合法");
            }
            var argKeys = gc.iface.a_guild_setNotice_args;
            var args = {};
            args[argKeys.notice] = notice;
            mo.requestWaiting4Server(gc.iface.a_guild_setNotice, args, function (data) {
                var guildData = data[gc.dsConsts.ExGuildData.guildData] || {};
                var guildPersonalData = data[gc.dsConsts.ExGuildData.guildPersonalData] || {};
                gd.guildPersonalCtrl.updateEntity(guildPersonalData);
                if (self.getData()) {
                    self.updateEntity(guildData);
                }
                else {
                    self.initData(guildData);
                }
                cb.call(target, guildData);
                self.pushNotify(gd.GuildCtrl.ON_GUILD_INFO_CHANGED, guildData);
            });
        };
        /**
         * 退会
         * @param cb
         * @param isQuit    退会/解散
         * @param target
         */
        p.exitGuild = function (isQuit, cb, target) {
            var self = this;
            if (isQuit == gc.c_prop.guildMemberOpKey.quitGuild) {
                //mo.showMsg(gc.id_c_msgCode.ifGquit ,function(){
                self._exitGuild(cb, target);
            }
            if (isQuit == gc.c_prop.guildMemberOpKey.dissolveGuild) {
                //mo.showMsg(gc.id_c_msgCode.ifGdisband ,function(){
                self._exitGuild(cb, target);
            }
        };
        p._exitGuild = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_guild_exitGuild, {}, function (data) {
                var dissolveId = data[gc.dsConsts.ExGuildData.dissolveId];
                var guildPersonalData = data[gc.dsConsts.ExGuildData.guildPersonalData] || {};
                gd.guildPersonalCtrl.updateEntity(guildPersonalData);
                if (dissolveId) {
                    self._data = null;
                }
                else {
                    var guildData = data[gc.dsConsts.ExGuildData.guildData] || {};
                    if (self.getData()) {
                        self.updateEntity(guildData);
                    }
                    else {
                        self.initData(guildData);
                    }
                }
                gd.heroCtrl.calPropAndCombat();
                cb.call(target, data);
            });
        };
        //计算会员等级
        p.getRankFileLvl = function (guildAct) {
            var cfg_c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var returnLvl = 0;
            if (guildAct < cfg_c_lvl[1][gc.c_lvl_rankFileNeedAct])
                return returnLvl;
            for (var i = 30; i >= 1; i--) {
                if (guildAct >= cfg_c_lvl[i][gc.c_lvl_rankFileNeedAct]) {
                    returnLvl = i;
                    break;
                }
            }
            return returnLvl;
        };
        //授爵界面      [【爵位id,剩余数量，总数，要求会员等级,加成,开启公会等级】,...]
        p.getAwardUi = function () {
            var self = this;
            var returnArr = [];
            var c_guildEnnoble = mo.getJSONWithFileName(gc.cfg_c_guildEnnoble);
            var cfg_c_guildLvl = mo.getJSONWithFileName(gc.cfg_c_guildLvl);
            var lvl = self.get(gc.dsConsts.GuildEntity.lvl);
            var ennobleData = self.get(gc.dsConsts.GuildEntity.ennobleData);
            var maxEnnobleId = 0;
            var ennobleCountArr = {};
            var ennobleCount = cfg_c_guildLvl[lvl][gc.c_guildLvl_ennobleCount]; //[男爵，子爵，伯爵，侯爵，公爵]
            for (var i = 0; i < ennobleCount.length; i++) {
                var count = 0;
                var ennobleId = ennobleCount[i][0];
                var rankFileLvl = c_guildEnnoble[ennobleId][gc.c_guildEnnoble_ennobleLvlCfg];
                if (ennobleData[ennobleId])
                    count = ennobleData[ennobleId];
                if (ennobleId > maxEnnobleId)
                    maxEnnobleId = ennobleId;
                ennobleCountArr[ennobleId] = [count, ennobleCount[i][1], rankFileLvl];
            }
            for (var key in ennobleCountArr) {
                var ennobleCo = ennobleCountArr[key];
                returnArr.push([key, ennobleCo[1] - ennobleCo[0], ennobleCo[1], ennobleCo[2]]);
            }
            if (c_guildEnnoble[maxEnnobleId + 1]) {
                var nextLvl = c_guildEnnoble[maxEnnobleId + 1][gc.c_guildEnnoble_ennobleGuildLvlCfg];
                returnArr.push([maxEnnobleId + 1, 999, 999, c_guildEnnoble[maxEnnobleId + 1][gc.c_guildEnnoble_ennobleLvlCfg], c_guildEnnoble[maxEnnobleId + 1][gc.c_guildEnnoble_props], nextLvl]);
            }
            return returnArr;
        };
        /**
         * 获取会员列表
         * @param cb
         * @param target
         * @returns [ds.GuildMember]
         */
        p.getMembers = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_guildPerson_getMemberList, {}, function (data) {
                data.sort(function (m1, m2) {
                    var p = m1[gc.dsConsts.GuildMember.position] - m2[gc.dsConsts.GuildMember.position];
                    if (p != 0)
                        return p;
                    var a = m2[gc.dsConsts.GuildMember.guildAct] - m1[gc.dsConsts.GuildMember.guildAct];
                    if (a != 0)
                        return a;
                    var l = m2[gc.dsConsts.GuildMember.lvl] - m1[gc.dsConsts.GuildMember.lvl];
                    if (l != 0)
                        return l;
                    var d = m1[gc.dsConsts.GuildMember.lastUpdateTime] - m2[gc.dsConsts.GuildMember.lastUpdateTime];
                    if (d != 0)
                        return d;
                });
                self._memberList = data;
                cb.call(target, data);
            });
        };
        p.getMemberList = function () {
            var self = this;
            return self._memberList;
        };
        p.getMemberByUserId = function (userId) {
            var self = this;
            for (var i = 0; i < self._memberList.length; ++i) {
                var memberData = self._memberList[i];
                if (memberData[gc.dsConsts.GuildMember.userId] == userId) {
                    return memberData;
                }
            }
            return null;
        };
        //获取会员信息
        p.getMemberData = function (userId, cb, target) {
            var self = this;
            var reMember = null;
            for (var i = 0; i < self._memberList.length; i++) {
                var locMember = self._memberList[i];
                var locUserId = locMember[gc.dsConsts.GuildMember.userId];
                if (locUserId == userId) {
                    reMember = locMember;
                    break;
                }
            }
            cb.call(target, reMember);
        };
        p.setEnnoble = function (targetUserId, ennobleType, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_guild_setEnnoble_args;
            var args = {};
            args[argKeys.targetUserId] = targetUserId;
            args[argKeys.ennobleType] = ennobleType;
            mo.requestWaiting4Server(gc.iface.a_guild_setEnnoble, args, function (data) {
                var guildData = data[gc.dsConsts.ExGuildData.guildData] || {};
                self.updateEntity(guildData);
                if (targetUserId == gd.userCtrl.getId()) {
                    var guildPersonalData = data[gc.dsConsts.ExGuildData.guildPersonalData] || {};
                    gd.guildPersonalCtrl.updateEntity(guildPersonalData);
                    gd.heroCtrl.calPropAndCombat();
                }
                self.pushNotify(self.__class.ON_MEMBER_JOB_CHANGE, targetUserId);
                cb.call(target, data);
            });
        };
        /**
         * 操作会员
         * @param op gc.c_prop.guildMemberOpKey
         * @param targetUserId
         * @param cb
         * @param target
         */
        p.opMember = function (op, targetUserId, targetName, cb, target, _notCheckMsg) {
            var self = this;
            var msgId = 0;
            if (op == gc.c_prop.guildMemberOpKey.increase) {
                msgId = 0;
            }
            else if (op == gc.c_prop.guildMemberOpKey.trans) {
                msgId = gc.id_c_msgCode.ifRetiringGuildMaster;
            }
            else if (op == gc.c_prop.guildMemberOpKey.kick) {
                msgId = 0;
            }
            else if (op == gc.c_prop.guildMemberOpKey.dissolveGuild) {
                msgId = 0;
            }
            if (_notCheckMsg || msgId == 0) {
                var argKeys = gc.iface.a_guildPerson_opMember_args;
                var args = {};
                args[argKeys.targetUserId] = targetUserId;
                args[argKeys.op] = op;
                mo.requestWaiting4Server(gc.iface.a_guildPerson_opMember, args, function (data) {
                    var guildData = data[gc.dsConsts.ExGuildData.guildData] || {};
                    self.updateEntity(guildData);
                    var guildPersonalData = data[gc.dsConsts.ExGuildData.guildPersonalData] || {};
                    gd.guildPersonalCtrl.updateEntity(guildPersonalData);
                    cb.call(target, data);
                    self.pushNotify(gd.GuildCtrl.ON_MANAGER_POSITION_CHANGED);
                });
                return;
            }
            if (msgId != 0) {
                //权限
                if (gd.guildWarCtrl.isOpening()) {
                    mo.showMsg(gc.id_c_msgCode.noGuildTransfer);
                    return;
                }
                mo.showMsg(msgId, targetName, function () {
                    self.opMember(op, targetUserId, targetName, cb, target, true);
                });
            }
        };
        //探宝
        p.lottery = function (count, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_guild_lottery_args;
            var args = {};
            args[argKeys.count] = count;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var cosAct = c_game[gc.id_c_game.guildAct][2]; //消耗贡献值
            var addUpAct = gd.guildPersonalCtrl.get(gc.dsConsts.GuildPersonalEntity.addUpAct);
            var vipInfo = mo.getJSONWithFileNameAndID(gc.cfg_c_vip, gd.userCtrl.getVip());
            var guildPersonalData = gd.guildPersonalCtrl.getData();
            if (addUpAct < cosAct)
                return mo.showMsg("贡献值不足");
            //if(vipInfo[gc.c_vip_guildLotteryCount]-guildPersonalData[gc.dsConsts.GuildPersonalEntity.lotteryCount]<=0) return mo.showMsg(gc.id_c_msgCode.noTreasure);
            mo.requestWaiting4Server(gc.iface.a_guild_lottery, args, function (data) {
                var userData = data[gc.dsConsts.ExGuildData.userData] || {};
                var guildPersonalData = data[gc.dsConsts.ExGuildData.guildPersonalData] || {};
                var items = data[gc.dsConsts.ExGuildData.items] || {}; //抽奖所得OBJ {itemId:数量，itemId:数量，。。。}
                var bagItems = data[gc.dsConsts.ExGuildData.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExGuildData.equipBagItems] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                gd.guildPersonalCtrl.updateEntity(guildPersonalData);
                cb.call(target, items);
            });
        };
        p._getPropByIndex = function (index) {
            var self = this;
            if (!self._data)
                return 0;
            var lvl = self.get(gc.dsConsts.GuildEntity.lvl);
            var c_guildLvl = mo.getJSONWithFileName(gc.cfg_c_guildLvl);
            var guildLvlData = c_guildLvl[lvl];
            var props = guildLvlData[gc.c_guildLvl_props];
            var reValue = 0;
            for (var i = 0; i < props.length; i++) {
                var locProp = props[i];
                var locIndex = locProp[0];
                var locValue = locProp[1];
                if (locIndex == index) {
                    reValue = locValue;
                    break;
                }
            }
            return reValue;
        };
        //获得增加的战力
        p.getAddCombat = function () {
            var self = this;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var c_guildEnnoble = mo.getJSONWithFileName(gc.cfg_c_guildEnnoble);
            var ennoble = gd.guildPersonalCtrl.getEnnoble();
            var propMult = 0;
            if (c_guildEnnoble[ennoble]) {
                propMult = c_guildEnnoble[ennoble][gc.c_guildEnnoble_props] || 0;
                propMult = propMult / 10000;
            }
            var maxHp = self._getPropByIndex(33) * (1 + propMult);
            var attack = self._getPropByIndex(34) * (1 + propMult);
            var defence = self._getPropByIndex(35) * (1 + propMult);
            var magicDefence = self._getPropByIndex(36) * (1 + propMult);
            var critical = self._getPropByIndex(39) * (1 + propMult);
            var disCritical = self._getPropByIndex(40) * (1 + propMult);
            var dodge = self._getPropByIndex(38) * (1 + propMult);
            var hit = self._getPropByIndex(37) * (1 + propMult);
            var attackInterval = 500;
            maxHp = Math.floor(maxHp);
            attack = Math.floor(attack);
            defence = Math.floor(defence);
            magicDefence = Math.floor(magicDefence);
            critical = Math.floor(critical);
            disCritical = Math.floor(disCritical);
            dodge = Math.floor(dodge);
            hit = Math.floor(hit);
            var combatMult = c_game[gc.id_c_game.combatMult];
            //参数1：血量参数
            //参数2：攻击参数
            //参数3：物防参数
            //参数4：魔防参数
            //参数5：暴击参数
            //参数6：抗暴参数
            //参数7：闪避参数
            //参数8：命中参数
            //参数9：攻击频率
            var maxHp1 = combatMult[0] / 10000;
            var attack1 = combatMult[1] / 10000;
            var defence1 = combatMult[2] / 10000;
            var magicDefence1 = combatMult[3] / 10000;
            var hit1 = combatMult[4] / 10000;
            var dodge1 = combatMult[5] / 10000;
            var critical1 = combatMult[6] / 10000;
            var disCritical1 = combatMult[7] / 10000;
            var attackInterval1 = combatMult[8];
            //基础属性战斗力公式
            //console.log(maxHp,maxHp1,attack,attack1,defence,defence1,magicDefence,magicDefence1,critical,critical1,disCritical,disCritical1,dodge,dodge1,hit,hit1,attackInterval,attackInterval1);
            var combat1 = gc.calBaseCombat(maxHp, maxHp1, attack, attack1, defence, defence1, magicDefence, magicDefence1, critical, critical1, disCritical, disCritical1, dodge, dodge1, hit, hit1, attackInterval, attackInterval1);
            combat1 = parseInt(combat1.toString());
            var heroNum = gd.heroCtrl.getList().length;
            return combat1 * heroNum;
        };
        //获取行会副本重置次数
        p.getCopyResetTimes = function () {
            var self = this;
            if (self.getData()) {
                return self.get(gc.dsConsts.GuildEntity.resetCount) || 0;
            }
            return 0;
        };
        GuildCtrl.ON_MANAGER_POSITION_CHANGED = "on_manager_position_changed";
        GuildCtrl.ON_GUILD_INFO_CHANGED = "on_guildinfo_changed";
        /**
         * 设置爵位
         * @param targetUserId
         * @param ennobleType  gc.c_prop.ennobleTypeKey
         * @param cb
         * @param target
         */
        GuildCtrl.ON_MEMBER_JOB_CHANGE = "ON_MEMBER_JOB_CHANGE"; //jsdfsdf
        return GuildCtrl;
    })(mo.DataController);
    gd.GuildCtrl = GuildCtrl;
    egret.registerClass(GuildCtrl,"gd.GuildCtrl");
    gd.guildCtrl = GuildCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Sara on 2016/4/6.
 */
var gd;
(function (gd) {
    var GuildCopyCtrl = (function (_super) {
        __extends(GuildCopyCtrl, _super);
        function GuildCopyCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=GuildCopyCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this._guildCopyArr = [-1];
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
        };
        //更新数据
        p.updateData = function (data) {
            var self = this;
            if (!self._data)
                return;
            self.updateEntity(data);
        };
        //获得所有章节
        p.getGuildSection = function () {
            var self = this;
            var t_guildCopy = mo.getJSONWithFileName(gc.cfg_t_guildCopy);
            var ret = [];
            for (var i = 1, li = Object.keys(t_guildCopy).length; i <= li; ++i) {
                ret.push(t_guildCopy[i]);
            }
            return ret;
        };
        //获取章节信息
        p.getSectionInfo = function (sectionId) {
            var self = this;
            return mo.getJSONWithFileNameAndID(gc.cfg_t_guildCopy, sectionId);
        };
        //获取该章节所有boss
        p.getGuildBossList = function (sectionId) {
            var self = this;
            var sectionInfo = self.getSectionInfo(sectionId);
            var bossIdRange = sectionInfo[gc.t_guildCopy_section];
            var bossList = [];
            for (var bossId = parseInt(bossIdRange[0]), li = parseInt(bossIdRange[1]); bossId <= li; ++bossId) {
                bossList.push(bossId);
            }
            return bossList;
        };
        //获取副本长度
        p.getGuildBossListLength = function (sectionId) {
            var self = this;
            var sectionInfo = self.getSectionInfo(sectionId);
            var bossIdRange = sectionInfo[gc.t_guildCopy_section];
            return parseInt(bossIdRange[1]) - parseInt(bossIdRange[0]) + 1;
        };
        //获取boss进度
        p.getGuildProgress = function (bossId) {
            var self = this;
            var returnProgress = 0;
            var guildCopyData = gd.guildCtrl.get(gc.dsConsts.GuildEntity.guildCopyData);
            if (!guildCopyData[bossId])
                return 0;
            if (guildCopyData[bossId][0])
                returnProgress = guildCopyData[bossId][0];
            return returnProgress;
        };
        //获取当前进度bossid      reutrn {"章节id":当前bossid,"章节id":当前bossid,...}       当前bossid    -1:打完所有
        p.getNewGuildBossId = function () {
            var self = this;
            var obj = {};
            if (!gd.guildCtrl.getData())
                return obj;
            var guildCopyData = gd.guildCtrl.get(gc.dsConsts.GuildEntity.guildCopyData);
            var t_guildCopy = mo.getJSONWithFileName(gc.cfg_t_guildCopy);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var needProgress = c_game[gc.id_c_game.guildCopyCfg][2];
            for (var key in t_guildCopy) {
                var section = t_guildCopy[key][gc.t_guildCopy_section];
                var start = section[0];
                var end = section[1];
                var isCom = true;
                for (var i = start; i <= end; i++) {
                    if (!guildCopyData[i] || !guildCopyData[i][0] || guildCopyData[i][0] < needProgress) {
                        obj[key] = i;
                        isCom = false;
                        break;
                    }
                }
                if (isCom)
                    obj[key] = -1;
            }
            return obj;
        };
        //获取章节当前bossId
        p.getCurBossId = function (sectionId) {
            var self = this;
            var curBossId = self.getNewGuildBossId()[sectionId];
            if (curBossId < 0) {
                var sectionInfo = self.getSectionInfo(sectionId);
                curBossId = parseInt(sectionInfo[gc.t_guildCopy_section][1]);
            }
            return curBossId;
        };
        //是否通关某个boss
        p.isBossKilled = function (sectionId, bossId) {
            var self = this;
            var curBossId = self.getNewGuildBossId()[sectionId];
            if (curBossId > 0) {
                return parseInt(curBossId) > parseInt(bossId);
            }
            return true;
        };
        //获取副本CD状态
        p.getGuildCopyCdState = function () {
            var self = this;
            var state = {
                threshold: mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.guildCopyCfg)[3] //阈值,秒
                ,
                needBuy: false
            };
            state.needBuy = self.isNeedClearFightCD();
            return state;
        };
        //是否需要清战斗CD
        p.isNeedClearFightCD = function () {
            var self = this;
            var isCopy = false;
            var progressCtrl = gd.copyCtrl.getCopyProgressCtrl(gc.c_prop.copyTypeKey.guild);
            var refreshTime = progressCtrl.get(gc.dsConsts.CopyProgressEntity.refreshTime);
            if (refreshTime) {
                //判断cd
                var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
                var timeLimit = c_game[gc.id_c_game.guildCopyCfg][3];
                var pCopyId = progressCtrl.get(gc.dsConsts.CopyProgressEntity.pCopyId) || 0; //cd秒数
                var second = (Date.newDate().getTime() - Date.newDate(refreshTime).getTime()) / 1000;
                if (pCopyId >= timeLimit) {
                    if (second < pCopyId)
                        isCopy = true;
                }
            }
            return isCopy;
        };
        //获取副本cd,返回秒
        p.getGuildCopyCd = function () {
            var self = this;
            var progressCtrl = gd.copyCtrl.getCopyProgressCtrl(gc.c_prop.copyTypeKey.guild);
            var pCopyId = progressCtrl.get(gc.dsConsts.CopyProgressEntity.pCopyId) || 0; //cd秒数
            var refreshTime = progressCtrl.get(gc.dsConsts.CopyProgressEntity.refreshTime);
            if (refreshTime) {
                var second = (Date.newDate().getTime() - Date.newDate(refreshTime).getTime()) / 1000;
                pCopyId -= second;
            }
            if (pCopyId < 0)
                pCopyId = 0;
            return pCopyId;
        };
        //获取重置剩余秒数
        p.getResetCd = function () {
            var self = this;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var resetDay = c_game[gc.id_c_game.guildCopyCfg][1];
            var returnSeconds = 0;
            var resetTime = gd.guildCtrl.get(gc.dsConsts.GuildEntity.resetTime);
            if (!resetTime)
                return returnSeconds;
            var nextResetTime = Date.newDate(resetTime).addDays(resetDay);
            if (Date.newDate() >= nextResetTime)
                return returnSeconds;
            returnSeconds = (nextResetTime.getTime() - Date.newDate().getTime()) / 1000;
            return returnSeconds;
        };
        //获取章节里副本数量
        p.getCompletedNum = function (sectionId) {
            var self = this;
            var curBossId = parseInt(self.getNewGuildBossId()[sectionId]);
            if (curBossId > 0) {
                var sectionInfo = self.getSectionInfo(sectionId);
                return curBossId - parseInt(sectionInfo[gc.t_guildCopy_section][0]);
            }
            return self.getGuildBossListLength(sectionId);
        };
        /**
         * 行会副本开始
         * @param chapterId 章节ID
         * @param bossId
         * @param cb
         * @param target
         * @returns []
         */
        p.guildStart = function (chapterId, bossId, cb, target) {
            var self = this;
            if (gd.fightCtrl.isSpFighting)
                return mo.showMsg("还在挑战中，请稍后");
            if (gd.fightCtrl.isDie)
                return mo.showMsg("复活中，请稍后");
            var cdTime = self.getGuildCopyCd();
            var needBuy = self.getGuildCopyCdState().needBuy;
            if (cdTime && needBuy) {
                var cleanCost = gc.calGuildCopyCd(gd.guildCopyCtrl.getGuildCopyCd());
                mo.showMsg(gc.id_c_msgCode.buyTime, cleanCost, function () {
                    if (gd.userCtrl.getGold() < cleanCost) {
                        gd.userCtrl.noGolds(function () {
                            self.clearGuildCopy(bossId, function () { }, self);
                        }, self);
                    }
                    else {
                        self.clearGuildCopy(bossId, function () { }, self);
                    }
                });
                return;
            }
            var t_guildCopy = mo.getJSONWithFileName(gc.cfg_t_guildCopy);
            if (!t_guildCopy[chapterId])
                return mo.showMsg("数据异常");
            var section = t_guildCopy[chapterId][gc.t_guildCopy_section];
            if (bossId < section[0] || bossId > section[1])
                return mo.showMsg("数据异常");
            var openLvl = t_guildCopy[chapterId][gc.t_guildCopy_openLvl];
            if (!gd.guildCtrl.getData())
                return mo.showMsg("数据异常");
            var lvl = gd.guildCtrl.get(gc.dsConsts.GuildEntity.lvl);
            if (openLvl > lvl)
                return mo.showMsg("行会等级不足");
            this._guildCopyArr[0] = chapterId;
            this._guildCopyArr[1] = bossId;
            var argKeys = gc.iface.a_copy_guildStart_args;
            var args = {};
            args[argKeys.copyId] = chapterId;
            args[argKeys.bossId] = bossId;
            self.curFightGuildBossId = bossId;
            mo.requestWaiting4Server(gc.iface.a_copy_guildStart, args, function (data) {
                gd.fightCtrl.isSpFighting = true;
                var guildBossInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_guildCopyBoss, bossId);
                var copyId = guildBossInfo[gc.t_guildCopyBoss_copyId];
                if (mo.moduleMgr.curModule.name != g_consts.moduleId.fight)
                    mo.moduleMgr.runModule(g_consts.moduleId.fight);
                gd.fightLayer.onEnterCopy({ pveType: gc.c_prop.fightTypeKey.guildCopy, copyID: copyId, bossId: bossId });
                cb.call(target, data);
            });
        };
        //行会副本结束        return[是否胜利,进度（需要除以100）,伤害,获得物品]
        p.guildEnd = function (isWin, cb, target) {
            if (this._guildCopyArr[0] == -1)
                return;
            var self = this;
            var copyId = this._guildCopyArr[0];
            var bossId = this._guildCopyArr[1];
            var argKeys = gc.iface.a_copy_guildEnd_args;
            var args = {};
            args[argKeys.copyId] = copyId;
            args[argKeys.bossId] = bossId;
            args[argKeys.isWin] = isWin;
            self._guildCopyArr[0] = -1;
            mo.requestWaiting4Server(gc.iface.a_copy_guildEnd, args, function (data) {
                var msg = data[gc.dsConsts.ExCopyProgress.msg] || "";
                if (msg.length > 0) {
                    mo.showMsg(msg);
                    return cb.call(target, [0, 0, {}]);
                }
                var userData = data[gc.dsConsts.ExCopyProgress.userData] || {};
                var copyProgressData = data[gc.dsConsts.ExCopyProgress.copyProgress] || {};
                var bagItems = data[gc.dsConsts.ExCopyProgress.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExCopyProgress.equipBagItems] || {};
                var isWin = data[gc.dsConsts.ExCopyProgress.isWin];
                var progress = data[gc.dsConsts.ExCopyProgress.progress] || 0;
                var items = data[gc.dsConsts.ExCopyProgress.items] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                if (userData)
                    gd.userCtrl.updateEntity(userData);
                if (copyProgressData)
                    gd.copyCtrl.updateCopyProgressCtrl(gc.c_prop.copyTypeKey.guild, copyProgressData);
                //公会贡献
                var guildData = data[gc.dsConsts.ExCopyProgress.guildData];
                if (guildData)
                    gd.guildCtrl.updateData(guildData);
                cb.call(target, [isWin, progress, items]);
            });
        };
        //行会副本重置
        p.guildCopyReset = function (cb, target) {
            var self = this;
            mo.showMsg(gc.id_c_msgCode.resetCopy, function () {
                mo.requestWaiting4Server(gc.iface.a_copy_guildCopyReset, {}, function (updateGuildData) {
                    if (updateGuildData) {
                        if (gd.guildCtrl.getData()) {
                            gd.guildCtrl.updateEntity(updateGuildData);
                        }
                        else {
                            gd.guildCtrl.initData(updateGuildData);
                        }
                    }
                    cb.call(target, updateGuildData);
                });
            });
        };
        //公会副本清除CD
        p.clearGuildCopy = function (bossId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_copy_clearGuildCopy_args;
            var args = {};
            args[argKeys.bossId] = bossId;
            mo.requestWaiting4Server(gc.iface.a_copy_clearGuildCopy, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var copyProgressData = data[gc.dsConsts.ExUserData.copyProgressData] || {};
                gd.userCtrl.updateEntity(userData);
                gd.copyCtrl.updateCopyProgressCtrl(gc.c_prop.copyTypeKey.guild, copyProgressData);
                self.pushNotify(self.__class.ON_GUILD_COPY_CD_CLEAR);
                cb.call(target, data);
            });
        };
        //获取副本购买次数
        p.getBuyCopyCount = function () {
            var self = this;
            var type = gc.c_prop.copyTypeKey.guild;
            var copyProgressCtrl = gd.copyCtrl.getCopyProgressCtrl(type);
            var buyCopyCount = 1;
            var resetTime = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.resetTime); //购买时间
            var resetCounts = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.resetCounts); //子副本今日购买次数
            if (!resetTime)
                return buyCopyCount;
            if (!resetTime || !Date.newDate(resetTime).equalsDay(Date.newDate()))
                resetCounts = {};
            if (!resetTime || !Date.newDate(resetTime).equalsDay(Date.newDate()) || !resetCounts.hasOwnProperty(type))
                return buyCopyCount;
            return resetCounts[type] + 1;
        };
        //获取公会副本今日剩余次数
        p.getCopyCount = function (bossId) {
            var self = this;
            var c_vip = mo.getJSONWithFileName(gc.cfg_c_vip);
            var copyProgressCtrl = gd.copyCtrl.getCopyProgressCtrl(gc.c_prop.copyTypeKey.guild);
            var vip = gd.userCtrl.getVip() || 0; //vip等级
            var maxTimes = c_vip[vip][gc.c_vip_guildFbCount];
            var vipExt = maxTimes - c_vip[0][gc.c_vip_guildFbCount];
            if (!copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.refreshTime))
                return maxTimes;
            var refreshTime = Date.newDate(copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.refreshTime)); //最后一次通关子副本时间
            var timesPerDay = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.timesPerDay); //子副本剩余挑战次数
            if (!refreshTime || !refreshTime.equalsDay(Date.newDate()) || !timesPerDay.hasOwnProperty(bossId))
                return maxTimes;
            return parseInt(timesPerDay[bossId]) + vipExt;
        };
        p.getMaxCopyCount = function () {
            var self = this;
            return mo.getJSONWithFileNameAndID(gc.cfg_c_vip, gd.userCtrl.getVip())[gc.c_vip_guildFbCount];
        };
        /**
         * 行会副本领取奖励
         * @param type
         * @param typeId
         * @param cb
         * @param target
         * @returns []
         */
        p.guildCopyAward = function (type, typeId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_copy_guildCopyAward_args;
            var args = {};
            args[argKeys.type] = type;
            args[argKeys.typeId] = typeId;
            mo.requestWaiting4Server(gc.iface.a_copy_guildCopyAward, args, function (data) {
                var userData = data[gc.dsConsts.ExCopyProgress.userData] || {};
                var copyProgressData = data[gc.dsConsts.ExCopyProgress.copyProgress] || {};
                var bagItems = data[gc.dsConsts.ExCopyProgress.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExCopyProgress.equipBagItems] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                if (userData)
                    gd.userCtrl.updateEntity(userData);
                if (copyProgressData)
                    gd.copyCtrl.updateCopyProgressCtrl(gc.c_prop.copyTypeKey.guild, copyProgressData);
                cb.call(target, copyProgressData);
            });
        };
        p._calProgress = function (progress) {
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var needProgress = c_game[gc.id_c_game.guildCopyCfg][2];
            progress = Math.floor(progress / needProgress * 10000) / 100;
            if (progress > 100)
                progress = 100;
            return progress;
        };
        p.getSectionIdByBossId = function (bossId) {
            var self = this;
            var t_guildCopy = mo.getJSONWithFileName(gc.cfg_t_guildCopy);
            for (var id in t_guildCopy) {
                var section = t_guildCopy[id][gc.t_guildCopy_section];
                if (parseInt(bossId) >= parseInt(section[0]) && parseInt(bossId) <= parseInt(section[1])) {
                    return parseInt(id);
                }
            }
            return -1;
        };
        //单个boss最大击杀次数
        p.getMaxKillTimes = function () {
            return mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.guildCopyCfg)[2];
        };
        GuildCopyCtrl.ON_GUILD_COPY_CD_CLEAR = "on_guild_copy_cd_clear";
        return GuildCopyCtrl;
    })(mo.DataController);
    gd.GuildCopyCtrl = GuildCopyCtrl;
    egret.registerClass(GuildCopyCtrl,"gd.GuildCopyCtrl");
    gd.guildCopyCtrl = GuildCopyCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Sara on 2015/12/4.
 */
var gd;
(function (gd) {
    var GuildPersonalCtrl = (function (_super) {
        __extends(GuildPersonalCtrl, _super);
        function GuildPersonalCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=GuildPersonalCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.GuildPersonalEntity;
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
        };
        //更新数据
        p.updateData = function (data) {
            var self = this;
            if (!self._data)
                return;
            self.updateEntity(data);
        };
        //获取爵位
        p.getEnnoble = function () {
            var self = this;
            var ennoble = self.get(gc.dsConsts.GuildPersonalEntity.ennoble) || 0;
            return ennoble;
        };
        //获取职位
        p.getPosition = function () {
            var self = this;
            var position = self.get(gc.dsConsts.GuildPersonalEntity.position) || 3;
            return position;
        };
        //获取公会ID
        p.getGuildId = function () {
            var self = this;
            var guildId = self.get(gc.dsConsts.GuildPersonalEntity.guildId) || 0;
            return guildId;
        };
        //获取贡献值
        p.getContributeValue = function () {
            var self = this;
            var v = self.get(gc.dsConsts.GuildPersonalEntity.guildAct) || 0;
            return v;
        };
        //获取累计的贡献
        p.getSumContribute = function () {
            var self = this;
            var v = self.get(gc.dsConsts.GuildPersonalEntity.addUpAct) || 0;
            return v;
        };
        /***************************/
        //获取贡献每日最大次数,0为不限制
        p.getActMaxNum = function (actId) {
            var c_guildAct = mo.getJSONWithFileName(gc.cfg_c_guildAct);
            var guildActData = c_guildAct[actId];
            return guildActData[gc.c_guildAct_num];
        };
        //获取次数
        p.getActNum = function (actId) {
            var self = this;
            self._calRefreshData();
            var actData = self.get(gc.dsConsts.GuildPersonalEntity.actData) || {};
            var dataArr = actData[actId] || [];
            return dataArr[0] || 0;
        };
        p._calRefreshData = function () {
            var self = this;
            var actLastTime = self.get(gc.dsConsts.GuildPersonalEntity.actLastTime);
            var actData = self.get(gc.dsConsts.GuildPersonalEntity.actData);
            var todayAct = self.get(gc.dsConsts.GuildPersonalEntity.todayAct);
            var noticeCount = self.get(gc.dsConsts.GuildPersonalEntity.noticeCount);
            var exitGuildCount = self.get(gc.dsConsts.GuildPersonalEntity.exitGuildCount);
            var lotteryCount = self.get(gc.dsConsts.GuildPersonalEntity.lotteryCount);
            if (!actLastTime) {
                actLastTime = Date.newDate();
                actData = {};
                todayAct = 0;
                noticeCount = 0;
                exitGuildCount = 0;
                lotteryCount = 0;
                self.set(gc.dsConsts.GuildPersonalEntity.actLastTime, actLastTime);
                self.set(gc.dsConsts.GuildPersonalEntity.actData, actData);
                self.set(gc.dsConsts.GuildPersonalEntity.todayAct, todayAct);
                self.set(gc.dsConsts.GuildPersonalEntity.noticeCount, noticeCount);
                self.set(gc.dsConsts.GuildPersonalEntity.exitGuildCount, exitGuildCount);
                self.set(gc.dsConsts.GuildPersonalEntity.lotteryCount, lotteryCount);
            }
            actLastTime = new Date(actLastTime);
            if (!actLastTime.equalsDay(Date.newDate())) {
                actLastTime = Date.newDate();
                actData = {};
                todayAct = 0;
                noticeCount = 0;
                exitGuildCount = 0;
                lotteryCount = 0;
                self.set(gc.dsConsts.GuildPersonalEntity.actLastTime, actLastTime);
                self.set(gc.dsConsts.GuildPersonalEntity.actData, actData);
                self.set(gc.dsConsts.GuildPersonalEntity.todayAct, todayAct);
                self.set(gc.dsConsts.GuildPersonalEntity.noticeCount, noticeCount);
                self.set(gc.dsConsts.GuildPersonalEntity.exitGuildCount, exitGuildCount);
                self.set(gc.dsConsts.GuildPersonalEntity.lotteryCount, lotteryCount);
            }
        };
        /**
         * 上香
         * @param actId
         * @param cb
         * @param target
         */
        p.pickAct = function (actId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_guildPerson_pickAct_args;
            var args = {};
            args[argKeys.actId] = actId;
            mo.requestWaiting4Server(gc.iface.a_guildPerson_pickAct, args, function (data) {
                var guildData = data[gc.dsConsts.ExGuildData.guildData] || {};
                gd.guildCtrl.updateEntity(guildData);
                var userData = data[gc.dsConsts.ExGuildData.userData] || {};
                gd.userCtrl.updateEntityNotShow(userData);
                var guildPersonalData = data[gc.dsConsts.ExGuildData.guildPersonalData] || {};
                self.updateEntity(guildPersonalData);
                //显示获得贡献值
                var c_guildActData = mo.getJSONWithFileNameAndID(gc.cfg_c_guildAct, actId);
                var addAct = c_guildActData[gc.c_guildAct_act] || 0;
                var gold = c_guildActData[gc.c_guildAct_gold] || 0;
                var str = "";
                if (addAct > 0) {
                    str = "贡献值 +" + addAct;
                }
                if (gold > 0) {
                    if (addAct > 0)
                        str += " ";
                    str += "金币 +" + gold;
                }
                mo.showMsg(str);
                cb.call(target, data);
            });
        };
        return GuildPersonalCtrl;
    })(mo.DataController);
    gd.GuildPersonalCtrl = GuildPersonalCtrl;
    egret.registerClass(GuildPersonalCtrl,"gd.GuildPersonalCtrl");
    gd.guildPersonalCtrl = GuildPersonalCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/5/27.
 */
var gd;
(function (gd) {
    var GuildWarCtrl = (function (_super) {
        __extends(GuildWarCtrl, _super);
        function GuildWarCtrl() {
            _super.apply(this, arguments);
            /**
             * 获取我最后的信息
             * @returns [组别，行会排名，个人排名]
             */
            this.getLastMyData = function () {
                var self = this;
                if (!self._lastMyData)
                    return [null, null, null];
                return self._lastMyData;
            };
            this._calGuildWarList = function (guildWarList) {
                var self = this;
                //排序在客户端做
                guildWarList = self._sortGuildWarList(guildWarList);
                //城门已被击破的行会放列表后面
                var temp1Arr = [];
                var temp2Arr = [];
                for (var i = 0; i < guildWarList.length; i++) {
                    var locGuildWar = guildWarList[i];
                    var doorLives = locGuildWar[gc.dsConsts.GuildServer.doorLives];
                    if (doorLives > 0)
                        temp1Arr.push(locGuildWar);
                    else
                        temp2Arr.push(locGuildWar);
                }
                var reList = temp1Arr.concat(temp2Arr);
                return reList;
            };
            //排序
            this._sortGuildWarList = function (guildWarList) {
                var self = this;
                self._sortGuildWarList1(guildWarList);
                var firstData = guildWarList[0];
                var maxPoints = 0;
                if (firstData) {
                    maxPoints = firstData[gc.dsConsts.GuildServer.points];
                }
                for (var i = 0; i < guildWarList.length; i++) {
                    var locData = guildWarList[i];
                    locData[gc.dsConsts.GuildServer.maxPoints] = maxPoints;
                    locData[gc.dsConsts.GuildServer.progress] = Math.floor(Math.floor(locData[gc.dsConsts.GuildServer.points]) / Math.floor(locData[gc.dsConsts.GuildServer.maxPoints]) * 100);
                }
                return guildWarList;
            };
        }
        var d = __define,c=GuildWarCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.MyGuildWarData;
            this._fightRecordArr = [];
            this._isEnter = false;
            this._lastRecordId = 0;
            this._isOpen = 0;
            this._guildListUpdateNum = 0;
            this._updateAttackWarDic = {};
            this._isFighting = false;
        };
        //设置同步场景位置 1：列表，2：进攻，3：防守
        p.setSyncSceneType = function (sceneType) {
            this._sceneType = sceneType;
        };
        //退出同步场景
        p.exitSyncScenne = function () {
            this._sceneType = 0;
        };
        /**
         * 获取个人数据
         * @param cb
         * @param target
         * @returns ds.Consts.MyGuildWarData
         */
        p.getInfo = function (cb, target) {
            var self = this;
            var guildId = gd.guildCtrl.getId();
            mo.requestWaiting4Server(gc.iface.a_guildWar_getInfo, {}, function (data) {
                self.init(data);
                if (cb)
                    cb.call(target, data);
            });
        };
        p.setCfgData = function (cfgData) {
            this._cfgData = cfgData;
        };
        /**
         * 获取配置数据
         * @returns ["行会战开战星期","行会战开始结束时间","可报名时间星期","可报名时间"]
         */
        p.getCfgData = function () {
            return this._cfgData;
        };
        //获取是否正在开启行会战
        p.isOpening = function () {
            return this._isOpen;
        };
        //设置活动
        p.setIsOpen = function (value) {
            var self = this;
            var oldValue = self._isOpen;
            if (oldValue == value)
                return;
            self._isOpen = value;
            if (value == 1) {
                //开启
                self.pushNotify(self.__class.ON_GUILD_OPEN_CHANGE);
                self._overTime = null;
            }
            else {
                //结束
                //todo 界面的变化？
                self._overTime = Date.newDate();
            }
        };
        //获取距离行会战开启时间
        p.getOpenReSeconds = function () {
            return 30 * 60 * 60;
        };
        /**
         * 获取报名组别
         * @param cb
         * @param target
         * @returns [groupId,行会战力]
         */
        p.getSignUpData = function (cb, target) {
            var self = this;
            var guildId = gd.guildCtrl.getId();
            if (!guildId)
                return cb.call(target, [0, 0]);
            var argKeys = gc.iface.a_guildWar_getSignUpData_args;
            var args = {};
            args[argKeys.guildId] = guildId;
            mo.requestWaiting4Server(gc.iface.a_guildWar_getSignUpData, args, function (data) {
                var signGroupId = data[gc.dsConsts.SignData.signGroupId];
                var lastGroupId = data[gc.dsConsts.SignData.lastGroupId];
                var lastGuildRank = data[gc.dsConsts.SignData.lastGuildRank];
                var lastUserRank = data[gc.dsConsts.SignData.lastUserRank];
                var isPrize = data[gc.dsConsts.SignData.isPrize];
                self._lastMyData = [lastGroupId, lastGuildRank, lastUserRank, isPrize];
                if (cb)
                    cb.call(target, [signGroupId]);
            });
        };
        /**
         * 报名
         * @param groupId 组别id
         * @param cb
         * @param target
         */
        p.signUp = function (groupId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_guildWar_signUp_args;
            var args = {};
            args[argKeys.groupId] = groupId;
            mo.requestWaiting4Server(gc.iface.a_guildWar_signUp, args, function (signGroupId) {
                if (cb)
                    cb.call(target, signGroupId);
            });
        };
        /**
         * 获取行会列表
         * @param cb
         * @param target
         * @returns [gc.dsConsts.GuildServer]
         */
        p.getGuildList = function (cb, target) {
            var self = this;
            var args = {};
            var guildId = gd.guildCtrl.getId();
            if (!guildId)
                return cb.call(target, []);
            if (self._guildWarList)
                return cb.call(target, self._guildWarList);
            var argKeys = gc.iface.a_guildWar_getGuildList_args;
            var args = {};
            args[argKeys.guildId] = guildId;
            mo.requestWaiting4Server(gc.iface.a_guildWar_getGuildList, args, function (guildWarList) {
                var reList = self._calGuildWarList(guildWarList);
                self._guildWarList = reList;
                if (cb)
                    cb.call(target, reList);
            });
        };
        //排序
        p._sortGuildWarList1 = function (list) {
            //__guildWarGroupDic
            //数据结构：[行会id,行会积分]
            var sortKeyArr = [gc.dsConsts.GuildServer.points, gc.dsConsts.GuildServer.doorLives, gc.dsConsts.GuildServer.lastLootTime]; //排序规则：积分＞守卫存活数＞最后掠夺升序
            var sortType = [-1, 1, 1]; //积分降序，守卫存活数升序,最后掠夺升序
            list.sort(function (a, b) {
                for (var i = 0; i < 3; i++) {
                    var type = sortType[i];
                    if (a[sortKeyArr[i]] > b[sortKeyArr[i]]) {
                        return type <= 0 ? -1 : 1;
                    }
                    else if (a[sortKeyArr[i]] < b[sortKeyArr[i]]) {
                        return type <= 0 ? 1 : -1;
                    }
                }
                return 0;
            });
            return list;
        };
        /**
         * 获取战斗攻击数据
         * @param serverId
         * @param guildId
         * @param cb
         * @param target
         * @returns gc.dsConsts.GuildWarData
         */
        p.getWarAttackData = function (serverId, guildId, cb, target) {
            var self = this;
            self._attackWarServerId = serverId;
            self._attackWarGuildId = guildId;
            var oldData = self._updateAttackWarDic[serverId + "|" + guildId];
            if (oldData)
                return cb.call(target, oldData);
            var argKeys = gc.iface.a_guildWar_getWarAttackData_args;
            var args = {};
            args[argKeys.serverId] = serverId;
            args[argKeys.guildId] = guildId;
            mo.requestWaiting4Server(gc.iface.a_guildWar_getWarAttackData, args, function (data) {
                self._updateAttackWarDic[serverId + "|" + guildId] = data;
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * 获取战斗防守数据
         * @param cb
         * @param target
         * @returns gc.dsConsts.GuildWarData
         */
        p.getWarDefenceData = function (cb, target) {
            var self = this;
            var guildId = gd.guildCtrl.getId();
            if (!guildId)
                return cb.call(target, null);
            if (self._defenceData)
                return cb.call(target, self._defenceData);
            var argKeys = gc.iface.a_guildWar_getWarDefenceData_args;
            var args = {};
            args[argKeys.guildId] = guildId;
            mo.requestWaiting4Server(gc.iface.a_guildWar_getWarDefenceData, args, function (data) {
                self._defenceData = data;
                if (cb)
                    cb.call(target, data);
            });
        };
        //上阵
        p.upDoor = function (door, cb, target) {
            var self = this;
            if (gd.fightCtrl.isSpFighting && self._isFighting)
                return mo.showMsg(gc.id_c_msgCode.nowAttack);
            var argKeys = gc.iface.a_guildWar_upDoor_args;
            var args = {};
            args[argKeys.door] = door;
            mo.requestWaiting4Server(gc.iface.a_guildWar_upDoor, args, function (data) {
                //如果data=1 ，则认为已经有人上阵，需要刷新界面
                if (data == 1) {
                    mo.showMsg(gc.id_c_msgCode.haveGuard);
                }
                self._defenceData = null;
                self.syncData();
                if (cb)
                    cb.call(target, data);
            });
        };
        //下阵
        p.downDoor = function (door, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_guildWar_downDoor_args;
            var args = {};
            args[argKeys.door] = door;
            mo.requestWaiting4Server(gc.iface.a_guildWar_downDoor, args, function (data) {
                self._defenceData = null;
                self.syncData();
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * 获取所有排名
         * @param cb
         * @param target
         * @returns gc.dsConsts.GuildWarAllRank
         */
        p.getGuildWarAllRank = function (cb, target) {
            var args = {};
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_guildWar_getGuildWarAllRank, args, function (data) {
                self._pointsRankList = data[gc.dsConsts.GuildWarAllRank.guildArr];
                self._chairRankList = data[gc.dsConsts.GuildWarAllRank.chairArr];
                self._userRankList = data[gc.dsConsts.GuildWarAllRank.userArr];
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * 获取上次排行
         * @param groupId
         * @param cb
         * @param target
         * @returns gc.dsConsts.GuildWarAllRank
         */
        p.getLastRankList = function (groupId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_guildWar_getLastRankList_args;
            var args = {};
            args[argKeys.groupId] = groupId;
            mo.requestWaiting4Server(gc.iface.a_guildWar_getLastRankList, args, function (data) {
                self._pointsRankList = data[gc.dsConsts.GuildWarAllRank.guildArr];
                self._chairRankList = data[gc.dsConsts.GuildWarAllRank.chairArr];
                self._userRankList = data[gc.dsConsts.GuildWarAllRank.userArr];
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * 获取我的行会排名
         * @returns gc.dsConsts.GuildWarRank
         */
        p.getMyPointRank = function () {
            var self = this;
            var myGuildId = gd.guildCtrl.getId();
            var myServerId = gd.userCtrl.get(gc.dsConsts.UserEntity.serverId);
            for (var i = 0; i < self._pointsRankList.length; i++) {
                var locRankData = self._pointsRankList[i];
                var locGuildId = locRankData[gc.dsConsts.GuildWarRank.guildId];
                var locServerId = locRankData[gc.dsConsts.GuildWarRank.serverId];
                if (myGuildId == locGuildId && locServerId == myServerId)
                    return locRankData;
            }
            return null;
        };
        /**
         * 获取我的会长排名
         * @returns gc.dsConsts.GuildWarUserRank
         */
        p.getMyChairRank = function () {
            var self = this;
            var myId = gd.userCtrl.getId();
            var myServerId = gd.userCtrl.get(gc.dsConsts.UserEntity.serverId);
            for (var i = 0; i < self._chairRankList.length; i++) {
                var locRankData = self._chairRankList[i];
                var locUserId = locRankData[gc.dsConsts.GuildWarUserRank.userId];
                var locServerId = locRankData[gc.dsConsts.GuildWarUserRank.serverId];
                if (locUserId == myId && locServerId == myServerId)
                    return locRankData;
            }
            return null;
        };
        /**
         * 获取我的排名
         * @returns gc.dsConsts.GuildWarUserRank
         */
        p.getMyUserRank = function () {
            var self = this;
            var myId = gd.userCtrl.getId();
            var myServerId = gd.userCtrl.get(gc.dsConsts.UserEntity.serverId);
            for (var i = 0; i < self._userRankList.length; i++) {
                var locRankData = self._userRankList[i];
                var locUserId = locRankData[gc.dsConsts.GuildWarUserRank.userId];
                var locServerId = locRankData[gc.dsConsts.GuildWarUserRank.serverId];
                if (locUserId == myId && locServerId == myServerId)
                    return locRankData;
            }
            return null;
        };
        /**
         * 获取己方防守记录
         * @param cb
         * @param target
         * @returns [gc.dsConsts.GuildWarDefenceRecord]
         */
        p.getDefenceRecordList = function (cb, target) {
            var args = {};
            mo.requestWaiting4Server(gc.iface.a_guildWar_getDefenceRecordList, args, function (data) {
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * 获取攻击战况
         * @param cb
         * @param target
         * @returns [gc.dsConsts.GuildWarAttackRecord]
         */
        p.getAttackRecordList = function (cb, target) {
            var args = {};
            mo.requestWaiting4Server(gc.iface.a_guildWar_getAttackRecordList, args, function (data) {
                if (cb)
                    cb.call(target, data);
            });
        };
        //开始攻击守卫门
        p.fightStartDoor = function (serverId, guildId, door, cb, target) {
            var self = this;
            if (gd.fightCtrl.isSpFighting)
                return mo.showMsg("还在挑战中，请稍后");
            if (gd.fightCtrl.isDie)
                return mo.showMsg("复活中，请稍后");
            var argKeys = gc.iface.a_guildWar_fightStartDoor_args;
            var args = {};
            args[argKeys.serverId] = serverId;
            args[argKeys.guildId] = guildId;
            args[argKeys.door] = door;
            self._fightServerId = serverId;
            self._fightGuildId = guildId;
            self._fightDoor = door;
            //判断防守中
            var isDefence = self.get(gc.dsConsts.MyGuildWarData.isDefence);
            if (isDefence)
                return mo.showMsg("防守中，请先进行下阵!");
            //是否己方被击破
            var doorLives = self.get(gc.dsConsts.MyGuildWarData.doorLives);
            if (doorLives <= 0)
                return mo.showMsg(gc.id_c_msgCode.noSnatch);
            //判断cd
            //次数，元宝
            if (self.getFightCd() > 0) {
                mo.showMsg(gc.id_c_msgCode.buyManyCD, self.getClearCdCount(), self.getClearCdCost(), function () {
                    self.clearCd(function () {
                        self.fightStartDoor(serverId, guildId, door, cb, target);
                    }, self);
                });
                return;
            }
            mo.requestWaiting4Server(gc.iface.a_guildWar_fightStartDoor, args, function (data) {
                var myGuildWarData = data[gc.dsConsts.GuildFightData.myGuildWarData];
                if (myGuildWarData)
                    self.updateEntity(myGuildWarData);
                var isBreak = data[gc.dsConsts.GuildFightData.isBreak];
                if (isBreak) {
                    //已经被击破
                    mo.showMsg(gc.id_c_msgCode.guardDown, function () {
                        self._updateAttackWarDic = {};
                        self.pushNotify(self.__class.ON_GUILD_ATK_UPDATE, serverId, guildId);
                    });
                    return;
                }
                var directWin = data[gc.dsConsts.GuildFightData.directWin];
                var getPoints = data[gc.dsConsts.GuildFightData.getPoints];
                if (directWin) {
                    //直接胜利
                    //该门没有守卫防守，您直接对该门造成了%s点的伤害。
                    mo.showMsg(gc.id_c_msgCode.noGuard, getPoints, function () {
                        self._updateAttackWarDic = {};
                        self.pushNotify(self.__class.ON_GUILD_ATK_UPDATE, serverId, guildId);
                    });
                    return;
                }
                var heroList = data[gc.dsConsts.GuildFightData.heroList];
                var otherDataList = data[gc.dsConsts.GuildFightData.otherDataList];
                var fightData = data[gc.dsConsts.GuildFightData.fightData];
                var heroCtrlList = [];
                for (var i = 0; i < heroList.length; i++) {
                    var locHero = heroList[i];
                    var locHeroEntityCtrl = gd.HeroEntityCtrl.createNewEnemy(locHero, fightData, otherDataList[i]);
                    heroCtrlList.push(locHeroEntityCtrl);
                }
                heroCtrlList.sort(gd.heroCtrl._sortHeroList);
                gd.fightCtrl.isSpFighting = true;
                self._isFighting = true;
                var myList = gd.heroCtrl.getFightList();
                gd.fightCtrl.startPvpFight(myList, heroCtrlList, gc.c_prop.fightTypeKey.guildWar);
                process.nextTick(function () {
                    process.nextTick(function () {
                        process.nextTick(function () {
                            process.nextTick(function () {
                                self.pushNotify(self.__class.ON_GUILD_WAR_FIGHT, serverId, door);
                            });
                        });
                    });
                });
                if (cb)
                    cb.call(target, heroCtrlList);
            });
        };
        //结束攻击守卫门
        p.fightEndDoor = function (isWin, cb, target) {
            var self = this;
            self._isFighting = false;
            var argKeys = gc.iface.a_guildWar_fightEndDoor_args;
            var args = {};
            args[argKeys.serverId] = self._fightServerId;
            args[argKeys.guildId] = self._fightGuildId;
            args[argKeys.door] = self._fightDoor;
            args[argKeys.isWin] = isWin;
            mo.requestWaiting4Server(gc.iface.a_guildWar_fightEndDoor, args, function (data) {
                var coffersStatus = data[gc.dsConsts.FightResult.coffersStatus];
                if (coffersStatus == 1) {
                    self.set(gc.dsConsts.MyGuildWarData.nextFightTime, Date.newDate());
                }
                var guildWarStatus = data[gc.dsConsts.FightResult.guildWarStatus];
                //黑科技~
                if (guildWarStatus == 2) {
                    mo.showMsg("活动已经结束！");
                }
                if (guildWarStatus == 3) {
                    mo.showMsg("抢夺失败！CD重置！");
                    self.set(gc.dsConsts.MyGuildWarData.nextFightTime, Date.newDate());
                }
                if (cb)
                    cb.call(target, data);
            });
        };
        //进入行会战
        p.enter = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_guildWar_enter, {}, function (data) {
                self._isEnter = true;
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * 获取上周积分情况
         * @param groupId
         * @param cb
         * @param target
         * @returns [gc.dsConsts.GuildWarRank]
         */
        p.getLastPointsRankList = function (groupId, cb, target) {
            if (cb)
                cb.call(target);
        };
        /**
         * 清除cd
         * @param cb
         * @param target
         */
        p.clearCd = function (cb, target) {
            var self = this;
            var args = {};
            mo.requestWaiting4Server(gc.iface.a_guildWar_clearCd, args, function (data) {
                var userData = data[gc.dsConsts.ExMyGuildWarData.userData];
                gd.userCtrl.updateEntity(userData);
                var myGuildWarData = data[gc.dsConsts.ExMyGuildWarData.myGuildWarData];
                self.updateEntity(myGuildWarData);
                cb.call(target, data);
            });
        };
        /**
         * 鼓舞
         * @param cb
         * @param target
         */
        p.inspire = function (cb, target) {
            var self = this;
            var args = {};
            mo.requestWaiting4Server(gc.iface.a_guildWar_inspire, args, function (data) {
                var userData = data[gc.dsConsts.ExMyGuildWarData.userData];
                gd.userCtrl.updateEntity(userData);
                var myGuildWarData = data[gc.dsConsts.ExMyGuildWarData.myGuildWarData];
                self.updateEntity(myGuildWarData);
                cb.call(target, data);
            });
        };
        //获取鼓舞消耗
        p.getInspireCost = function () {
            var todayCount = gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.inspireGuildWar);
            var costDiamond = gc.calInspireGuildWar(todayCount + 1);
            return costDiamond;
        };
        //获取清除cd消耗
        p.getClearCdCost = function () {
            var todayCount = gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.clearGuildWarCount);
            var costDiamond = gc.calClearGuildWarCd(todayCount + 1);
            return costDiamond;
        };
        //获取鼓舞次数
        p.getInspireCount = function () {
            var todayCount = gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.inspireGuildWar);
            return todayCount + 1;
        };
        //获取清除cd次数
        p.getClearCdCount = function () {
            var todayCount = gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.clearGuildWarCount);
            return todayCount + 1;
        };
        //3秒一次
        p.syncData = function () {
            var self = this;
            if (!self.getData())
                return;
            if (!self._isEnter)
                return;
            if (!self.isOpening()) {
                if (self._overTime) {
                    var diffSeconds = self._overTime.getSecondsBetween(new Date());
                    if (diffSeconds > 60) {
                        return;
                    }
                }
                else {
                    return;
                }
            }
            //同步我的个人数据，攻守消息
            var argKeys = gc.iface.a_guildWar_syncData_args;
            var args = {};
            args[argKeys.sceneType] = self._sceneType;
            var attackDataParams = [self._attackWarServerId, self._attackWarGuildId];
            if (self._sceneType == 2) {
                args[argKeys.attackData] = attackDataParams;
            }
            var oldMyGuildRefreshId = self.get(gc.dsConsts.MyGuildWarData.myGuildRefreshId);
            mo.request4Server(gc.iface.a_guildWar_syncData, args, function (data) {
                var myGuildWarData = data[gc.dsConsts.GuildWarSyncData.myGuildWarData];
                if (myGuildWarData) {
                    self.updateEntity(myGuildWarData);
                }
                var fightRecordArr = data[gc.dsConsts.GuildWarSyncData.fightRecordArr];
                self._calFightRecord(fightRecordArr);
                //刷新行会列表
                var guildList = data[gc.dsConsts.GuildWarSyncData.guildList];
                if (guildList) {
                    var reList = self._calGuildWarList(guildList);
                    self._guildWarList = reList;
                    self.pushNotify(self.__class.ON_GUILD_LIST_UPDATE);
                }
                //刷新攻击数据
                var attackData = data[gc.dsConsts.GuildWarSyncData.attackData];
                if (attackData) {
                    self._updateAttackWarDic[attackDataParams[0] + "|" + attackDataParams[1]] = attackData;
                    self.pushNotify(self.__class.ON_GUILD_ATK_UPDATE, self._attackWarServerId, self._attackWarGuildId);
                }
                //刷新防守
                var defenceData = data[gc.dsConsts.GuildWarSyncData.defenceData];
                if (defenceData) {
                    self._defenceData = defenceData;
                    self.pushNotify(self.__class.ON_GUILD_DEF_UPDATE);
                }
            });
        };
        p._calFightRecord = function (fightRecordArr) {
            var self = this;
            var tempArr = [];
            for (var i = fightRecordArr.length - 1; i >= 0; i--) {
                var locData = fightRecordArr[i];
                var locId = locData[gc.dsConsts.GuildWarFightRecord.id];
                var locType = locData[gc.dsConsts.GuildWarFightRecord.type];
                if (locType == 1) {
                    var locAttackData = locData[gc.dsConsts.GuildWarFightRecord.attackData];
                    var locUserName = locAttackData[0];
                    if (locUserName == gd.userCtrl.getName())
                        continue;
                }
                if (locId > self._lastRecordId) {
                    tempArr.unshift(locData);
                }
                if (tempArr.length >= 6)
                    break;
            }
            self._fightRecordArr = tempArr;
            if (tempArr.length <= 0)
                return;
            self._lastRecordId = tempArr[tempArr.length - 1][gc.dsConsts.GuildWarFightRecord.id];
            //只显示6条
            var attackStr = "[ubb size=20 color=#00b1f1]%s[/ubb][ubb size=20 color=#ffff00]攻打了[/ubb][ubb size=20 color=#7030a1][%s][/ubb][ubb size=20 color=#ffe599]%s门[/ubb]";
            var beAttackStr = "[ubb size=20 color=#ffe599]行会%s门正在被[/ubb][ubb size=20 color=#7030a1][%s][/ubb][ubb size=20 color=#ff0000]%s[/ubb][ubb size=20 color=#ffe599]攻打[/ubb]";
            var str = "";
            for (var i = 0; i < tempArr.length; ++i) {
                var locData = tempArr[i];
                var type = locData[gc.dsConsts.GuildWarFightRecord.type];
                if (type == 1) {
                    var attackData = locData[gc.dsConsts.GuildWarFightRecord.attackData]; //[玩家名，服务器名,行会名，门]
                    str = mo.STR.format(attackStr, attackData[0], attackData[2], gc.c_prop.guildWarDoor[attackData[3]]);
                }
                else if (type == 2) {
                    var beAttackData = locData[gc.dsConsts.GuildWarFightRecord.beAttackData]; //[门，服务器名,行会名,玩家名]
                    str = mo.STR.format(beAttackStr, gc.c_prop.guildWarDoor[beAttackData[0]], beAttackData[2], beAttackData[3]);
                }
                g_msg.UIMsgTextCtrl.push(str);
            }
        };
        //获取cd
        p.getFightCd = function () {
            var self = this;
            var nextFightTime = self.get(gc.dsConsts.MyGuildWarData.nextFightTime);
            nextFightTime = Date.newDate(nextFightTime);
            var reSenconds = Date.newDate().getSecondsBetween(nextFightTime);
            if (reSenconds <= 0)
                reSenconds = 0;
            return reSenconds;
        };
        //鼓舞剩余时间
        p.getInspireReSeconds = function () {
            var self = this;
            var nextFightTime = self.get(gc.dsConsts.MyGuildWarData.inspireEndTime);
            nextFightTime = Date.newDate(nextFightTime);
            var reSenconds = Date.newDate().getSecondsBetween(nextFightTime);
            if (reSenconds <= 0)
                reSenconds = 0;
            return reSenconds;
        };
        //获取行会战剩余时间
        p.getOverReSeconds = function () {
            var self = this;
            var nextFightTime = self.get(gc.dsConsts.MyGuildWarData.warEndTime);
            nextFightTime = Date.newDate(nextFightTime);
            var reSenconds = Date.newDate().getSecondsBetween(nextFightTime);
            if (reSenconds <= 0)
                reSenconds = 0;
            return reSenconds;
        };
        GuildWarCtrl.ON_GUILD_WAR_FIGHT = "ON_GUILD_WAR_FIGHT";
        GuildWarCtrl.ON_GUILD_LIST_UPDATE = "ON_GUILD_LIST_UPDATE";
        GuildWarCtrl.ON_GUILD_ATK_UPDATE = "ON_GUILD_ATK_UPDATE";
        GuildWarCtrl.ON_GUILD_DEF_UPDATE = "ON_GUILD_DEF_UPDATE";
        GuildWarCtrl.ON_GUILD_OPEN_CHANGE = "ON_GUILD_OPEN_CHANGE";
        return GuildWarCtrl;
    })(mo.DataController);
    gd.GuildWarCtrl = GuildWarCtrl;
    egret.registerClass(GuildWarCtrl,"gd.GuildWarCtrl");
    gd.guildWarCtrl = GuildWarCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Sara on 2015/9/18.
 */
var gd;
(function (gd) {
    var CustomCtrl = (function (_super) {
        __extends(CustomCtrl, _super);
        function CustomCtrl() {
            _super.apply(this, arguments);
            //定制武器
            this.custing = false;
        }
        var d = __define,c=CustomCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
        };
        /**
         * 获取订制券
         * @param color 制定颜色 c_prop.equipColorKey
         * @returns {Array}
         */
        p.getCustomTicket = function (color) {
            var self = this;
            var ticket = [];
            var customPara = mo.getJSONWithFileName(gc.cfg_c_customParameter);
            var num = 0;
            for (var itemId in customPara) {
                num = gd.userCtrl.getBag()[itemId];
                if (num) {
                    if (color != null && customPara[itemId][gc.c_customParameter_color] != color) {
                        continue;
                    }
                    for (var i = 0, li = num; i < num; i++) {
                        ticket.push(itemId);
                    }
                }
            }
            return ticket;
        };
        p.getCustomEquips = function () {
            var self = this;
            var equipBag = gd.userCtrl.getEquipBag();
            var equipIds = [];
            for (var equipId in equipBag) {
                if (gd.equipCtrl.isCustomEquip(equipId)) {
                    equipIds.push(equipId);
                }
            }
            return equipIds;
        };
        //是否为可以订制的订制券
        p.canCustomTicket = function (ticktId) {
            var self = this;
            var customPara = mo.getJSONWithFileNameAndID(gc.cfg_c_customParameter, ticktId);
            if (customPara[gc.c_customParameter_gainType] > 1)
                return true; //非vip产出的
            return gd.userCtrl.getVip() >= customPara[gc.c_customParameter_vip];
        };
        //红点
        p.isCustomRed = function () {
            var self = this;
            var tickets = self.getCustomTicket();
            if (tickets.length > 0) {
                for (var i = 0, li = tickets.length; i < li; i++) {
                    if (self.canCustomTicket(tickets[i]))
                        return true;
                }
            }
            var equips = self.getCustomEquips();
            for (var i = 0, li = equips.length; i < li; i++) {
                var opt = self.getInheritedEquipOpt(equips[i]);
                if (opt.nextEquipNeedLvlEnough && opt.isItemEnough) {
                    return true;
                }
            }
            return false;
        };
        p.getCustomListInfo = function () {
            var self = this;
            var info = [];
            var tickets = self.getCustomTicket();
            tickets.sort(function (t1, t2) {
                var c1 = self.canCustomTicket(t1) ? 0 : -1;
                var c2 = self.canCustomTicket(t2) ? 0 : -1;
                return c1 > c2 ? -1 : 1;
            });
            for (var i = 0, li = tickets.length; i < li; i++) {
                info.push({ itemId: tickets[i] });
            }
            var equipIds = self.getCustomEquips();
            equipIds.sort(function (a, b) {
                var aw = self.getInheritedEquipOpt(a).nextEquipNeedLvlEnough ? 1 : -1;
                var bw = self.getInheritedEquipOpt(b).nextEquipNeedLvlEnough ? 1 : -1;
                if (aw == bw) {
                    if (gd.equipCtrl.getEquipItemLvl(a) >= gd.equipCtrl.getEquipItemLvl(b)) {
                        aw -= 1;
                    }
                    else {
                        bw -= 1;
                    }
                }
                return aw > bw ? -1 : 1;
            });
            for (var i = 0, li = equipIds.length; i < li; i++) {
                info.push({ equipId: equipIds[i] });
            }
            return info;
        };
        p.getCustomLvlLimt = function (ticketId) {
            var customPara = mo.getJSONWithFileNameAndID(gc.cfg_c_customParameter, ticketId);
            return customPara[gc.c_customParameter_equip_lvl_range];
        };
        p.getTicketInfo = function (ticketId, lvl, equipType) {
            var self = this;
            var starItemIds = {};
            starItemIds[gc.c_prop.heroJobKey.zs] = self.getCustomizationId(ticketId, gc.c_prop.heroJobKey.zs, lvl, equipType);
            starItemIds[gc.c_prop.heroJobKey.fs] = self.getCustomizationId(ticketId, gc.c_prop.heroJobKey.fs, lvl, equipType);
            starItemIds[gc.c_prop.heroJobKey.ds] = self.getCustomizationId(ticketId, gc.c_prop.heroJobKey.ds, lvl, equipType);
            return starItemIds;
        };
        //定制武器附加属性（万分比）
        p.getExtrPropAddRatio = function () {
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.customizationCfg);
            return c_game[1];
        };
        //橙色定制武器可选择属性数量
        p.getMaxCustomPropNum = function () {
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.customizationCfg);
            return c_game[12];
        };
        //获取定制id             certificate:定制凭证,job:定制职业,lvl:定制等级
        p.getCustomizationId = function (certificate, job, lvl, equipType) {
            //var equipType = "00";
            var jobStr = job.toString();
            var cfg_c_customParameter = mo.getJSONWithFileName(gc.cfg_c_customParameter);
            var color = parseInt(cfg_c_customParameter[certificate][gc.c_customParameter_color]);
            //var part = parseInt(cfg_c_customParameter[certificate][gc.c_customParameter_part]);
            //if (part == 0) {
            //    equipType = gc.c_prop.equipTypeKey.weapon.toString();
            //} else if (part == 1) {
            //    equipType = gc.c_prop.equipTypeKey.clothes.toString();
            //} else if (part == 10) {
            //    equipType = gc.c_prop.equipTypeKey.helmet.toString();
            //} else if (part == 3) {
            //    equipType = gc.c_prop.equipTypeKey.ring.toString();
            //} else if (part == 2) {
            //    equipType = gc.c_prop.equipTypeKey.bracelet.toString();
            //} else if (part == 11) {
            //    equipType = gc.c_prop.equipTypeKey.necklace.toString();
            //}
            if (color == 6)
                jobStr = (parseInt(job) + 3).toString();
            var customizationId = "9" + jobStr + equipType.toString() + (Math.ceil(lvl / 10) * 10).toString();
            return parseInt(customizationId);
        };
        p.customization = function (certificate, job, name, lvl, abilityIndex, equipType, cb, target) {
            var self = this;
            if (self.custing == true)
                return;
            //限制长度
            var bag = gd.userCtrl.getBag();
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var cfg_t_itemEquip = mo.getJSONWithFileName(gc.cfg_t_itemEquip);
            //var sensitiveArr = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.fuckWord)[0].split(",");
            var sensitiveArr = cfg_c_game[gc.id_c_game.fuckWord][0].split(",");
            if (name.indexOf(" ") >= 0)
                return mo.showMsg("名称不能包含空格");
            if (name == null || name == "") {
                return mo.showMsg(gc.id_c_msgCode.noItemName);
            }
            else if (mo.STR.getStringLength(name) > 12) {
                return mo.showMsg(gc.id_c_msgCode.nameToolong);
            }
            else if (mo.STR.checkSensitiveWord(name, sensitiveArr)) {
                return mo.showMsg(gc.id_c_msgCode.fuckword);
            }
            if (cfg_c_game[gc.id_c_game.customizationCfg][3].indexOf(certificate.toString()) == -1)
                return mo.showMsg("定制凭证错误");
            var customizationId = self.getCustomizationId(certificate, job, lvl, equipType); //定制武器id
            if (!cfg_t_itemEquip[customizationId])
                return mo.showMsg("没有该定制装备");
            if ((abilityIndex.length - 1) != self.getMaxCustomPropNum())
                return mo.showMsg(gc.id_c_msgCode.choseProperty, self.getMaxCustomPropNum());
            var itemEquip = cfg_t_itemEquip[customizationId];
            var propertys = itemEquip[gc.t_itemEquip_propertys];
            for (var i = 0; i < abilityIndex.length; i++) {
                if (!propertys[abilityIndex[i]])
                    return mo.showMsg("属性勾选出错");
            }
            if (!bag[certificate] || bag[certificate] == 0)
                return mo.showMsg("缺少定制凭证");
            //确认
            mo.showMsg(gc.id_c_msgCode.makeItem, function () {
                var needLvl = mo.getJSONWithFileNameAndID(gc.cfg_t_item, customizationId)[gc.t_item_level];
                if (gd.userCtrl.getLvl() < needLvl) {
                    mo.showMsg(gc.id_c_msgCode.makeLvlBigger, function () {
                        self._doCustomization(certificate, job, name, lvl, abilityIndex, equipType, cb, target);
                    });
                }
                else {
                    self._doCustomization(certificate, job, name, lvl, abilityIndex, equipType, cb, target);
                }
            });
        };
        p._doCustomization = function (certificate, job, name, lvl, abilityIndex, equipType, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_equip_customization_args;
            var args = {};
            args[argKeys.certificate] = certificate;
            args[argKeys.job] = job;
            args[argKeys.name] = name;
            args[argKeys.lvl] = lvl;
            args[argKeys.abilityIndex] = abilityIndex;
            args[argKeys.equipType] = equipType;
            self.custing = true;
            mo.requestWaiting4Server(gc.iface.a_equip_customization, args, function (data) {
                self.custing = false;
                var isMail = data[gc.dsConsts.ExUserData.isMail]; //true 需要提示发送邮箱  false  不需要
                if (isMail)
                    mo.showMsg(gc.id_c_msgCode.bagMaxMail);
                var userData = {};
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                cb.call(target, data);
                self.pushNotify(self.__class.ON_CUSTOM);
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.custom);
            });
        };
        //升级定制武器
        p.upCustomization = function (opt, cb, target) {
            var self = this;
            var equipId = opt.equipId;
            var equipBag = gd.userCtrl.getEquipBag();
            if (!equipBag[equipId])
                return mo.showMsg("背包没有该装备");
            if (opt.isMaxLvl)
                return mo.showMsg("定制武器已升到最高级");
            if (!opt.isItemEnough)
                return mo.showMsg("材料不足");
            var argKeys = gc.iface.a_equip_upCustomization_args;
            var args = {};
            args[argKeys.equipId] = equipId;
            mo.requestWaiting4Server(gc.iface.a_equip_upCustomization, args, function (data) {
                var userData = {};
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                cb.call(target, data);
                self.pushNotify(self.__class.ON_INHERITED);
                gd.heroCtrl.calPropAndCombat();
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.custom);
            });
        };
        p.getInheritedEquipOpt = function (equipId) {
            var self = this;
            var opt = {
                equipId: equipId,
                nextEquipInfo: null,
                nextEquipNeedLvl: 0,
                nextEquipNeedLvlEnough: false,
                isMaxLvl: false,
                costItemId: null,
                costCount: null,
                isItemEnough: false
            };
            var trans = gd.equipCtrl.equipTrans(equipId);
            var tempId = trans.tempId;
            //下一个装备的相关信息
            var nextEquipTempId = parseInt(tempId) + 10;
            var idxs = gd.userCtrl.getEquipBag()[equipId][5];
            var t_itemEqup = mo.getJSONWithFileNameAndID(gc.cfg_t_itemEquip, nextEquipTempId);
            if (t_itemEqup) {
                var t_props = t_itemEqup[gc.t_itemEquip_propertys];
                var nextBasePropArr = [];
                for (var i = 0, li = idxs.length; i < li; i++) {
                    nextBasePropArr.push(t_props[idxs[i]]);
                }
                var nextEquipInfo = {
                    tempId: nextEquipTempId,
                    name: trans.name,
                    basePropArr: nextBasePropArr,
                    extraPropArr: trans.extraPropArr,
                    scrore: gd.userUtils.getEquipGrade(nextEquipTempId, trans.extraPropArr, idxs)
                };
                opt.nextEquipInfo = nextEquipInfo;
                //消耗
                var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.customizationCfg);
                var needArr = c_game[4].split(",");
                opt.costItemId = c_game[2];
                var needCount = 999999;
                var t_item = mo.getJSONWithFileNameAndID(gc.cfg_t_item, tempId);
                switch (parseInt(t_item[gc.t_item_itemLvl])) {
                    case 120:
                        needCount = parseInt(needArr[0]);
                        break;
                    case 130:
                        needCount = parseInt(needArr[1]);
                        break;
                    case 140:
                        needCount = parseInt(needArr[2]);
                        break;
                    case 150:
                        needCount = parseInt(needArr[3]);
                        break;
                    case 160:
                        needCount = parseInt(needArr[4]);
                        break;
                    case 170:
                        needCount = parseInt(needArr[5]);
                        break;
                    case 180:
                        needCount = parseInt(needArr[6]);
                        break;
                    case 190:
                        needCount = parseInt(needArr[7]);
                        break;
                }
                opt.costCount = needCount;
                //需求等级
                opt.nextEquipNeedLvl = mo.getJSONWithFileNameAndID(gc.cfg_t_item, nextEquipTempId)[gc.t_item_level];
                opt.nextEquipNeedLvlEnough = gd.userCtrl.getLvl() >= opt.nextEquipNeedLvl;
                opt.isItemEnough = gd.userCtrl.getItemNum(opt.costItemId) >= opt.costCount;
            }
            else {
                opt.isMaxLvl = true;
            }
            return opt;
        };
        CustomCtrl.ON_INHERITED = "ON_INHERITED"; //传承完成
        CustomCtrl.ON_CUSTOM = "ON_CUSTOM"; //订制完成
        return CustomCtrl;
    })(mo.DataController);
    gd.CustomCtrl = CustomCtrl;
    egret.registerClass(CustomCtrl,"gd.CustomCtrl");
    gd.customCtrl = CustomCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/5/27.
 */
var gd;
(function (gd) {
    var HeroCtrl = (function (_super) {
        __extends(HeroCtrl, _super);
        function HeroCtrl() {
            _super.apply(this, arguments);
            this.ybInjectTipsed = false; //元宝提示过没
        }
        var d = __define,c=HeroCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this._heroMap = {};
            this._skillCd = 0;
            this.isSelf = true;
            this.isUseStoneOpt = false;
            this.wingUpgradeTypeStr = "";
            this.curSelRoleIdx = 0;
        };
        p.initData = function (heroList) {
            var self = this;
            for (var i = 0; i < heroList.length; i++) {
                var locHero = heroList[i];
                var heroEntityCtrl = new gd.HeroEntityCtrl();
                heroEntityCtrl.init(locHero);
                self._heroMap[locHero[gc.dsConsts.HeroEntity.id]] = heroEntityCtrl;
            }
            gd.userCtrl.updateCombat();
        };
        d(p, "skillCd"
            ,function () {
                return this._skillCd;
            }
        );
        /**
         * 获取列表
         * @returns {Array}
         */
        p.getList = function () {
            var self = this;
            var reList = [];
            for (var key in self._heroMap) {
                var locHeroCtrl = self._heroMap[key];
                reList.push(locHeroCtrl);
            }
            /*  var zhanShi = new HeroEntityCtrl();
              zhanShi.skillIds = [1,2,3,4,5];
              zhanShi.skillLevels = [2,2,2,2,2];
              //zhanShi.skillLevels = [2];
  
              var faShi = new HeroEntityCtrl();
              faShi.skillIds = [11,12,13,14,15];
              faShi.skillLevels = [2,2,2,2,2];
  
              var daoShi = new HeroEntityCtrl();
              daoShi.skillIds = [21,22,23,24,25];
              daoShi.skillLevels = [2,2,2,2,2];
  
              //reList = [zhanShi];
              reList = [zhanShi, faShi, daoShi];*/
            reList.sort(self._sortHeroFuc);
            return reList;
        };
        //是否获得了所有英雄
        p.isGetAllHero = function () {
            var self = this;
            var maxHeroNum = 4;
            return self.getList().length >= maxHeroNum;
        };
        //获取下一个待解锁的位置
        p.getNextIdxToBeOpen = function () {
            var self = this;
            var maxHeroNum = 4;
            for (var i = 1, li = maxHeroNum; i < li; i++) {
                if (self.isToBeOpen(i))
                    return i;
            }
            return -1;
        };
        p.hasHeroByIndex = function (index) {
            var heroList = this.getList();
            return heroList[index] != null;
        };
        p.hasHeroByJob = function (job) {
            var heroList = this.getList();
            for (var i = 0, li = heroList.length; i < li; i++) {
                if (heroList[i].job == job)
                    return true;
            }
            return false;
        };
        p.hasHeroJobData = function (tempId) {
            var self = this;
            for (var key in self._heroMap) {
                var locHeroCtrl = self._heroMap[key];
                if (locHeroCtrl.get(gc.dsConsts.HeroEntity.tempId) == tempId)
                    return locHeroCtrl;
            }
            return 0;
        };
        //根据职业获取HEC
        p.getHeroByJob = function (job) {
            var heroList = this.getList();
            for (var i = 0, li = heroList.length; i < li; i++) {
                if (heroList[i].job == job)
                    return heroList[i];
            }
            return null;
        };
        //该位置是否是下一个待解锁的位置
        p.isToBeOpen = function (index) {
            var heroList = this.getList();
            return index == heroList.length && !this.hasHeroByIndex(index);
        };
        //获取英雄开启条件配置[自然开启等级, 提前开启所需vip等级]
        p.getHeroOpenCfg = function (idx) {
            var self = this;
            var c_open = mo.getJSONWithFileName(gc.cfg_c_open);
            var cfg_vip = mo.getJSONWithFileName(gc.cfg_c_vip);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var vip = 0, c_vip, role2VipLvl = 0, role3VipLvl = 0;
            while ((c_vip = cfg_vip[vip]) != null) {
                var openRole2 = c_vip[gc.c_vip_openRole2];
                var openRole3 = c_vip[gc.c_vip_openRole3];
                if (role2VipLvl == 0 && openRole2 > 0) {
                    role2VipLvl = vip;
                }
                ;
                if (role3VipLvl == 0 && openRole3 > 0) {
                    role3VipLvl = vip;
                }
                ;
                if (role2VipLvl > 0 && role3VipLvl > 0)
                    break;
                vip++;
            }
            var needLvl2 = c_open[gc.id_c_open.openRole2][gc.c_open_lvlRequired];
            var needLvl3 = c_open[gc.id_c_open.openRole3][gc.c_open_lvlRequired];
            var secndCfg = [needLvl2, role2VipLvl]; //[等级，vip等级]
            var thirdCCfg = [needLvl3, role3VipLvl];
            var cfgArr = [[0, 0], secndCfg, thirdCCfg];
            return cfgArr[idx] || [0, 0];
        };
        //特殊角色解锁配置
        p.getSpHeroOpenCfg = function (idx) {
            var self = this;
            var c_open = mo.getJSONWithFileName(gc.cfg_c_open);
            var cfg_vip = mo.getJSONWithFileName(gc.cfg_c_vip);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            if (idx < 3)
                return [];
            if (idx == 3) {
                var vip = 0, c_vip, role4VipLvl = 0;
                while ((c_vip = cfg_vip[vip]) != null) {
                    var openRole4 = c_vip[gc.c_vip_openRole4];
                    if (role4VipLvl == 0 && openRole4 > 0) {
                        role4VipLvl = vip;
                    }
                    if (role4VipLvl > 0)
                        break;
                    vip++;
                }
                var needLvl4 = c_open[gc.id_c_open.openRole4][gc.c_open_lvlRequired];
                return [
                    //[等级, 拥有英雄数量, vip等级, 转生等级要求]
                    [145, 3, vip, c_game[gc.id_c_game.fourRole][11]],
                    [needLvl4, 3, 0, c_game[gc.id_c_game.fourRole][1]]
                ];
            }
        };
        p.isOpenCfgOk = function (idx) {
            var self = this;
            var openCfg;
            if (idx < 3) {
                openCfg = self.getHeroOpenCfg(idx);
                return gd.userCtrl.getLvl() >= openCfg[0] //玩家等级满足
                    || gd.userCtrl.getVip() >= openCfg[1]; //vip等级满足
            }
            if (idx == 3) {
                openCfg = self.getSpHeroOpenCfg(idx);
                for (var i = 0, li = openCfg.length; i < li; i++) {
                    var cfg = openCfg[i];
                    if (gd.userCtrl.getLvl() >= cfg[0]
                        && self.getList().length >= cfg[1]
                        && gd.userCtrl.getVip() >= cfg[2]
                        && gd.userCtrl.getRebirthLvl() >= cfg[3]) {
                        return true;
                    }
                }
                return false;
            }
            return false;
        };
        p._sortHeroFuc = function (aHec, bHec) {
            return parseInt(aHec.id) > parseInt(bHec.id) ? 1 : -1;
        };
        //刷新英雄属性
        p.calPropAndCombat = function () {
            var self = this;
            var args = {};
            mo.request4Server(gc.iface.a_hero_calPropAndCombat, args, function (dataList) {
                for (var i = 0; i < dataList.length; i++) {
                    var heroData = dataList[i];
                    self.updateHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id], heroData);
                }
            });
        };
        //开启自动注入        isOpenIn:true/false
        p.autoInfuseSwitch = function (isOpenIn, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_hero_autoInfuseSwitch_args;
            var args = {};
            args[argKeys.isOpenIn] = isOpenIn;
            mo.request4Server(gc.iface.a_hero_autoInfuseSwitch, args, function (data) {
                if (data)
                    gd.userCtrl.updateEntity(data);
                cb.call(target, data);
            });
        };
        p.getInjectCost = function (type) {
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.fourRole);
            return type == gc.c_prop.extraInfuseTypeKey.diamond ? c_game[7] : c_game[3];
        };
        //额外注入
        p.extraInfuse = function (type, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_hero_extraInfuse_args;
            var args = {};
            args[argKeys.type] = type;
            mo.request4Server(gc.iface.a_hero_extraInfuse, args, function (data) {
                var isSucceed = data[gc.dsConsts.ExDemonLotusData.isSucceed];
                var userData = data[gc.dsConsts.ExDemonLotusData.userData];
                var expSum = data[gc.dsConsts.ExDemonLotusData.expSum];
                var genuineQiArr = data[gc.dsConsts.ExDemonLotusData.genuineQiArr];
                if (genuineQiArr.length > 0) {
                    gd.demonLotusCtrl._genuineQi = parseInt(genuineQiArr[0]);
                    gd.demonLotusCtrl._lastUpTime = Date.newDate().toString();
                }
                gd.userCtrl.updateEntity(userData);
                cb.call(target, [isSucceed, expSum]);
            });
        };
        /**
         * 获取主英雄外观
         * @param userId
         * @param cb
         * @param target
         * @returns [装备显示id,武器显示id,翅膀id,性别,是否霸主]
         */
        p.getMainHeroDisplay = function (userId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_hero_getMainHeroDisplay_args;
            var args = {};
            args[argKeys.userId] = userId;
            mo.request4Server(gc.iface.a_hero_getMainHeroDisplay, args, function (data) {
                cb.call(target, data);
            });
        };
        /**
         * 获取某职业英雄外观
         * @param userId
         * @param tempId 0:主角，1：战士，2：法师，3：道士
         * @param cb
         * @param target
         * @returns [装备显示id,武器显示id,翅膀id,性别,是否霸主]
         */
        p.getHeroDisplayByTempId = function (userId, tempId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_hero_getHeroDisplayByTempId_args;
            var args = {};
            args[argKeys.userId] = userId;
            args[argKeys.tempId] = tempId;
            mo.request4Server(gc.iface.a_hero_getHeroDisplayByTempId, args, function (data) {
                cb.call(target, data);
            });
        };
        //获取总战斗力
        p.getTotalCombat = function () {
            var self = this;
            var heroList = self.getList();
            var combat = 0;
            for (var i = 0; i < heroList.length; i++) {
                var locHeroCtrl = heroList[i];
                combat += locHeroCtrl.combat;
            }
            return combat;
        };
        //计算技能
        p.calSkill = function () {
            var self = this;
            var heroList = self.getList();
            for (var i = 0; i < heroList.length; i++) {
                var locHeroCtrl = heroList[i];
                locHeroCtrl.initSkill();
            }
        };
        //获取主英雄数据
        p.getMainHeroCtrl = function () {
            var self = this;
            var list = self.getList();
            return list[0];
        };
        p.getHeroByIndex = function (index) {
            var self = this;
            var list = self.getList();
            return list[index];
        };
        p.getHeroIndex = function (hec) {
            var self = this;
            var list = self.getList();
            for (var i = 0; i < list.length; ++i) {
                if (hec == list[i]) {
                    return i;
                }
            }
            return -1;
        };
        /**
         * 获取英雄map
         * @returns
         */
        p.getHeroMap = function () {
            return this._heroMap;
        };
        //获取英雄ctrl
        p.getHeroEntityCtrl = function (id) {
            var self = this;
            return self._heroMap[id];
        };
        //更新数据
        p.updateHeroEntityCtrl = function (id, data) {
            var self = this;
            var heroEntityCtrl = self.getHeroEntityCtrl(id);
            if (!heroEntityCtrl) {
                heroEntityCtrl = new gd.HeroEntityCtrl();
                heroEntityCtrl.init(data);
                self._heroMap[id] = heroEntityCtrl;
            }
            else {
                heroEntityCtrl.updateEntity(data);
            }
        };
        //获取用户最高元神等级
        p.getMaxStateLvl = function () {
            var self = this;
            var heroArr = self.getList();
            var returnLvl = 0;
            for (var i = 0; i < heroArr.length; i++) {
                var heroData = heroArr[i];
                var realmLvl = heroData.get(gc.dsConsts.HeroEntity.realmLvl) || 0;
                if (realmLvl > returnLvl)
                    returnLvl = realmLvl;
            }
            return returnLvl;
        };
        //获取装备数据
        p.getEquipData = function (id) {
            var self = this;
            var heroEntityCtrl = self.getHeroEntityCtrl(id);
            return heroEntityCtrl.get(gc.dsConsts.HeroEntity.equipData) || {};
        };
        /**
         * 召唤英雄
         * @param tempId
         * @param {gc.c_prop.sexKey} sex  性别
         * @param cb
         * @param target
         */
        p.callHero = function (tempId, sex, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_hero_callHero_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.sex] = sex;
            mo.requestWaiting4Server(gc.iface.a_hero_callHero, args, function (data) {
                var heroData = data;
                //var userData = data[gc.dsConsts.ExUserData.userData];
                self.updateHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id], heroData);
                //userCtrl.updateEntity(userData);
                self.calPropAndCombat();
                cb.call(target);
                self.pushNotify(self.__class.ON_CALL_HERO);
            });
        };
        //获取技能列表  [等级,等级,...]
        p.getHeroSkillArr = function (id) {
            var self = this;
            var heroEntityCtrl = self.getHeroEntityCtrl(id);
            var lvl = gd.userCtrl.get(gc.dsConsts.UserEntity.lvl);
            var skillCd = gd.userCtrl.get(gc.dsConsts.UserEntity.skillCd) || 0;
            var skillArr = heroEntityCtrl.get(gc.dsConsts.HeroEntity.skillLvlArr) || [];
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var needLvlArr = c_game[gc.id_c_game.skillRate][4].split(",");
            for (var i = 0; i < needLvlArr.length; i++) {
                if (skillArr[i] == null || !skillArr[i]) {
                    if (lvl > needLvlArr[i])
                        skillArr[i] = 1;
                }
            }
            self._skillCd = skillCd;
            return skillArr;
        };
        //获取技能cd时间  0:白色1：红色
        p.getSkillCd = function () {
            var self = this;
            var skillCd = gd.userCtrl.get(gc.dsConsts.UserEntity.skillCd);
            var nowTime = Date.newDate();
            var newSkillCd = 0;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var cdLimit = c_game[gc.id_c_game.skillRate][5]; //CD上限
            var lastSkillTime = gd.userCtrl.get(gc.dsConsts.UserEntity.lastSkillTime); //最后点技能时间
            var skillTime = Date.newDate(lastSkillTime).addSeconds(skillCd); //当前技能时间
            newSkillCd = (skillTime.getTime() - nowTime.getTime()) / 1000;
            newSkillCd = parseInt(newSkillCd.toString());
            if (newSkillCd <= 0)
                return [0, 0];
            if (skillCd > cdLimit)
                return [1, newSkillCd];
            return [0, newSkillCd];
        };
        /**
         * 技能升级
         * @param tempId 英雄模板id
         * @param index 英雄技能下标
         * @param cb
         * @param target
         */
        p.upSkill = function (id, index, cb, target) {
            var self = this;
            var tempId = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.tempId);
            var argKeys = gc.iface.a_hero_upSkill_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.index] = index;
            var newSkillCd = 0;
            var nowTime = Date.newDate();
            var c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            //var cdLimit = c_game[gc.id_c_game.skillRate][5];      //CD上限
            var lvl = gd.userCtrl.get(gc.dsConsts.UserEntity.lvl);
            //var skillCd = gd.userCtrl.get(gc.dsConsts.UserEntity.skillCd);     //技能CD
            var skillLvl = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.skillLvlArr)[index] || 1; //当前技能等级
            if (skillLvl >= lvl)
                return mo.showMsg("技能等级不能超过角色等级"); //todo  临时
            //if(skillCd > cdLimit){
            //    var lastSkillTime = gd.userCtrl.get(gc.dsConsts.UserEntity.lastSkillTime);     //最后点技能时间
            //    var skillTime = Date.newDate(lastSkillTime).addSeconds(skillCd);      //当前技能时间
            //    newSkillCd = (skillTime.getTime() - nowTime.getTime())/1000;
            //    newSkillCd = parseInt(newSkillCd.toString());
            //    if(newSkillCd > 0)  return mo.showMsg("技能还在CD中");
            //    if(newSkillCd < 0) newSkillCd = newSkillCd*-1;
            //}
            var cLvlId = 1;
            if (skillLvl != 0)
                cLvlId = skillLvl;
            var needGold = c_lvl[cLvlId][gc.c_lvl_skillNeedGold];
            var gold = gd.userCtrl.get(gc.dsConsts.UserEntity.gold);
            if (gold < needGold) {
                gd.userCtrl.noGolds(function () { }, this);
                return;
            }
            mo.requestWaiting4Server(gc.iface.a_hero_upSkill, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                gd.userCtrl.updateEntity(userData);
                self.updateHeroEntityCtrl(id, heroData);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role1_skill);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role2_skill);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role3_skill);
                self._skillCd = gd.userCtrl.get(gc.dsConsts.UserEntity.skillCd);
                cb.call(target, data);
            });
        };
        /**
         * 清除技能CD
         * @param cb
         * @param target
         */
        p.clearSkillCd = function (cb, target) {
            var self = this;
            var newSkillCd = 0; //当前cd时间
            var nowTime = Date.newDate();
            var skillCd = gd.userCtrl.get(gc.dsConsts.UserEntity.skillCd);
            var diamond = gd.userCtrl.get(gc.dsConsts.UserEntity.diamond);
            var lastSkillTime = gd.userCtrl.get(gc.dsConsts.UserEntity.lastSkillTime); //最后点技能时间
            var skillTime = Date.newDate(lastSkillTime).addSeconds(skillCd); //当前技能时间
            newSkillCd = (skillTime.getTime() - nowTime.getTime()) / 1000;
            newSkillCd = parseInt(newSkillCd.toString());
            if (newSkillCd < 0)
                newSkillCd = 0;
            if (newSkillCd <= 0)
                return mo.showMsg("当前无CD");
            var needDiamond = gc.calSkillDiamond(newSkillCd); //所需钻石
            mo.showMsg(gc.id_c_msgCode.cleanArenaTime, needDiamond, function () {
                if (diamond < needDiamond)
                    return mo.showMsg(gc.id_c_msgCode.noDiamond); //钻石不足
                mo.requestWaiting4Server(gc.iface.a_hero_clearSkillCd, {}, function (data) {
                    gd.userCtrl.updateEntity(data);
                    self._skillCd = 0;
                    cb.call(target, data);
                });
            });
        };
        //获取符文块数量
        p.getRealmCount = function (realmId) {
            var self = this;
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag);
            if (!bag[realmId] || bag[realmId] == 0)
                return 0;
            return bag[realmId];
        };
        //判断是否需要合成
        p.isRuneCom = function (runeId) {
            var c_compound = mo.getJSONWithFileName(gc.cfg_c_compound);
            if (!c_compound[runeId]) {
                return false;
            }
            else {
                return true;
            }
        };
        //判断是否可合成       0：不可合成  1;可合成
        p.canRuneCom = function (runeId) {
            var isRune = 1;
            var compoundNeedObj = {};
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag);
            var c_compound = mo.getJSONWithFileName(gc.cfg_c_compound);
            var reqItems1 = c_compound[runeId][gc.c_compound_reqItems1];
            if (reqItems1 != 0)
                compoundNeedObj[reqItems1] = c_compound[runeId][gc.c_compound_reqCount1];
            var reqItems2 = c_compound[runeId][gc.c_compound_reqItems2];
            if (reqItems2 != 0)
                compoundNeedObj[reqItems2] = c_compound[runeId][gc.c_compound_reqCount2];
            var reqItems3 = c_compound[runeId][gc.c_compound_reqItems3];
            if (reqItems3 != 0)
                compoundNeedObj[reqItems3] = c_compound[runeId][gc.c_compound_reqCount3];
            var reqItems4 = c_compound[runeId][gc.c_compound_reqItems4];
            if (reqItems4 != 0)
                compoundNeedObj[reqItems4] = c_compound[runeId][gc.c_compound_reqCount4];
            for (var key in compoundNeedObj) {
                if (!bag[key] || bag[key] < compoundNeedObj[key])
                    isRune = 0;
            }
            if (isRune == 1)
                return 1;
            return 0;
        };
        /**
         * 装备符文块
         * @param id
         * @param index 英雄技能下标
         * @param cb
         * @param target
         */
        p.wearRune = function (id, index, cb, target) {
            var self = this;
            var tempId = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.tempId);
            var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            var c_realm = mo.getJSONWithFileName(gc.cfg_c_realm);
            var lvl = gd.userCtrl.get(gc.dsConsts.UserEntity.lvl);
            var getRealmLvl = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.realmLvl);
            var realmLvl = getRealmLvl == 0 ? 0 : getRealmLvl;
            var runeId = c_realm[realmLvl][gc.c_realm_reqItems][index]; //符文块id
            var needLvl = t_item[runeId][gc.t_item_level]; //装备需要等级
            if (lvl < needLvl)
                return mo.showMsg("等级不足");
            var argKeys = gc.iface.a_hero_wearRune_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.index] = index;
            mo.requestWaiting4Server(gc.iface.a_hero_wearRune, args, function (data) {
                var userData = {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                self.updateHeroEntityCtrl(id, heroData);
                cb.call(target, data);
                self.pushNotify(self.__class.ON_WEAR_RUNE);
            });
        };
        /**
         * 装备符文块
         * @param id
         * @param
         * @param cb
         * @param target
         */
        p.wearAllRune = function (id, cb, target) {
            var self = this;
            var tempId = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.tempId);
            var isReturn = self.getHeroEntityCtrl(id).getHeroRealmList()[2] || [];
            if (isReturn.length < 1)
                return mo.showMsg("无可装备元神");
            var argKeys = gc.iface.a_hero_wearAllRune_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            mo.requestWaiting4Server(gc.iface.a_hero_wearAllRune, args, function (data) {
                var userData = {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                self.updateHeroEntityCtrl(id, heroData);
                cb.call(target, data);
                self.pushNotify(self.__class.ON_WEAR_RUNE);
            });
        };
        //29,1;30,1000;45,100
        p.getPropsStr = function (propInfos) {
            var str = "";
            for (var i = 0; i < propInfos.length; ++i) {
                if (propInfos[i].length == 2) {
                    var propIdx = propInfos[i][0];
                    var valueStr = propInfos[i][1];
                    if (g_base.PropBase.isPercentProp(propIdx)) {
                        valueStr = Math.round(propInfos[i][1] / g_base.PropBase.Scale_Num * 100) + "%";
                    }
                    if (propIdx == gc.c_prop.heroPropKey.reviveCount
                        || propIdx == gc.c_prop.heroPropKey.reviveHPScale
                        || propIdx == gc.c_prop.heroPropKey.disMaxHp2) {
                        valueStr += "(只在PK中有效)";
                    }
                    else if (propIdx == gc.c_prop.heroPropKey.maxHp2) {
                        valueStr += "(只在PK中生效，可免疫麻痹)";
                    }
                    var s = mo.STR.format("%s %s\n", gc.c_prop.heroProp[propIdx], valueStr);
                    str += s;
                }
            }
            return str;
        };
        /**
         * 升级境界
         * @param id
         * @param cb
         * @param target
         */
        p.upRealm = function (id, cb, target) {
            var self = this;
            var tempId = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.tempId);
            if (!self.canUpRealm(id))
                return mo.showMsg(gc.id_c_msgCode.cantRebirth);
            var argKeys = gc.iface.a_hero_upRealm_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            mo.requestWaiting4Server(gc.iface.a_hero_upRealm, args, function (data) {
                self.updateHeroEntityCtrl(id, data);
                gd.pointCtrl.cal(gc.c_prop.pointGreenKey.copy_realm);
                cb.call(target, data);
            });
        };
        p.canUpRealm = function (id) {
            var self = this;
            var realmArr = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.realmArr) || []; //符文块数组
            if (realmArr.length < 6)
                return mo.showMsg(gc.id_c_msgCode.cantRebirth);
            for (var i = 0; i < realmArr.length; i++) {
                if (realmArr[i] == null)
                    return false;
            }
            return true;
        };
        //获取强化等级列表    [等级,等级,...] 下标对应装备位置
        p.getStrengthLvlList = function (id) {
            var self = this;
            var intensifyArr = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.intensifyArr);
            return intensifyArr;
        };
        //获取某个装备强化数据        [属性id，当前加属性值，下级加属性值，当前拥有强化石，消耗强化石，消耗金币]
        p.getIndexStrengthArr = function (id, index) {
            var self = this;
            var returnArr = [];
            var c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var t_itemEquip = mo.getJSONWithFileName(gc.cfg_t_itemEquip);
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag);
            var strengthLvl = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.intensifyArr)[index] || 0; //当前强化等级
            var equipId = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.equipData)[index] || 0; //当前位置装备id
            returnArr[0] = t_itemEquip[equipId][gc.t_itemEquip_slotStrengthProperty];
            returnArr[1] = t_itemEquip[equipId][gc.t_itemEquip_propValue] * strengthLvl;
            returnArr[2] = t_itemEquip[equipId][gc.t_itemEquip_propValue] * (strengthLvl + 1);
            returnArr[3] = bag[gc.c_prop.spItemIdKey.intensify] || 0; //拥有强化石数量
            returnArr[4] = c_lvl[strengthLvl + 1][gc.c_lvl_equipStrengthNum]; //消耗强化石数量
            returnArr[5] = c_lvl[strengthLvl + 1][gc.c_lvl_equipStrengthGold];
            return returnArr;
        };
        //获取升星星级列表      [星级,星级,...] 下标对应装备位置
        p.getStarLvlList = function (id) {
            var self = this;
            var starArr = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.starArr);
            return starArr;
        };
        //获取某个装备升星数据        [当前基础属性加成(万分率)，下级提升(万分率)，拥有升星石，消耗升星石，消耗金币]
        p.getIndexStarArr = function (id, index) {
            var self = this;
            var returnArr = [];
            var c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag);
            var starLvl = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.starArr)[index] || 0; //当前升星等级
            returnArr[0] = c_lvl[starLvl][gc.c_lvl_upStarPropAdd];
            returnArr[1] = c_lvl[starLvl + 1][gc.c_lvl_upStarPropAdd];
            returnArr[2] = bag[gc.c_prop.spItemIdKey.starStone] || 0;
            returnArr[3] = c_lvl[starLvl + 1][gc.c_lvl_upStarNum];
            returnArr[4] = c_lvl[starLvl + 1][gc.c_lvl_upStarGold];
            return returnArr;
        };
        //获取宝石id列表      宝石[id,id,id,...]下标对应装备位置
        p.getGemIdList = function (id) {
            var self = this;
            var gemArr = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.gemArr);
            return gemArr;
        };
        /**
         * 强化
         * @param id
         * @param index 英雄对应位置下标
         * @param cb
         * @param target
         */
        p.strength = function (id, index, cb, target) {
            var self = this;
            var tempId = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.tempId);
            var c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var gold = gd.userCtrl.get(gc.dsConsts.UserEntity.gold);
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag);
            var strengthLvl = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.intensifyArr)[index] || 0; //当前强化等级
            var strengthLimit = c_game[gc.id_c_game.initCfg][2]; //强化上限
            var costGold = c_lvl[strengthLvl + 1][gc.c_lvl_equipStrengthGold];
            var strengthNum = bag[gc.c_prop.spItemIdKey.intensify] || 0; //拥有强化石数量
            var costStrengthNum = c_lvl[strengthLvl + 1][gc.c_lvl_equipStrengthNum];
            if (strengthLvl >= strengthLimit)
                return mo.showMsg("已达到强化上限");
            if (gold < costGold) {
                gd.userCtrl.noGolds(function () { }, this);
                return;
            }
            if (strengthNum < costStrengthNum)
                return mo.showMsg("强化石不足");
            var argKeys = gc.iface.a_hero_strength_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.index] = index;
            mo.requestWaiting4Server(gc.iface.a_hero_strength, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                gd.userCtrl.updateEntity(userData);
                self.updateHeroEntityCtrl(id, heroData);
                cb.call(target, data);
            });
        };
        /**
         * 升星
         * @param id
         * @param index 英雄对应位置下标
         * @param cb
         * @param target
         */
        p.upStar = function (id, index, cb, target) {
            var self = this;
            var tempId = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.tempId);
            var c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var gold = gd.userCtrl.get(gc.dsConsts.UserEntity.gold);
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag);
            var starLvl = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.starArr)[index] || 0; //当前升星等级
            var starLimit = c_game[gc.id_c_game.initCfg][3]; //升星上限
            var costGold = c_lvl[starLvl + 1][gc.c_lvl_upStarGold];
            var starNum = bag[gc.c_prop.spItemIdKey.starStone] || 0; //拥有升星石数量
            var costStarNum = c_lvl[starLvl + 1][gc.c_lvl_upStarNum];
            if (starLvl >= starLimit)
                return mo.showMsg("已达到升星上限");
            if (gold < costGold) {
                gd.userCtrl.noGolds(function () { }, this);
                return;
            }
            if (starNum < costStarNum)
                return mo.showMsg("升星石不足");
            var argKeys = gc.iface.a_hero_upStar_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.index] = index;
            mo.requestWaiting4Server(gc.iface.a_hero_upStar, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                gd.userCtrl.updateEntity(userData);
                self.updateHeroEntityCtrl(id, heroData);
                cb.call(target, data);
            });
        };
        /**
         * 宝石升级
         * @param id
         * @param index 英雄对应位置下标
         * @param cb
         * @param target
         */
        p.upGem = function (id, index, cb, target) {
            var self = this;
            var tempId = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.tempId);
            var gemInitialIndex = index;
            if (index > 7)
                gemInitialIndex = index - 4;
            var c_gem = mo.getJSONWithFileName(gc.cfg_c_gem);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag);
            var gemId = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.gemArr)[index] || c_game[gc.id_c_game.gemInitial][gemInitialIndex];
            var gemIdLimit = c_game[gc.id_c_game.gemLimit][gemInitialIndex]; //宝石id上限
            var itemID = c_gem[gemId][gc.c_gem_itemID]; //需要宝石碎片id
            var count = c_gem[gemId][gc.c_gem_count]; //需要宝石碎片数量
            var gemCount = bag[itemID] || 0; //拥有宝石碎片数量
            if (gemId >= gemIdLimit)
                return mo.showMsg("已升到最高等级");
            if (gemCount < count)
                return mo.showMsg("宝石碎片数量不足");
            var argKeys = gc.iface.a_hero_upGem_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.index] = index;
            mo.requestWaiting4Server(gc.iface.a_hero_upGem, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                gd.userCtrl.updateEntity(userData);
                self.updateHeroEntityCtrl(id, heroData);
                cb.call(target, data);
            });
        };
        /*获取翅膀数据
           [id，名称，等级，当前属性{}，下一星级属性{}，当前星数，当前经验，普通培养所需，高级培养所需，拥有羽毛数量]
                  翅膀[id,等级,星级,当前星经验]*/
        p.getWingArr = function (id) {
            var self = this;
            var returnArr = [];
            var nowObj = {};
            var nextObj = {};
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var t_wing = mo.getJSONWithFileName(gc.cfg_t_wing);
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag);
            //var wingArr = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.wingArr);
            var wingArr = self.getMainHeroCtrl().wingData;
            var wingId = wingArr[0] || 1;
            var wingLvl = wingArr[1] || 1;
            nowObj[gc.c_prop.heroPropKey.attackTemp] = t_wing[wingId][gc.t_wing_attack];
            nowObj[gc.c_prop.heroPropKey.maxHpTemp] = t_wing[wingId][gc.t_wing_maxHp];
            nowObj[gc.c_prop.heroPropKey.defenceTemp] = t_wing[wingId][gc.t_wing_defence];
            nowObj[gc.c_prop.heroPropKey.magicDefenceTemp] = t_wing[wingId][gc.t_wing_magicDefence];
            if (t_wing[wingId + 1]) {
                nextObj[gc.c_prop.heroPropKey.attackTemp] = t_wing[wingId + 1][gc.t_wing_attack];
                nextObj[gc.c_prop.heroPropKey.maxHpTemp] = t_wing[wingId + 1][gc.t_wing_maxHp];
                nextObj[gc.c_prop.heroPropKey.defenceTemp] = t_wing[wingId + 1][gc.t_wing_defence];
                nextObj[gc.c_prop.heroPropKey.magicDefenceTemp] = t_wing[wingId + 1][gc.t_wing_magicDefence];
            }
            returnArr[0] = wingId;
            returnArr[1] = t_wing[wingId][gc.t_wing_name];
            returnArr[2] = wingLvl;
            returnArr[3] = nowObj;
            returnArr[4] = nextObj;
            returnArr[5] = wingArr[2] || 0;
            returnArr[6] = wingArr[3] || 0;
            returnArr[7] = c_game[gc.id_c_game.wingCrit][4];
            returnArr[8] = c_game[gc.id_c_game.wingCrit][3];
            returnArr[9] = bag[gc.c_prop.spItemIdKey.plumage] || 0;
            return returnArr;
        };
        //翅膀普通培养
        p.wingComFos = function (id, cb, target) {
            var self = this;
            self.wingFos(id, gc.c_prop.wingFosTypeKey.comFoster, cb, target);
        };
        //翅膀高级培养
        p.wingAdvFos = function (id, cb, target) {
            var self = this;
            self.wingFos(id, gc.c_prop.wingFosTypeKey.advFoster, cb, target);
        };
        /**
         * 翅膀培养
         * @param id
         * @param fosType 培养类型
         * @param cb
         * @param target
         */
        p.wingFos = function (id, fosType, cb, target) {
            var self = this;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var idLimit = c_game[gc.id_c_game.initCfg][4];
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag);
            var tempId = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.tempId);
            var wingId = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.wingArr)[0] || 1;
            if (wingId >= idLimit)
                return mo.showMsg("翅膀等级已到上限");
            switch (fosType) {
                case gc.c_prop.wingFosTypeKey.comFoster:
                    var gold = gd.userCtrl.get(gc.dsConsts.UserEntity.gold);
                    if (gold < c_game[gc.id_c_game.wingCrit][4]) {
                        gd.userCtrl.noGolds(function () { }, this);
                        return;
                    }
                    break;
                case gc.c_prop.wingFosTypeKey.advFoster:
                    var diamond = gd.userCtrl.get(gc.dsConsts.UserEntity.diamond);
                    if (!bag[gc.c_prop.spItemIdKey.plumage] || bag[gc.c_prop.spItemIdKey.plumage] <= 0) {
                        if (diamond < c_game[gc.id_c_game.wingCrit][3])
                            mo.showMsg(gc.id_c_msgCode.noDiamond); //钻石不足
                    }
                    break;
            }
            var argKeys = gc.iface.a_hero_wingFos_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.fosType] = fosType;
            mo.requestWaiting4Server(gc.iface.a_hero_wingFos, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                gd.userCtrl.updateEntity(userData);
                self.updateHeroEntityCtrl(id, heroData);
                cb.call(target, data);
            });
        };
        /**
         * 翅膀一键培养
         * @param id
         * @param fosType 培养类型
         * @param cb
         * @param target
         */
        p.wingFos2Top = function (id, fosType, isUseDiamond, cb, target) {
            var self = this;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var idLimit = c_game[gc.id_c_game.initCfg][4];
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag);
            var tempId = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.tempId);
            var wingId = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.wingArr)[0] || 1;
            if (wingId >= idLimit)
                return mo.showMsg("翅膀等级已到上限");
            switch (fosType) {
                case gc.c_prop.wingFosTypeKey.comFoster:
                    var gold = gd.userCtrl.get(gc.dsConsts.UserEntity.gold);
                    if (gold < c_game[gc.id_c_game.wingCrit][4]) {
                        gd.userCtrl.noGolds(function () { }, this);
                        return;
                    }
                    break;
                case gc.c_prop.wingFosTypeKey.advFoster:
                    var diamond = gd.userCtrl.get(gc.dsConsts.UserEntity.diamond);
                    if (!bag[gc.c_prop.spItemIdKey.plumage] || bag[gc.c_prop.spItemIdKey.plumage] <= 0) {
                        if (isUseDiamond == false) {
                            mo.showMsg(gc.id_c_msgCode.notEnoughFeather); //羽毛不足
                            return;
                        }
                        else if (diamond < c_game[gc.id_c_game.wingCrit][3]) {
                            mo.showMsg(gc.id_c_msgCode.noDiamond);
                            return;
                        } //钻石不足
                    }
                    break;
            }
            var argKeys = gc.iface.a_hero_wingFos2Top_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.fosType] = fosType;
            args[argKeys.isUseDiamond] = isUseDiamond;
            mo.requestWaiting4Server(gc.iface.a_hero_wingFos2Top, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var wingExp = data[gc.dsConsts.ExUserData.wingExp];
                var isWingCrit = data[gc.dsConsts.ExUserData.isWingCrit];
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                //self.updateEntity(heroData);
                self.updateHeroEntityCtrl(id, heroData);
                if (wingExp)
                    g_msg.UIMsgTextCtrl.push("+" + wingExp);
                cb.call(target, data);
            });
        };
        /**
         * 翅膀升级
         * @param id
         * @param cb
         * @param target
         */
        p.upWing = function (id, cb, target) {
            var self = this;
            var tempId = self.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.tempId);
            var argKeys = gc.iface.a_hero_upWing_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            mo.requestWaiting4Server(gc.iface.a_hero_upWing, args, function (data) {
                self.updateHeroEntityCtrl(id, data);
                cb.call(target, data);
            });
        };
        //获得所有英雄的战力和
        p.getAllHeroAttack = function () {
            var self = this;
            var list = self.getList();
            var attk = 0;
            for (var i = 0, li = list.length; i < li; i++) {
                var hdc = list[i];
                attk += hdc.attackFight;
            }
            return attk;
        };
        p.isMy4thRole = function (index) {
            return index == 3;
        };
        p.isMy4thRoleByHec = function (hec) {
            return this.getHeroIndex(hec) == 3;
        };
        p.setIsUseStoneOpt = function (isUse) {
            var self = this;
            self.isUseStoneOpt = isUse;
        };
        p.getIsUseStoneOpt = function () {
            var self = this;
            return self.isUseStoneOpt;
        };
        p.setWingUpgradeTypeStr = function (typeStr) {
            var self = this;
            self.wingUpgradeTypeStr = typeStr;
        };
        p.getWingUpgradeTypeStr = function () {
            var self = this;
            return self.wingUpgradeTypeStr;
        };
        //获取出战列表
        p.getFightList = function () {
            var self = this;
            var reList = [];
            for (var key in self._heroMap) {
                var locHeroCtrl = self._heroMap[key];
                reList.push(locHeroCtrl);
            }
            reList.sort(self._sortHeroList);
            return reList;
        };
        //保存出战列表
        p.saveFightList = function (heroEntityCtrList, cb, target) {
            var self = this;
            var fightArr = [];
            var arr = heroEntityCtrList; //.sort(self._sortHeroList);
            for (var i = 0; i < arr.length; i++) {
                fightArr[i] = arr[i].get(gc.dsConsts.HeroEntity.id);
            }
            var argKeys = gc.iface.a_hero_saveFightList_args;
            var args = {};
            args[argKeys.fightArr] = fightArr;
            mo.requestWaiting4Server(gc.iface.a_hero_saveFightList, args, function (heroList) {
                for (var i = 0; i < heroList.length; i++) {
                    var heroData = heroList[i];
                    if (heroData)
                        self.updateHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id], heroData);
                }
                cb.call(target, heroList);
                mo.emitter.emit(self.__class.ON_FIGHT_HERO_CHANGE);
            });
        };
        p._sortHeroList = function (aHec, bHec) {
            if (aHec[gc.dsConsts.HeroEntity.fightSort]) {
                return parseInt(aHec[gc.dsConsts.HeroEntity.fightSort]) > parseInt(bHec[gc.dsConsts.HeroEntity.fightSort]) ? 1 : -1;
            }
            else {
                return parseInt(aHec.get(gc.dsConsts.HeroEntity.fightSort)) > parseInt(bHec.get(gc.dsConsts.HeroEntity.fightSort)) ? 1 : -1;
            }
        };
        HeroCtrl.ON_WEAR_RUNE = "ON_WEAR_RUNE";
        HeroCtrl.ON_CALL_HERO = "ON_CALL_HERO";
        HeroCtrl.ON_FIGHT_HERO_CHANGE = "ON_FIGHT_HERO_CHANGE";
        return HeroCtrl;
    })(mo.DataController);
    gd.HeroCtrl = HeroCtrl;
    egret.registerClass(HeroCtrl,"gd.HeroCtrl");
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/9/8.
 */
var gd;
(function (gd) {
    var HeroEntityCtrl = (function (_super) {
        __extends(HeroEntityCtrl, _super);
        function HeroEntityCtrl() {
            _super.apply(this, arguments);
            this._getCriticalRate = function (disCriticalFightTarget) {
                return this.criticalFight / (this.criticalFight + disCriticalFightTarget);
            };
            this._getCritDamage = function (disCriticalFightTarget) {
                return this.criticalFight / (this.criticalFight + disCriticalFightTarget) * 3;
            };
            this._getDefence = function (defenceFight, magicDefenceFight) {
                var level = 1; //临时
                var attackType = this.job;
                var roleLevel = gd.userCtrl.getLvl();
                var attack = this.attackFight;
                var def = attackType == g_base.PropBase.BehaviorPhysics ? defenceFight : attackType == g_base.PropBase.BehaviorMagic ? magicDefenceFight : (magicDefenceFight + defenceFight) / 2;
                var curDef;
                if (def <= 10000) {
                    curDef = 0.002 * def / (1 + 0.015 * roleLevel + 0.002 * def);
                    curDef = Math.min(curDef, 0.6);
                }
                else if (def < 60000) {
                    curDef = 100 / (1 + 0.8 * roleLevel + 100) + 0.001 * (def - 10000) / (1 + 1.25 * roleLevel + 0.001 * (def - 10000));
                    curDef = Math.min(curDef, 0.9);
                }
                else {
                    if (attack < 120000) {
                        curDef = 0.8 + def / (def + 4000000);
                    }
                    else {
                        curDef = def / (def + attack * 0.125);
                    }
                    curDef = Math.min(curDef, 0.9);
                }
                return curDef;
            };
            this._getHpCoefficient = function (skillInfo, skillLevel) {
                return (skillInfo[gc.t_skill_damage] + skillInfo[gc.t_skill_damageScaleA] * (skillLevel - 1)) / 10000;
            };
        }
        var d = __define,c=HeroEntityCtrl,p=c.prototype;
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.HeroEntity;
            self.props = [];
            self.skillIds = [];
            self.skillLevels = [];
            self.isSelf = true;
            self.otherData = [];
            self.fightData = [];
        };
        p.init = function (data) {
            var self = this;
            _super.prototype.init.call(this, data);
            self.props = self.get(gc.dsConsts.HeroEntity.propArr);
            self.initSkill();
        };
        p.updateEntity = function (data) {
            var self = this;
            var oldProp = self._getCurProp();
            _super.prototype.updateEntity.call(this, data);
            self.props = self.get(gc.dsConsts.HeroEntity.propArr);
            self.initSkill();
            var newProp = self._getCurProp();
            self._calProChanged(oldProp, newProp);
            if (data[gc.dsConsts.HeroEntity.combat]) {
                //战斗力变化
                gd.userCtrl.updateCombat();
            }
        };
        p._getCurProp = function () {
            var self = this;
            var curProp = {
                maxHpFight: self.maxHpFight,
                attackFight: self.attackFight,
                defenceFight: self.defenceFight,
                magicDefenceFight: self.magicDefenceFight,
                hitFight: self.hitFight,
                dodgeFight: self.dodgeFight,
                criticalFight: self.criticalFight,
                disCriticalFight: self.disCriticalFight
            };
            return curProp;
        };
        p._calProChanged = function (oldProp, newData) {
            var self = this;
            var changeProp = {
                maxHpFight: newData.maxHpFight - oldProp.maxHpFight,
                attackFight: newData.attackFight - oldProp.attackFight,
                defenceFight: newData.defenceFight - oldProp.defenceFight,
                magicDefenceFight: newData.magicDefenceFight - oldProp.magicDefenceFight,
                hitFight: newData.hitFight - oldProp.hitFight,
                dodgeFight: newData.dodgeFight - oldProp.dodgeFight,
                criticalFight: newData.criticalFight - oldProp.criticalFight,
                disCriticalFight: newData.disCriticalFight - oldProp.disCriticalFight
            };
            //todo 属性变化，需要UI表现 ,只有大于0时才显示
            //console.log("属性变化：",changeProp);
            var needShowProp = {};
            for (var key in changeProp) {
                if (changeProp[key] > 0) {
                    needShowProp[key] = changeProp[key];
                }
            }
            if (Object.keys(needShowProp).length > 0) {
                // g_msg.GetItemTips.create().setData({changeProp:needShowProp}).show();
                g_msg.UIMsgHeroPropCtrl.push({ hec: self, changeProp: needShowProp });
            }
        };
        //获取法宝技能        [技能id,技能id,...]
        p.getTalismanSkill = function () {
            var self = this;
            var returnArr = [];
            var talismanData = self.get(gc.dsConsts.HeroEntity.talismanData) || {}; //法宝数据{法宝id:[等级,资质,星级,最高星级,{星级:技能id,星级:技能id,...},临时资质],法宝id:[等级,资质,星级,最高星级,{星级:技能id,星级:技能id,...},临时资质],....}
            for (var key in talismanData) {
                var skillObj = talismanData[key][4] || {};
                for (var key1 in skillObj) {
                    returnArr.push(skillObj[key1]);
                }
            }
            return returnArr;
        };
        //获取佩戴法宝id
        p.getTalismanAdorn = function () {
            var self = this;
            var talismanAdorn = self.get(gc.dsConsts.HeroEntity.talismanAdorn) || 0;
            return talismanAdorn;
        };
        //初始化技能
        p.initSkill = function () {
            var self = this;
            var t_hero = mo.getJSONWithFileName(gc.cfg_t_hero);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var skillOpenNeedArr = c_game[gc.id_c_game.skillRate][4];
            skillOpenNeedArr = skillOpenNeedArr.split(",");
            var skillLvlArr = self.get(gc.dsConsts.HeroEntity.skillLvlArr);
            var tempId = self.get(gc.dsConsts.HeroEntity.tempId);
            var t_heroData = t_hero[tempId];
            self.skillIds.length = 0;
            self.skillLevels.length = 0;
            var tempSkillIds = t_heroData[gc.t_hero_skillIds];
            for (var i = 0; i < tempSkillIds.length; i++) {
                var locSkillId = tempSkillIds[i];
                var locTalentSkillId = self._getReplaceTalentSkillId(i);
                if (locTalentSkillId)
                    locSkillId = locTalentSkillId;
                self.skillIds.push(locSkillId);
                var locNeedLvl = parseInt(skillOpenNeedArr[i]);
                if (self.lvl >= locNeedLvl) {
                    self.skillLevels.push(skillLvlArr[i] || 1);
                }
                else {
                    self.skillLevels.push(0);
                }
            }
            self._initHearSkill();
            self.pushNotify(self.__class.ON_SKILL_CHANGED);
        };
        p._getReplaceTalentSkillId = function (index) {
            var self = this;
            var skillArr = self.getTalismanSkill();
            var reSkillId = 0; //
            var t_talismanSkill = mo.getJSONWithFileName(gc.cfg_t_talismanSkill);
            for (var i = 0; i < skillArr.length; i++) {
                var locSkillId = skillArr[i];
                if (!locSkillId)
                    continue;
                var locSkillData = t_talismanSkill[locSkillId];
                var locType = locSkillData[gc.t_talismanSkill_type];
                if (locType != gc.c_prop.talismanSkillTypeKey.replaceSkill)
                    continue;
                var locTeffect = locSkillData[gc.t_talismanSkill_effect] || [];
                locTeffect = locTeffect[0];
                if (!locTeffect)
                    continue;
                var locIndex = locTeffect[0];
                var locTalentSkillId = locTeffect[1];
                if (index != locIndex)
                    continue;
                if (locTalentSkillId > reSkillId) {
                    reSkillId = locTalentSkillId;
                }
            }
            return reSkillId;
        };
        p._initHearSkill = function () {
            var self = this;
            var c_heartStunt = mo.getJSONWithFileName(gc.cfg_c_heartStunt);
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var skill2Layer = cfg_c_game[gc.id_c_game.heartStuntCfg][1];
            //心法每10级等于1级技能
            var heartData = self.heartData;
            for (var key in heartData) {
                var heartStuntData = c_heartStunt[key];
                var layer = parseInt(heartStuntData[gc.c_heartStunt_layer]);
                var series = parseInt(heartStuntData[gc.c_heartStunt_series]);
                if (!heartStuntData)
                    continue;
                var locValue = heartData[key] || 0;
                var locSkillId = heartStuntData[gc.c_heartStunt_skillId];
                var locSkillId2 = heartStuntData[gc.c_heartStunt_skillId2];
                if (layer > skill2Layer)
                    locSkillId = locSkillId2;
                self.skillIds.push(locSkillId);
                var locSkillLvl = Math.floor(locValue / series) + 1;
                if (locSkillLvl > layer)
                    locSkillLvl = layer;
                self.skillLevels.push(locSkillLvl);
            }
        };
        d(p, "heartData"
            /**
             * 获取等级
             * @returns {number}
             */
            ,function () {
                var self = this;
                //var propertyData
                var propertyData = {};
                if (self.isSelf) {
                    propertyData = gd.userCtrl.get(gc.dsConsts.UserEntity.propertyData) || {};
                }
                else {
                    propertyData = self.fightData[7] || {};
                }
                var heartData = propertyData[gc.c_prop.propertyDataKey.heartStunt] || {};
                return heartData;
            }
        );
        d(p, "lvl"
            /**
             * 获取等级
             * @returns {number}
             */
            ,function () {
                var self = this;
                var userLvl = 0;
                if (self.isSelf) {
                    userLvl = gd.userCtrl.getLvl();
                }
                else {
                    userLvl = self.fightData[0] || 0;
                }
                return userLvl;
            }
        );
        d(p, "job"
            /**
             * 获取职业类型
             * @returns {gc.c_prop.heroJobKey}
             */
            ,function () {
                var tempId = this.get(gc.dsConsts.HeroEntity.tempId);
                var t_hero = mo.getJSONWithFileName(gc.cfg_t_hero);
                return t_hero[tempId][gc.t_hero_job];
            }
        );
        p.setPropByIndex = function (index, value) {
            this.props[index] = value;
        };
        p.getPropByIndex = function (index) {
            return this.props[index];
        };
        p.getFightPropByIndex = function (baseIndex, scaleIndex, tempScale) {
            return Math.floor(this.getPropByIndex(baseIndex) * (1 + this.getPropByIndex(scaleIndex) / HeroEntityCtrl.Scale_Num) + this.getPropByIndex(tempScale));
        };
        d(p, "maxHpFight"
            //生命
            ,function () {
                return this.getFightPropByIndex(1, 2, 33);
            }
        );
        d(p, "attackFight"
            //物攻
            ,function () {
                return this.getFightPropByIndex(3, 4, 34);
            }
        );
        d(p, "defenceFight"
            //物防
            ,function () {
                return this.getFightPropByIndex(5, 6, 35);
            }
        );
        d(p, "magicDefenceFight"
            //魔防
            ,function () {
                return this.getFightPropByIndex(7, 8, 36);
            }
        );
        d(p, "hitFight"
            //命中
            ,function () {
                return this.getFightPropByIndex(9, 10, 37);
            }
        );
        d(p, "dodgeFight"
            //闪避
            ,function () {
                return this.getFightPropByIndex(11, 12, 38);
            }
        );
        d(p, "criticalFight"
            //暴击
            ,function () {
                return this.getFightPropByIndex(13, 14, 39);
            }
        );
        d(p, "disCriticalFight"
            //抗暴
            ,function () {
                return this.getFightPropByIndex(15, 16, 40);
            }
        );
        d(p, "luckyValueFight"
            //幸运
            ,function () {
                return this.getFightPropByIndex(17, 18, 41);
            }
        );
        d(p, "moveSpeedFight"
            //移动速度
            ,function () {
                return this.getFightPropByIndex(19, 20, 42);
            }
        );
        d(p, "attackIntervalFight"
            //攻击速度
            ,function () {
                return this.getFightPropByIndex(21, 22, 43);
            }
        );
        d(p, "damageIncreaseFight"
            //伤害加成
            ,function () {
                var b = this.getPropByIndex(23) + this.getPropByIndex(44);
                b = b / HeroEntityCtrl.Scale_Num;
                return b = Math.floor(100 * b) / 100;
            }
        );
        d(p, "damageDecreaseFight"
            //伤害减免
            ,function () {
                var b = this.getPropByIndex(24) + this.getPropByIndex(45);
                b = b / HeroEntityCtrl.Scale_Num;
                return b = Math.floor(100 * b) / 100;
            }
        );
        d(p, "benumbProFight"
            //麻痹
            ,function () {
                return this.getPropByIndex(25) / HeroEntityCtrl.Scale_Num;
            }
        );
        d(p, "disBenumbProFight"
            //抗麻痹
            ,function () {
                return this.getPropByIndex(26) / HeroEntityCtrl.Scale_Num;
            }
        );
        d(p, "benumbProSpanFight"
            //poisoningRecoveryProb :number = 0;//[27]
            //麻痹时长
            ,function () {
                return this.getPropByIndex(28);
            }
        );
        d(p, "reviveCountFight"
            //复活
            ,function () {
                return this.getPropByIndex(29);
            }
        );
        d(p, "reviveHPScaleFight"
            //复活HP%
            ,function () {
                return this.getPropByIndex(30);
            }
        );
        d(p, "maxHp2Fight"
            //护身
            ,function () {
                var b = this.maxHpFight;
                return b = b * this.getPropByIndex(31) / HeroEntityCtrl.Scale_Num;
            }
        );
        d(p, "disMaxHp2Fight"
            //抗护身
            ,function () {
                return this.getPropByIndex(32) / HeroEntityCtrl.Scale_Num;
            }
        );
        p._getHitRate = function (dodgeFightTarget) {
            return this.hitFight / (this.hitFight + dodgeFightTarget);
        };
        p.getDamagePerSec = function (target) {
            var skill;
            var hitRate, critRate, critDamage, defence, damage;
            //var skillDamagePerSecs = [];
            hitRate = this._getHitRate(target[gc.t_monster_dodge]);
            critRate = this._getCriticalRate(target[gc.t_monster_disCritical]);
            critDamage = this._getCritDamage(target[gc.t_monster_disCritical]);
            defence = this._getDefence(target[gc.t_monster_defense], target[gc.t_monster_magicDefence]);
            var damagePerSec = 0;
            for (var i = 0; i < this.skillIds.length; ++i) {
                var skillId = this.skillIds[i];
                skill = mo.getJSONWithFileNameAndID(gc.cfg_t_skill, skillId); // 获取技能表数据
                var skillLevel = this.skillLevels[i]; // 技能等级
                var hpCoefficient = this._getHpCoefficient(skill, skillLevel);
                if (hpCoefficient < 0) {
                    damage = this.attackFight;
                    damage *= (1 - defence);
                    damage = (damage + damage * critRate * critDamage) / (1 + critRate);
                    damage *= 1 + this.damageIncreaseFight - target[gc.t_monster_damageDecrease];
                    damage *= hpCoefficient;
                    damage *= hitRate;
                    damagePerSec += (-damage * 1000 / (skill[gc.t_skill_cd] * 10));
                }
                else {
                    damage = 0;
                }
            }
            return damagePerSec;
        };
        d(p, "equipData"
            ,function () {
                return this.get(gc.dsConsts.HeroEntity.equipData) || {}; //{index:id,}
            }
        );
        d(p, "tempId"
            ,function () {
                return this.get(gc.dsConsts.HeroEntity.tempId);
            }
        );
        d(p, "combat"
            ,function () {
                return this.get(gc.dsConsts.HeroEntity.combat);
            }
        );
        d(p, "sex"
            //获取性别
            ,function () {
                return this.get(gc.dsConsts.HeroEntity.sex);
            }
        );
        d(p, "id"
            ,function () {
                return this.get(gc.dsConsts.HeroEntity.id);
            }
        );
        d(p, "wingData"
            ,function () {
                //id 等级 星级 当前星经验
                var wingArr = this.get(gc.dsConsts.HeroEntity.wingArr);
                return wingArr[0] != null ? wingArr : [0, 0, 0, 0];
            }
        );
        d(p, "gemData"
            ,function () {
                //[id, id, id, id] 宝石
                var gemArr = this.get(gc.dsConsts.HeroEntity.gemArr);
                return gemArr;
            }
        );
        //翅膀是否激活
        p.isWingActived = function () {
            var self = this;
            return !!self.wingData[1];
        };
        //翅膀是否满级
        p.isWingLimit = function () {
            var self = this;
            var ret = false;
            var wingId = parseInt(self.wingData[0]) + 1;
            var cfg_t_wing = mo.getJSONWithFileName(gc.cfg_t_wing);
            if (!cfg_t_wing[wingId])
                ret = true;
            return ret;
        };
        //翅膀是否达到开启等级
        p.isWingOpen = function () {
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var needLvl = cfg_c_game[gc.id_c_game.wingCrit][6];
            return gd.userCtrl.getLvl() >= needLvl;
        };
        //过的宝石信息
        p.getGemInfoByPart = function (part) {
            var self = this;
            var cfg_c_gem = mo.getJSONWithFileName(gc.cfg_c_gem);
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var gemData = self.gemData;
            var gemId = gemData[part];
            if (!gemId) {
                if (part > 7)
                    part = part - 4;
                gemId = cfg_c_game[gc.id_c_game.gemInitial][part];
            }
            else {
                gemId = gemData[part];
            }
            return cfg_c_gem[gemId];
        };
        //根据部位获取装备栏强化等级
        p.getStrLvlByEquipPart = function (part) {
            var self = this;
            var strArr = self.get(gc.dsConsts.HeroEntity.intensifyArr) || [];
            return strArr[part] || 0;
        };
        //根据部位获取装备栏强化精炼等级
        p.getRefLvlByEquipPart = function (part) {
            var self = this;
            var refineArr = self.get(gc.dsConsts.HeroEntity.refineArr) || [];
            return refineArr[part] || 0;
        };
        //根据部位获取装备栏强化等级信息
        p.getStrLvlInfoByEquipPart = function (part) {
            var self = this;
            var opt = self.getStrOpt(part);
            return opt.curStrInfo; //强化等级，属性类型，属性值
        };
        //根据部位获取装备栏升星等级
        p.getStarLvlByEquipPart = function (part) {
            var self = this;
            var strArr = self.get(gc.dsConsts.HeroEntity.starArr) || [];
            return strArr[part] || 0;
        };
        //升星属性加成
        p.getStarLvlInfoByEquipPart = function (part) {
            var self = this;
            var starLvl = self.getStarLvlByEquipPart(part);
            var c_lvl = mo.getJSONWithFileNameAndID(gc.cfg_c_lvl, starLvl);
            return [starLvl, c_lvl[gc.c_lvl_upStarPropAdd] / 100]; //升星等级，属性值
        };
        //获取衣服显示id
        p.getClothDisplayID = function () {
            var self = this;
            if (self.isSelf) {
                //判断衣服
                var tempID = self.getEquipTempIdByPart(gc.c_prop.heroEquipIndexKey.clothes);
                var displayIDArr = [];
                if (tempID) {
                    var t_itemEquipData = mo.getJSONWithFileNameAndID(gc.cfg_t_itemEquip, tempID);
                    displayIDArr = t_itemEquipData[gc.t_itemEquip_displayID].split(",");
                }
                else {
                    //如果没有则返回角色默认
                    //self.tempId
                    var t_heroData = mo.getJSONWithFileNameAndID(gc.cfg_t_hero, self.tempId);
                    displayIDArr = t_heroData[gc.t_hero_displayID].split(",");
                }
                if (self.sex == gc.c_prop.sexKey.male) {
                    return displayIDArr[0];
                }
                else {
                    return displayIDArr[1];
                }
            }
            else {
                return self.otherData[0];
            }
        };
        //获取武器显示id
        p.getWeaponDisplayID = function () {
            var self = this;
            if (self.isSelf) {
                //判断衣服
                var tempID = self.getEquipTempIdByPart(gc.c_prop.heroEquipIndexKey.weapon);
                var displayID = null;
                if (tempID) {
                    var t_itemEquipData = mo.getJSONWithFileNameAndID(gc.cfg_t_itemEquip, tempID);
                    displayID = t_itemEquipData[gc.t_itemEquip_displayID];
                }
                return displayID;
            }
            else {
                return self.otherData[1];
                return "luochabang.18";
            }
        };
        //获取翅膀显示id
        p.getWingDisplayID = function () {
            var self = this;
            var wingOpt = this.getWingOpt();
            if (self.isSelf) {
                var displayID = null;
                var wingId = wingOpt.wingId;
                var t_wingData = mo.getJSONWithFileNameAndID(gc.cfg_t_wing, wingId);
                if (t_wingData && wingOpt.wingLvl > 0) {
                    displayID = t_wingData[gc.t_wing_displayID];
                }
                return displayID;
            }
            else {
                return self.otherData[2];
                return "00001";
            }
        };
        p.getIsKing = function () {
            var self = this;
            if (self.isSelf) {
                return gd.userCtrl.getIsKing();
            }
            else {
                return self.fightData[3];
            }
        };
        p.getMedalTitle = function () {
            var self = this;
            if (self.isSelf) {
                return gd.userCtrl.get(gc.dsConsts.UserEntity.medalTitle);
            }
            else {
                return self.fightData[6];
            }
        };
        p.getRebirthLvl = function () {
            var self = this;
            if (self.isSelf) {
                return gd.userCtrl.get(gc.dsConsts.UserEntity.rebirthLvl) || 0;
            }
            else {
                return self.fightData[5] || 0;
            }
        };
        //获取装备的详细信息
        p.getEquipInfoByPart = function (part) {
            var self = this;
            var equipId = self.equipData[part];
            var equipBag = self.isSelf ? gd.userCtrl.getEquipBag() : self.fightData[1];
            return equipBag[equipId];
        };
        //根据部位获得装备tempId，如果该部位没有装备则返回null
        p.getEquipTempIdByPart = function (part) {
            var self = this;
            var equipData = self.getEquipInfoByPart(part);
            if (!equipData)
                return null;
            return equipData[0];
        };
        //根据equipId获取部位
        p.getPartByEquipId = function (equipId) {
            var self = this;
            var equipData = self.equipData;
            var partKey = gc.c_prop.heroEquipIndex;
            var heroEquipIndexKey = gc.c_prop.heroEquipIndexKey;
            for (var part in partKey) {
                if (!gd.equipCtrl.isBreakRing(part) && equipData[part] == equipId)
                    return parseInt(part);
            }
            return null;
        };
        //根据部位获得装备Id
        p.getEquipIdByPart = function (part) {
            var self = this;
            var equipId = self.equipData[part];
            return equipId;
        };
        //检查某个部位是否已装备
        p.isPartEquiped = function (part) {
            return this.getEquipIdByPart(part) != null;
        };
        //身上是否有装备
        p.isEquiped = function () {
            return Object.keys(this.equipData).length > 0;
        };
        //是否装备有普通(非特戒)装备
        p.isNormalEquiped = function () {
            return this.getFirstEquipedPart() != null;
        };
        //获取非特戒可穿戴的装备
        p.getStanbyEquip = function (part) {
            var self = this;
            if (!self.isSelf)
                return [];
            var t_itemEquip = mo.getJSONWithFileName(gc.cfg_t_itemEquip);
            return gd.equipCtrl.getEquipList(this.job, gd.equipCtrl.getEquipTypeByPart(part)).filter(function (equipId) {
                return gd.userCtrl.getLvl() >= gd.equipCtrl.getEquipWearLvl(gd.userCtrl.getEquipBag()[equipId][0]);
            });
        };
        //获取可穿戴特戒
        p.getStanbyBreakId = function (part) {
            var self = this;
            if (!self.isSelf)
                return null;
            var ringEquiped = self.getEquipIdByPart(part) != null; //是否已经穿戴好特戒
            var breakId = gd.equipCtrl.getInitBreakRing(part); //背包里是否存在特戒
            if (!ringEquiped && gd.userCtrl.getItemNum(breakId) > 0)
                return breakId;
            return null;
        };
        //逆时针依次检查，直到发现已装备的部位
        p.getFirstEquipedPart = function () {
            var self = this;
            var equipData = self.equipData;
            var partKey = gc.c_prop.heroEquipIndex;
            var heroEquipIndexKey = gc.c_prop.heroEquipIndexKey;
            for (var part in partKey) {
                if (!gd.equipCtrl.isBreakRing(part) && equipData[part])
                    return parseInt(part);
            }
            return null;
        };
        //获取身上所有传承装备
        p.getAllSpecialEquip = function () {
            var self = this;
            var equipData = self.equipData;
            var partKey = gc.c_prop.heroEquipIndex;
            var heroEquipIndexKey = gc.c_prop.heroEquipIndexKey;
            var equips = [];
            for (var part in partKey) {
                if (!gd.equipCtrl.isBreakRing(part)
                    && equipData[part]
                    && gd.equipCtrl.isSpecialEquip(gd.equipCtrl.getTempIdByEquipId(equipData[part]))) {
                    equips.push(equipData[part]);
                }
            }
            return equips;
        };
        //获取身上所有可传承装备
        p.getAllCanInherEquip = function () {
            var self = this;
            var equips = self.getAllSpecialEquip();
            return equips.filter(function (equipId) {
                return gd.equipCtrl.getInheritedEquipOpt(equipId).nextEquipNeedLvlEnough;
            });
        };
        p.getStrOpt = function (part) {
            var self = this;
            var tempId = self.getEquipTempIdByPart(part);
            if (!tempId)
                return null;
            var opt = {
                part: part,
                strMax: false,
                curStrInfo: [],
                nextStrInfo: [],
                stone: 0,
                gold: 0,
                costStone: 0,
                costGold: 0,
                strengthLimit: 0,
                strengthLvl: 0,
                stoneEnough: false,
                goldEnough: false
            };
            var curLvl = self.getStrLvlByEquipPart(part);
            var nextLvl = curLvl + 1;
            var cLvlId = 1;
            if (curLvl != 0)
                cLvlId = curLvl;
            var c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var gold = gd.userCtrl.getGold();
            var strengthLimit = c_game[gc.id_c_game.initCfg][2]; //强化上限
            var costGold = c_lvl[cLvlId][gc.c_lvl_equipStrengthGold];
            var strengthNum = gd.userCtrl.getItemNum(gc.c_prop.spItemIdKey.intensify); //拥有强化石数量
            var costStrengthNum = c_lvl[cLvlId][gc.c_lvl_equipStrengthNum];
            opt.strengthLvl = curLvl;
            opt.strMax = curLvl >= strengthLimit;
            opt.stone = strengthNum;
            opt.gold = gold;
            var refineLvl = parseInt(self.getRefLvlByEquipPart(opt.part));
            var curRefineInfo = gd.equipCtrl.queryRefineLvlInfo(tempId, refineLvl);
            if (opt.strMax) {
                opt.curStrInfo = gd.equipCtrl.queryStrLvlInfo(tempId, curLvl);
                opt.curStrInfo[2] = opt.curStrInfo[2] * (1 + curRefineInfo[2]) >> 0;
            }
            else {
                opt.curStrInfo = gd.equipCtrl.queryStrLvlInfo(tempId, curLvl);
                opt.curStrInfo[2] = opt.curStrInfo[2] * (1 + curRefineInfo[2]) >> 0;
                opt.nextStrInfo = gd.equipCtrl.queryStrLvlInfo(tempId, nextLvl);
                opt.nextStrInfo[2] = opt.nextStrInfo[2] * (1 + curRefineInfo[2]) >> 0;
                opt.costStone = costStrengthNum;
                opt.costGold = costGold;
                opt.strengthLimit = strengthLimit;
                opt.stoneEnough = strengthNum >= costStrengthNum;
                opt.goldEnough = gold >= costGold;
            }
            return opt;
        };
        p.getRefineOpt = function (part) {
            var self = this;
            var tempId = self.getEquipTempIdByPart(part);
            if (!tempId)
                return null;
            var opt = {
                part: part,
                isMax: false,
                curRefineInfo: [],
                nextRefineInfo: [],
                stone: 0,
                gold: 0,
                costStone: 0,
                costGold: 0,
                strengthLvl: 0,
                needStrLv: 0,
                refineLv: 0,
                stoneEnough: false,
                goldEnough: false
            };
            var curLvl = self.getStrLvlByEquipPart(part);
            var refineLvl = parseInt(self.getRefLvlByEquipPart(opt.part)); //当前精炼等级
            var cfg_t_strengthRefine = mo.getJSONWithFileName(gc.cfg_t_strengthRefine);
            var needStrLvl = cfg_t_strengthRefine[refineLvl][gc.t_strengthRefine_needStrLvl];
            var costGold = cfg_t_strengthRefine[refineLvl][gc.t_strengthRefine_consumeGold];
            var costStrengthNum = cfg_t_strengthRefine[refineLvl][gc.t_strengthRefine_consumeStr];
            var gold = gd.userCtrl.getGold();
            var strengthNum = gd.userCtrl.getItemNum(gc.c_prop.spItemIdKey.intensify); //拥有强化石数量
            opt.isMax = !cfg_t_strengthRefine[refineLvl + 1];
            opt.strengthLvl = curLvl;
            opt.refineLv = refineLvl;
            opt.needStrLv = needStrLvl;
            opt.stone = strengthNum;
            opt.gold = gold;
            if (opt.isMax) {
                opt.curRefineInfo = gd.equipCtrl.queryRefineLvlInfo(tempId, refineLvl);
            }
            else {
                opt.curRefineInfo = gd.equipCtrl.queryRefineLvlInfo(tempId, refineLvl);
                opt.nextRefineInfo = gd.equipCtrl.queryRefineLvlInfo(tempId, refineLvl + 1);
                opt.costStone = costStrengthNum;
                opt.costGold = costGold;
                opt.stoneEnough = strengthNum >= costStrengthNum;
                opt.goldEnough = gold >= costGold;
            }
            return opt;
        };
        p.strength = function (opt, cb, target) {
            var self = this;
            var tempId = self.get(gc.dsConsts.HeroEntity.tempId);
            if (opt.strMax)
                return mo.showMsg("已达到强化上限");
            if (!opt.stoneEnough)
                return mo.showMsg("强化石不足");
            if (!opt.goldEnough) {
                gd.userCtrl.noGolds(function () { }, this);
                return;
            }
            var argKeys = gc.iface.a_hero_strength_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.index] = opt.part;
            mo.requestWaiting4Server(gc.iface.a_hero_strength, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                self.updateEntity(heroData);
                cb.call(target, data);
                self.pushNotify(self.__class.ON_EQUIP_STR);
            });
        };
        /**
         * 装备强化精炼
         * @param cb
         * @param target  [是否成功,强化后等级,是否暴击,是否降级]
         */
        p.equipRefine = function (opt, cb, target) {
            var self = this;
            var refineLvl = parseInt(self.getRefLvlByEquipPart(opt.part)); //当前精炼等级
            var cfg_t_strengthRefine = mo.getJSONWithFileName(gc.cfg_t_strengthRefine);
            if (!cfg_t_strengthRefine[refineLvl + 1])
                return mo.showMsg("精炼等级已达最高");
            var needStrLvl = cfg_t_strengthRefine[refineLvl][gc.t_strengthRefine_needStrLvl];
            if (needStrLvl > opt.strengthLvl)
                return mo.showMsg("本装备栏强化至" + needStrLvl + "时可继续精炼");
            var costGold = cfg_t_strengthRefine[refineLvl][gc.t_strengthRefine_consumeGold];
            var costStrengthNum = cfg_t_strengthRefine[refineLvl][gc.t_strengthRefine_consumeStr];
            if (opt.gold < costGold) {
                gd.userCtrl.noGolds(function () { }, this);
                return;
            }
            if (opt.stone < costStrengthNum)
                return mo.showMsg("强化石不足");
            var tempId = self.get(gc.dsConsts.HeroEntity.tempId);
            var argKeys = gc.iface.a_hero_equipRefine_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.index] = opt.part;
            mo.requestWaiting4Server(gc.iface.a_hero_equipRefine, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var equipRefineArr = data[gc.dsConsts.ExUserData.strengthArr];
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                self.updateEntity(heroData);
                cb.call(target, equipRefineArr);
            });
        };
        p.getUpStarOpt = function (part) {
            var self = this;
            var tempId = self.getEquipTempIdByPart(part);
            if (!tempId)
                return null;
            var opt = {
                part: part,
                curProp: [],
                nextProp: [],
                starLvl: 0,
                stone: 0,
                gold: 0,
                costStone: 0,
                costGold: 0,
                strengthLimit: 0,
                strMax: false,
                stoneEnough: false,
                goldEnough: false,
                topLv: 0,
                topCostStone: 0,
                topCostGold: 0,
                topStoneEnough: false,
                topGoldEnough: false,
                topNeed: false,
                topMax: false,
                topCurProp: []
            };
            var c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var gold = gd.userCtrl.get(gc.dsConsts.UserEntity.gold);
            var starLvl = self.getStarLvlByEquipPart(part); //当前升星等级
            //var starLimit = c_game[gc.id_c_game.initCfg][3];      //升星上限
            var cLvlId = 0;
            if (starLvl != 0)
                cLvlId = starLvl;
            var costGold = c_lvl[cLvlId][gc.c_lvl_upStarGold];
            var starNum = gd.userCtrl.getItemNum(gc.c_prop.spItemIdKey.starStone); //拥有升星石数量
            var costStarNum = c_lvl[cLvlId][gc.c_lvl_upStarNum];
            var starTopArr = self.get(gc.dsConsts.HeroEntity.starTopArr) || [];
            var starTop = starTopArr[opt.part] || 0;
            var maxUpStarLvl = parseInt(c_lvl[starTop][gc.c_lvl_maxUpStarLvl]); //最大升星数级数
            opt.strMax = starLvl >= maxUpStarLvl;
            if (!opt.strMax) {
                opt.costStone = costStarNum;
                opt.costGold = costGold;
                opt.curProp = gd.equipCtrl.queryStarInfo(starLvl);
                opt.nextProp = gd.equipCtrl.queryStarInfo(starLvl + 1);
            }
            else {
                opt.curProp = gd.equipCtrl.queryStarInfo(starLvl);
                opt.nextProp = [starLvl, 0];
            }
            opt.stone = starNum;
            opt.gold = gold;
            opt.strengthLimit = maxUpStarLvl;
            opt.stoneEnough = starNum >= costStarNum;
            opt.goldEnough = gold >= costGold;
            opt.starLvl = starLvl;
            opt.topLv = starTop;
            opt.topMax = !c_lvl[starTop + 1][gc.c_lvl_upStarTop];
            opt.topNeed = maxUpStarLvl <= opt.starLvl && !opt.topMax;
            opt.topCostStone = c_lvl[starTop][gc.c_lvl_topCosNum]; //突破消耗升星石数
            opt.topCostGold = c_lvl[starTop][gc.c_lvl_topCosGold]; //突破消耗金币
            opt.topStoneEnough = (opt.stone >= opt.topCostStone);
            opt.topGoldEnough = (opt.gold >= opt.topCostGold);
            opt.topCurProp = c_lvl[starTop][gc.c_lvl_propertys][part >= 8 ? part - 4 : part]; //[属性类型ID, 加值]
            return opt;
        };
        p.upStar = function (opt, cb, target) {
            var self = this;
            var tempId = self.get(gc.dsConsts.HeroEntity.tempId);
            if (opt.strMax)
                return mo.showMsg("已达到升星上限");
            if (!opt.stoneEnough)
                return mo.showMsg("升星石不足");
            if (!opt.goldEnough) {
                gd.userCtrl.noGolds(function () { }, this);
                return;
            }
            var argKeys = gc.iface.a_hero_upStar_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.index] = opt.part;
            mo.requestWaiting4Server(gc.iface.a_hero_upStar, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                self.updateEntity(heroData);
                cb.call(target, data);
                self.pushNotify(self.__class.ON_EQUIP_UPSTAR);
            });
        };
        /**
         * 升星突破
         * @param cb
         * @param target  [是否成功]
         */
        p.starTop = function (opt, cb, target) {
            var self = this;
            var c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var starTopArr = self.get(gc.dsConsts.HeroEntity.starTopArr) || [];
            var starTop = starTopArr[opt.part] || 0;
            if (!c_lvl[starTop + 1][gc.c_lvl_upStarTop])
                return mo.showMsg("当前升星突破重数已打上限");
            var maxUpStarLvl = c_lvl[starTop][gc.c_lvl_maxUpStarLvl]; //最大升星数级数
            if (maxUpStarLvl > opt.starLvl)
                return mo.showMsg("当前还可以继续升星");
            var topCosNum = c_lvl[starTop][gc.c_lvl_topCosNum]; //突破消耗升星石数
            var topCosGold = c_lvl[starTop][gc.c_lvl_topCosGold]; //突破消耗金币
            var gold = gd.userCtrl.get(gc.dsConsts.UserEntity.gold);
            var starNum = gd.userCtrl.getItemNum(gc.c_prop.spItemIdKey.starStone); //拥有升星石数量
            if (starNum < topCosNum)
                return mo.showMsg("升星石不足");
            if (gold < topCosGold) {
                gd.userCtrl.noGolds(function () { }, this);
                return;
            }
            var tempId = self.get(gc.dsConsts.HeroEntity.tempId);
            var argKeys = gc.iface.a_hero_starTop_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.index] = opt.part;
            mo.requestWaiting4Server(gc.iface.a_hero_starTop, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var wingStrengthArr = data[gc.dsConsts.ExUserData.strengthArr];
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                self.updateEntity(heroData);
                cb.call(target, wingStrengthArr);
            });
        };
        p.getUpGemOpt = function (part) {
            var self = this;
            var tempId = self.getEquipTempIdByPart(part);
            if (!tempId)
                return null;
            var opt = {
                part: part,
                gemLvl: 0,
                gemId: 0,
                gemDebrisId: 0,
                gemDebris: 0,
                costGemDebris: 0,
                strMax: false,
                stoneEnough: false,
                nextNeedLvl: 0,
                roleLvlEnough: false
            };
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var cfg_c_gem = mo.getJSONWithFileName(gc.cfg_c_gem);
            var c_gem = self.getGemInfoByPart(part);
            var gemId = c_gem[gc.c_gem_id];
            var lvl = c_gem[gc.c_gem_gemLvl];
            var itemID = 0; //需要宝石碎片id
            var count = 0; //需要宝石碎片数量
            var nextGemId = parseInt(gemId) + 1;
            var gemLvlLimitStart = parseInt(c_game[gc.id_c_game.gemLvlLimit][0].split(",")[0]); //宝石等级限制开始等级
            var limit = c_game[gc.id_c_game.gemLvlLimit];
            var lastgemLvlLimit = limit[limit.length - 1].split(",");
            if (cfg_c_gem[nextGemId]) {
                itemID = cfg_c_gem[gemId][gc.c_gem_itemID]; //需要宝石碎片id
                count = cfg_c_gem[gemId][gc.c_gem_count]; //需要宝石碎片数量
                var gemLvl = cfg_c_gem[nextGemId][gc.c_gem_gemLvl]; //宝石等级
                if (gemLvl >= gemLvlLimitStart) {
                    if (gemLvl >= lastgemLvlLimit[0]) {
                        opt.nextNeedLvl = lastgemLvlLimit[1];
                    }
                    for (var i = 0; i < c_game[gc.id_c_game.gemLvlLimit].length; i++) {
                        if (parseInt(c_game[gc.id_c_game.gemLvlLimit][i].split(",")[0]) > gemLvl) {
                            opt.nextNeedLvl = parseInt(c_game[gc.id_c_game.gemLvlLimit][i - 1].split(",")[1]);
                            break;
                        }
                    }
                }
                else {
                    var c_open = mo.getJSONWithFileName(gc.cfg_c_open);
                    opt.nextNeedLvl = c_open[gc.id_c_open.stone][gc.c_open_lvlRequired];
                }
            }
            else {
                opt.strMax = true; //已经升到最高级
                opt.nextNeedLvl = -1;
            }
            var gemCount = gd.userCtrl.getItemNum(itemID); //拥有宝石碎片数量
            opt.gemLvl = lvl;
            opt.gemId = gemId;
            opt.gemDebrisId = itemID;
            opt.gemDebris = gemCount;
            if (!opt.strMax) {
                opt.costGemDebris = count;
            }
            opt.stoneEnough = opt.gemDebris >= opt.costGemDebris;
            opt.roleLvlEnough = (gd.userCtrl.getLvl() >= opt.nextNeedLvl);
            return opt;
        };
        p.upGem = function (opt, cb, target) {
            var self = this;
            var tempId = self.get(gc.dsConsts.HeroEntity.tempId);
            var lvl = gd.userCtrl.getLvl();
            if (opt.strMax)
                return mo.showMsg("已升到最高等级");
            if (lvl < opt.nextNeedLvl)
                return mo.showMsg("等级不足");
            if (opt.gemDebris < opt.costGemDebris)
                return mo.showMsg("宝石碎片数量不足");
            var argKeys = gc.iface.a_hero_upGem_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.index] = opt.part;
            mo.requestWaiting4Server(gc.iface.a_hero_upGem, args, function (data) {
                var userData = {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                self.updateEntity(heroData);
                cb.call(target, data);
                self.pushNotify(self.__class.ON_EQUIP_UPGEM);
            });
        };
        //获取翅膀数据           翅膀[id,等级,星级,当前星经验]
        p.getWingOpt = function () {
            var self = this;
            var opt = {
                wingId: 0,
                wingIdLimit: 0,
                wingName: "",
                wingLvl: 0,
                gold: 0,
                diamond: 0,
                plumageCount: 0,
                nowPro: {},
                nextPro: {},
                nowStarCount: 0,
                nowExp: 0,
                needExp: 0,
                nowExpPer: 0,
                comTrain: 0,
                advTrain: 0,
                featherCount: 0,
                strengthOpenLvl: 0,
                leftLvl: 0,
                rightLvl: 0 //右边翅膀等级
            };
            var nowObj = {};
            var nextObj = {};
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var t_wing = mo.getJSONWithFileName(gc.cfg_t_wing);
            var t_wingStr = mo.getJSONWithFileName(gc.cfg_t_wingStrength);
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag);
            var gold = gd.userCtrl.get(gc.dsConsts.UserEntity.gold);
            var diamond = gd.userCtrl.get(gc.dsConsts.UserEntity.diamond);
            var plumage = bag[gc.c_prop.spItemIdKey.plumage] || 0;
            var idLimit = c_game[gc.id_c_game.initCfg][4];
            var wingData = self.wingData;
            var wingId = wingData[0];
            var wingLvl = wingData[1] || 0;
            var nowExp = parseInt(wingData[3] || 0);
            var needExp = parseInt(t_wing[wingId][gc.t_wing_needExp]);
            var nowExpPer = 0;
            var leftLv = parseInt(wingData[4] || 0);
            var rightLv = parseInt(wingData[5] || 0);
            if (needExp != 0) {
                nowExpPer = nowExp / needExp * 100;
            }
            nowExpPer = parseInt(nowExpPer.toString());
            nowObj[gc.c_prop.heroPropKey.attackTemp] = t_wing[wingId][gc.t_wing_attack] * (1 + t_wingStr[leftLv][gc.t_wingStrength_attack] / 10000) >> 0;
            nowObj[gc.c_prop.heroPropKey.maxHpTemp] = t_wing[wingId][gc.t_wing_maxHp] * (1 + t_wingStr[rightLv][gc.t_wingStrength_maxHp] / 10000) >> 0;
            nowObj[gc.c_prop.heroPropKey.defenceTemp] = t_wing[wingId][gc.t_wing_defence] * (1 + t_wingStr[leftLv][gc.t_wingStrength_defence] / 10000) >> 0;
            nowObj[gc.c_prop.heroPropKey.magicDefenceTemp] = t_wing[wingId][gc.t_wing_magicDefence] * (1 + t_wingStr[rightLv][gc.t_wingStrength_magicDefence] / 10000) >> 0;
            if (t_wing[wingId + 1]) {
                nextObj[gc.c_prop.heroPropKey.attackTemp] = t_wing[wingId + 1][gc.t_wing_attack] * (1 + t_wingStr[leftLv][gc.t_wingStrength_attack] / 10000) >> 0;
                nextObj[gc.c_prop.heroPropKey.maxHpTemp] = t_wing[wingId + 1][gc.t_wing_maxHp] * (1 + t_wingStr[rightLv][gc.t_wingStrength_maxHp] / 10000) >> 0;
                nextObj[gc.c_prop.heroPropKey.defenceTemp] = t_wing[wingId + 1][gc.t_wing_defence] * (1 + t_wingStr[leftLv][gc.t_wingStrength_defence] / 10000) >> 0;
                nextObj[gc.c_prop.heroPropKey.magicDefenceTemp] = t_wing[wingId + 1][gc.t_wing_magicDefence] * (1 + t_wingStr[rightLv][gc.t_wingStrength_magicDefence] / 10000) >> 0;
            }
            opt.wingId = wingId;
            opt.wingIdLimit = idLimit;
            opt.wingName = t_wing[wingId][gc.t_wing_name];
            opt.wingLvl = wingLvl;
            opt.gold = gold;
            opt.diamond = diamond;
            opt.plumageCount = plumage;
            opt.nowPro = nowObj;
            opt.nextPro = nextObj;
            opt.nowStarCount = wingData[2] || 0;
            opt.nowExp = nowExp;
            opt.needExp = needExp;
            opt.nowExpPer = nowExpPer;
            opt.comTrain = c_game[gc.id_c_game.wingCrit][4];
            opt.advTrain = c_game[gc.id_c_game.wingCrit][3];
            opt.featherCount = bag[gc.c_prop.spItemIdKey.plumage] || 0;
            opt.strengthOpenLvl = parseInt(c_game[gc.id_c_game.wingCrit][7]); //翅膀强化开启等级
            opt.leftLvl = leftLv; //左翅强化等级
            opt.rightLvl = rightLv; //右翅强化等级
            return opt;
        };
        //翅膀激活
        p.wingActivate = function (cb, target) {
            var self = this;
            var tempId = self.get(gc.dsConsts.HeroEntity.tempId);
            var argKeys = gc.iface.a_hero_wingActivate_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            mo.requestWaiting4Server(gc.iface.a_hero_wingActivate, args, function (data) {
                self.updateEntity(data);
                cb.call(target, data);
                self.pushNotify(self.__class.ON_WING_CHANGED);
            });
        };
        //翅膀普通培养
        p.wingComFos = function (opt, cb, target) {
            var self = this;
            self.wingFos(opt, gc.c_prop.wingFosTypeKey.comFoster, cb, target);
        };
        //翅膀高级培养
        p.wingAdvFos = function (opt, cb, target) {
            var self = this;
            self.wingFos(opt, gc.c_prop.wingFosTypeKey.advFoster, cb, target);
        };
        /**
         * 翅膀培养
         * @param fosType 培养类型
         * @param cb
         * @param target
         */
        p.wingFos = function (opt, fosType, cb, target) {
            var self = this;
            var tempId = self.get(gc.dsConsts.HeroEntity.tempId);
            if (opt.wingId >= opt.wingIdLimit)
                return mo.showMsg("翅膀等级已到上限");
            switch (fosType) {
                case gc.c_prop.wingFosTypeKey.comFoster:
                    if (opt.gold < opt.comTrain) {
                        gd.userCtrl.noGolds(function () { }, this);
                        return;
                    }
                    break;
                case gc.c_prop.wingFosTypeKey.advFoster:
                    if (opt.plumageCount <= 0) {
                        if (opt.diamond < opt.advTrain)
                            return mo.showMsg(gc.id_c_msgCode.noDiamond);
                    }
                    break;
            }
            var argKeys = gc.iface.a_hero_wingFos_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.fosType] = fosType;
            mo.requestWaiting4Server(gc.iface.a_hero_wingFos, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var wingExp = data[gc.dsConsts.ExUserData.wingExp];
                var isWingCrit = data[gc.dsConsts.ExUserData.isWingCrit];
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                self.updateEntity(heroData);
                if (wingExp)
                    g_msg.UIMsgTextCtrl.push("+" + wingExp);
                cb.call(target, [wingExp, isWingCrit]);
            });
        };
        /**
         * 翅膀强化
         * @param part 部位
         * @param isReplace 是否元宝替代
         * @param cb
         * @param target  [是否成功,强化后等级,是否暴击,是否降级]
         */
        p.wingStrength = function (opt, part, isReplace, cb, target) {
            var self = this;
            var cfg_t_wingStrength = mo.getJSONWithFileName(gc.cfg_t_wingStrength);
            var wingLvl = opt.wingLvl;
            var openLvl = opt.strengthOpenLvl; //翅膀强化开启等级
            if (wingLvl < openLvl)
                return mo.showMsg(gc.id_c_msgCode.wingLevelRequire, openLvl);
            var lvl = 0;
            if (part == gc.c_prop.wingStrengthKey.left) {
                lvl = opt.leftLvl; //左翅强化等级
            }
            else if (part == gc.c_prop.wingStrengthKey.right) {
                lvl = opt.rightLvl; //右翅强化等级
            }
            else {
                return mo.showMsg("翅膀强化位置错误");
            }
            //var id = parseInt(part.toString() + (lvl).toString);
            if (!cfg_t_wingStrength[lvl])
                return mo.showMsg("翅膀强化等级已到上限");
            if (parseInt(cfg_t_wingStrength[lvl][gc.t_wingStrength_needWingLvl]) > wingLvl)
                return mo.showMsg("翅膀到达" + cfg_t_wingStrength[lvl][gc.t_wingStrength_needWingLvl] + "阶后可继续强化");
            var tempId = self.get(gc.dsConsts.HeroEntity.tempId);
            var argKeys = gc.iface.a_hero_wingStrength_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.part] = part;
            args[argKeys.isReplace] = isReplace;
            mo.requestWaiting4Server(gc.iface.a_hero_wingStrength, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var wingStrengthArr = data[gc.dsConsts.ExUserData.strengthArr];
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                self.updateEntity(heroData);
                cb.call(target, wingStrengthArr);
            });
        };
        /**
         * 翅膀升级
         * @param cb
         * @param target
         */
        p.upWing = function (cb, target) {
            var self = this;
            var tempId = self.get(gc.dsConsts.HeroEntity.tempId);
            var argKeys = gc.iface.a_hero_upWing_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            mo.requestWaiting4Server(gc.iface.a_hero_upWing, args, function (data) {
                self.updateEntity(data);
                cb.call(target, data);
                self.pushNotify(self.__class.ON_WING_CHANGED);
            });
        };
        HeroEntityCtrl.createNewEnemy = function (heroData, fightData, otherData) {
            var ctrl = new HeroEntityCtrl();
            ctrl.fightData = fightData;
            ctrl.otherData = otherData;
            ctrl.isSelf = false;
            ctrl.init(heroData);
            return ctrl;
        };
        //装备装备
        p.changeEquip = function (index, equipId, cb, target) {
            var self = this;
            var tempId = self.tempId;
            var lvl = gd.userCtrl.getLvl();
            var equipBag = gd.userCtrl.getEquipBag();
            var t_itemEquip = mo.getJSONWithFileName(gc.cfg_t_itemEquip);
            var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            var job = t_itemEquip[equipBag[equipId][0]][gc.t_itemEquip_job]; //职业
            var type = t_itemEquip[equipBag[equipId][0]][gc.t_itemEquip_type]; //装备类型
            var equipLvl = t_item[equipBag[equipId][0]][gc.t_item_level]; //等级需求
            var equipType = 0;
            switch (parseInt(index)) {
                case gc.c_prop.heroEquipIndexKey.weapon:
                    equipType = gc.c_prop.equipTypeKey.weapon;
                    break;
                case gc.c_prop.heroEquipIndexKey.clothes:
                    equipType = gc.c_prop.equipTypeKey.clothes;
                    break;
                case gc.c_prop.heroEquipIndexKey.bracelet1:
                    equipType = gc.c_prop.equipTypeKey.bracelet;
                    break;
                case gc.c_prop.heroEquipIndexKey.ring1:
                    equipType = gc.c_prop.equipTypeKey.ring;
                    break;
                case gc.c_prop.heroEquipIndexKey.ring2:
                    equipType = gc.c_prop.equipTypeKey.ring;
                    break;
                case gc.c_prop.heroEquipIndexKey.bracelet2:
                    equipType = gc.c_prop.equipTypeKey.bracelet;
                    break;
                case gc.c_prop.heroEquipIndexKey.helmet:
                    equipType = gc.c_prop.equipTypeKey.helmet;
                    break;
                case gc.c_prop.heroEquipIndexKey.necklace:
                    equipType = gc.c_prop.equipTypeKey.necklace;
                    break;
            }
            if (!equipBag[equipId])
                return mo.showMsg("背包没有该装备");
            if (equipBag[equipId][3] == 1)
                return mo.showMsg("该装备已装备");
            if (type != equipType)
                return mo.showMsg("该装备不属于该部位");
            if (job != tempId)
                return mo.showMsg("不属于该职业装备");
            if (lvl < equipLvl)
                return mo.showMsg("等级不够");
            var isChg = self.isPartEquiped(index);
            var argKeys = gc.iface.a_equip_changeEquip_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.index] = index;
            args[argKeys.equipId] = equipId;
            mo.requestWaiting4Server(gc.iface.a_equip_changeEquip, args, function (data) {
                var userData = {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                self.updateEntity(heroData);
                cb.call(target, data);
                self.pushNotify(self.__class.ON_EQUIP_CHANGED, tempId, index, equipId);
                if (isChg) {
                    g_cache.recordGuideDone(g_consts.GUIDE_LCK.eqpChged);
                }
                else {
                    g_cache.recordGuideDone(g_consts.GUIDE_LCK.everEquiped);
                }
            });
        };
        //判断装备是否需要更换        [part,part,...]
        p.isEquipReddot = function () {
            var self = this;
            var returnArr = [];
            if (!self.isSelf)
                return returnArr;
            var tempId = self.get(gc.dsConsts.HeroEntity.tempId);
            var cfg_t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            var cfg_t_itemEquip = mo.getJSONWithFileName(gc.cfg_t_itemEquip);
            var equipData = self.get(gc.dsConsts.HeroEntity.equipData); //{"部位":物品id,....}
            var equipBag = gd.userCtrl.getEquipBag() || {}; //装备背包 {"1":[物品id,[随到的属性值],评价,是否穿戴],...}  "1":指定id,累加上去的
            var lvl = gd.userCtrl.getLvl();
            for (var key in equipBag) {
                var itemId = equipBag[key][0];
                var isWear = equipBag[key][3]; //是否装备
                var needLvl = cfg_t_item[itemId][gc.t_item_level]; //需求等级
                var job = cfg_t_itemEquip[itemId][gc.t_itemEquip_job]; //装备职业
                //剔除等级不足的装备
                if (lvl < needLvl)
                    continue;
                //剔除已装备的物品
                if (isWear == 1)
                    continue;
                //剔除不同职业的装备
                if (job != tempId)
                    continue;
                var itemId = equipBag[key][0];
                var evaluate = equipBag[key][2]; //评价
                var type = cfg_t_itemEquip[itemId][gc.t_itemEquip_type]; //装备类型
                var index = [];
                switch (type) {
                    case gc.c_prop.equipTypeKey.weapon:
                        index = [gc.c_prop.heroEquipIndexKey.weapon];
                        break;
                    case gc.c_prop.equipTypeKey.clothes:
                        index = [gc.c_prop.heroEquipIndexKey.clothes];
                        break;
                    case gc.c_prop.equipTypeKey.helmet:
                        index = [gc.c_prop.heroEquipIndexKey.helmet];
                        break;
                    case gc.c_prop.equipTypeKey.necklace:
                        index = [gc.c_prop.heroEquipIndexKey.necklace];
                        break;
                    case gc.c_prop.equipTypeKey.ring:
                        index = [gc.c_prop.heroEquipIndexKey.ring1, gc.c_prop.heroEquipIndexKey.ring2];
                        break;
                    case gc.c_prop.equipTypeKey.bracelet:
                        index = [gc.c_prop.heroEquipIndexKey.bracelet1, gc.c_prop.heroEquipIndexKey.bracelet2];
                        break;
                }
                for (var i = 0; i < index.length; i++) {
                    var partEquipEvaluate = 0; //穿戴装备评价值
                    if (equipData[index[i]])
                        partEquipEvaluate = equipBag[equipData[index[i]]][2];
                    if (evaluate > partEquipEvaluate) {
                        if (returnArr.indexOf(index[i]) == -1)
                            returnArr.push(index[i]);
                    }
                }
            }
            return returnArr;
        };
        //判断特戒可以突破或者合成     [part,part,...]
        p.isTringReddot = function () {
            var self = this;
            var returnArr = [];
            if (!self.isSelf)
                return returnArr;
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var cfg_c_compound = mo.getJSONWithFileName(gc.cfg_c_compound);
            var bag = gd.userCtrl.getBag();
            var equipData = self.get(gc.dsConsts.HeroEntity.equipData);
            for (var i = gc.c_prop.heroEquipIndexKey.paralysisRing; i <= gc.c_prop.heroEquipIndexKey.harmRing; i++) {
                var value = 0;
                var need = 0;
                if (equipData[i]) {
                    if (cfg_c_compound[parseInt(equipData[i]) + 1]) {
                        value = bag[cfg_c_compound[parseInt(equipData[i]) + 1][gc.c_compound_reqItems1]] || 0;
                        need = cfg_c_compound[parseInt(equipData[i]) + 1][gc.c_compound_reqCount1];
                        var needLvl = cfg_c_compound[parseInt(equipData[i]) + 1][gc.c_compound_needLvl];
                        var lvl = gd.userCtrl.getLvl();
                        if (value >= need && lvl >= needLvl)
                            returnArr.push(i);
                    }
                }
                else {
                    value = bag[cfg_c_compound[cfg_c_game[gc.id_c_game.parRingCfg][i - 4]][gc.c_compound_reqItems1]] || 0;
                    need = cfg_c_compound[cfg_c_game[gc.id_c_game.parRingCfg][i - 4]][gc.c_compound_reqCount1];
                    if (value >= need || bag[cfg_c_game[gc.id_c_game.parRingCfg][i - 4]])
                        returnArr.push(i);
                }
            }
            return returnArr;
        };
        //判断技能是否可以升级的接口，金币达到，cd没有的时候   [index,index,...]
        p.isSkillReddot = function () {
            var self = this;
            var returnArr = [];
            var lvl = gd.userCtrl.getLvl();
            var gold = gd.userCtrl.getGold();
            var skillCd = gd.userCtrl.get(gc.dsConsts.UserEntity.skillCd); //技能CD
            var lastSkillTime = gd.userCtrl.get(gc.dsConsts.UserEntity.lastSkillTime); //最后点技能时间
            var cfg_c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var skillLvlArr = self.get(gc.dsConsts.HeroEntity.skillLvlArr);
            var cdLimit = cfg_c_game[gc.id_c_game.skillRate][5]; //CD上限
            var needLvlArr = cfg_c_game[gc.id_c_game.skillRate][4].split(","); //开启技能需要等级
            var skillTime = Date.newDate(lastSkillTime).addSeconds(skillCd); //当前技能时间
            var newSkillCd = skillCd;
            var skillCount = needLvlArr.length;
            for (var i = 0; i < skillCount; i++) {
                var skillNeedLvl = needLvlArr[i];
                var skillLvl = skillLvlArr[i] || 1; //当前技能等级
                var needGold = cfg_c_lvl[parseInt(skillLvl) + 1][gc.c_lvl_skillNeedGold];
                if (lvl < skillNeedLvl)
                    continue;
                if (skillLvl >= lvl)
                    continue;
                newSkillCd = (skillTime.getTime() - Date.newDate().getTime()) / 1000;
                if (skillCd > cdLimit) {
                    if (newSkillCd > 0)
                        continue;
                }
                else {
                    if (newSkillCd > cdLimit)
                        continue;
                }
                if (gold < needGold)
                    continue;
                returnArr.push(i);
            }
            return returnArr;
        };
        //判断境界是否可以穿戴或者升级    [是否可升级(false,true),[穿戴下标index,index,...]]
        p.isStateReddot = function () {
            var self = this;
            var returnArr = [true, []];
            var lvl = gd.userCtrl.getLvl();
            var bag = gd.userCtrl.getBag() || {};
            var cfg_t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            var cfg_c_realm = mo.getJSONWithFileName(gc.cfg_c_realm);
            var realmLvl = self.get(gc.dsConsts.HeroEntity.realmLvl); //境界等级
            var realmArr = self.get(gc.dsConsts.HeroEntity.realmArr) || []; //符文块数组
            if (realmArr.length < 6)
                returnArr[0] = false;
            for (var i = 0; i < realmArr.length; i++) {
                if (realmArr[i] == null)
                    returnArr[0] = false;
            }
            var reqItems = cfg_c_realm[realmLvl][gc.c_realm_reqItems]; //所需符文块
            for (var i = 0; i < reqItems.length; i++) {
                if (reqItems[i] != realmArr[i])
                    returnArr[0] = false;
            }
            var arr = [];
            for (var i = 0; i <= 5; i++) {
                var runeId = reqItems[i]; //符文块id
                if (realmArr[i] == runeId)
                    continue;
                if (!bag[runeId] || bag[runeId] == 0)
                    continue;
                var needLvl = cfg_t_item[runeId][gc.t_item_level]; //装备需要等级
                if (lvl < needLvl)
                    continue;
                arr.push(i);
            }
            returnArr[1] = arr;
            return returnArr;
        };
        //是否可强化  [index,index,....]
        p.isStrengthReddot = function () {
            var self = this;
            var returnArr = [];
            var gold = gd.userCtrl.getGold();
            var bag = gd.userCtrl.getBag() || {};
            var cfg_c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var strengthLimit = cfg_c_game[gc.id_c_game.initCfg][2]; //强化上限
            var strengthNum = bag[gc.c_prop.spItemIdKey.intensify] || 0; //拥有强化石数量
            var intensifyArr = self.get(gc.dsConsts.HeroEntity.intensifyArr) || [];
            var equipData = self.get(gc.dsConsts.HeroEntity.equipData) || {};
            for (var i = gc.c_prop.heroEquipIndexKey.weapon; i <= gc.c_prop.heroEquipIndexKey.necklace; i++) {
                //筛去特戒
                if (i == gc.c_prop.heroEquipIndexKey.paralysisRing || i == gc.c_prop.heroEquipIndexKey.reviveRing || i == gc.c_prop.heroEquipIndexKey.protectRing || i == gc.c_prop.heroEquipIndexKey.harmRing)
                    continue;
                if (!equipData[i])
                    continue;
                var strengthLvl = intensifyArr[i] || 1; //当前强化等级
                var costGold = cfg_c_lvl[strengthLvl][gc.c_lvl_equipStrengthGold];
                var costStrengthNum = cfg_c_lvl[strengthLvl][gc.c_lvl_equipStrengthNum];
                if (strengthLvl >= strengthLimit)
                    continue;
                if (gold < costGold)
                    continue;
                if (strengthNum < costStrengthNum)
                    continue;
                returnArr.push(i);
            }
            return returnArr;
        };
        //是否可升星  [index,index,....]
        p.isUpStarReddot = function () {
            var self = this;
            var returnArr = [];
            var gold = gd.userCtrl.getGold();
            var bag = gd.userCtrl.getBag() || {};
            var cfg_c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var starTopArr = self.get(gc.dsConsts.HeroEntity.starTopArr) || [];
            var starNum = bag[gc.c_prop.spItemIdKey.starStone] || 0; //拥有升星石数量
            var starArr = self.get(gc.dsConsts.HeroEntity.starArr) || [];
            var equipData = self.get(gc.dsConsts.HeroEntity.equipData) || {};
            for (var i = gc.c_prop.heroEquipIndexKey.weapon; i <= gc.c_prop.heroEquipIndexKey.necklace; i++) {
                var starTop = starTopArr[i] || 0;
                var starLimit = parseInt(cfg_c_lvl[starTop][gc.c_lvl_maxUpStarLvl]); //最大升星数级数
                //筛去特戒
                if (i == gc.c_prop.heroEquipIndexKey.paralysisRing || i == gc.c_prop.heroEquipIndexKey.reviveRing || i == gc.c_prop.heroEquipIndexKey.protectRing || i == gc.c_prop.heroEquipIndexKey.harmRing)
                    continue;
                if (!equipData[i])
                    continue;
                var starLvl = starArr[i] || 1; //当前升星等级
                var costGold = cfg_c_lvl[starLvl][gc.c_lvl_upStarGold];
                var costStarNum = cfg_c_lvl[starLvl][gc.c_lvl_upStarNum];
                if (starLvl >= starLimit)
                    continue;
                if (gold < costGold)
                    continue;
                if (starNum < costStarNum)
                    continue;
                returnArr.push(i);
            }
            return returnArr;
        };
        //是否可升宝石等级  [index,index,....]
        p.isUpGemReddot = function () {
            var self = this;
            var returnArr = [];
            var bag = gd.userCtrl.getBag() || {};
            var cfg_c_gem = mo.getJSONWithFileName(gc.cfg_c_gem);
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var gemArr = self.get(gc.dsConsts.HeroEntity.gemArr) || [];
            var equipData = self.get(gc.dsConsts.HeroEntity.equipData) || {};
            for (var i = gc.c_prop.heroEquipIndexKey.weapon; i <= gc.c_prop.heroEquipIndexKey.necklace; i++) {
                //筛去特戒
                if (i == gc.c_prop.heroEquipIndexKey.paralysisRing || i == gc.c_prop.heroEquipIndexKey.reviveRing || i == gc.c_prop.heroEquipIndexKey.protectRing || i == gc.c_prop.heroEquipIndexKey.harmRing)
                    continue;
                if (!equipData[i])
                    continue;
                var gemInitialIndex = i;
                if (i > 7)
                    gemInitialIndex = i - 4;
                var gemId = gemArr[i] || cfg_c_game[gc.id_c_game.gemInitial][gemInitialIndex];
                var gemIdLimit = cfg_c_game[gc.id_c_game.gemLimit][gemInitialIndex]; //宝石id上限
                var itemID = cfg_c_gem[gemId][gc.c_gem_itemID]; //需要宝石碎片id
                var count = cfg_c_gem[gemId][gc.c_gem_count]; //需要宝石碎片数量
                var gemCount = bag[itemID] || 0; //拥有宝石碎片数量
                if (gemId >= gemIdLimit)
                    continue;
                var gemLvl = parseInt(cfg_c_gem[gemId][gc.c_gem_gemLvl]) + 1; //宝石等级
                var lvl = gd.userCtrl.getLvl();
                var gemLvlLimitStart = parseInt(cfg_c_game[gc.id_c_game.gemLvlLimit][0].split(",")[0]); //宝石等级限制开始等级
                var isLvl = false;
                if (gemLvl >= gemLvlLimitStart) {
                    for (var j = 0; j < cfg_c_game[gc.id_c_game.gemLvlLimit].length; j++) {
                        if (parseInt(cfg_c_game[gc.id_c_game.gemLvlLimit][j].split(",")[0]) > gemLvl) {
                            if (lvl < parseInt(cfg_c_game[gc.id_c_game.gemLvlLimit][j - 1].split(",")[1]))
                                isLvl = true;
                            break;
                        }
                    }
                }
                if (isLvl)
                    continue;
                if (gemCount < count)
                    continue;
                returnArr.push(i);
            }
            return returnArr;
        };
        //获取英雄境界列表 【境界id，  [0,1,2,3,4,5,6]，  可穿戴下标【0,5】，  是否可以升级境界】
        p.getHeroRealmList = function () {
            var self = this;
            var listObj = [];
            var num = 0;
            var isUp = 0;
            var indexArr = [];
            var c_realm = mo.getJSONWithFileName(gc.cfg_c_realm);
            var c_compound = mo.getJSONWithFileName(gc.cfg_c_compound);
            var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            var lvl = gd.userCtrl.getLvl();
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag);
            var realmLvl = self.get(gc.dsConsts.HeroEntity.realmLvl);
            var realmArr = self.get(gc.dsConsts.HeroEntity.realmArr);
            var reqItems = c_realm[realmLvl][gc.c_realm_reqItems]; //所需符文块
            for (var i = 0; i < reqItems.length; i++) {
                if (reqItems[i] == realmArr[i])
                    num += 1;
                if (realmArr[i] == null || !realmArr[i]) {
                    if (bag[reqItems[i]] && bag[reqItems[i]] >= 1) {
                        if (lvl >= t_item[reqItems[i]][gc.t_item_level])
                            indexArr.push(i);
                    }
                    else if (gd.heroCtrl.isRuneCom(reqItems[i]) && gd.heroCtrl.canRuneCom(reqItems[i]) == 1) {
                        if (lvl >= t_item[reqItems[i]][gc.t_item_level])
                            indexArr.push(i);
                    }
                }
            }
            if (realmArr.length == 6 && num == 6)
                isUp = 1;
            listObj[0] = realmLvl;
            listObj[1] = realmArr;
            listObj[2] = indexArr;
            listObj[3] = isUp;
            return listObj;
        };
        //获取英雄境界对应位置符文块id
        p.getHeroRealmRune = function (index) {
            var self = this;
            var c_realm = mo.getJSONWithFileName(gc.cfg_c_realm);
            var getRealmLvl = self.get(gc.dsConsts.HeroEntity.realmLvl);
            var realmLvl = getRealmLvl == 0 ? 0 : getRealmLvl;
            var runeId = c_realm[realmLvl][gc.c_realm_reqItems][index]; //符文块id
            return runeId;
        };
        HeroEntityCtrl.ON_EQUIP_CHANGED = "onEquipChanged";
        HeroEntityCtrl.ON_EQUIP_STR = "onEquipStr";
        HeroEntityCtrl.ON_EQUIP_UPSTAR = "onEquipStar";
        HeroEntityCtrl.ON_WING_CHANGED = "ON_WING_CHANGED";
        HeroEntityCtrl.ON_EQUIP_UPGEM = "onEquipUpGem";
        HeroEntityCtrl.ON_SKILL_CHANGED = "ON_SKILL_CHANGED";
        HeroEntityCtrl.ON_GIFT_SKILL_CHANGED = "ON_GIFT_SKILL_CHANGED";
        HeroEntityCtrl.Scale_Num = 10000;
        return HeroEntityCtrl;
    })(mo.DataController);
    gd.HeroEntityCtrl = HeroEntityCtrl;
    egret.registerClass(HeroEntityCtrl,"gd.HeroEntityCtrl");
})(gd || (gd = {}));

/**
 * Created by lihex on 1/5/16.
 */
var gd;
(function (gd) {
    var EnemyHeroCtrl = (function (_super) {
        __extends(EnemyHeroCtrl, _super);
        function EnemyHeroCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=EnemyHeroCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            self.isSelf = false;
        };
        p.getLvl = function () {
            return this.heroCtrlList[0].fightData[0];
        };
        p.getUserName = function () {
            return this.heroCtrlList[0].fightData[2];
        };
        //获取主英雄数据
        p.getMainHeroCtrl = function () {
            return this.heroCtrlList[0];
        };
        p.getHeroByIndex = function (index) {
            return this.heroCtrlList[index];
        };
        p.hasHeroByIndex = function (index) {
            return this.heroCtrlList[index] != null;
        };
        p.isToBeOpen = function (index) {
            return false;
        };
        p.isMy4thRole = function (index) {
            return false;
        };
        //获取出战列表
        p.getFightList = function () {
            var self = this;
            var reList = self.heroCtrlList;
            reList.sort(gd.heroCtrl._sortHeroList);
            return reList;
        };
        /**
         * 获取显示英雄数据
         * @param userId
         * @param cb
         * @param target
         */
        p.getShowHeroData = function (userId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_hero_getShowHeroData_args;
            var args = {};
            args[argKeys.userId] = userId;
            mo.requestWaiting4Server(gc.iface.a_hero_getShowHeroData, args, function (data) {
                var heroList = data[gc.dsConsts.ShowHeroData.heroList];
                var otherDataList = data[gc.dsConsts.ShowHeroData.otherDataList];
                var fightData = data[gc.dsConsts.ShowHeroData.fightData];
                var heroCtrlList = [];
                for (var i = 0; i < heroList.length; i++) {
                    var locHero = heroList[i];
                    var locHeroEntityCtrl = gd.HeroEntityCtrl.createNewEnemy(locHero, fightData, otherDataList[i]);
                    heroCtrlList.push(locHeroEntityCtrl);
                }
                self.heroCtrlList = heroCtrlList;
                cb.call(target, heroCtrlList);
            });
        };
        return EnemyHeroCtrl;
    })(mo.DataController);
    gd.EnemyHeroCtrl = EnemyHeroCtrl;
    egret.registerClass(EnemyHeroCtrl,"gd.EnemyHeroCtrl");
    gd.enemyHeroCtrl = EnemyHeroCtrl.getInstance();
})(gd || (gd = {}));

/**
* Created by huanghaiying on 14/12/16.
*/
var gd;
(function (gd) {
    var MailCtrl = (function (_super) {
        __extends(MailCtrl, _super);
        function MailCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=MailCtrl,p=c.prototype;
        p.init = function (data) {
            _super.prototype.init.call(this, data);
            if (!data)
                return;
            this._initFromCfg();
        };
        p.initData = function (data) {
            this.getList(function () { }, this);
        };
        /**
         * 获取列表
         * @returns {Array}
         */
        p.getList = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_mail_getList, {}, function (data) {
                self.init(data);
                //判断是否删除
                self._calAllDel();
                self._sort();
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.mail);
                if (cb)
                    cb.call(target, self._data);
            });
        };
        /**
         * 获取详细
         * items数据结构
         * {hero:{"id":num,..},diamond:100,wipeItem:100}
         * @param id
         * @returns {*}
         */
        p.getInfoById = function (id) {
            var idConst = gc.dsConsts.MailEntity.id;
            for (var i = 0; i < this._data.length; i++) {
                var obj = this._data[i];
                if (obj[idConst] == id) {
                    return obj;
                }
            }
        };
        /**
         * 设置阅读
         * @param id
         * @param cb
         * @param target
         */
        p.setRead = function (id, cb, target) {
            var self = this;
            var info = self.getInfoById(id);
            //已经阅读就不用再请求
            if (info[gc.dsConsts.MailEntity.isRead]) {
                if (cb)
                    cb.call(target);
                return;
            }
            info[gc.dsConsts.MailEntity.isRead] = 1;
            self._calExpireDel(id, self.__class.OPERATE_READ);
            var args = {};
            var argsKey = gc.iface.a_mail_setRead_args;
            args[argsKey.mailId] = id;
            mo.request4Server(gc.iface.a_mail_setRead, args, function () {
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.mail);
                if (cb)
                    cb.call(target);
            });
        };
        /**
         * 提取附件物品
         * @param id
         * @param cb
         * @param target
         * @returns 返回是否删除,true:已经删除，false:木有删除
         */
        p.pickItems = function (id, cb, target) {
            var self = this;
            var args = {};
            var argsKey = gc.iface.a_mail_pickItems_args;
            args[argsKey.mailId] = id;
            mo.requestWaiting4Server(gc.iface.a_mail_pickItems, args, function (data) {
                var isMail = data[gc.dsConsts.ExUserData.isMail];
                if (isMail)
                    mo.showMsg(gc.id_c_msgCode.bagMaxMail);
                var isFull = data[gc.dsConsts.ExUserData.isFull];
                if (isFull)
                    mo.showMsg(gc.id_c_msgCode.bagMax);
                //todo
                //gd.userDataCtrl.handleUseItemInfo(useItemInfo);
                var info = self.getInfoById(id);
                if (info) {
                    info[gc.dsConsts.MailEntity.items] = data[gc.dsConsts.ExUserData.items];
                    info[gc.dsConsts.MailEntity.isPicked] = self._getIsPicked(info);
                }
                self._calExpireDel(id, self.__class.OPERATE_PICK);
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var bagItems = data[gc.dsConsts.ExUserData.bagItems];
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems];
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.mail);
                if (cb)
                    return cb.call(target, !info);
            });
        };
        /**
         * 一键提取
         * @param id
         * @param cb
         * @param target
         * @returns 返回是否删除,true:已经删除，false:木有删除
         */
        p.pickAllItems = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_mail_pickAllItems, {}, function (data) {
                var isMail = data[gc.dsConsts.ExUserData.isMail];
                if (isMail)
                    mo.showMsg(gc.id_c_msgCode.bagMaxMail);
                var isFull = data[gc.dsConsts.ExUserData.isFull];
                if (isFull)
                    mo.showMsg(gc.id_c_msgCode.bagMax);
                //todo
                //gd.userDataCtrl.handleUseItemInfo(useItemInfo);
                var pickAllItemsArr = data[gc.dsConsts.ExUserData.pickAllItemsArr];
                var pickAllItemsList = data[gc.dsConsts.ExUserData.pickAllItemsList];
                for (var i = 0; i < pickAllItemsArr.length; i++) {
                    var info = self.getInfoById(pickAllItemsArr[i]);
                    if (info) {
                        info[gc.dsConsts.MailEntity.items] = pickAllItemsList[i];
                        info[gc.dsConsts.MailEntity.isPicked] = self._getIsPicked(info);
                        self._calExpireDel(pickAllItemsArr[i], self.__class.OPERATE_PICK);
                    }
                }
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var bagItems = data[gc.dsConsts.ExUserData.bagItems];
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems];
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.mail);
                if (cb)
                    return cb.call(target, !info);
            });
        };
        /**
         * 获取是否存在需要阅读或者提取物品的邮件
         * @param cb
         * @param target
         */
        p.isNeedOperate = function (cb, target) {
            mo.requestWaiting4Server(gc.iface.a_mail_getIsNeedOperate, {}, function (data) {
                if (cb)
                    return cb.call(target, data);
            });
        };
        /******************************************************************private********************************************************************/
        /**
         * 计算操作后是否过期删除
         * @param id
         * @param type
         * @private
         */
        p._calExpireDel = function (id, type) {
            var self = this;
            var info = this.getInfoById(id);
            if (type == self.__class.OPERATE_READ) {
                //没有物品则设置删除时间
                if (!info[gc.dsConsts.MailEntity.items]) {
                    info[gc.dsConsts.MailEntity.delTime] = (Date.newDate()).addHours(info[gc.dsConsts.MailEntity.delHours]);
                }
            }
            else if (type == self.__class.OPERATE_PICK) {
                //设置删除时间
                if (info[gc.dsConsts.MailEntity.type] != gc.c_prop.mailTypeKey.equipChest || !info[gc.dsConsts.MailEntity.items] || JSON.stringify(info[gc.dsConsts.MailEntity.items]) == "{}") {
                    info[gc.dsConsts.MailEntity.delTime] = (Date.newDate()).addHours(info[gc.dsConsts.MailEntity.delHours]);
                }
            }
            if (self._isNeedToDel(id)) {
                self._del(id);
            }
        };
        /**
         * 是否需要删除
         * @param id
         * @returns {boolean}
         * @private
         */
        p._isNeedToDel = function (id) {
            var self = this;
            var info = self.getInfoById(id);
            var expireTime = info[gc.dsConsts.MailEntity.expireTime];
            if (expireTime && typeof expireTime == "string")
                expireTime = Date.newDate(expireTime);
            var delTime = info[gc.dsConsts.MailEntity.delTime];
            var nowTime = Date.newDate();
            //判断是否已经过期,或者到达删除时间
            if (expireTime.isBefore(nowTime) || expireTime.equals(nowTime)) {
                return true;
            }
            if (delTime && typeof delTime == "string")
                delTime = Date.newDate(delTime);
            if (delTime && (delTime.isBefore(nowTime) || delTime.equals(nowTime))) {
                return true;
            }
            return false;
        };
        /**
         * 重新排序
         * @private
         */
        p._sort = function () {
            //未查看，已查看但未领取，已查看且已领取
            var arr1 = [], arr2 = [], arr3 = [];
            var mailArr = this._data;
            for (var i = 0; i < mailArr.length; i++) {
                var mailData = mailArr[i];
                var isRead = mailData[gc.dsConsts.MailEntity.isRead];
                var isPicked = mailData[gc.dsConsts.MailEntity.isPicked];
                var items = mailData[gc.dsConsts.MailEntity.items];
                if (items && Object.keys(items).length <= 0) {
                    mailData[gc.dsConsts.MailEntity.items] = null;
                }
                if (!isRead) {
                    arr1.push(mailData);
                }
                else {
                    if (!isPicked) {
                        arr2.push(mailData);
                    }
                    else {
                        arr3.push(mailData);
                    }
                }
            }
            var idKey = gc.dsConsts.MailEntity.id;
            var sortFunc = function (a, b) {
                return a[idKey] > b[idKey] ? -1 : 1;
            };
            arr1.sort(sortFunc);
            arr2.sort(sortFunc);
            arr3.sort(sortFunc);
            this._data = arr1.concat(arr2).concat(arr3);
        };
        /**
         * 剔除删除的
         * @private
         */
        p._calAllDel = function () {
            var self = this;
            var mailArr = this._data;
            for (var i = 0, l = mailArr.length; i < l; i++) {
                var id = mailArr[i][gc.dsConsts.MailEntity.id];
                if (self._isNeedToDel(id)) {
                    mailArr.splice(i, 1);
                    i--;
                }
            }
        };
        /**
         * 删除条记录
         * @param id
         * @private
         */
        p._del = function (id) {
            var mailArr = this._data;
            for (var i = 0, l = mailArr.length; i < l; i++) {
                if (mailArr[i][gc.dsConsts.MailEntity.id] == id) {
                    mailArr.splice(i, 1);
                    break;
                }
            }
        };
        p._initFromCfg = function () {
            var mailArr = this._data;
            var c_mail = mo.getJSONWithFileName(gc.cfg_c_mail);
            for (var i = 0, l = mailArr.length; i < l; i++) {
                var locMailData = mailArr[i];
                var c_mailData = c_mail[locMailData[gc.dsConsts.MailEntity.type]];
                if (c_mailData) {
                    locMailData[gc.dsConsts.MailEntity.fromName] = c_mailData[gc.c_mail_fromName];
                    locMailData[gc.dsConsts.MailEntity.title] = c_mailData[gc.c_mail_title];
                    var locContent = c_mailData[gc.c_mail_content];
                    var locReplaceArgs = locMailData[gc.dsConsts.MailEntity.replaceArgs];
                    if (locReplaceArgs) {
                    }
                    locMailData[gc.dsConsts.MailEntity.content] = locContent;
                }
            }
        };
        //获取是否提取物品
        p._getIsPicked = function (mailData) {
            if (mailData[gc.dsConsts.MailEntity.type] == gc.c_prop.mailTypeKey.equipChest) {
                var items = mailData[gc.dsConsts.MailEntity.items];
                if (Object.keys(items).length > 0) {
                    return 0;
                }
                else {
                    return 1;
                }
            }
            else {
                return 1;
            }
        };
        MailCtrl.OPERATE_READ = 1; //读操作
        MailCtrl.OPERATE_PICK = 2; //提取物品操作
        return MailCtrl;
    })(mo.DataController);
    gd.MailCtrl = MailCtrl;
    egret.registerClass(MailCtrl,"gd.MailCtrl");
    gd.mailCtrl = MailCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Sara on 2016/2/26.
 */
var gd;
(function (gd) {
    var MedalCtrl = (function (_super) {
        __extends(MedalCtrl, _super);
        function MedalCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=MedalCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.UserEntity;
            this.isNewPrintActived = false;
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
        };
        //更新数据
        p.updateData = function (data) {
            var self = this;
            if (!self._data)
                return;
            self.updateEntity(data);
        };
        //判断勋章是否已激活     true 已激活，false未激活
        p.isActiveMedal = function (warPrintedId) {
            var self = this;
            var medalData = gd.userCtrl.get(gc.dsConsts.UserEntity.medalData) || {};
            if (!medalData[warPrintedId])
                return false;
            return true;
        };
        //判断勋章是否可升级  【勋章id，勋章id，。。。】
        p.isMedalUp = function () {
            var self = this;
            var returnArr = [];
            var lvl = gd.userCtrl.getLvl();
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag) || {};
            var medalData = gd.userCtrl.get(gc.dsConsts.UserEntity.medalData) || {};
            var t_medalLvl = mo.getJSONWithFileName(gc.cfg_t_medalLvl);
            for (var key in medalData) {
                var strengthLvl = medalData[key][0];
                var nextMedalLvlId = strengthLvl + 1;
                if (!t_medalLvl[nextMedalLvlId])
                    continue;
                if (lvl < t_medalLvl[nextMedalLvlId][gc.t_medalLvl_needLvl])
                    continue;
                var reqItems = t_medalLvl[nextMedalLvlId][gc.t_medalLvl_reqItems] || []; //所需物品
                //判断合成材料
                var isUP = true;
                for (var i = 0, li = reqItems.length; i < li; i++) {
                    var reqCfg = reqItems[i];
                    var tempId = reqCfg[0];
                    var num = reqCfg[1];
                    var ownCount = bag[tempId] || 0; //拥有所需合成材料的数量
                    if (!ownCount || ownCount < num) {
                        isUP = false;
                        break;
                    }
                }
                if (isUP)
                    returnArr.push(parseInt(key));
            }
            return returnArr;
        };
        p.isMedalItemEnough = function (itemId) {
            var self = this;
            var returnArr = [];
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag) || {};
            var medalData = gd.userCtrl.get(gc.dsConsts.UserEntity.medalData) || {};
            var t_medalLvl = mo.getJSONWithFileName(gc.cfg_t_medalLvl);
            if (!medalData[itemId])
                return false; //未激活，不考虑材料问题
            var strengthLvl = medalData[itemId][0];
            var nextMedalLvlId = strengthLvl + 1;
            if (!t_medalLvl[nextMedalLvlId])
                return false; //已经最高级 ，不考虑材料问题
            var reqItems = t_medalLvl[nextMedalLvlId][gc.t_medalLvl_reqItems] || []; //所需物品
            //判断合成材料
            var isUP = true;
            for (var i = 0, li = reqItems.length; i < li; i++) {
                var reqCfg = reqItems[i];
                var tempId = reqCfg[0];
                var num = reqCfg[1];
                var ownCount = bag[tempId] || 0; //拥有所需合成材料的数量
                if (!ownCount || ownCount < num) {
                    isUP = false;
                    break;
                }
            }
            return isUP;
        };
        /**
         * 修改战印头衔
         * @param warPrintedId   战印id
         * @param cb
         * @param target
         */
        p.setMedalTitle = function (warPrintedId, cb, target) {
            var self = this;
            var argsObj = gc.iface.a_user_setMedalTitle_args, args = {};
            args[argsObj.warPrintedId] = warPrintedId;
            mo.requestWaiting4Server(gc.iface.a_user_setMedalTitle, args, function (data) {
                var medalTitle = data[gc.dsConsts.ExWarPrintedData.medalTitle];
                gd.userCtrl.set(gc.dsConsts.UserEntity.medalTitle, medalTitle);
                if (cb)
                    cb.call(target, medalTitle);
            });
        };
        /**
         * 激活战印
         * @param warPrintedId   战印id
         * @param cb
         * @param target
         */
        p.activeMedal = function (warPrintedId, cb, target) {
            var self = this;
            var argsObj = gc.iface.a_user_activeMedal_args, args = {};
            args[argsObj.warPrintedId] = warPrintedId;
            mo.requestWaiting4Server(gc.iface.a_user_activeMedal, args, function (data) {
                var medalData = data[gc.dsConsts.ExWarPrintedData.medalData];
                var delBagItems = data[gc.dsConsts.ExWarPrintedData.delBagItems];
                if (Object.keys(delBagItems).length > 0) {
                    var bag = gd.userUtils.getNewBag(delBagItems, {});
                    gd.userCtrl.set(gc.dsConsts.UserEntity.bag, bag);
                }
                gd.userCtrl.set(gc.dsConsts.UserEntity.medalData, medalData);
                gd.heroCtrl.calPropAndCombat();
                self.pushNotify(self.__class.ON_ACTVATE_SUCC);
                if (cb)
                    cb.call(target, medalData);
            });
        };
        /**
         * 获得当前佩戴战印
         * @returns {*}
         */
        p.getMedalTitle = function () {
            var self = this;
            return gd.userCtrl.get(gc.dsConsts.UserEntity.medalTitle);
        };
        /**
         * 获取已激活战印
         * @param cb
         * @param target
         * @param type 0所有,1未穿戴的
         * @return [[勋章id,强化等级,评分,品质],[勋章id,强化等级,评分,品质],[勋章id,强化等级,评分,品质],...] 按评分排序
         */
        p.getWarPrintedList = function (type) {
            if (type === void 0) { type = 0; }
            var self = this;
            self.isNewPrintActived = false; //重置
            var medalData = gd.userCtrl.get(gc.dsConsts.UserEntity.medalData) || {};
            var t_medal = mo.getJSONWithFileName(gc.cfg_t_medal);
            var bag = gd.userCtrl.getBag();
            for (var key in t_medal) {
                var medalId = t_medal[key][gc.t_medal_id];
                if (!medalData[medalId] && bag[medalId] && bag[medalId] > 0) {
                    self.isNewPrintActived = true;
                    break;
                }
            }
            var returnArr = [];
            if (Object.keys(medalData).length > 0) {
                for (var key in medalData) {
                    if (key == self.getMedalTitle() && type)
                        continue;
                    returnArr.push(self.transWarPrintData(key));
                }
                returnArr = self.sortList(returnArr);
            }
            return returnArr;
        };
        //获得待激活的战列表
        p.getToBeActivatedList = function () {
            var self = this;
            var toBeActivated = [];
            var medalData = gd.userCtrl.get(gc.dsConsts.UserEntity.medalData) || {};
            var t_medal = mo.getJSONWithFileName(gc.cfg_t_medal);
            var bag = gd.userCtrl.getBag();
            for (var key in t_medal) {
                var medalId = t_medal[key][gc.t_medal_id];
                if (!medalData[medalId] && bag[medalId] && bag[medalId] > 0) {
                    toBeActivated.push(self.transWarPrintData(medalId));
                }
            }
            toBeActivated = self.sortList(toBeActivated);
            return toBeActivated;
        };
        //获得所有战印（已激活+未激活）
        p.getAllWarPrintList = function () {
            var self = this;
            var returnArr = self.getWarPrintedList();
            var toBeActivated = self.getToBeActivatedList();
            returnArr = toBeActivated.concat(returnArr);
            return returnArr;
        };
        /**
         * 战印强化
         * @param warPrintedId   战印id
         * @param cb
         * @param target
         */
        p.warPrintedStrength = function (opt, cb, target) {
            var self = this;
            if (opt.isStrMax)
                return mo.showMsg("已强化到最高等级");
            if (!opt.isItemEnough)
                return mo.showMsg("材料不足");
            var argsObj = gc.iface.a_user_warPrintedStrength_args, args = {};
            args[argsObj.warPrintedId] = opt.medalId;
            mo.requestWaiting4Server(gc.iface.a_user_warPrintedStrength, args, function (data) {
                var medalData = data[gc.dsConsts.ExWarPrintedData.medalData];
                var delBagItems = data[gc.dsConsts.ExWarPrintedData.delBagItems];
                if (Object.keys(delBagItems).length > 0) {
                    var bag = gd.userUtils.getNewBag(delBagItems, {});
                    gd.userCtrl.set(gc.dsConsts.UserEntity.bag, bag);
                }
                gd.userCtrl.set(gc.dsConsts.UserEntity.medalData, medalData);
                gd.heroCtrl.calPropAndCombat();
                self.pushNotify(self.__class.ON_STR_SUCC);
                if (cb)
                    cb.call(target, medalData);
            });
        };
        /**
         * 获得战印强化数据
         * @param medalId 勋章id
         * @returns {*}
         */
        p.getWarPrintData = function (medalId) {
            var self = this;
            var medalData = gd.userCtrl.get(gc.dsConsts.UserEntity.medalData);
            return medalData[medalId]; //返回一个数组或null
        };
        //返回[勋章id,强化等级,评分,品质]
        p.transWarPrintData = function (medalId) {
            var self = this;
            var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            var t_medalLvl = mo.getJSONWithFileName(gc.cfg_t_medalLvl);
            var medalData = gd.userCtrl.get(gc.dsConsts.UserEntity.medalData);
            var strId = medalData[medalId] ? medalData[medalId][0] : medalId * 100;
            return [
                parseInt(medalId),
                t_medalLvl[strId][gc.t_medalLvl_lvl],
                t_medalLvl[strId][gc.t_medalLvl_grade],
                t_item[medalId][gc.t_item_color]
            ];
        };
        p.getWarPrintStrOpt = function (medalId) {
            var self = this;
            var strInfo = self.getWarPrintData(medalId);
            if (!strInfo)
                return null;
            var opt = {
                medalId: medalId,
                curStrId: strInfo[0],
                nextStrId: null,
                isStrMax: false,
                reqItems: [],
                isItemEnough: false,
                medalEnough: false
            };
            var nextStrId = parseInt(opt.curStrId) + 1;
            var t_medalLvl = mo.getJSONWithFileName(gc.cfg_t_medalLvl);
            var nextTemp = t_medalLvl[nextStrId];
            opt.isStrMax = nextTemp == null;
            if (!opt.isStrMax) {
                opt.nextStrId = nextStrId;
                opt.reqItems = nextTemp[gc.t_medalLvl_reqItems];
                opt.isItemEnough = true;
                opt.medalEnough = true;
                for (var i = 0, li = opt.reqItems.length; i < li; i++) {
                    var reqCfg = opt.reqItems[i];
                    if (reqCfg[1] > gd.userCtrl.getItemNum(reqCfg[0])) {
                        opt.isItemEnough = false;
                        var itemType = mo.getJSONWithFileNameAndID(gc.cfg_t_item, reqCfg[0])[gc.t_item_type];
                        if (itemType == gc.c_prop.itemTypeKey.medal) {
                            opt.medalEnough = false;
                        }
                    }
                }
            }
            return opt;
        };
        /**
         * 根据强化等级获得强化配置ID
         * @param itemId 勋章物品ID
         * @param strLvl 强化等级
         */
        p.getStrId = function (itemId, strLvl) {
            return parseInt(itemId) * 100 + parseInt(strLvl);
        };
        /**
         * 获得单个战印的属性加成
         * @param itemId
         * @param strId
         * @param withAll
         * @returns {Array}
         */
        p.getStrProperty = function (itemId, strId, withAll) {
            if (withAll === void 0) { withAll = true; }
            var self = this;
            var propKeyArr = Object.keys(gc.c_prop.equipProp);
            var hasValuePropKeyArr = [];
            var propertys = mo.getJSONWithFileNameAndID(gc.cfg_t_medal, itemId)[gc.t_medal_propertys];
            var baseProps = [];
            var strPro = mo.getJSONWithFileNameAndID(gc.cfg_t_medalLvl, strId)[gc.t_medalLvl_strengthPro];
            for (var i = 0, li = propertys.length; i < li; i++) {
                var p = propertys[i];
                baseProps.push([p[0], Math.floor(p[1] * (1 + strPro / 10000))]);
                if (withAll)
                    hasValuePropKeyArr.push(p[0]);
            }
            if (withAll) {
                for (var i = 0, li = propKeyArr.length; i < li; i++) {
                    var pKey = parseInt(propKeyArr[i]);
                    if (hasValuePropKeyArr.indexOf(pKey) >= 0)
                        continue;
                    baseProps.push([pKey, 0]); //补值为0的属性
                }
            }
            baseProps.sort(function (a, b) {
                return parseInt(a[0]) < parseInt(b[0]) ? -1 : 1;
            });
            return baseProps;
        };
        //获得所有战印属性加成
        p.getTotalPrintProperty = function () {
            var self = this;
            var propKeyArr = Object.keys(gc.c_prop.equipProp);
            propKeyArr.sort(function (a, b) {
                return parseInt(a) < parseInt(b) ? -1 : 1;
            });
            var totalProps = [];
            for (var j = 0, lj = propKeyArr.length; j < lj; j++) {
                totalProps.push([propKeyArr[j], 0]);
            }
            var medalData = gd.userCtrl.get(gc.dsConsts.UserEntity.medalData) || {};
            var strId = 0, props;
            for (var medalId in medalData) {
                strId = medalData[medalId][0];
                props = self.getStrProperty(medalId, strId);
                for (var i = 0, li = props.length; i < li; i++) {
                    var prop = props[i];
                    var cfg = totalProps[i] || [prop[0], 0];
                    cfg[1] += prop[1];
                    totalProps[i] = cfg;
                }
            }
            return totalProps;
        };
        p.isMedalRed = function () {
            var self = this;
            if (self.isNewPrintActived)
                return true;
            var medalData = gd.userCtrl.get(gc.dsConsts.UserEntity.medalData) || {};
            var opt;
            for (var medalId in medalData) {
                opt = self.getWarPrintStrOpt(medalId);
                if (!opt.isStrMax && opt.isItemEnough)
                    return true;
            }
            return false;
        };
        p.sortList = function (list) {
            //数据结构：[勋章id,强化等级,评分,品质]
            var sortIdx = [2, 3, 0]; //排序规则：评分＞品质＞id
            var sortType = [-1, -1, 1];
            list.sort(function (a, b) {
                for (var i = 0; i < 3; i++) {
                    var type = sortType[i];
                    if (a[sortIdx[i]] > b[sortIdx[i]]) {
                        return type <= 0 ? -1 : 1;
                    }
                    else if (a[sortIdx[i]] < b[sortIdx[i]]) {
                        return type <= 0 ? 1 : -1;
                    }
                }
                return 0;
            });
            return list;
        };
        p.getAchievmentMedal = function () {
            var self = this;
            var cfg_t_medal = mo.getJSONWithFileName(gc.cfg_t_medal);
            var keys = Object.keys(cfg_t_medal);
            keys.sort();
            var ret = [];
            for (var i = 0, li = keys.length; i < li; i++) {
                var medal = cfg_t_medal[keys[i]];
                if (medal[gc.t_medal_isAchivement]) {
                    ret.push(medal);
                }
            }
            return ret;
        };
        MedalCtrl.ON_STR_SUCC = "ON_STR_SUCC";
        MedalCtrl.ON_ACTVATE_SUCC = "ON_ACTIVATE_SUCC";
        return MedalCtrl;
    })(mo.DataController);
    gd.MedalCtrl = MedalCtrl;
    egret.registerClass(MedalCtrl,"gd.MedalCtrl");
    gd.medalCtrl = MedalCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/10/16.
 *
 * ��Ϣ����
 */
var gd;
(function (gd) {
    var MsgReceiverCtrl = (function (_super) {
        __extends(MsgReceiverCtrl, _super);
        function MsgReceiverCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=MsgReceiverCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
        };
        p.initData = function (data) {
            pomelo.removeAllListeners(gc.c_prop.receiverKey.chat);
            pomelo.removeAllListeners(gc.c_prop.receiverKey.point);
            pomelo.removeAllListeners(gc.c_prop.receiverKey.task);
            pomelo.removeAllListeners(gc.c_prop.receiverKey.pkDeal);
            pomelo.on(gc.c_prop.receiverKey.chat, function (data) {
                //����
                var newId = data[MsgReceiverCtrl.ON_VALUE_KEY];
                gd.chatCtrl.updateNewMsg(newId);
            });
            //�����̵����ֵ�֪ͨ
            pomelo.on(gc.c_prop.receiverKey.point, function (data) {
                //����
            });
            //�����̵����ֵ�֪ͨ
            pomelo.on(gc.c_prop.receiverKey.task, function (data) {
                //����
                var updateData = data[MsgReceiverCtrl.ON_VALUE_KEY];
                if (updateData) {
                    gd.taskCtrl.updateEntity(updateData);
                }
            });
            //֪ͨ������
            pomelo.on(gc.c_prop.receiverKey.pkDeal, function (data) {
                gd.pkOutCtrl.dealRecord();
            });
        };
        MsgReceiverCtrl.ON_VALUE_KEY = "v";
        return MsgReceiverCtrl;
    })(mo.DataController);
    gd.MsgReceiverCtrl = MsgReceiverCtrl;
    egret.registerClass(MsgReceiverCtrl,"gd.MsgReceiverCtrl");
    gd.msgReceiverCtrl = MsgReceiverCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/5/27.
 */
var gd;
(function (gd) {
    var NoticeCtrl = (function (_super) {
        __extends(NoticeCtrl, _super);
        function NoticeCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=NoticeCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
        };
        /**
         * 获取某类型公告的title
         * @param cb
         * @param target
         * @returns [[gc.dsConsts.NoticeEntity],[gc.dsConsts.NoticeEntity],...]
         */
        NoticeCtrl.getTpyeNotice = function (type) {
            var self = this;
            var returnArr = [];
            var noticeList = NoticeCtrl._noticeList;
            for (var i = 0; i < noticeList.length; i++) {
                if (noticeList[i][gc.dsConsts.NoticeEntity.iconType] == type)
                    returnArr.push(noticeList[i]);
            }
            return returnArr;
        };
        /**
         * 获取公告列表
         * @param cb
         * @param target
         * @returns [gc.dsConsts.NoticeEntity]
         */
        NoticeCtrl.getList = function (cb, target) {
            //var noticeData = NoticeCtrl._noticeListDic[1];
            //if(noticeData){
            //    var time:Date = noticeData[0];
            //    var list = noticeData[1];
            //    if(time.clone().addMinutes(NoticeCtrl._cacheMinute).isAfter(Date.newDate())){
            //        return cb.call(target,list);
            //    }
            //}
            mo.requestWaiting4Server(gc.iface.h_notice_getList, {}, function (noticeList) {
                NoticeCtrl.getNewOne(function (data) {
                    data[gc.dsConsts.NoticeEntity.iconType] = gc.c_prop.noticeIconTypeKey.logon;
                    noticeList.unshift(data);
                    //var time:Date = Date.newDate();
                    //NoticeCtrl._noticeListDic[1] = [time,noticeList];
                    NoticeCtrl._noticeList = noticeList;
                    if (cb)
                        cb.call(target, noticeList);
                }, this);
            });
        };
        /**
         * 获取最新的公告
         * @param cb
         * @param target
         * @returns gc.dsConsts.NoticeEntity
         */
        NoticeCtrl.getNewOne = function (cb, target) {
            /*hd { 直接访问地址
            mo.requestWaiting4Http(gc.iface.h_notice_getNewOne, {}, function (data) {

                if (cb) cb.call(target,data);
            });
            */
            var req = new egret.HttpRequest();
            req.responseType = egret.HttpResponseType.TEXT;
            req.addEventListener(egret.Event.COMPLETE, function (e) {
                var req = e.currentTarget;
                var rsp = req.response;
                var obj = JSON.parse(rsp);
                if (obj && obj.m) {
                    gd.chatCtrl.newChannelNotice(obj.m);
                }
                if (cb)
                    cb.call(target, obj.v);
            }, this);
            var srvid;
            if (gd.userCtrl == null)
                srvid = gd.serverInfoCtrl.getSelectIndex();
            else
                srvid = gd.userCtrl.get(gc.dsConsts.UserEntity.serverIndexId);
            var openid = gd.accountCtrl.get(gc.dsConsts.AccountEntity.sdkData).open_id;
            req.open('http://gc.hgame.com/public/getnotice/gameid/100220/groupid/' + srvid + '/openid/' + openid, egret.HttpMethod.GET);
            req.send();
        };
        //static _noticeListDic:any = {};//{"1":[时间，数据]}
        //static _cacheMinute:number = 5;
        NoticeCtrl._noticeList = [];
        return NoticeCtrl;
    })(mo.DataController);
    gd.NoticeCtrl = NoticeCtrl;
    egret.registerClass(NoticeCtrl,"gd.NoticeCtrl");
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/5/27.
 */
var gd;
(function (gd) {
    var PkOutCtrl = (function (_super) {
        __extends(PkOutCtrl, _super);
        function PkOutCtrl() {
            _super.apply(this, arguments);
            this._rank = 0;
            this._curEnemyID = -1;
            this._curFightType = 1;
            this._curIsRevenge = 0;
            this._hasNewDeal = false;
            this._hasNewRankPkDeal = false;
            this._bePkKill = false;
            this.autoPkOut = true;
        }
        var d = __define,c=PkOutCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.PkOutEntity;
            this._pkRecordList = [];
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
            self.getPkRecordList(function () { }, self);
            //self._initRank();
            self.dealRecord();
            self.getRankPkRecordList(function () { }, self);
            self.dealRankPkRecord();
            self._dataRefreshTime = Date.newDate();
        };
        //是否开启
        p.checkOpen = function (cb, target) {
            var self = this;
            if (self._data)
                return cb.call(target, true);
            //参数8：开启pk战力
            //var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var c_open = mo.getJSONWithFileName(gc.cfg_c_open);
            var needLvl = c_open[gc.id_c_open.pkOut][gc.c_open_lvlRequired];
            //var needLvl = c_game[gc.id_c_game.pkOutCfg][7];
            if (gd.userCtrl.getLvl() < needLvl)
                return cb.call(target, false);
            self.open(function () {
                cb.call(target, true);
            }, self);
        };
        //获取杀戮值
        p.getKillValue = function () {
            var self = this;
            if (!self._data)
                return 0;
            if (self._dataRefreshTime && !Date.newDate().equalsDay(self._dataRefreshTime)) {
                self.open(function () {
                    self._dataRefreshTime = Date.newDate();
                }, self);
            }
            return this.get(gc.dsConsts.PkOutEntity.killValue);
        };
        //获取pk值
        p.getPkValue = function () {
            var self = this;
            if (!self._data)
                return 0;
            return self.get(gc.dsConsts.PkOutEntity.pkValue);
        };
        //获取杀人胜利数
        p.getAccWinCount = function () {
            var self = this;
            if (!self._data)
                return 0;
            return self.get(gc.dsConsts.PkOutEntity.accWinCount);
        };
        p.calPkValue = function () {
            var self = this;
            if (!self._data)
                return;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var pkValue = self.get(gc.dsConsts.PkOutEntity.pkValue);
            var pkValueTime = self.get(gc.dsConsts.PkOutEntity.pkValueTime);
            pkValueTime = new Date(pkValueTime);
            var diffMinutes = pkValueTime.getMinutesBetween(Date.newDate());
            diffMinutes = diffMinutes / 20;
            var intDiffMinutes = parseInt(diffMinutes.toString());
            if (intDiffMinutes > 0) {
                pkValue -= c_game[gc.id_c_game.pkOutCfg][0] * intDiffMinutes;
                pkValueTime.addMinutes(intDiffMinutes * 20);
            }
            pkValue = pkValue < 0 ? 0 : pkValue;
            self.set(gc.dsConsts.PkOutEntity.pkValue, pkValue);
            self.set(gc.dsConsts.PkOutEntity.pkValueTime, pkValueTime);
        };
        //获取我的排名
        p.getMyRank = function (cb, target) {
            var self = this;
            self.getRankList(function (dataList) {
                var myRank = 0;
                for (var i = 0; i < dataList.length; i++) {
                    var loData = dataList[i];
                    if (loData[gc.dsConsts.Rank.userId] == gd.userCtrl.getId()) {
                        myRank = i + 1;
                    }
                }
                if (myRank > 0)
                    return cb(myRank);
                self._initRank(cb, target);
            }, self);
        };
        /**
         * 获取排名奖励
         * @param rank
         * @returns [升星石数量，金币数量,元宝]
         */
        p.getRankAward = function (rank) {
            var c_pvpRankReward = mo.getJSONWithFileName(gc.cfg_c_pvpRankReward);
            var starStone = 0;
            var gold = 0;
            var diamond = 0;
            var curData = null;
            for (var i = 1; i < 100; i++) {
                var locData = c_pvpRankReward[i];
                if (!locData)
                    break;
                curData = locData;
                if (rank <= locData[gc.c_pvpRankReward_range])
                    break;
            }
            if (curData) {
                starStone = curData[gc.c_pvpRankReward_starStone];
                gold = curData[gc.c_pvpRankReward_gold];
                diamond = curData[gc.c_pvpRankReward_diamond];
            }
            return [starStone, gold, diamond];
        };
        p._initRank = function (cb, target) {
            var self = this;
            mo.request4Server(gc.iface.a_pkOut_getMyRank, {}, function (data) {
                self._rank = data;
                if (cb)
                    cb.call(target, data);
            });
        };
        //开启pk
        p.open = function (cb, target) {
            var self = this;
            mo.request4Server(gc.iface.a_pkOut_open, {}, function (data) {
                self.init(data);
                //self._initRank();
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * 获取下一次对手剩余时间
         * @returns {number}
         */
        p.getReRefreshSeconds = function () {
            var self = this;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var cd2 = c_game[gc.id_c_game.pkOutCfg][4];
            var enemyIds = self.get(gc.dsConsts.PkOutEntity.enemyIds);
            var freshTime = self.get(gc.dsConsts.PkOutEntity.freshTime);
            freshTime = new Date(freshTime);
            if (enemyIds.length >= 3)
                return 0;
            var reSeconds = Date.newDate().getSecondsBetween(freshTime.clone().addSeconds(cd2));
            return reSeconds;
        };
        /**
         * 获取对手列表
         * @param cb
         * @param target
         * @returns [ds.PkOutUserData]
         */
        p.getEnemyList = function (cb, target) {
            var self = this;
            mo.request4Server(gc.iface.a_pkOut_getEnemyList, {}, function (data) {
                var puOutData = data[gc.dsConsts.ExPkOut.pkOutData];
                delete puOutData[gc.dsConsts.PkOutEntity.pkValue];
                self.updateEntity(puOutData);
                var enemyList = data[gc.dsConsts.ExPkOut.enemyList];
                if (cb)
                    cb.call(target, enemyList);
            });
        };
        //计算次数
        p._calRefreshNum = function () {
            var self = this;
            var todayRefreshTime = self.get(gc.dsConsts.PkOutEntity.todayRefreshTime);
            var todayRefreshNum = self.get(gc.dsConsts.PkOutEntity.todayRefreshNum);
            if (!todayRefreshTime) {
                todayRefreshNum = 0;
                todayRefreshTime = Date.newDate();
            }
            todayRefreshTime = Date.newDate(todayRefreshTime);
            //还没刷新过
            //不等于当天
            if (!todayRefreshTime.equalsDay(new Date())) {
                todayRefreshNum = 0;
                todayRefreshTime = Date.newDate();
            }
            self.set(gc.dsConsts.PkOutEntity.todayRefreshTime, todayRefreshTime);
            self.set(gc.dsConsts.PkOutEntity.todayRefreshNum, todayRefreshNum);
        };
        /**
         * 刷新对手
         * @param cb
         * @param target
         * @returns [ds.PkOutUserData]
         */
        p.refreshEnemy = function (isWaiting, cb, target) {
            var self = this;
            self._calRefreshNum();
            //是否花费[ubb color=#6dd1ff]%s元宝[/ubb][/br]寻找1个对手？
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var todayRefreshNum = self.get(gc.dsConsts.PkOutEntity.todayRefreshNum);
            var needDiamond = gc.calRefreshPKCost(todayRefreshNum);
            var requestFun = isWaiting ? mo.requestWaiting4Server : mo.request4Server;
            var cbFun = function () {
                requestFun(gc.iface.a_pkOut_refreshEnemy, {}, function (data) {
                    var userData = data[gc.dsConsts.ExPkOut.userData];
                    if (userData)
                        gd.userCtrl.updateEntity(userData);
                    var pkOutData = data[gc.dsConsts.ExPkOut.pkOutData];
                    if (pkOutData)
                        self.updateEntity(pkOutData);
                    self.getEnemyList(cb, target);
                });
            };
            var count = c_game[gc.id_c_game.pkCfg1][0];
            if (todayRefreshNum > count) {
                mo.showMsg(gc.id_c_msgCode.findRival100, needDiamond, todayRefreshNum, count, cbFun);
            }
            else {
                mo.showMsg(gc.id_c_msgCode.findRival, needDiamond, todayRefreshNum, cbFun);
            }
        };
        //获取清除剩余秒数
        p.getClearReSeconds = function () {
            var refreshDate = Date.newDate().clearTime().addHours(24);
            var seconds = Date.newDate().getSecondsBetween(refreshDate);
            seconds = seconds < 0 ? 0 : seconds;
            return seconds;
        };
        /**
         * 刷新对手
         * @param cb
         * @param target
         */
        p.clearPkValue = function (cb, target) {
            var self = this;
            var pkValue = self.getPkValue();
            if (pkValue <= 0)
                return mo.showMsg(gc.id_c_msgCode.noPKPoint);
            var needDiamond = gc.calClearPkCost(pkValue);
            mo.showMsg(gc.id_c_msgCode.ifClearPKPoint, needDiamond, function () {
                mo.request4Server(gc.iface.a_pkOut_clearPkValue, {}, function (data) {
                    var userData = data[gc.dsConsts.ExPkOut.userData];
                    if (userData)
                        gd.userCtrl.updateEntity(userData);
                    var pkOutData = data[gc.dsConsts.ExPkOut.pkOutData];
                    if (pkOutData)
                        self.updateEntity(pkOutData);
                    if (cb) {
                        cb.call(target);
                    }
                });
            });
        };
        //是否今天赢过
        p.isTodayRankWin = function (eid) {
            var winData = this._getRankPkTime();
            var eids = winData[1] || [];
            if (eids.indexOf(eid) > -1) {
                return true;
            }
            return false;
        };
        p._getRankPkTime = function () {
            var self = this;
            //保存格式  ["日期",[eid,eid]]
            var exData = gd.userCtrl.get(gc.dsConsts.UserEntity.exData);
            var winData = exData[gc.c_prop.userExDataKey.todayRankWin] || [];
            var time = winData[0];
            if (!time)
                time = Date.newDate();
            var timeDate = Date.newDate(time);
            var eids = winData[1] || [];
            if (!Date.newDate().equalsDay(timeDate)) {
                time = Date.newDate();
                eids = [];
            }
            winData = [time, eids];
            return winData;
        };
        /**
         * 请求战斗开始，并且返回对方角色信息
         * @param enemyId
         * @param fightType
         * @param isRevenge 是否复仇
         * @param cb
         * @param target
         * @returns [ds.HeroEntityCtrl]
         */
        p.start = function (enemyId, fightType, isRevenge, cb, target) {
            var self = this;
            var c_open = mo.getJSONWithFileName(gc.cfg_c_open);
            var needLvl = c_open[gc.id_c_open.pkOut][gc.c_open_lvlRequired];
            if (!self._data)
                return mo.showMsg(gc.id_c_msgCode.pkNoOpen, needLvl, function () { }, self);
            if (gd.fightCtrl.isSpFighting)
                return mo.showMsg("还在挑战中，请稍后");
            if (gd.fightCtrl.isDie)
                return mo.showMsg("复活中，请稍后");
            self._curEnemyID = enemyId;
            self._curFightType = fightType;
            self._curIsRevenge = isRevenge || 0;
            var args = {};
            var argsKey = gc.iface.a_pkOut_start_args;
            args[argsKey.enemyId] = enemyId;
            args[argsKey.fightType] = fightType;
            args[argsKey.isRevenge] = self._curIsRevenge;
            mo.requestWaiting4Server(gc.iface.a_pkOut_start, args, function (data) {
                var pkOutData = data[gc.dsConsts.ExPkOut.pkOutData];
                self.updateEntity(pkOutData);
                var heroList = data[gc.dsConsts.ExPkOut.heroList];
                var otherDataList = data[gc.dsConsts.ExPkOut.otherDataList];
                var fightData = data[gc.dsConsts.ExPkOut.fightData];
                var heroCtrlList = [];
                for (var i = 0; i < heroList.length; i++) {
                    var locHero = heroList[i];
                    var locHeroEntityCtrl = gd.HeroEntityCtrl.createNewEnemy(locHero, fightData, otherDataList[i]);
                    heroCtrlList.push(locHeroEntityCtrl);
                }
                heroCtrlList.sort(gd.heroCtrl._sortHeroList);
                gd.fightCtrl.isSpFighting = true;
                var guildData = data[gc.dsConsts.ExPkOut.guildData];
                if (guildData)
                    gd.guildCtrl.updateData(guildData);
                var guildPersonalData = data[gc.dsConsts.ExPkOut.guildPersonalData];
                if (guildPersonalData)
                    gd.guildPersonalCtrl.updateData(guildPersonalData);
                if (cb)
                    cb.call(target, heroCtrlList);
            });
        };
        /**
         * 战斗结束，获取收益
         * @param enemyId
         * @param isWin 是否胜利
         * @param cb
         * @param target
         * @returns ds.FightResult
         */
        p.end = function (isWin, fightData, cb, target) {
            if (this._curEnemyID == -1)
                return;
            var self = this;
            var args = {};
            var tempEnemyId = this._curEnemyID;
            var argsKey = gc.iface.a_pkOut_end_args;
            args[argsKey.enemyId] = tempEnemyId;
            args[argsKey.fightData] = fightData;
            args[argsKey.isWin] = isWin;
            args[argsKey.fightType] = self._curFightType;
            args[argsKey.isRevenge] = self._curIsRevenge;
            this._curEnemyID = -1;
            mo.requestWaiting4Server(gc.iface.a_pkOut_end, args, function (fightResult) {
                var updateUser = fightResult[gc.dsConsts.FightResult.updateUser] || {};
                var bagItems = fightResult[gc.dsConsts.FightResult.bagItems];
                var equipBagItems = fightResult[gc.dsConsts.FightResult.equipBagItems];
                var bag = gd.userUtils.getNewBag({}, bagItems);
                updateUser[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                updateUser[gc.dsConsts.UserEntity.equipBag] = equipBag;
                if (updateUser)
                    gd.userCtrl.updateEntity(updateUser);
                var updatePkOut = fightResult[gc.dsConsts.FightResult.updatePkOut];
                if (updatePkOut)
                    self.updateEntity(updatePkOut);
                self._initRank();
                if (!isWin) {
                    var killValue = 0;
                    fightResult[gc.dsConsts.FightResult.killValue] = killValue;
                }
                if (cb)
                    cb.call(target, fightResult);
            });
        };
        /**
         * 获取排行列表，返回50名数据
         * @param cb
         * @param target
         * @returns [ds.Rank]
         */
        p.getRankList = function (cb, target) {
            var self = this;
            mo.request4Server(gc.iface.a_pkOut_getRankList, {}, function (dataList) {
                if (cb)
                    cb.call(target, dataList);
            });
        };
        /**
         * 获取个人战斗记录，最多20条
         * @param cb
         * @param target
         * @returns [ds.ArenaRecordEntity]
         */
        p.getPkRecordList = function (cb, target) {
            var self = this;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            mo.request4Server(gc.iface.a_pkOut_getPkRecordList, {}, function (dataList) {
                self._calRecord(dataList);
                self._pkRecordList = dataList;
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.pkout1);
                if (cb)
                    cb.call(target, dataList);
            });
        };
        //设置阅读
        p.setReadRecord = function () {
            var self = this;
            mo.request4Server(gc.iface.a_pkOut_setPkRecordRead, {}, function (data) { });
        };
        //是否包含未阅读防守记录
        p.hasNewDeal = function () {
            var self = this;
            return self._hasNewDeal;
        };
        //是否包含未阅读防守记录
        p.setNewDeal = function (bool) {
            var self = this;
            this._hasNewDeal = bool;
            gd.pointCtrl.cal(gc.c_prop.pointRedKey.pkout1);
        };
        /**
         * 处理被抢
         * @param cb
         * @param target
         */
        p.dealRecord = function (cb, target) {
            var self = this;
            self._dealRecord(gc.c_prop.fightTypeKey.pk, function (hasNewDeal) {
                if (hasNewDeal)
                    self.setNewDeal(hasNewDeal);
            }, self);
        };
        p._calRecord = function (dataList) {
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            for (var i = 0; i < dataList.length; i++) {
                var locData = dataList[i];
                var locIsWin = locData[gc.dsConsts.ArenaRecordEntity.isWin];
                var locUserId = locData[gc.dsConsts.ArenaRecordEntity.userId];
                var locEnemyId = locData[gc.dsConsts.ArenaRecordEntity.enemyId];
                var locItems = locData[gc.dsConsts.ArenaRecordEntity.fightData]["items"] || {};
                for (var key in locItems) {
                    var locValue = locItems[key];
                    if (locValue == 0)
                        delete locItems[key];
                }
                if (locUserId == locEnemyId) {
                    var killValue = 0, gold = 0, expc = 0, items = {}, pkValue = 0;
                    //防守失败
                    if (!locIsWin) {
                        //掉杀戮值
                        /*  killValue =  locData[gc.dsConsts.ArenaRecordEntity.fightData]["killValue"]||0;
                         killValue *=-1;*/
                        //掉pk值
                        pkValue = c_game[gc.id_c_game.pkOutCfg][11] || 0;
                        pkValue *= -1;
                        //红名掉 金币和装备
                        //只有红名，才会被抢金币和装备
                        var ePkColor = locData[gc.dsConsts.ArenaRecordEntity.fightData]["ePkColor"];
                        if (ePkColor == gc.c_prop.pkNameColorKey.red) {
                            gold = locData[gc.dsConsts.ArenaRecordEntity.fightData]["gold"] || 0;
                            gold *= -1;
                        }
                        var pkLootCfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.pkLoot)[0];
                        pkLootCfg = pkLootCfg.split(",");
                        delete locItems[Math.floor(pkLootCfg[0])];
                    }
                    else {
                        //防守成功，获得杀戮值
                        killValue = locData[gc.dsConsts.ArenaRecordEntity.fightData]["killValue"] || 0;
                        killValue = Math.floor(killValue / 2);
                    }
                    locData[gc.dsConsts.ArenaRecordEntity.fightData]["killValue"] = killValue;
                    locData[gc.dsConsts.ArenaRecordEntity.fightData]["gold"] = gold;
                    locData[gc.dsConsts.ArenaRecordEntity.fightData]["expc"] = expc;
                    locData[gc.dsConsts.ArenaRecordEntity.fightData]["pkValue"] = pkValue;
                }
                else {
                    //进攻失败
                    if (!locIsWin) {
                        //没有杀戮值
                        var killValue = 0;
                        locData[gc.dsConsts.ArenaRecordEntity.fightData]["killValue"] = killValue;
                    }
                }
                locData[gc.dsConsts.ArenaRecordEntity.fightData]["items"] = locItems;
            }
        };
        /**
         * 处理被抢
         * @param cb
         * @param target
         */
        p._dealRecord = function (fightType, cb, target) {
            var self = this;
            var args = {};
            var argsKey = gc.iface.a_pkOut_dealRecord_args;
            args[argsKey.fightType] = fightType;
            mo.request4Server(gc.iface.a_pkOut_dealRecord, args, function (data) {
                var userData = data[gc.dsConsts.ExPkOut.userData];
                gd.userCtrl.updateEntity(userData);
                var pkOutData = data[gc.dsConsts.ExPkOut.pkOutData];
                self.updateEntity(pkOutData);
                var hasNewDeal = data[gc.dsConsts.ExPkOut.hasNewDeal];
                cb.call(target, hasNewDeal);
            });
        };
        /***************************************************排行榜相关***************************************************/
        /**
         * 获取排行榜个人战斗记录，最多20条
         * @param cb
         * @param target
         * @returns [ds.ArenaRecordEntity]
         */
        p.getRankPkRecordList = function (cb, target) {
            var self = this;
            mo.request4Server(gc.iface.a_pkOut_getRankPkRecordList, {}, function (dataList) {
                self._calRecord(dataList);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.rankPk);
                if (cb)
                    cb.call(target, dataList);
            });
        };
        //是否包含未阅读防守记录
        p.hasRankPkNewDeal = function () {
            var self = this;
            return self._hasNewRankPkDeal;
        };
        //是否包含未阅读防守记录
        p.setRankPkNewDeal = function (bool) {
            var self = this;
            this._hasNewRankPkDeal = bool;
            gd.pointCtrl.cal(gc.c_prop.pointRedKey.rankPk);
        };
        /**
         * 处理被抢
         * @param cb
         * @param target
         */
        p.dealRankPkRecord = function (cb, target) {
            var self = this;
            self._dealRecord(gc.c_prop.fightTypeKey.rankPk, function (hasNewDeal) {
                if (hasNewDeal)
                    self.setRankPkNewDeal(hasNewDeal);
            }, self);
        };
        /***************************************************排行榜相关***************************************************/
        p.getRevengeList = function (cb, target) {
            var self = this;
            self.getPkRecordList(function (dataList) {
                for (var i = 0; i < dataList.length; i++) {
                    var locData = dataList[i];
                }
            }, self);
        };
        /**
         * 获取对手列表
         * @param cb
         * @param target
         * @returns [ds.PkOutUserData]
         */
        p.getRevengeEnemyList = function (cb, target) {
            var self = this;
            mo.request4Server(gc.iface.a_pkOut_getRevengeEnemyList, {}, function (enemyList) {
                if (cb)
                    cb.call(target, enemyList);
            });
        };
        //是否被杀
        p.isBePkKill = function () {
            var self = this;
            return self._bePkKill;
        };
        //重置被杀
        p.resetBePkKill = function () {
            var self = this;
            mo.request4Server(gc.iface.a_pkOut_resetBePkKill, {}, function (data) {
                self.setBePkKill(false);
            });
        };
        //设置被杀
        p.setBePkKill = function (bool) {
            var self = this;
            self._bePkKill = bool;
            gd.pointCtrl.cal(gc.c_prop.pointRedKey.bePkKill);
        };
        /*************************************************江湖探秘*******************************************************/
        p.treasureBiz = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_treasure_spies, {}, function (data) {
                var userData = data[gc.dsConsts.ExPkOut.userData];
                if (userData)
                    gd.userCtrl.updateEntity(userData);
                var pkOutData = data[gc.dsConsts.ExPkOut.pkOutData];
                if (pkOutData)
                    self.updateEntity(pkOutData);
                self.getEnemyList(cb, target);
            });
        };
        p.incognito = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_pkOut_incognito, {}, function (data) {
                var userData = data[gc.dsConsts.Incognito.userData];
                if (userData)
                    gd.userCtrl.updateEntity(userData);
                var openTime = data[gc.dsConsts.Incognito.openTime];
                if (cb)
                    cb.call(target, data);
            });
        };
        p.getExPkOutInfo = function (cb, target) {
            var self = this;
            mo.request4Server(gc.iface.a_treasure_getExPkOutInfo, {}, function (data) {
                if (cb)
                    cb.call(target, data);
            });
        };
        p.openTreasure = function (id, cb, target) {
            var self = this;
            var args = {};
            var argsKey = gc.iface.a_treasure_open_args;
            args[argsKey.id] = id;
            mo.requestWaiting4Server(gc.iface.a_treasure_open, args, function (data) {
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * 处理秘宝被抢
         * @param cb
         * @param target
         */
        p.getTreasurePkRecordList = function (cb, target) {
            var self = this;
            mo.request4Server(gc.iface.a_pkOut_getTreasurePkRecordList, {}, function (data) {
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * 合成秘宝碎片
         * @param ItemId
         * @param cb
         * @param target
         */
        p.compose = function (itemId, cb, target) {
            var self = this;
            var args = {};
            var argsKey = gc.iface.a_treasure_compose_args;
            args[argsKey.itemId] = itemId;
            mo.requestWaiting4Server(gc.iface.a_treasure_compose, args, function (data) {
                var user = {};
                var delBagItem = data[gc.dsConsts.ComposeInfo.delBagItem];
                var bag = gd.userUtils.getNewBag(delBagItem, {});
                user[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(user);
                if (cb) {
                    cb.call(target, data);
                }
            });
        };
        return PkOutCtrl;
    })(mo.DataController);
    gd.PkOutCtrl = PkOutCtrl;
    egret.registerClass(PkOutCtrl,"gd.PkOutCtrl");
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/5/27.
 */
var gd;
(function (gd) {
    var PointCtrl = (function (_super) {
        __extends(PointCtrl, _super);
        function PointCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=PointCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
        };
        /**
         * 是否显示红点，特效，绿点
         * @param {gc.dsConsts.pointEffectKey|gc.dsConsts.pointRedKey|gc.dsConsts.pointGreenKey} key
         * @returns {boolean}
         */
        p.isShow = function (key) {
            var self = this;
            var isShow = false;
            var redKey = gc.c_prop.pointRedKey;
            //主红点特殊处理
            switch (key) {
                case redKey.home_main:
                    isShow = self._isShow(redKey.arena1) || self._isShow(redKey.copy_boss) || self._isShow(gc.c_prop.pointEffectKey.mail)
                        || self._isShow(gc.c_prop.pointEffectKey.chuanChen)
                        || self._isShow(gc.c_prop.pointEffectKey.custom)
                        || self._isShow(gc.c_prop.pointEffectKey.medal);
                    break;
                case redKey.role_main:
                    isShow = self.isShow(redKey.role1_main) || self.isShow(redKey.role2_main) || self.isShow(redKey.role3_main) || self.isShow(redKey.role4_main);
                    break;
                case redKey.make_main:
                    isShow = self.isShow(redKey.role1_dazao) || self.isShow(redKey.role2_dazao) || self.isShow(redKey.role3_dazao);
                    break;
                case redKey.role1_main:
                    isShow = self._isShowByKeys([gc.c_prop.pointRedKey.role1_equip, gc.c_prop.pointRedKey.role1_tring, redKey.role1_wing, redKey.role1_skill, redKey.role1_realm]);
                    break;
                case redKey.role2_main:
                    isShow = self._isShowByKeys([gc.c_prop.pointRedKey.role2_equip, gc.c_prop.pointRedKey.role2_tring, redKey.role2_wing, redKey.role2_skill, redKey.role2_realm]);
                    break;
                case redKey.role3_main:
                    isShow = self._isShowByKeys([gc.c_prop.pointRedKey.role3_equip, gc.c_prop.pointRedKey.role3_tring, redKey.role3_wing, redKey.role3_skill, redKey.role3_realm]);
                    break;
                case redKey.role4_main:
                    isShow = self._isShowByKeys([gc.c_prop.pointRedKey.role4_equip, redKey.role4_skill]);
                    break;
                case redKey.role1_dazao:
                    isShow = self._isShowByKeys([redKey.role1_intensify, redKey.role1_star, redKey.role1_gem]);
                    break;
                case redKey.role2_dazao:
                    isShow = self._isShowByKeys([redKey.role2_intensify, redKey.role2_star, redKey.role2_gem]);
                    break;
                case redKey.role3_dazao:
                    isShow = self._isShowByKeys([redKey.role3_intensify, redKey.role3_star, redKey.role3_gem]);
                    break;
                case redKey.demonLotus_main:
                    isShow = self._isShowByKeys([redKey.demonLotus_1, redKey.demonLotus_2]);
                    break;
                default:
                    isShow = self._isShow(key);
                    break;
            }
            return isShow;
        };
        p._isShow = function (key) {
            var pointData = gd.userCtrl.get(gc.dsConsts.UserEntity.redPointData);
            if (pointData[key])
                return true;
            return false;
        };
        p._isShowByKeys = function (keys) {
            for (var i = 0; i < keys.length; i++) {
                var locKey = keys[i];
                if (this._isShow(locKey))
                    return true;
            }
            return false;
        };
        /**
         * 获取数据
         * @param key
         * @returns {Array}
         */
        p.getShowData = function (key) {
            return [];
        };
        /**
         * 计算红点
         * @param key
         */
        p.cal = function (key) {
            var self = this;
            var setShow = function (reIsShow) {
                var pointData = gd.userCtrl.get(gc.dsConsts.UserEntity.redPointData);
                pointData[key] = reIsShow;
                gd.userCtrl.set(gc.dsConsts.UserEntity.redPointData, pointData);
                mo.emitter.emit("onRed");
            };
            switch (key) {
                case gc.c_prop.pointEffectKey.activity:
                    var isShow = gd.activityCtrl.isPointEffect();
                    setShow(isShow);
                    break;
                case gc.c_prop.pointEffectKey.task:
                    var isShow = gd.taskCtrl.isTaskReddot()[0] || gd.taskCtrl.isTaskReddot()[1];
                    setShow(isShow);
                    break;
                case gc.c_prop.pointEffectKey.sign:
                    var isShow = !gd.signCtrl.isTodaySigned();
                    setShow(isShow);
                    break;
                case gc.c_prop.pointEffectKey.bag:
                    //判断装备背包是否满（return false/ture）   UserCtrl   isEquipBagReddot()
                    var isShow = gd.userCtrl.isSmeltReddot();
                    setShow(isShow);
                    break;
                case gc.c_prop.pointEffectKey.mail:
                    gd.mailCtrl.isNeedOperate(setShow, self);
                    break;
                case gc.c_prop.pointEffectKey.recharge:
                    var isShow = gd.activityCtrl.hasRecharged() && !gd.activityCtrl.hasReceiveFirstRecharge();
                    setShow(isShow);
                    break;
                case gc.c_prop.pointEffectKey.chuanChen:
                    var isShow = gd.equipCtrl.getSpecialEquipDot().indexOf(1) >= 0;
                    setShow(isShow);
                    break;
                case gc.c_prop.pointEffectKey.custom:
                    var isShow = gd.customCtrl.isCustomRed();
                    setShow(isShow);
                    break;
                case gc.c_prop.pointEffectKey.medal:
                    var isShow = gd.medalCtrl.isMedalRed();
                    setShow(isShow);
                    break;
                case gc.c_prop.pointRedKey.pkout1:
                    var isShow = gd.pkOutCtrl.hasNewDeal();
                    setShow(isShow);
                    break;
                case gc.c_prop.pointRedKey.arena1:
                    var isShow = gd.arenaCtrl.getData() && gd.arenaCtrl.getRePKNum() > 0;
                    setShow(isShow);
                    break;
                case gc.c_prop.pointRedKey.role1_wing:
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(0);
                    if (heroEntityCtrl) {
                        //可以开启未激活 或者 已经开启并且有翅膀没最高级
                        var isShow = (heroEntityCtrl.isWingOpen() && !heroEntityCtrl.isWingActived()) || (heroEntityCtrl.isWingActived() && gd.userCtrl.getItemNum(gc.c_prop.spItemIdKey.plumage) > 0 && !heroEntityCtrl.isWingLimit());
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role1_equip:
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(0);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.isEquipReddot().length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role1_tring:
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(0);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.isTringReddot().length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role2_tring:
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(1);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.isTringReddot().length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role3_tring:
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(2);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.isTringReddot().length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role1_skill:
                    //判断技能是否可以升级的接口，金币达到，cd没有的时候（return  [index,index,...]）   HeroEntityCtrl   isSkillReddot()
                    /* var heroEntityCtrl = heroCtrl.getHeroByIndex(0);
                     if(heroEntityCtrl){
                         var isShow = heroEntityCtrl.isSkillReddot().length>0;
                         setShow(isShow);
                     }*/
                    break;
                case gc.c_prop.pointRedKey.role1_realm:
                    //判断境界是否可以穿戴或者升级（return  [是否可升级(false,true),[穿戴下标index,index,...]]）   HeroEntityCtrl   isStateReddot()
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(0);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.getHeroRealmList()[3] == true || heroEntityCtrl.getHeroRealmList()[2].length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role1_intensify:
                    //是否可强化（return  [index,index,....]）   HeroEntityCtrl   isStrengthReddot()
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(0);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.isStrengthReddot().length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role1_star:
                    //是否可升星（return  [index,index,....]）   HeroEntityCtrl   isUpStarReddot()
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(0);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.isUpStarReddot().length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role1_gem:
                    //是否可升宝石等级（return [index,index,....]）   HeroEntityCtrl   isUpGemReddot()
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(0);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.isUpGemReddot().length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role2_wing:
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(1);
                    if (heroEntityCtrl) {
                        //可以开启未激活 或者 已经开启并且有翅膀没最高级
                        var isShow = (heroEntityCtrl.isWingOpen() && !heroEntityCtrl.isWingActived()) || (heroEntityCtrl.isWingActived() && gd.userCtrl.getItemNum(gc.c_prop.spItemIdKey.plumage) > 0 && !heroEntityCtrl.isWingLimit());
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role2_equip:
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(1);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.isEquipReddot().length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role2_skill:
                    //判断技能是否可以升级的接口，金币达到，cd没有的时候（return  [index,index,...]）   HeroEntityCtrl   isSkillReddot()
                    /* var heroEntityCtrl = heroCtrl.getHeroByIndex(1);
                     if(heroEntityCtrl){
                         var isShow = heroEntityCtrl.isSkillReddot().length>0;
                         setShow(isShow);
                     }*/
                    break;
                case gc.c_prop.pointRedKey.role2_realm:
                    //判断境界是否可以穿戴或者升级（return  [是否可升级(false,true),[穿戴下标index,index,...]]）   HeroEntityCtrl   isStateReddot()
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(1);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.getHeroRealmList()[3] == true || heroEntityCtrl.getHeroRealmList()[2].length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role2_intensify:
                    //是否可强化（return  [index,index,....]）   HeroEntityCtrl   isStrengthReddot()
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(1);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.isStrengthReddot().length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role2_star:
                    //是否可升星（return  [index,index,....]）   HeroEntityCtrl   isUpStarReddot()
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(1);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.isUpStarReddot().length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role2_gem:
                    //是否可升宝石等级（return [index,index,....]）   HeroEntityCtrl   isUpGemReddot()
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(1);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.isUpGemReddot().length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role3_wing:
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(2);
                    if (heroEntityCtrl) {
                        //可以开启未激活 或者 已经开启并且有翅膀没最高级
                        var isShow = (heroEntityCtrl.isWingOpen() && !heroEntityCtrl.isWingActived()) || (heroEntityCtrl.isWingActived() && gd.userCtrl.getItemNum(gc.c_prop.spItemIdKey.plumage) > 0 && !heroEntityCtrl.isWingLimit());
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role3_equip:
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(2);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.isEquipReddot().length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role3_skill:
                    //判断技能是否可以升级的接口，金币达到，cd没有的时候（return  [index,index,...]）   HeroEntityCtrl   isSkillReddot()
                    /*var heroEntityCtrl = heroCtrl.getHeroByIndex(2);
                    if(heroEntityCtrl){
                        var isShow = heroEntityCtrl.isSkillReddot().length>0;
                        setShow(isShow);
                    }*/
                    break;
                case gc.c_prop.pointRedKey.role3_realm:
                    //判断境界是否可以穿戴或者升级（return  [是否可升级(false,true),[穿戴下标index,index,...]]）   HeroEntityCtrl   isStateReddot()
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(2);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.getHeroRealmList()[3] == true || heroEntityCtrl.getHeroRealmList()[2].length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role3_intensify:
                    //是否可强化（return  [index,index,....]）   HeroEntityCtrl   isStrengthReddot()
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(2);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.isStrengthReddot().length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role3_star:
                    //是否可升星（return  [index,index,....]）   HeroEntityCtrl   isUpStarReddot()
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(2);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.isUpStarReddot().length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role3_gem:
                    //是否可升宝石等级（return [index,index,....]）   HeroEntityCtrl   isUpGemReddot()
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(2);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.isUpGemReddot().length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role4_equip:
                    var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(3);
                    if (heroEntityCtrl) {
                        var isShow = heroEntityCtrl.isEquipReddot().length > 0;
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.role4_skill:
                    //判断技能是否可以升级的接口，金币达到，cd没有的时候（return  [index,index,...]）   HeroEntityCtrl   isSkillReddot()
                    /*var heroEntityCtrl = heroCtrl.getHeroByIndex(2);
                     if(heroEntityCtrl){
                     var isShow = heroEntityCtrl.isSkillReddot().length>0;
                     setShow(isShow);
                     }*/
                    break;
                case gc.c_prop.pointRedKey.copy_boss:
                    gd.copyCtrl.isCanStartHell(setShow, self);
                    break;
                case gc.c_prop.pointRedKey.rankPk:
                    var isShow = gd.pkOutCtrl.hasRankPkNewDeal();
                    setShow(isShow);
                    break;
                case gc.c_prop.pointRedKey.bePkKill:
                    var isShow = gd.pkOutCtrl.isBePkKill();
                    setShow(isShow);
                    break;
                case gc.c_prop.pointRedKey.shopMain:
                    //获取商店红点
                    var shopEquipReddot = gd.shopCtrl.isShopEquipReddot();
                    var isShow = shopEquipReddot.length > 0;
                    setShow(isShow);
                    break;
                case gc.c_prop.pointRedKey.fuli:
                    var isShow = gd.activityCtrl.isFuliPointEffect();
                    setShow(isShow);
                    break;
                case gc.c_prop.pointGreenKey.copy_equip:
                    gd.copyCtrl.hasNotReadEquip(gc.c_prop.copyTypeKey.equip, setShow, self);
                    break;
                case gc.c_prop.pointGreenKey.copy_realm:
                    gd.copyCtrl.hasNotReadEquip(gc.c_prop.copyTypeKey.state, setShow, self);
                    break;
                case gc.c_prop.pointGreenKey.copy_boss:
                    gd.copyCtrl.hasNotReadEquip(gc.c_prop.copyTypeKey.hell, setShow, self);
                    break;
                case gc.c_prop.pointGreenKey.role1_skill:
                    //todo
                    break;
                case gc.c_prop.pointGreenKey.role1_realm:
                    //todo
                    break;
                case gc.c_prop.pointGreenKey.role2_skill:
                    //todo
                    break;
                case gc.c_prop.pointGreenKey.role2_realm:
                    //todo
                    break;
                case gc.c_prop.pointGreenKey.role3_skill:
                    //todo
                    break;
                case gc.c_prop.pointGreenKey.role3_realm:
                    //todo
                    break;
                case gc.c_prop.pointRedKey.demonLotus_1:
                    if (gd.demonLotusCtrl.getData()) {
                        var isShow = gd.demonLotusCtrl.isMaxExpc();
                        setShow(isShow);
                    }
                    break;
                case gc.c_prop.pointRedKey.demonLotus_2:
                    if (gd.demonLotusCtrl.getData()) {
                        var isShow = gd.demonLotusCtrl.isCanTrain();
                        setShow(isShow);
                    }
                    break;
            }
        };
        p.calAll = function () {
            var self = this;
            for (var key in gc.c_prop.pointEffectKey) {
                var locValue = gc.c_prop.pointEffectKey[key];
                self.cal(locValue);
            }
            for (var key in gc.c_prop.pointRedKey) {
                var locValue = gc.c_prop.pointRedKey[key];
                self.cal(locValue);
            }
            for (var key in gc.c_prop.pointGreenKey) {
                var locValue = gc.c_prop.pointGreenKey[key];
                self.cal(locValue);
            }
        };
        return PointCtrl;
    })(mo.DataController);
    gd.PointCtrl = PointCtrl;
    egret.registerClass(PointCtrl,"gd.PointCtrl");
    gd.pointCtrl = PointCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Sara on 2016/3/28.
 */
var gd;
(function (gd) {
    var ProtocolContentCtrl = (function (_super) {
        __extends(ProtocolContentCtrl, _super);
        function ProtocolContentCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=ProtocolContentCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.ProtocolContentEntity;
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
        };
        //更新数据
        p.updateData = function (data) {
            var self = this;
            if (!self._data)
                return;
            self.updateEntity(data);
        };
        //获取协议内容         gc.dsConsts.ProtocolContentEntity
        p.getInfo = function (cb, target) {
            var self = this;
            mo.request4Server(gc.iface.h_protocolContent_getInfo, {}, function (data) {
                cb.call(target, data);
            });
        };
        return ProtocolContentCtrl;
    })(mo.DataController);
    gd.ProtocolContentCtrl = ProtocolContentCtrl;
    egret.registerClass(ProtocolContentCtrl,"gd.ProtocolContentCtrl");
    gd.protocolContentCtrl = ProtocolContentCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Sara on 2015/9/18.
 */
var gd;
(function (gd) {
    var EquipCtrl = (function (_super) {
        __extends(EquipCtrl, _super);
        function EquipCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=EquipCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            var equipTypeKey = gc.c_prop.equipTypeKey;
            var partIndexKey = gc.c_prop.heroEquipIndexKey;
            self._partTypeMap = {};
            self._partTypeMap[partIndexKey.weapon] = equipTypeKey.weapon;
            self._partTypeMap[partIndexKey.clothes] = equipTypeKey.clothes;
            self._partTypeMap[partIndexKey.bracelet1] = equipTypeKey.bracelet;
            self._partTypeMap[partIndexKey.ring1] = equipTypeKey.ring;
            self._partTypeMap[partIndexKey.paralysisRing] = equipTypeKey.ring;
            self._partTypeMap[partIndexKey.reviveRing] = equipTypeKey.ring;
            self._partTypeMap[partIndexKey.protectRing] = equipTypeKey.ring;
            self._partTypeMap[partIndexKey.harmRing] = equipTypeKey.ring;
            self._partTypeMap[partIndexKey.ring2] = equipTypeKey.ring;
            self._partTypeMap[partIndexKey.bracelet2] = equipTypeKey.bracelet;
            self._partTypeMap[partIndexKey.helmet] = equipTypeKey.helmet;
            self._partTypeMap[partIndexKey.necklace] = equipTypeKey.necklace;
        };
        //获取熔炉装备id  [id,id,id...]  isRetain:是否保留未开启职业最高评分  0：不开启 1：开启
        p.getSmeltArr = function (isRetain, choColor) {
            var self = this;
            var returnArr = [];
            var smeltArr = [];
            var equipBag = {};
            var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            var t_itemEquip = mo.getJSONWithFileName(gc.cfg_t_itemEquip);
            var lvl = gd.userCtrl.getLvl();
            var getEquipBag = gd.userCtrl.getEquipBag(); //装备背包 {"1":[物品id,[随到的属性值],评价,是否穿戴],...}  "1":指定id,累加上去的
            for (key in getEquipBag) {
                equipBag[key] = getEquipBag[key];
            }
            var heroMap = gd.heroCtrl.getHeroMap(); //{"id":heroEntityCtrl,"id":heroEntityCtrl,..}      {"部位":物品id,....}
            var tempIdArr = [];
            for (var key in heroMap) {
                tempIdArr.push(heroMap[key].get(gc.dsConsts.HeroEntity.tempId));
            }
            //去除每个部位评价最高装备
            var maxArr = [[], [], [], [], [], []]; //【【评分，装备id】,【评分，装备id】,【评分，装备id】】 下标 0：战士 1：法师 2：道士
            for (var key in equipBag) {
                //if(t_itemEquip[equipBag[key][0]][gc.t_itemEquip_isUp] == 1){
                //    delete equipBag[key];
                //    continue;
                //}
                var part = t_itemEquip[equipBag[key][0]][gc.t_itemEquip_type]; //部位
                var profession = t_itemEquip[equipBag[key][0]][gc.t_itemEquip_job]; //职业
                switch (part) {
                    case gc.c_prop.equipTypeKey.weapon:
                        this._equipProfession(profession, maxArr[0], key, isRetain, tempIdArr, equipBag, t_item, lvl, part);
                        break;
                    case gc.c_prop.equipTypeKey.clothes:
                        this._equipProfession(profession, maxArr[1], key, isRetain, tempIdArr, equipBag, t_item, lvl, part);
                        break;
                    case gc.c_prop.equipTypeKey.bracelet:
                        this._equipProfession(profession, maxArr[2], key, isRetain, tempIdArr, equipBag, t_item, lvl, part);
                        break;
                    case gc.c_prop.equipTypeKey.ring:
                        this._equipProfession(profession, maxArr[3], key, isRetain, tempIdArr, equipBag, t_item, lvl, part);
                        break;
                    case gc.c_prop.equipTypeKey.helmet:
                        this._equipProfession(profession, maxArr[4], key, isRetain, tempIdArr, equipBag, t_item, lvl, part);
                        break;
                    case gc.c_prop.equipTypeKey.necklace:
                        this._equipProfession(profession, maxArr[5], key, isRetain, tempIdArr, equipBag, t_item, lvl, part);
                        break;
                }
            }
            for (var i = 0; i < maxArr.length; i++) {
                for (var i1 = 0; i1 < maxArr[i].length; i1++) {
                    if (maxArr[i][i1] != null) {
                        if (maxArr[i][i1][0][1])
                            delete equipBag[maxArr[i][i1][0][1]];
                        if (maxArr[i][i1][0][3])
                            delete equipBag[maxArr[i][i1][0][3][1]];
                        for (var i2 = 0; i2 < maxArr[i][i1][1].length; i2++) {
                            //delete equipBag[maxArr[i][i1][1][i2][1]];
                            if (maxArr[i][i1][1][i2] && maxArr[i][i1][1][i2][1])
                                delete equipBag[maxArr[i][i1][1][i2][1]];
                            if (maxArr[i][i1][1][i2] && maxArr[i][i1][1][i2][3])
                                delete equipBag[maxArr[i][i1][1][i2][3][1]];
                        }
                    }
                }
            }
            //去除已装备的装备
            for (var key in heroMap) {
                var equipData = heroMap[key].get(gc.dsConsts.HeroEntity.equipData); //{"部位":物品id,....}
                for (var key1 in equipData) {
                    delete equipBag[equipData[key1]];
                }
            }
            //[id,品质,等级]
            for (var key in equipBag) {
                if (!equipBag[key][3] && t_itemEquip[equipBag[key][0]][gc.t_itemEquip_isUp] != 1 && equipBag[key][0] < 900001) {
                    var s_lock = equipBag[key][6];
                    var item_id = equipBag[key][0];
                    if (!self._isLocked(s_lock, t_itemEquip[item_id])) {
                        //未锁定的装备
                        smeltArr.push([key, t_item[item_id][gc.t_item_color], t_item[item_id][gc.t_item_level], 0]);
                    }
                }
            }
            if (choColor) {
                for (var i = 0; i < smeltArr.length; i++) {
                    if (smeltArr[i][1] == choColor)
                        returnArr.push(smeltArr[i][0]);
                }
                return returnArr;
            }
            else {
                smeltArr = sortEquipList(smeltArr);
                var length = smeltArr.length < 9 ? smeltArr.length : 9;
                for (var i = 0; i < length; i++) {
                    returnArr.push(smeltArr[i][0]);
                }
                return returnArr;
            }
        };
        p._isLocked = function (s_lock, itemInfo) {
            var islock = 0;
            if (s_lock == undefined) {
                //server端未记录到是否已锁定.根据配表决定
                if (itemInfo && itemInfo[gc.t_itemEquip_isLocked]) {
                    islock = itemInfo[gc.t_itemEquip_isLocked];
                }
            }
            else {
                islock = s_lock;
            }
            return islock;
        };
        //筛选职业
        p._equipProfession = function (profession, weaponMax, key, isRetain, tempIdArr, equipBag, t_item, lvl, part) {
            key = parseInt(key);
            var quality = parseInt(equipBag[key][2]);
            var isEquip = parseInt(equipBag[key][3]);
            var needLvl = parseInt(t_item[equipBag[key][0]][gc.t_item_level]);
            var index = needLvl == 1 ? 0 : (parseInt(needLvl.toString().substring(0, needLvl.toString().length - 1)));
            if (isRetain == 1) {
                if (profession == gc.c_prop.heroJobKey.zs) {
                    this._equipScreen(0, weaponMax, needLvl, lvl, part, quality, key, isEquip, index, equipBag);
                }
                if (profession == gc.c_prop.heroJobKey.fs) {
                    this._equipScreen(1, weaponMax, needLvl, lvl, part, quality, key, isEquip, index, equipBag);
                }
                if (profession == gc.c_prop.heroJobKey.ds) {
                    this._equipScreen(2, weaponMax, needLvl, lvl, part, quality, key, isEquip, index, equipBag);
                }
                if (profession == gc.c_prop.heroJobKey.ys) {
                    this._equipScreen(3, weaponMax, needLvl, lvl, part, quality, key, isEquip, index, equipBag);
                }
            }
            else {
                if (profession == gc.c_prop.heroJobKey.zs && tempIdArr.indexOf(profession) != -1) {
                    this._equipScreen(0, weaponMax, needLvl, lvl, part, quality, key, isEquip, index, equipBag);
                }
                if (profession == gc.c_prop.heroJobKey.fs && tempIdArr.indexOf(profession) != -1) {
                    this._equipScreen(1, weaponMax, needLvl, lvl, part, quality, key, isEquip, index, equipBag);
                }
                if (profession == gc.c_prop.heroJobKey.ds && tempIdArr.indexOf(profession) != -1) {
                    this._equipScreen(2, weaponMax, needLvl, lvl, part, quality, key, isEquip, index, equipBag);
                }
                if (profession == gc.c_prop.heroJobKey.ys && tempIdArr.indexOf(profession) != -1) {
                    this._equipScreen(3, weaponMax, needLvl, lvl, part, quality, key, isEquip, index, equipBag);
                }
            }
        };
        //筛选最高评分
        p._equipScreen = function (i, weaponMax, needLvl, lvl, part, quality, key, isEquip, index, equipBag) {
            if (!weaponMax[i])
                weaponMax[i] = [[], []];
            if (needLvl <= lvl) {
                if (part == gc.c_prop.equipTypeKey.bracelet || part == gc.c_prop.equipTypeKey.ring) {
                    if (!weaponMax[i][0][1]) {
                        weaponMax[i][0] = [quality, key, isEquip];
                    }
                    else {
                        //if(part == gc.c_prop.equipTypeKey.bracelet || part == gc.c_prop.equipTypeKey.ring){
                        if (weaponMax[i][0][1] && !weaponMax[i][0][3]) {
                            weaponMax[i][0][3] = [quality, key, isEquip];
                        }
                        else {
                            if (weaponMax[i][0][0] <= quality) {
                                if (weaponMax[i][0][3][0] <= quality) {
                                    if (weaponMax[i][0][3][0] > weaponMax[i][0][0]) {
                                        if (weaponMax[i][0][0] == quality) {
                                            if (weaponMax[i][0][2] != 1)
                                                weaponMax[i][0] = [quality, key, isEquip, weaponMax[i][0][3]];
                                        }
                                        else {
                                            weaponMax[i][0] = [quality, key, isEquip, weaponMax[i][0][3]];
                                        }
                                    }
                                    else {
                                        if (weaponMax[i][0][3][0] == quality) {
                                            if (weaponMax[i][0][3][2] != 1)
                                                weaponMax[i][0][3] = [quality, key, isEquip];
                                        }
                                        else {
                                            weaponMax[i][0][3] = [quality, key, isEquip];
                                        }
                                    }
                                }
                                else {
                                    if (weaponMax[i][0][0] == quality) {
                                        if (weaponMax[i][0][2] != 1)
                                            weaponMax[i][0] = [quality, key, isEquip, weaponMax[i][0][3]];
                                    }
                                    else {
                                        weaponMax[i][0] = [quality, key, isEquip, weaponMax[i][0][3]];
                                    }
                                }
                            }
                            else if (weaponMax[i][0][3][0] <= quality) {
                                if (weaponMax[i][0][3][0] == quality) {
                                    if (weaponMax[i][0][3][2] != 1)
                                        weaponMax[i][0][3] = [quality, key, isEquip];
                                }
                                else {
                                    weaponMax[i][0][3] = [quality, key, isEquip];
                                }
                            }
                        }
                    }
                }
                else {
                    if (!weaponMax[i][0][1])
                        weaponMax[i][0] = [quality, key, isEquip];
                    if (weaponMax[i][0][0] < quality)
                        weaponMax[i][0] = [quality, key, isEquip];
                    if (weaponMax[i][0][0] == quality)
                        if (weaponMax[i][0][2] != 1)
                            weaponMax[i][0] = [quality, key, isEquip];
                }
            }
            else {
                //weaponMax[i][1].push([quality, key]);
                if (!weaponMax[i][1][index] || !weaponMax[i][1][index][1]) {
                    weaponMax[i][1][index] = [equipBag[key][2], key, isEquip];
                }
                else {
                    if (part == gc.c_prop.equipTypeKey.bracelet || part == gc.c_prop.equipTypeKey.ring) {
                        if (weaponMax[i][1][index] && !weaponMax[i][1][index][3]) {
                            weaponMax[i][1][index][3] = [equipBag[key][2], key, isEquip];
                        }
                        else {
                            if (weaponMax[i][1][index][0] <= equipBag[key][2]) {
                                if (weaponMax[i][1][index][3][0] <= equipBag[key][2]) {
                                    if (weaponMax[i][1][index][0] <= weaponMax[i][1][index][3][0]) {
                                        weaponMax[i][1][index] = [equipBag[key][2], key, isEquip, weaponMax[i][1][index][3]];
                                    }
                                    else {
                                        weaponMax[i][1][index][3] = [equipBag[key][2], key, isEquip];
                                    }
                                }
                                else {
                                    weaponMax[i][1][index] = [equipBag[key][2], key, isEquip, weaponMax[i][1][index][3]];
                                }
                            }
                            else if (weaponMax[i][1][index][3] && weaponMax[i][1][index][3][0] <= equipBag[key][2])
                                weaponMax[i][1][index][3] = [equipBag[key][2], key, isEquip];
                        }
                    }
                    else {
                        if (weaponMax[i][1][index][0] <= equipBag[key][2])
                            weaponMax[i][1][index] = [equipBag[key][2], key, isEquip, weaponMax[i][1][index][3]];
                    }
                }
            }
        };
        //获得装备件数
        p.getColorCount = function (choColor) {
            var self = this;
            var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            var t_itemEquip = mo.getJSONWithFileName(gc.cfg_t_itemEquip);
            var count = 0;
            var getEquipBag = gd.userCtrl.getEquipBag(); //装备背包 {"1":[物品id,[随到的属性值],评价,是否穿戴,name,[基础属性],是否锁定],...}  "1":指定id,累加上去的
            for (var key in getEquipBag) {
                if (getEquipBag[key][3])
                    continue;
                var item_id = getEquipBag[key][0];
                var color = t_item[item_id][gc.t_item_color];
                if (choColor != color)
                    continue;
                var s_lock = getEquipBag[key][6];
                if (self._isLocked(s_lock, t_itemEquip[item_id]))
                    continue;
                count++;
            }
            return count;
        };
        //装备熔炼 return [["强化石",num,颜色]，["装备",1,颜色]...]
        p.smelt = function (equipArr, choColor, cb, target) {
            var self = this;
            if (equipArr.length <= 0)
                return cb.call(target, []);
            var argKeys = gc.iface.a_smelt_smelt_args;
            var args = {};
            args[argKeys.equipArr] = equipArr;
            args[argKeys.choColor] = choColor;
            mo.requestWaiting4Server(gc.iface.a_smelt_smelt, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var gainArr = data[gc.dsConsts.ExUserData.gainArr] || [];
                var bagItems = data[gc.dsConsts.ExUserData.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                var delEquipBagArr = data[gc.dsConsts.ExUserData.delEquipBagArr] || [];
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag(delEquipBagArr, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                if (choColor) {
                    self.pushNotify(self.__class.ON_BATCH_SMELT);
                }
                else {
                    self.pushNotify(self.__class.ON_SMELT);
                }
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.bag);
                cb.call(target, gainArr);
                g_cache.recordGuideDone(g_consts.GUIDE_LCK.hasSmelting);
            });
        };
        //装备合成
        p.compound = function (compoundId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_smelt_compound_args;
            var args = {};
            args[argKeys.compoundId] = compoundId;
            mo.requestWaiting4Server(gc.iface.a_smelt_compound, args, function (data) {
                var userData = {};
                var bagItems = data[gc.dsConsts.ExUserData.bagItems] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                cb.call(target, data);
                self.pushNotify(self.__class.ON_BREAK_MERGED, compoundId);
            });
        };
        //装备特戒
        p.wearParRing = function (id, breakId, cb, target) {
            var self = this;
            var breId = parseInt(breakId);
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag);
            if (!bag[breId] || bag[breId] == 0)
                return mo.showMsg("还未拥有该特戒");
            var tempId = gd.heroCtrl.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.tempId);
            var argKeys = gc.iface.a_smelt_wearParRing_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.breakId] = breId;
            mo.requestWaiting4Server(gc.iface.a_smelt_wearParRing, args, function (data) {
                var userData = {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                gd.heroCtrl.updateHeroEntityCtrl(id, heroData);
                cb.call(target, data);
                self.pushNotify(self.__class.ON_WEAR_PAR_RING);
            });
        };
        //特戒突破
        p.ringBreak = function (id, breakId, cb, target) {
            var self = this;
            var breId = parseInt(breakId);
            var c_compound = mo.getJSONWithFileName(gc.cfg_c_compound);
            var t_itemBreak = mo.getJSONWithFileName(gc.cfg_t_itemBreak);
            var equipData = gd.heroCtrl.getEquipData(id);
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag);
            var lvl = gd.userCtrl.getLvl();
            var index = t_itemBreak[breId][gc.t_itemBreak_position];
            if (!equipData[index] || equipData[index] != breId)
                return mo.showMsg("还未拥有用于突破的特戒");
            if (!c_compound[breId + 1])
                return mo.showMsg("特戒已经突破到最高");
            var needLvl = c_compound[breId + 1][gc.c_compound_needLvl];
            if (lvl < needLvl)
                return mo.showMsg("等级不足");
            var reqItems1 = c_compound[breId + 1][gc.c_compound_reqItems1];
            var reqCount1 = c_compound[breId + 1][gc.c_compound_reqCount1];
            var count = bag[reqItems1] || 0;
            if (count < reqCount1)
                return mo.showMsg("碎片不足");
            var tempId = gd.heroCtrl.getHeroEntityCtrl(id).get(gc.dsConsts.HeroEntity.tempId);
            var argKeys = gc.iface.a_smelt_ringBreak_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.breakId] = breId;
            mo.requestWaiting4Server(gc.iface.a_smelt_ringBreak, args, function (data) {
                var userData = {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                gd.heroCtrl.updateHeroEntityCtrl(id, heroData);
                cb.call(target, data);
                self.pushNotify(self.__class.ON_BREAK_PAR_RING);
            });
        };
        //根据equipId获得tempId
        p.getTempIdByEquipId = function (equipId, eqpBag) {
            var self = this;
            var equipBag = eqpBag == null ? gd.userCtrl.getEquipBag() : eqpBag;
            return equipBag[equipId][0];
        };
        //装备评分
        p.getEquipEvaluate = function (equipId) {
            var equipBag = gd.userCtrl.getEquipBag();
            return equipBag[equipId][2];
        };
        p.getEquipItemLvl = function (equipId) {
            var self = this;
            var tmpId = self.getTempIdByEquipId(equipId);
            var t_item = mo.getJSONWithFileNameAndID(gc.cfg_t_item, tmpId);
            return t_item[gc.t_item_itemLvl];
        };
        //传承或极品装备评分
        p.getSpecialEquipEvaluate = function (tempId) {
            var self = this;
            var equipTemp = mo.getJSONWithFileNameAndID(gc.cfg_t_itemEquip, tempId);
            return gd.userUtils.getEquipGrade(tempId, equipTemp[gc.t_itemEquip_fixProp]);
        };
        //装备评分基数
        p.getBaseEvaluate = function (tempId) {
            var equipTemp = mo.getJSONWithFileNameAndID(gc.cfg_t_itemEquip, tempId);
            return equipTemp[gc.t_itemEquip_gradeBase];
        };
        //传承或极品装备属性加成
        p.getSpecialEquipExtra = function (tempId) {
            var equipTemp = mo.getJSONWithFileNameAndID(gc.cfg_t_itemEquip, tempId);
            return equipTemp[gc.t_itemEquip_fixProp];
        };
        //装备额外属性
        p.getEquipExtra = function (equipId, eqpBag) {
            var self = this;
            var equipBag = eqpBag == null ? gd.userCtrl.getEquipBag() : eqpBag;
            var tempId = self.getTempIdByEquipId(equipId, eqpBag);
            return (self.isSpecialEquip(tempId) || self.isRareEquip(tempId))
                ? self.getSpecialEquipExtra(tempId)
                : equipBag[equipId][1];
        };
        //获得基础属性
        p.getBasePropArr = function (tempId) {
            var equipTemp = mo.getJSONWithFileNameAndID(gc.cfg_t_itemEquip, tempId);
            return equipTemp[gc.t_itemEquip_propertys];
        };
        //获得装备名
        p.getEquipName = function (tempId) {
            var equipTemp = mo.getJSONWithFileNameAndID(gc.cfg_t_item, tempId);
            return equipTemp[gc.t_item_name];
        };
        //装备额外属性对象{属性key: 加成值}
        p.getEquipExtraObj = function (equipId, eqpBag) {
            var self = this;
            var propArr = self.getEquipExtra(equipId, eqpBag);
            return utils.kvArr2KvObj(propArr);
        };
        //根据部位获取装备栏强化等级信息
        p.getStrLvlInfo = function (tempId, strLvl) {
            var self = this;
            var equip = mo.getJSONWithFileName(gc.cfg_t_itemEquip)[tempId];
            var propAddKey = equip[gc.t_itemEquip_slotStrengthProperty];
            var propValue = equip[gc.t_itemEquip_propValue] * strLvl;
            return [strLvl, propAddKey, propValue]; //强化等级，属性类型，属性值
        };
        //获取英雄强化数据
        p.getIntensifyArr = function (heroId) {
            var getHeroEntityCtrl = gd.heroCtrl.getHeroEntityCtrl(heroId);
            return getHeroEntityCtrl.get(gc.dsConsts.HeroEntity.intensifyArr);
        };
        //获取英雄星级数据
        p.getStarArr = function (heroId) {
            var getHeroEntityCtrl = gd.heroCtrl.getHeroEntityCtrl(heroId);
            return getHeroEntityCtrl.get(gc.dsConsts.HeroEntity.starArr);
        };
        //获取英雄宝石数据  [[0级攻击宝石,0],[1级攻击宝石,250],[1级攻击宝石,250],[1级攻击宝石,250]]  万分率
        p.getGemArr = function (heroId, index) {
            var self = this;
            var heroIdGemArr = [];
            var gemInitial = 0;
            var c_gem = mo.getJSONWithFileName(gc.cfg_c_gem);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            if (index < 4)
                gemInitial = c_game[gc.id_c_game.gemInitial][index];
            if (index > 7)
                gemInitial = c_game[gc.id_c_game.gemInitial][index - 4];
            var getHeroEntityCtrl = gd.heroCtrl.getHeroEntityCtrl(heroId);
            var gemArr = getHeroEntityCtrl.get(gc.dsConsts.HeroEntity.gemArr) || [];
            var id = gemArr[index] || gemInitial; //宝石id
            heroIdGemArr[0] = [c_gem[id][gc.c_gem_items1], c_gem[id][gc.c_gem_effectPro1]];
            heroIdGemArr[1] = [c_gem[id][gc.c_gem_items2], c_gem[id][gc.c_gem_effectPro2]];
            heroIdGemArr[2] = [c_gem[id][gc.c_gem_items3], c_gem[id][gc.c_gem_effectPro3]];
            heroIdGemArr[3] = [c_gem[id][gc.c_gem_items4], c_gem[id][gc.c_gem_effectPro4]];
            return heroIdGemArr;
        };
        //获取英雄翅膀数据  [等级,星级,当前星经验]
        p.getWingArr = function (heroId) {
            var self = this;
            var getHeroEntityCtrl = gd.heroCtrl.getHeroEntityCtrl(heroId);
            return getHeroEntityCtrl.get(gc.dsConsts.HeroEntity.wingArr);
        };
        //按类型获得装备列表
        p.getEquipListByType = function (type) {
            var list = [];
            var equipBag = gd.userCtrl.getEquipBag();
            for (var equipId in equipBag) {
                var eq = equipBag[equipId];
                var tempId = eq[0];
                if (this.getEquipType(tempId) == type && !this.isEquiped(equipId)) {
                    list.push(eq);
                }
            }
            return list;
        };
        //根据职业/类型获得装备列表
        //按评分排序
        p.getEquipList = function (job, type) {
            var equips = gd.userCtrl.getEquipBag();
            var results = [];
            var equipData, tempId;
            var cfg_t_itemEquip = mo.getJSONWithFileName(gc.cfg_t_itemEquip);
            for (var equipId in equips) {
                equipData = equips[equipId];
                var isEquiped = equipData[3] > 0;
                if (isEquiped)
                    continue;
                tempId = equipData[0];
                var t_itemEquip = cfg_t_itemEquip[tempId];
                if (job == null && type == null) {
                    results.push(equipId);
                }
                else {
                    if (job != null && type != null) {
                        if (job == t_itemEquip[gc.t_itemEquip_job] && type == t_itemEquip[gc.t_itemEquip_type]) {
                            results.push(equipId);
                        }
                    }
                    else {
                        if (job == t_itemEquip[gc.t_itemEquip_job] || type == t_itemEquip[gc.t_itemEquip_type]) {
                            results.push(equipId);
                        }
                    }
                }
            }
            results = results.sort(function (a, b) {
                return equips[a][2] > equips[b][2] ? -1 : 1;
            }); //排序
            return results;
        };
        //获得所有背包中传承装备
        p.getBagSpecialEquipList = function () {
            var self = this;
            var equipList = self.getEquipList();
            return equipList.filter(function (equipId) {
                return self.isSpecialEquip(self.getTempIdByEquipId(equipId)) && !self.isEquiped(equipId);
            });
        };
        //获得所有背包中可传承装备
        p.getBagAllCanInherEquip = function () {
            var self = this;
            var equips = self.getBagSpecialEquipList();
            return equips.filter(function (equipId) {
                return gd.equipCtrl.getInheritedEquipOpt(equipId).nextEquipNeedLvlEnough;
            });
        };
        //获得装备类型
        p.getEquipType = function (tempId) {
            var equipData = mo.getJSONWithFileNameAndID(gc.cfg_t_itemEquip, tempId);
            return equipData[gc.t_itemEquip_type];
        };
        //获得装备类型名
        p.getEquipTypeName = function (tempId) {
            return gc.c_prop.equipType[this.getEquipType(tempId)];
        };
        //获得装备所属职业
        p.getEquipJob = function (tempId) {
            var itemInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_item, tempId);
            if (itemInfo[gc.t_item_type] == gc.c_prop.itemTypeKey.equip) {
                var equipData = mo.getJSONWithFileNameAndID(gc.cfg_t_itemEquip, tempId);
                return equipData[gc.t_itemEquip_job];
            }
            else if (itemInfo[gc.t_item_type] == gc.c_prop.itemTypeKey.gift) {
                var giftInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_talisman, tempId);
                return giftInfo[gc.t_talisman_job];
            }
        };
        //是否是可传承的装备
        p.isSpecialEquip = function (tempId) {
            var equipData = mo.getJSONWithFileNameAndID(gc.cfg_t_itemEquip, tempId);
            return (equipData[gc.t_itemEquip_isUp] || 0) > 0;
        };
        //是否是极品装备
        p.isRareEquip = function (tempId) {
            var equipData = mo.getJSONWithFileNameAndID(gc.cfg_t_itemEquip, tempId);
            return (equipData[gc.t_itemEquip_isRare] || 0) > 0;
        };
        //是否超品装备
        p.isSuperEquip = function (tempId) {
            var equipData = mo.getJSONWithFileNameAndID(gc.cfg_t_itemEquip, tempId);
            return (equipData[gc.t_itemEquip_isSuper] || 0) == 1;
        };
        //是否精品装备
        p.isJingEquip = function (tempId) {
            var equipData = mo.getJSONWithFileNameAndID(gc.cfg_t_itemEquip, tempId);
            return (equipData[gc.t_itemEquip_isSuper] || 0) == 2;
        };
        //获得装备穿戴等级
        p.getEquipWearLvl = function (tempId) {
            var equipData = mo.getJSONWithFileNameAndID(gc.cfg_t_item, tempId);
            return equipData[gc.t_item_level];
        };
        //根据位置获得装备类型
        p.getEquipTypeByPart = function (part) {
            return this._partTypeMap[part];
        };
        //检查装备是否已穿戴
        p.isEquiped = function (equipId) {
            var equipBag = gd.userCtrl.getEquipBag();
            var equipData = equipBag[equipId];
            return equipData[3] > 0;
        };
        p.queryStrLvlInfo = function (tempId, strLvl) {
            var self = this;
            var equip = mo.getJSONWithFileName(gc.cfg_t_itemEquip)[tempId];
            var propAddKey = equip[gc.t_itemEquip_slotStrengthProperty];
            var propValue = equip[gc.t_itemEquip_propValue] * strLvl;
            return [strLvl, propAddKey, propValue]; //强化等级，属性类型，属性值
        };
        p.queryRefineLvlInfo = function (tempId, refindLv) {
            var equip = mo.getJSONWithFileName(gc.cfg_t_itemEquip)[tempId];
            var propAddKey = equip[gc.t_itemEquip_slotStrengthProperty];
            var cfg_t_strengthRefine = mo.getJSONWithFileName(gc.cfg_t_strengthRefine);
            var propValue = cfg_t_strengthRefine[refindLv][gc.t_strengthRefine_strAddition] / 10000;
            return [refindLv, propAddKey, propValue]; //精炼等级，属性类型，属性值
        };
        p.queryStarInfo = function (starLvl) {
            var c_lvl = mo.getJSONWithFileNameAndID(gc.cfg_c_lvl, starLvl);
            return [starLvl, c_lvl[gc.c_lvl_upStarPropAdd] / 100]; //升星等级，属性值
        };
        //是否是特戒
        p.isBreakRing = function (part) {
            var tempPart = parseInt(part);
            return (tempPart >= gc.c_prop.heroEquipIndexKey.paralysisRing && tempPart <= gc.c_prop.heroEquipIndexKey.harmRing);
        };
        //获取指定部位的特戒
        p.getBreakRingBy = function (part) {
            var self = this;
            var breakRings = gd.userCtrl.getItemByType(gc.c_prop.itemTypeKey.break);
            var cfg_t_break = mo.getJSONWithFileName(gc.cfg_t_itemBreak);
            for (var itemId in breakRings) {
                var t_break = cfg_t_break[itemId];
                if (part == t_break[gc.t_itemBreak_position])
                    return itemId;
            }
            return null;
        };
        //获取特戒初始配置
        p.getInitBreakRing = function (part) {
            var self = this;
            var tempPart = parseInt(part);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var ringCfg = c_game[gc.id_c_game.parRingCfg];
            return ringCfg[tempPart - gc.c_prop.heroEquipIndexKey.paralysisRing];
        };
        //传承装备 equipId 装备id, tempId 英雄id, 背包中的填0
        p.inheritedEquip = function (opt, cb, target) {
            var self = this;
            if (opt.isMaxLvl)
                return mo.showMsg("满级了,不能再传承");
            if (!opt.nextEquipNeedLvlEnough)
                return mo.showMsg("角色等级不足");
            if (!opt.isItemEnough) {
                return mo.showMsg("物品不够");
            }
            var equipId = opt.equipId;
            var jobId = opt.heroJobId;
            var argKeys = gc.iface.a_equip_inheritedEquip_args;
            var args = {};
            args[argKeys.equipId] = equipId;
            args[argKeys.tempId] = jobId;
            mo.requestWaiting4Server(gc.iface.a_equip_inheritedEquip, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                var bagItems = data[gc.dsConsts.ExUserData.bagItems];
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                var bag = gd.userUtils.getNewBag(bagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntityNotShow(userData);
                if (jobId) {
                    var hec = gd.heroCtrl.getHeroByJob(jobId);
                    var partIndex = hec.getPartByEquipId(equipId);
                    gd.heroCtrl.getHeroByJob(jobId).updateEntity(heroData);
                    hec.pushNotify(hec.__class.ON_EQUIP_CHANGED, opt.inheritedInfo[gc.t_inheritedEquip_nextId], partIndex, equipId);
                }
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.chuanChen);
                cb.call(target, data);
                self.pushNotify(self.__class.ON_INHERITED);
            });
        };
        p.getInheritedEquipOpt = function (equipId) {
            var self = this;
            var opt = {
                equipId: equipId,
                heroJobId: 0,
                inheritedInfo: null,
                nextEquipNeedLvl: 0,
                nextEquipNeedLvlEnough: false,
                isMaxLvl: false,
                itemId: null,
                isItemEnough: false
            };
            var tempId = self.getTempIdByEquipId(equipId);
            var t_itemEquip = mo.getJSONWithFileName(gc.cfg_t_itemEquip)[tempId];
            var isEquiped = self.isEquiped(equipId);
            if (isEquiped) {
                opt.heroJobId = t_itemEquip[gc.t_itemEquip_job];
            }
            opt.itemId = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.inheritedEquip)[0];
            opt.inheritedInfo = self.getInheritedInfo(tempId);
            var nextId = opt.inheritedInfo[gc.t_inheritedEquip_nextId];
            if (nextId) {
                opt.nextEquipNeedLvl = mo.getJSONWithFileName(gc.cfg_t_item)[nextId][gc.t_item_level];
                opt.nextEquipNeedLvlEnough = gd.userCtrl.getLvl() >= opt.nextEquipNeedLvl;
                opt.isItemEnough = gd.userCtrl.getItemNum(opt.itemId) >= opt.inheritedInfo[gc.t_inheritedEquip_num];
            }
            else {
                opt.isMaxLvl = true;
            }
            return opt;
        };
        //获取传承的信息
        p.getInheritedInfo = function (tempId) {
            var self = this;
            if (!self.isSpecialEquip(tempId))
                return null;
            return mo.getJSONWithFileName(gc.cfg_t_inheritedEquip)[tempId];
        };
        //获取传承红点
        p.getSpecialEquipDot = function () {
            var self = this;
            var dotArr = [];
            var heroJob = gc.c_prop.heroJob;
            for (var k in heroJob) {
                var job = parseInt(k);
                var hec = gd.heroCtrl.getHeroByJob(job);
                if (hec) {
                    (hec.getAllCanInherEquip().length > 0) ? dotArr.push(1) : dotArr.push(0);
                }
            }
            (self.getBagAllCanInherEquip().length > 0) ? dotArr.push(1) : dotArr.push(0);
            return dotArr;
        };
        //-------订制武器相关开始---------------
        p.isCustomEquipByTempId = function (tempId) {
            var self = this;
            //订制武器的模板id范围
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.customizationCfg);
            var intId = parseInt(tempId);
            var range = c_game[14].split(",");
            return intId >= parseInt(range[0]) && intId <= parseInt(range[1]);
        };
        //是否是订制武器
        p.isCustomEquip = function (equipId) {
            var self = this;
            var equipInst = equipId;
            if (!(equipId instanceof Array)) {
                equipInst = gd.userCtrl.getEquipBag()[equipId];
            }
            //[910120, Array[4], 44666, 0, "和宣VIP", Array[4]]
            if (equipInst && equipInst[4] && equipInst[4] != "") {
                return true;
            }
            return false;
        };
        //获取订制信息,返回[名字,基础属性]
        p.getCustomInfo = function (equipId) {
            var self = this;
            var equipInst = equipId;
            //[910120, Array[4], 44666, 0, "和宣VIP", Array[4]]
            if (!(equipId instanceof Array)) {
                equipInst = gd.userCtrl.getEquipBag()[equipId];
            }
            if (equipInst && self.isCustomEquip(equipId)) {
                /*var copy = [].concat(equipInst);
                copy.splice(0, 4);//删除原有属性*/
                var copy = [];
                copy.push(equipInst[4], equipInst[5]);
                var idxs = copy.pop(); //弹出索引
                idxs.sort();
                var t_itemEqup = mo.getJSONWithFileNameAndID(gc.cfg_t_itemEquip, equipInst[0]);
                var t_props = t_itemEqup[gc.t_itemEquip_propertys];
                var finalProps = [];
                for (var i = 0, li = idxs.length; i < li; i++) {
                    finalProps.push(t_props[idxs[i]]);
                }
                copy.push(finalProps);
                return copy;
            }
            return null;
        };
        p.equipTrans = function (equipId) {
            var self = this;
            var equipInst = equipId;
            if (!(equipId instanceof Array)) {
                equipInst = gd.userCtrl.getEquipBag()[equipId];
            }
            //equipInst = [910120, Array[4], 44666, 0, "和宣VIP", Array[4]]
            var isCustomEquip = self.isCustomEquip(equipInst);
            var customInfo = self.getCustomInfo(equipInst);
            var tempId = equipInst[0];
            var props = equipInst[1];
            if (gd.equipCtrl.isSpecialEquip(tempId) || gd.equipCtrl.isRareEquip(tempId)) {
                props = gd.equipCtrl.getSpecialEquipExtra(tempId);
            }
            var ret = {
                isCustomEquip: isCustomEquip,
                tempId: tempId,
                extraPropArr: props,
                isEquiped: equipInst[3],
                name: (isCustomEquip ? customInfo[0] : self.getEquipName(equipInst[0])),
                basePropArr: isCustomEquip ? customInfo[1] : self.getBasePropArr(equipInst[0]),
                score: isCustomEquip ? gd.userUtils.getEquipGrade(tempId, props, equipInst[5]) : gd.userUtils.getEquipGrade(tempId, props)
            };
            return ret;
        };
        p.updateEquipItemLockStatus = function (equipId, isLocked, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_equip_updateEquipItemLockStatus_args;
            var args = {};
            args[argKeys.equipId] = equipId;
            args[argKeys.isLocked] = isLocked;
            mo.requestWaiting4Server(gc.iface.a_equip_updateEquipItemLockStatus, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                if (cb)
                    cb.call(target, data);
            });
        };
        p.sellEquipItem = function (equipIdArr, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_equip_sellEquipItems_args;
            var args = {};
            args[argKeys.equipIdArr] = equipIdArr;
            mo.requestWaiting4Server(gc.iface.a_equip_sellEquipItems, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                ;
                var bagItems = data[gc.dsConsts.ExUserData.bagItems] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var delEquipBagArr = data[gc.dsConsts.ExUserData.delEquipBagArr] || [];
                var equipBag = gd.userUtils.getNewEquipBag(delEquipBagArr, {});
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                self.pushNotify(self.__class.ON_SMELT);
                if (cb)
                    cb.call(target, data);
            });
        };
        EquipCtrl.ON_WEAR_PAR_RING = "ON_WEAR_PAR_RING"; //装备特戒
        EquipCtrl.ON_BREAK_PAR_RING = "ON_BREAK_PAR_RING"; //特戒突破
        EquipCtrl.ON_BREAK_MERGED = "ON_BREAK_MERGED"; //特戒合成
        EquipCtrl.ON_SMELT = "ON_SMELT"; //熔炼完成
        EquipCtrl.ON_BATCH_SMELT = "ON_BATCH_SMELT"; //批量熔炼完成
        EquipCtrl.ON_INHERITED = "ON_INHERITED"; //传承完成
        return EquipCtrl;
    })(mo.DataController);
    gd.EquipCtrl = EquipCtrl;
    egret.registerClass(EquipCtrl,"gd.EquipCtrl");
    function sortEquipList(list) {
        //数据结构：[id,品质,等级]       装备背包 {"1":[物品id,[随到的属性值],评价,是否穿戴],..
        var sortIdx = [1, 2, 0]; //排序规则：品质＞等级＞id
        var sortType = [1, -1, 1]; //id,品质升序，其他降序
        list.sort(function (a, b) {
            for (var i = 0; i < 3; i++) {
                var type = sortType[i];
                if (a[sortIdx[i]] > b[sortIdx[i]]) {
                    return type <= 0 ? -1 : 1;
                }
                else if (a[sortIdx[i]] < b[sortIdx[i]]) {
                    return type <= 0 ? 1 : -1;
                }
            }
            return 0;
        });
        return list;
    }
    gd.sortEquipList = sortEquipList;
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/5/27.
 */
var gd;
(function (gd) {
    var ShopCtrl = (function (_super) {
        __extends(ShopCtrl, _super);
        function ShopCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=ShopCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this._shopMap = {};
        };
        /**
         * 获取商店列表
         * @param {gc.c_prop.shopTypeKey} type 商店类型
         * @param cb
         * @param target
         * @returns [[物品id，数量，货币类型，正式价格,剩余购买次数,原价,商店类型,打折标识,额外属性数组,评分],...]
         */
        p.getList = function (type, cb, target) {
            var self = this;
            var c_shop = mo.getJSONWithFileName(gc.cfg_c_shop);
            self._getShopData(type, function (shopData) {
                var itemList = [];
                var items = shopData[gc.dsConsts.ShopEntity.items];
                for (var i = 0; i < items.length; i++) {
                    var locItemData = items[i];
                    var locShopId = locItemData[0];
                    var locLimit = locItemData[1];
                    var locC_shopData = c_shop[locShopId];
                    var locDiscount = locC_shopData[gc.c_shop_discount];
                    var locData = [];
                    locData[0] = locC_shopData[gc.c_shop_itemId];
                    locData[1] = 0;
                    locData[2] = locC_shopData[gc.c_shop_currencyType];
                    locData[3] = locC_shopData[gc.c_shop_price];
                    locData[4] = locLimit;
                    locData[5] = locData[3];
                    locData[6] = type;
                    locData[7] = locC_shopData[gc.c_shop_discount];
                    if (type == gc.c_prop.shopTypeKey.equip) {
                        locData[8] = locItemData[2];
                        locData[9] = locItemData[3];
                        //记录可以花金币购买的装备
                        if (utils.getCurrencyTypeItemId(locData[2]) == gc.c_prop.spItemIdKey.gold) {
                            self._recoderMinGoldCostItem(locData[3], i);
                        }
                    }
                    if (locDiscount) {
                        locData[5] = Math.floor((locData[5] * 10 / locDiscount));
                    }
                    itemList.push(locData);
                }
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.shopMain);
                cb.call(target, itemList);
            }, self);
        };
        p._recoderMinGoldCostItem = function (price, idx) {
            var self = this;
            self.canGoldBuyEquipGold = self.canGoldBuyEquipGold == null ? price : self.canGoldBuyEquipGold;
            self.canGoldBuyEquipIdx = self.canGoldBuyEquipIdx == null ? idx : self.canGoldBuyEquipIdx;
            if (price <= self.canGoldBuyEquipGold) {
                self.canGoldBuyEquipGold = price;
                self.canGoldBuyEquipIdx = idx;
            }
        };
        /**
         * 购买
         * @param { gc.c_prop.shopTypeKey} type 商店类型
         * @param index 下标
         * @param num 数量
         * @param cb
         * @param target
         */
        p.buy = function (type, index, num, cb, target) {
            var args = {};
            var self = this;
            var argsKeys = gc.iface.a_shop_buy_args;
            args[argsKeys.index] = index;
            args[argsKeys.type] = type;
            args[argsKeys.num] = num;
            var c_shop = mo.getJSONWithFileName(gc.cfg_c_shop);
            var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            var shopData = self._shopMap[type];
            var items = shopData[gc.dsConsts.ShopEntity.items];
            var dia = parseInt(c_shop[items[index][0]][gc.c_shop_price]) * parseInt(num);
            var currencyType = c_shop[items[index][0]][gc.c_shop_currencyType];
            if (currencyType == gc.c_prop.currencyTypeKey.diamond) {
                if (gd.userCtrl.getDiamond() < dia)
                    return mo.showMsg(gc.id_c_msgCode.noDiamond);
            }
            if (currencyType == gc.c_prop.currencyTypeKey.gold) {
                if (gd.userCtrl.getGold() < dia) {
                    gd.userCtrl.noGolds(function () {
                        self.buy(type, index, num, cb, target);
                        //ws.recordEvent("购买商城道具【" + t_item[c_shop[items[index][0]][gc.c_shop_itemId]][gc.t_item_name]  + "】的金币", dia);
                    }, self);
                    return;
                }
            }
            mo.requestWaiting4Server(gc.iface.a_shop_buy, args, function (data) {
                var isMail = data[gc.dsConsts.ExUserData.isMail]; //true 需要提示发送邮箱  false  不需要
                if (isMail)
                    mo.showMsg(gc.id_c_msgCode.bagMaxMail);
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var bagItems = data[gc.dsConsts.ExUserData.bagItems];
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems];
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                var updateShopData = data[gc.dsConsts.ExUserData.shopData];
                shopData[gc.dsConsts.ShopEntity.items] = updateShopData[gc.dsConsts.ShopEntity.items];
                self.pushNotify(self.__class.ON_BUY_SUCC, type);
                if (cb)
                    cb.call(target, data);
                if (type == gc.c_prop.shopTypeKey.equip)
                    g_cache.recordGuideDone(g_consts.GUIDE_LCK.buyEquip);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.shopMain);
            });
        };
        /**
         * 购买所有
         * @param { gc.c_prop.shopTypeKey} type 商店类型
         * @param cb
         * @param target
         */
        p.buyAll = function (type, cb, target) {
            var self = this;
            mo.showMsg(gc.id_c_msgCode.ifBuyAll, function () {
                var args = {};
                var argsKeys = gc.iface.a_shop_buyAll_args;
                args[argsKeys.type] = type;
                mo.requestWaiting4Server(gc.iface.a_shop_buyAll, args, function (data) {
                    var isMail = data[gc.dsConsts.ExUserData.isMail]; //true 需要提示发送邮箱  false  不需要
                    if (isMail)
                        mo.showMsg(gc.id_c_msgCode.bagMaxMail);
                    var showMsgArr = data[gc.dsConsts.ExUserData.showMsgArr];
                    if (showMsgArr[1] && showMsgArr[0]) {
                        mo.showMsg(gc.id_c_msgCode.noDiamond);
                    }
                    else if (showMsgArr[1]) {
                        mo.showMsg(gc.id_c_msgCode.noDiamond);
                    }
                    else if (showMsgArr[0]) {
                        gd.userCtrl.noGolds(function () { }, self);
                    }
                    var c_shop = mo.getJSONWithFileName(gc.cfg_c_shop);
                    var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
                    var shopIdObj = data[gc.dsConsts.ExUserData.shopIdObj]; //全部购买商品数据 {id:数量,...}
                    for (var key in shopIdObj) {
                        var dia = parseInt(c_shop[key][gc.c_shop_price]) * parseInt(shopIdObj[key]);
                    }
                    var userData = data[gc.dsConsts.ExUserData.userData] || {};
                    var bagItems = data[gc.dsConsts.ExUserData.bagItems];
                    var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems];
                    var bag = gd.userUtils.getNewBag({}, bagItems);
                    userData[gc.dsConsts.UserEntity.bag] = bag;
                    var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                    userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                    gd.userCtrl.updateEntity(userData);
                    var updateShopData = data[gc.dsConsts.ExUserData.shopData];
                    var shopData = self._shopMap[type];
                    shopData[gc.dsConsts.ShopEntity.items] = updateShopData[gc.dsConsts.ShopEntity.items];
                    gd.pointCtrl.cal(gc.c_prop.pointRedKey.shopMain);
                    if (cb)
                        cb.call(target, data);
                });
            });
        };
        /**
         * 获取下一次刷新时间(小时)
         */
        p.getNextRefreshHour = function (type) {
            var reHour = 0;
            switch (type) {
                case gc.c_prop.shopTypeKey.normal:
                    var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
                    reHour = c_game[gc.id_c_game.refreshTime][0];
                    break;
                case gc.c_prop.shopTypeKey.arena:
                    var curHour = Date.newDate().getHours();
                    var hourArr = "";
                    hourArr = hourArr.split(",");
                    for (var i = 0; i < hourArr.length; i++) {
                        var locHour = hourArr[i];
                        locHour = parseInt(locHour);
                        if (curHour < locHour) {
                            reHour = locHour;
                            break;
                        }
                    }
                    if (reHour == 0) {
                        reHour = hourArr[0];
                    }
                    break;
                case gc.c_prop.shopTypeKey.equip:
                    var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
                    reHour = c_game[gc.id_c_game.refreshTime][0];
                    break;
                case gc.c_prop.shopTypeKey.gem:
                    var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
                    reHour = c_game[gc.id_c_game.refreshTime][0];
                    break;
            }
            return reHour;
        };
        /**
         * 刷新
         * @param type 特殊商店类型 c_prop.shopTypeKey  lvlRefresh 是否等级自动刷新
         * @param cb
         * @param target
         */
        p.refresh = function (type, lvlRefresh, cb, target) {
            if (type != gc.c_prop.shopTypeKey.equip)
                return;
            var self = this;
            var args = {};
            var argsKeys = gc.iface.a_shop_refreshExShop_args;
            args[argsKeys.type] = type;
            args[argsKeys.lvlRefresh] = lvlRefresh;
            //检查金币是否足够
            var costGold = gc.callRefreshShop(self.getRefreshCount(type));
            if (lvlRefresh)
                costGold = 0;
            if (costGold > gd.userCtrl.getGold()) {
                gd.userCtrl.noGolds(function () {
                    self.refresh(type, lvlRefresh, cb, target);
                }, self);
                return;
            }
            self._getShopData(type, function () {
                mo.requestWaiting4Server(gc.iface.a_shop_refreshExShop, args, function (data) {
                    var shopData = self._shopMap[type];
                    var userData = data[gc.dsConsts.ExUserData.userData] || {};
                    gd.userCtrl.updateEntity(userData);
                    var updateShopData = data[gc.dsConsts.ExUserData.shopData];
                    shopData[gc.dsConsts.ShopEntity.items] = updateShopData[gc.dsConsts.ShopEntity.items];
                    shopData[gc.dsConsts.ShopEntity.refreshCount] = updateShopData[gc.dsConsts.ShopEntity.refreshCount];
                    shopData[gc.dsConsts.ShopEntity.refreshCountResetTime] = updateShopData[gc.dsConsts.ShopEntity.refreshCountResetTime];
                    gd.pointCtrl.cal(gc.c_prop.pointRedKey.shopMain);
                    if (cb)
                        cb.call(target, data);
                });
            }, self);
        };
        //获取刷新消耗
        p.getRefreshCount = function (type) {
            var self = this;
            var shopData = self._shopMap[type];
            //todo 临时处理
            if (!shopData)
                return 0;
            var refreshCount = 0; //普通商店今日刷新次数
            var refreshCountResetTime = Date.newDate(shopData[gc.dsConsts.ShopEntity.refreshCountResetTime]); //普通商店刷新次数重置时间
            if (refreshCountResetTime && refreshCountResetTime.equalsDay(Date.newDate()))
                refreshCount = shopData[gc.dsConsts.ShopEntity.refreshCount] || 0; //今天
            var costDiamond = gc.callRefreshShop(refreshCount); //刷新消耗
            return costDiamond;
        };
        /**
         * 获取剩余刷新时间(秒)
         * @param {gc.c_prop.shopTypeKey} type 商店类型
         */
        p.getReRefreshSeconds = function (type) {
            var self = this;
            var reSeconds = 100000;
            var shopData = self._shopMap[type];
            switch (type) {
                case gc.c_prop.shopTypeKey.normal:
                    //var lastTime = shopData[gc.dsConsts.ShopEntity.lastTime];
                    //lastTime = new Date(lastTime);
                    //var curLastTime = commonUtils.getCurLastRefreshTime();
                    //
                    //if (curLastTime.equals(lastTime)) {
                    //    reSeconds = Date.newDate().getSecondsBetween(curLastTime.addDays(1));
                    //} else {
                    //    reSeconds = 0;
                    //}
                    break;
                case gc.c_prop.shopTypeKey.arena:
                    var refreshCountResetTime = shopData[gc.dsConsts.ShopEntity.refreshCountResetTime];
                    refreshCountResetTime = new Date(refreshCountResetTime);
                    reSeconds = Date.newDate().getSecondsBetween(refreshCountResetTime.clone());
                    break;
                case gc.c_prop.shopTypeKey.equip:
                    var lastTime = shopData[gc.dsConsts.ShopEntity.lastTime];
                    lastTime = new Date(lastTime);
                    var curLastTime = gd.commonUtils.getCurLastRefreshTime();
                    if (curLastTime.equals(lastTime)) {
                        reSeconds = Date.newDate().getSecondsBetween(curLastTime.addDays(1));
                    }
                    else {
                        reSeconds = 0;
                    }
                    break;
                case gc.c_prop.shopTypeKey.gem:
                    break;
                default:
                    break;
            }
            return reSeconds;
        };
        //判断商店装备是否需要更换        [index,index,...]
        p.isShopEquipReddot = function () {
            var self = this;
            var returnArr = [];
            var tempIdArr = [];
            var heroEquipArr = [];
            var cfg_c_shop = mo.getJSONWithFileName(gc.cfg_c_shop);
            var cfg_t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            var cfg_t_itemEquip = mo.getJSONWithFileName(gc.cfg_t_itemEquip);
            var lvl = gd.userCtrl.getLvl();
            var heroMap = gd.heroCtrl.getHeroMap(); //{"id":heroEntityCtrl,"id":heroEntityCtrl,..}      {"部位":物品id,....}
            var equipBag = gd.userCtrl.getEquipBag() || {}; //装备背包 {"1":[物品id,[随到的属性值],评价,是否穿戴],...}  "1":指定id,累加上去的
            for (var key in heroMap) {
                tempIdArr.push(heroMap[key].get(gc.dsConsts.HeroEntity.tempId));
                heroEquipArr[heroMap[key].get(gc.dsConsts.HeroEntity.tempId)] = heroMap[key].get(gc.dsConsts.HeroEntity.equipData);
            }
            var shopData = self._shopMap[gc.c_prop.shopTypeKey.equip];
            if (!shopData)
                return returnArr; //判空处理
            var items = shopData[gc.dsConsts.ShopEntity.items];
            for (var i = 0; i < items.length; i++) {
                var evaluate = items[i][3]; //评价
                var itemId = cfg_c_shop[items[i][0]][gc.c_shop_itemId];
                var job = cfg_t_itemEquip[itemId][gc.t_itemEquip_job]; //装备职业
                //筛去没有该职业的装备
                if (tempIdArr.indexOf(job) < 0)
                    continue;
                var needLvl = cfg_t_item[itemId][gc.t_item_level]; //需求等级
                //剔除等级不足的装备
                if (lvl < needLvl)
                    continue;
                var type = cfg_t_itemEquip[itemId][gc.t_itemEquip_type]; //装备类型
                var index = [];
                switch (type) {
                    case gc.c_prop.equipTypeKey.weapon:
                        index = [gc.c_prop.heroEquipIndexKey.weapon];
                        break;
                    case gc.c_prop.equipTypeKey.clothes:
                        index = [gc.c_prop.heroEquipIndexKey.clothes];
                        break;
                    case gc.c_prop.equipTypeKey.helmet:
                        index = [gc.c_prop.heroEquipIndexKey.helmet];
                        break;
                    case gc.c_prop.equipTypeKey.necklace:
                        index = [gc.c_prop.heroEquipIndexKey.necklace];
                        break;
                    case gc.c_prop.equipTypeKey.ring:
                        index = [gc.c_prop.heroEquipIndexKey.ring1, gc.c_prop.heroEquipIndexKey.ring2];
                        break;
                    case gc.c_prop.equipTypeKey.bracelet:
                        index = [gc.c_prop.heroEquipIndexKey.bracelet1, gc.c_prop.heroEquipIndexKey.bracelet2];
                        break;
                }
                var equipData = heroEquipArr[job];
                for (var j = 0; j < index.length; j++) {
                    var partEquipEvaluate = 0; //穿戴装备评价值
                    if (equipData[index[j]])
                        partEquipEvaluate = equipBag[equipData[index[j]]][2];
                    if (evaluate > partEquipEvaluate) {
                        if (returnArr.indexOf(i) == -1)
                            returnArr.push(i);
                    }
                }
            }
            return returnArr;
        };
        p._getShopData = function (type, cb, target) {
            var self = this;
            var shopData = this._shopMap[type];
            if (shopData) {
                var reTime = self.getReRefreshSeconds(type);
                if (reTime > 0) {
                    return cb.call(target, shopData);
                }
            }
            var args = {};
            var self = this;
            var argsKeys = gc.iface.a_shop_getInfo_args;
            args[argsKeys.type] = type;
            mo.requestWaiting4Server(gc.iface.a_shop_getInfo, args, function (data) {
                self._shopMap[type] = data;
                if (cb)
                    cb.call(target, data);
            });
        };
        p.requestShopData = function (type, cb, target) {
            var args = {};
            var self = this;
            var argsKeys = gc.iface.a_shop_getInfo_args;
            args[argsKeys.type] = type;
            mo.request4Server(gc.iface.a_shop_getInfo, args, function (data) {
                self._shopMap[type] = data;
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.shopMain);
                if (cb)
                    cb.call(target, data);
            });
        };
        ShopCtrl.ON_BUY_SUCC = "on_buy_succ";
        return ShopCtrl;
    })(mo.DataController);
    gd.ShopCtrl = ShopCtrl;
    egret.registerClass(ShopCtrl,"gd.ShopCtrl");
})(gd || (gd = {}));

/**
 * Created by huanghaiying on 14/12/16.
 */
var gd;
(function (gd) {
    var SignCtrl = (function (_super) {
        __extends(SignCtrl, _super);
        function SignCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=SignCtrl,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            self._signItems = {};
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            self._refreshTime = c_game[gc.id_c_game.refreshTime][1];
        };
        p.initData = function (data) {
        };
        /**
         * 签到
         * @param cb
         * @param target
         * @returns {*}
         */
        p.sign = function (cb, target) {
            var self = this;
            if (self.isTodaySigned())
                return mo.showMsg("今日已经签到");
            var aData = gd.activityCtrl.getSignActivity();
            var aId = gd.activityCtrl.getActivityValue(aData, gc.dsConsts.ActivityEntity.id);
            gd.activityCtrl.receive(aId, 0, function (data) {
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.sign);
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * 补签
         * @param cb
         * @param target
         * @returns {*}
         */
        p.patchSign = function (cb, target) {
            var self = this;
            if (!self.isTodaySigned())
                return mo.showMsg("今日还未签到,不能进行补签");
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var price = c_game[gc.id_c_game.patchSignCon][0];
            var diamond = gd.userCtrl.get(gc.dsConsts.UserEntity.diamond);
            if (diamond < price)
                return mo.showMsg(gc.id_c_msgCode.noDiamond); //钻石不足
            mo.showMsg(gc.id_c_msgCode.ifPatch, price, function () {
                var aData = gd.activityCtrl.getSignActivity();
                var aId = gd.activityCtrl.getActivityValue(aData, gc.dsConsts.ActivityEntity.id);
                var args = {};
                var argsKey = gc.iface.a_activity_receive_args;
                args[argsKey.activityId] = aId;
                mo.requestWaiting4Server(gc.iface.a_activity_patchSign, args, function (data) {
                    var userData = data[gc.dsConsts.ExUserData.userData] || {};
                    var bagItems = data[gc.dsConsts.ExUserData.bagItems];
                    var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems];
                    var bag = gd.userUtils.getNewBag({}, bagItems);
                    userData[gc.dsConsts.UserEntity.bag] = bag;
                    var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                    userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                    gd.userCtrl.updateEntity(userData);
                    gd.pointCtrl.cal(gc.c_prop.pointEffectKey.sign);
                    if (cb)
                        cb.call(target, data);
                });
            });
        };
        /**
         * 获取今天是否可以补签
         * @returns {boolean}
         */
        p.isTodayPatchSign = function () {
            var self = this;
            var nowDate = Date.newDate();
            var signData = gd.userCtrl.get(gc.dsConsts.UserEntity.sign); //签到数据
            var days = nowDate.getDate();
            if (signData[0] + 1 > days || !self.isTodaySigned())
                return false;
            return true;
        };
        /**
         * 获取当月的签到物品
         * @returns {Array} [[id,items],..]
         */
        p.getSignItems = function () {
            var nowDate = Date.newDate();
            var month = nowDate.getMonth() + 1;
            //不做缓存
            /*if (this._signItems[month]) {
                return this._signItems[month];
            }*/
            var signItems = [];
            var singData = gd.activityCtrl.getSignItems();
            var startIndex = month * 100 + 1;
            for (var i = startIndex; i < startIndex + 32; i++) {
                var locItems = singData[i];
                if (!locItems)
                    continue;
                //转化数据
                signItems.push([i, locItems]);
            }
            this._signItems[month] = signItems;
            return signItems;
        };
        //获取当前日期签到状态  id:901 "state":0不可签，1已签，2可签，3可补签
        p.getState = function (id) {
            var self = this;
            var nowDate = Date.newDate();
            var month = nowDate.getMonth() * 100 + 100;
            var days = id - month;
            var nowDays = Date.newDate().getDate(); //当前日期天数
            var signNum = self.getSignNum(); //签到次数
            var state = 0;
            if (days <= signNum) {
                state = 1;
            }
            else {
                if (days <= nowDays) {
                    if (!self.isTodaySigned() && (days - 1) == signNum) {
                        state = 2;
                    }
                    else {
                        state = 3;
                        if ((days - 1) != signNum)
                            state = 0;
                    }
                }
                else {
                    state = 0;
                }
            }
            return state;
        };
        /**
         * 获取签到次数
         */
        p.getSignNum = function () {
            var signData = this._getSignData();
            var signNum = signData[0];
            var lastSignTime = signData[1];
            //未领取过
            if (!lastSignTime) {
                signNum = 0;
            }
            else {
                //如果签到不等于当前月,则认为没签到
                var now = Date.newDate();
                if (now.getMonth() != lastSignTime.getMonth()) {
                    signNum = 0;
                    lastSignTime = null;
                }
            }
            signData[0] = signNum;
            signData[1] = lastSignTime;
            gd.userCtrl.set(gc.dsConsts.UserEntity.sign, signData);
            return signNum;
        };
        /**
         * 获取今天是否已经签到
         * @returns {boolean}
         */
        p.isTodaySigned = function () {
            var signData = this._getSignData();
            var lastSignTime = signData[1];
            if (!lastSignTime)
                return false;
            var gameDate = Date.newDate();
            return !this._checkCanSign(gameDate, lastSignTime);
        };
        /**
         * 判断是否可以签到
         * @param nowDate
         * @param lastSignDate
         * @private
         */
        p._checkCanSign = function (nowDate, lastSignDate) {
            var nextSignDate = nowDate.clone();
            //获取下一次签到时间
            if (lastSignDate.getHours() < this._refreshTime) {
                nextSignDate = lastSignDate.clone().clearTime().addHours(this._refreshTime);
            }
            else {
                nextSignDate = lastSignDate.clone().clearTime().addHours(this._refreshTime).addDays(1);
            }
            //如果当前时间大于下一次签到时间，可以签到
            if (nowDate >= nextSignDate) {
                return true;
            }
            return false;
        };
        p._getSignData = function () {
            var signData = gd.userCtrl.get(gc.dsConsts.UserEntity.sign) || [0, null];
            var signTime = signData[1];
            if (signTime && typeof signTime == "string") {
                signData[1] = Date.newDate(signTime);
            }
            return signData;
        };
        SignCtrl.ON_TODAY_SIGNED = "on_today_signed";
        return SignCtrl;
    })(mo.DataController);
    gd.SignCtrl = SignCtrl;
    egret.registerClass(SignCtrl,"gd.SignCtrl");
})(gd || (gd = {}));

/**
 * Created by Sara on 2015/10/4.
 */
var gd;
(function (gd) {
    var LotteryCtrl = (function (_super) {
        __extends(LotteryCtrl, _super);
        function LotteryCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=LotteryCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.LotteryEntity;
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
        };
        //获取探宝值
        p.getTreasureValue = function () {
            return this.get(gc.dsConsts.LotteryEntity.treasureValue);
        };
        //获取探宝宝箱领取次数
        p.getTreasureChestCount = function () {
            return this.get(gc.dsConsts.LotteryEntity.treasureChestCount);
        };
        //初始化抽奖数据
        p.getInfo = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_lottery_getInfo, {}, function (data) {
                self.init(data);
                cb.call(target, data);
            });
        };
        /**
         * 抽奖
         * @param type 抽奖类型
         * @param count 抽奖次数
         * @param cb
         * @param target
         */
        p.lottery = function (type, count, cb, target) {
            var self = this;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var bag = gd.userCtrl.get(gc.dsConsts.UserEntity.bag);
            var diamond = gd.userCtrl.get(gc.dsConsts.UserEntity.diamond);
            var cosDiamond = 0;
            var goldenCount = 0;
            for (var i = 0; i < count; i++) {
                switch (type) {
                    case gc.c_prop.lotteryTypeKey.common:
                        //ws.recordEvent("普通探宝次数", 1);
                        var goldenKey = bag[gc.c_prop.spItemIdKey.goldenKey] || 0;
                        if (goldenKey <= goldenCount) {
                            cosDiamond += c_game[gc.id_c_game.lotteryCostCfg][0];
                        }
                        else {
                            goldenCount += 1;
                        }
                        break;
                    case gc.c_prop.lotteryTypeKey.advanced:
                        //ws.recordEvent("高级探宝次数", 1);
                        cosDiamond += c_game[gc.id_c_game.lotteryCostCfg][1];
                        break;
                    case gc.c_prop.lotteryTypeKey.supremacy:
                        //ws.recordEvent("至尊探宝次数", 1);
                        cosDiamond += c_game[gc.id_c_game.lotteryCostCfg][2];
                        break;
                }
            }
            if (diamond < cosDiamond)
                return mo.showMsg(gc.id_c_msgCode.noDiamond);
            var argKeys = gc.iface.a_lottery_lottery_args;
            var args = {};
            args[argKeys.type] = type;
            args[argKeys.count] = count;
            mo.requestWaiting4Server(gc.iface.a_lottery_lottery, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var lotteryData = data[gc.dsConsts.ExUserData.lotteryData] || {};
                var items = data[gc.dsConsts.ExUserData.items] || {}; //抽奖所得OBJ {itemId:数量，itemId:数量，。。。}
                var treasureValue = data[gc.dsConsts.ExUserData.treasureValue] || 0; //获得探宝值
                var bagItems = data[gc.dsConsts.ExUserData.bagItems] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                self.updateEntity(lotteryData);
                gd.userCtrl.updateEntity(userData);
                cb.call(target, [items, treasureValue]);
            });
        };
        /**
         * 领取探宝值宝箱
         * @param cb
         * @param target
         */
        p.getTreasureChest = function (cb, target) {
            var self = this;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var treasureValue = self.get(gc.dsConsts.LotteryEntity.treasureValue); //探宝值
            var needTreValue = c_game[gc.id_c_game.lotteryCostCfg][6]; //单条经验需要的探宝值
            if (treasureValue < needTreValue)
                return mo.showMsg("探宝值不足");
            mo.requestWaiting4Server(gc.iface.a_lottery_getTreasureChest, {}, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var lotteryData = data[gc.dsConsts.ExUserData.lotteryData] || {};
                var items = data[gc.dsConsts.ExUserData.items] || {}; //探宝值宝箱所得OBJ  {itemId:数量，itemId:数量，。。。}
                var cosTreValue = data[gc.dsConsts.ExUserData.cosTreValue] || 0; //扣除探宝值
                var bagItems = data[gc.dsConsts.ExUserData.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                self.updateEntity(lotteryData);
                gd.userCtrl.updateEntity(userData);
                cb.call(target, [items, cosTreValue]);
            });
        };
        return LotteryCtrl;
    })(mo.DataController);
    gd.LotteryCtrl = LotteryCtrl;
    egret.registerClass(LotteryCtrl,"gd.LotteryCtrl");
})(gd || (gd = {}));

/**
 * Created by Sara on 2015/11/14.
 */
var gd;
(function (gd) {
    var RankCtrl = (function (_super) {
        __extends(RankCtrl, _super);
        function RankCtrl() {
            _super.apply(this, arguments);
            this._cacheMinute = 5;
        }
        var d = __define,c=RankCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            self._rankDataDic = {};
            self._myRankDataDic = {};
            self._allRankDataDic = {};
        };
        /**
         * 获取公会相关排行版数据
         * @param rankType 类型：读取c_prop表
         * @param cb
         * @param target
         * @return [排行榜数据[UserRankEntity],{公会id：名称,公会id：名称...}]
         */
        p.getGuildRank = function (rankType, cb, target) {
            var self = this;
            var rankData = self._allRankDataDic[rankType];
            if (rankData) {
                var time = rankData[0];
                var data = rankData[1];
                if (time.clone().addMinutes(self._cacheMinute).isAfter(Date.newDate())) {
                    return cb.call(target, data);
                }
            }
            var argKeys = gc.iface.a_rank_getGuildRank_args;
            var args = {};
            args[argKeys.rankType] = rankType;
            mo.requestWaiting4Server(gc.iface.a_rank_getGuildRank, args, function (data) {
                var returnArr = [];
                returnArr[0] = data[gc.dsConsts.ExUserRankData.userRankList];
                returnArr[1] = data[gc.dsConsts.ExUserRankData.guildName];
                if (!data[gc.dsConsts.ExUserRankData.userRankList][0])
                    return mo.showMsg("该排行榜暂时没有数据");
                var time = Date.newDate();
                self._allRankDataDic[rankType] = [time, returnArr];
                if (cb)
                    cb.call(target, returnArr);
            });
        };
        /**
         * 获取排行版所有数据
         * @param rankType 类型：读取c_prop表
         * @param cb
         * @param target
         * @return [我的排名,我的数据(UserRankEntity),排行榜数据[UserRankEntity],[装备显示id,武器显示id,翅膀id,性别],{公会id：名称,公会id：名称...}]
         */
        p.getAllRankArr = function (rankType, cb, target) {
            var self = this;
            var rankData = self._allRankDataDic[rankType];
            if (rankData) {
                var time = rankData[0];
                var data = rankData[1];
                if (time.clone().addMinutes(self._cacheMinute).isAfter(Date.newDate())) {
                    return cb.call(target, data);
                }
            }
            var argKeys = gc.iface.a_rank_allRankArr_args;
            var args = {};
            args[argKeys.rankType] = rankType;
            mo.requestWaiting4Server(gc.iface.a_rank_allRankArr, args, function (data) {
                var returnArr = [];
                returnArr[0] = data[gc.dsConsts.ExUserRankData.userRank];
                returnArr[1] = data[gc.dsConsts.ExUserRankData.userRankData];
                returnArr[2] = data[gc.dsConsts.ExUserRankData.userRankList];
                returnArr[3] = [];
                returnArr[4] = data[gc.dsConsts.ExUserRankData.guildName];
                if (!data[gc.dsConsts.ExUserRankData.userRankList][0]) {
                    mo.showMsg("该排行榜暂时没有数据");
                    return cb.call(target);
                }
                if (rankType == gc.c_prop.rankTypeKey.guildRank || rankType == gc.c_prop.rankTypeKey.guildCombatRank || rankType == gc.c_prop.rankTypeKey.chairmanCombatRank)
                    return cb.call(target, returnArr);
                var oneId = data[gc.dsConsts.ExUserRankData.userRankList][0][gc.dsConsts.UserRankEntity.userId];
                var job = 0;
                if (rankType == gc.c_prop.rankTypeKey.zsRank) {
                    job = 1;
                }
                else if (rankType == gc.c_prop.rankTypeKey.fsRank) {
                    job = 2;
                }
                else if (rankType == gc.c_prop.rankTypeKey.dsRank) {
                    job = 3;
                }
                gd.heroCtrl.getHeroDisplayByTempId(oneId, job, function (heroData) {
                    returnArr[3] = heroData;
                    var time = Date.newDate();
                    self._allRankDataDic[rankType] = [time, returnArr];
                    if (cb)
                        cb.call(target, returnArr);
                }, self);
            });
        };
        /**
         * 获取排名
         * @param rankType 类型：读取c_prop表
         * @param cb
         * @param target
         * @return {UserRankEntity}
         */
        p.getRankList = function (rankType, cb, target) {
            var self = this;
            var rankData = self._rankDataDic[rankType];
            if (rankData) {
                var time = rankData[0];
                var list = rankData[1];
                if (time.clone().addMinutes(self._cacheMinute).isAfter(Date.newDate())) {
                    return cb.call(target, list);
                }
            }
            var argKeys = gc.iface.a_rank_getRankList_args;
            var args = {};
            args[argKeys.rankType] = rankType;
            mo.requestWaiting4Server(gc.iface.a_rank_getRankList, args, function (data) {
                var time = Date.newDate();
                var list = data;
                self._rankDataDic[rankType] = [time, list];
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * 获取个人排名
         * @param rankType 类型：读取c_prop表
         * @param cb
         * @param target
         * @return [排名，UserRankEntity]
         */
        p.getUserRank = function (rankType, cb, target) {
            var self = this;
            var rankData = self._myRankDataDic[rankType];
            if (rankData) {
                var time = rankData[0];
                var data = rankData[1];
                if (time.clone().addMinutes(self._cacheMinute).isAfter(Date.newDate())) {
                    return cb.call(target, data);
                }
            }
            var argKeys = gc.iface.a_rank_getUserRank_args;
            var args = {};
            args[argKeys.rankType] = rankType;
            mo.requestWaiting4Server(gc.iface.a_rank_getUserRank, args, function (data) {
                var returnArr = [];
                returnArr[0] = data[gc.dsConsts.ExUserRankData.userRank];
                returnArr[1] = data[gc.dsConsts.ExUserRankData.userRankData];
                var time = Date.newDate();
                self._myRankDataDic[rankType] = [time, data];
                if (cb)
                    cb.call(target, returnArr);
            });
        };
        return RankCtrl;
    })(mo.DataController);
    gd.RankCtrl = RankCtrl;
    egret.registerClass(RankCtrl,"gd.RankCtrl");
})(gd || (gd = {}));

/**
 * Created by Sara on 2015/10/7.
 */
var gd;
(function (gd) {
    var TaskCtrl = (function (_super) {
        __extends(TaskCtrl, _super);
        function TaskCtrl() {
            _super.apply(this, arguments);
            this._taskUpdateId = 0;
        }
        var d = __define,c=TaskCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.TaskEntity;
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
        };
        p.updateEntity = function (data) {
            _super.prototype.updateEntity.call(this, data);
            gd.pointCtrl.cal(gc.c_prop.pointEffectKey.task);
        };
        p.getUpdateId = function () {
            return this._taskUpdateId;
        };
        p.syncData = function () {
            var self = this;
            var args = {};
            mo.request4Server(gc.iface.a_task_getInfo, args, function (data) {
                self.init(data[gc.dsConsts.ExTask.taskData]);
                self._taskUpdateId = data[gc.dsConsts.ExTask.updateId];
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.task);
            });
        };
        //初始化数据
        p.getInfo = function (cb, target) {
            var self = this;
            var args = {};
            mo.requestWaiting4Server(gc.iface.a_task_getInfo, args, function (data) {
                self.init(data[gc.dsConsts.ExTask.taskData]);
                self._taskUpdateId = data[gc.dsConsts.ExTask.updateId];
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.task);
                cb.call(target, data);
            });
        };
        //获取活跃值   [活跃值，是否领取数据]
        p.getVitality = function () {
            var self = this;
            var value = 0;
            var vitalityChests = [0, 0, 0];
            var refreshTime = self.get(gc.dsConsts.TaskEntity.refreshTime);
            if (refreshTime && Date.newDate(refreshTime).equalsDay(Date.newDate())) {
                value = self.get(gc.dsConsts.TaskEntity.vitality);
                vitalityChests = self.get(gc.dsConsts.TaskEntity.vitalityChests);
            }
            return [value, vitalityChests];
        };
        //获取活跃宝箱是否可领取，是否已领取   【是否可领取，是否领取】
        p.getVitalityBoxState = function (index) {
            var self = this;
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.vitalityCfg);
            var returnArr = [false, true];
            var vitalityArr = self.getVitality();
            var vitality = vitalityArr[0];
            var vitalityChests = vitalityArr[1];
            var needVitality = c_game[index];
            if (vitality >= needVitality)
                returnArr[0] = true;
            if (vitalityChests[index] == 0)
                returnArr[1] = false;
            return returnArr;
        };
        //获取活跃值进度
        p.getVitalityProgress = function () {
            var self = this;
            var opt = {
                cur: 0,
                max: 0,
                per: 0
            };
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.vitalityCfg);
            var vitalityArr = self.getVitality();
            opt.cur = parseInt(vitalityArr[0].toString());
            opt.max = c_game[2];
            opt.per = opt.cur / opt.max * 100;
            return opt;
        };
        //获取日常任务列表
        p.getDailyTaskList = function () {
            var self = this;
            var cfg_c_task = mo.getJSONWithFileName(gc.cfg_c_task);
            if (!self._dailyTaskList) {
                var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.dailyTasksCfg);
                var startId = c_game[0], endId = c_game[1];
                var list = [];
                for (var id = startId; id <= endId; id++) {
                    if (id == 2100012)
                        continue;
                    list.push(cfg_c_task[id]);
                }
                self._dailyTaskList = list;
            }
            var sortArr = [];
            for (var i = 0; i < self._dailyTaskList.length; i++) {
                var id = self._dailyTaskList[i][gc.c_task_id];
                sortArr.push([id, self.getTaskOpt(id).isComplete ? (self.getTaskOpt(id).isReceive ? 1 : 3) : 2]);
            }
            var returnArr = [];
            sortArr = sortList(sortArr);
            for (var i = 0; i < sortArr.length; i++) {
                returnArr.push(cfg_c_task[sortArr[i][0]]);
            }
            return returnArr;
        };
        //获取成就任务列表
        p.getTasksList = function () {
            var self = this;
            var returnArr = [];
            var cfg_c_task = mo.getJSONWithFileName(gc.cfg_c_task);
            var tasks = self.get(gc.dsConsts.TaskEntity.tasks);
            var sortArr = [];
            for (var i = 0; i <= 13; i++) {
                var tasksId = tasks[i];
                sortArr.push([tasksId, self.getTaskOpt(tasksId).isComplete ? (self.getTaskOpt(tasksId).isReceive ? 1 : 3) : 2]);
            }
            sortArr = sortList(sortArr);
            for (var i = 0; i < sortArr.length; i++) {
                returnArr.push(cfg_c_task[sortArr[i][0]]);
            }
            return returnArr;
        };
        //获取任务奖励物品
        p.getTaskReward = function (taskId) {
            var self = this;
            var c_task = mo.getJSONWithFileNameAndID(gc.cfg_c_task, taskId);
            var c_reward = mo.getJSONWithFileNameAndID(gc.cfg_c_reward, c_task[gc.c_task_rewardId]);
            var reward = {};
            if (c_reward[gc.c_reward_gold])
                reward[gc.c_prop.spItemIdKey.gold] = c_reward[gc.c_reward_gold];
            if (c_reward[gc.c_reward_diamond])
                reward[gc.c_prop.spItemIdKey.diamond] = c_reward[gc.c_reward_diamond];
            if (c_reward[gc.c_reward_activity])
                reward[gc.c_prop.spItemIdKey.vitality] = c_reward[gc.c_reward_activity];
            var rewardItems = c_reward[gc.c_reward_rewardItems];
            for (var itemId in rewardItems) {
                reward[itemId] = rewardItems[itemId];
            }
            return reward;
        };
        //获取累计熔炼件数
        p.getEquipSmelt = function () {
            var self = this;
            var tasksValue = self.get(gc.dsConsts.TaskEntity.tasksValue);
            return tasksValue[gc.c_prop.cTaskTypeKey.equipSmelt];
        };
        //获取遭遇战次数
        p.getEncounter = function () {
            var self = this;
            var tasksValue = self.get(gc.dsConsts.TaskEntity.tasksValue);
            return tasksValue[gc.c_prop.cTaskTypeKey.encounter];
        };
        //获取每日数据   {"任务id":[完成数量,是否领取],"任务id":[完成数量,是否领取],.....}
        p.getDailyTasks = function () {
            var self = this;
            var dailyTasks = {};
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var refreshTime = self.get(gc.dsConsts.TaskEntity.refreshTime);
            if (!refreshTime || !Date.newDate(refreshTime).equalsDay(Date.newDate())) {
                var dailyTasksStar = cfg_c_game[gc.id_c_game.dailyTasksCfg][0];
                var dailyTasksEnd = cfg_c_game[gc.id_c_game.dailyTasksCfg][1];
                for (var i = dailyTasksStar; i <= dailyTasksEnd; i++) {
                    dailyTasks[i] = [0, 0];
                }
            }
            else {
                dailyTasks = self.get(gc.dsConsts.TaskEntity.dailyTasks);
            }
            return dailyTasks;
        };
        p.getTaskOpt = function (taskId) {
            var self = this;
            var opt = {
                taskId: taskId,
                value: 0,
                targetValue: 1,
                isComplete: true,
                isReceive: true,
                type: 0,
                subType: 0 //任务子类型
            };
            var cfg_c_task = mo.getJSONWithFileName(gc.cfg_c_task);
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var c_task = cfg_c_task[taskId];
            var dailyTasksStar = cfg_c_game[gc.id_c_game.dailyTasksCfg][0];
            var dailyTasksEnd = cfg_c_game[gc.id_c_game.dailyTasksCfg][1];
            var dailyTasks = self.getDailyTasks();
            var needValue = c_task[gc.c_task_targetValue];
            var doneTasks = self.get(gc.dsConsts.TaskEntity.doneTasks) || [];
            var tasksValue = self.get(gc.dsConsts.TaskEntity.tasksValue);
            var cTaskType = c_task[gc.c_task_cTaskType];
            opt.type = c_task[gc.c_task_taskType];
            opt.subType = c_task[gc.c_task_cTaskType];
            if (taskId >= dailyTasksStar && taskId <= dailyTasksEnd) {
                if (!dailyTasks[taskId])
                    dailyTasks[taskId] = [0, 0];
                if (dailyTasks[taskId][0] < needValue)
                    opt.isComplete = false;
                if (dailyTasks[taskId][1] == 0)
                    opt.isReceive = false;
                opt.value = dailyTasks[taskId][0];
            }
            else {
                if (tasksValue[cTaskType] < needValue)
                    opt.isComplete = false;
                if (doneTasks.indexOf(taskId) == -1)
                    opt.isReceive = false;
                var tasksValue = self.get(gc.dsConsts.TaskEntity.tasksValue);
                opt.value = tasksValue[cTaskType];
            }
            //目标数
            var targetValue = c_task[gc.c_task_targetValue];
            opt.targetValue = targetValue;
            //var subType = c_task[gc.c_task_cTaskType];//子类型
            //var KEY = gc.c_prop.cTaskTypeKey;
            //switch (subType){
            //    case KEY.personLvl:
            //    case KEY.equipSmelt:
            //    case KEY.encounter:
            //    case KEY.equipStrength:
            //        opt.targetValue = targetValue;
            //        break;
            //    default :
            //        opt.targetValue = 1;
            //        break;
            //}
            return opt;
        };
        /**
         * 任务奖励领取
         * @param taskId 任务id
         * @param cb
         * @param target
         */
        p.taskAward = function (opt, cb, target) {
            var self = this;
            var taskId = opt.taskId;
            if (!opt.isComplete)
                return mo.showMsg("未达成完成条件");
            if (opt.isReceive)
                return mo.showMsg("已领取");
            var argKeys = gc.iface.a_task_taskAward_args;
            var args = {};
            args[argKeys.taskId] = taskId;
            mo.requestWaiting4Server(gc.iface.a_task_taskAward, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var bagItems = data[gc.dsConsts.ExUserData.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                var taskData = data[gc.dsConsts.ExUserData.taskData] || {};
                var items = data[gc.dsConsts.ExUserData.items] || {}; //抽奖所得OBJ {itemId:数量，itemId:数量，。。。}
                var vitality = data[gc.dsConsts.ExUserData.vitality] || 0; //获得活跃度
                self.updateEntity(taskData);
                gd.userCtrl.updateEntity(userData);
                cb.call(target, [items, vitality]);
            });
        };
        /**
         * 领取活跃度宝箱
         * @param index 宝箱下标
         * @param cb
         * @param target
         */
        p.getVitalityChest = function (index, cb, target) {
            var self = this;
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var refreshTime = self.get(gc.dsConsts.TaskEntity.refreshTime);
            var vitality = self.get(gc.dsConsts.TaskEntity.vitality);
            var needVitalityArr = cfg_c_game[gc.id_c_game.vitalityCfg] || [];
            var vitalityChests = self.get(gc.dsConsts.TaskEntity.vitalityChests) || [0, 0, 0];
            if (!refreshTime)
                return mo.showMsg("探宝值不足");
            if (!Date.newDate(refreshTime).equalsDay(Date.newDate()))
                return mo.showMsg("探宝值不足");
            if (vitality < needVitalityArr[index])
                return mo.showMsg("探宝值不足");
            if (vitalityChests[index] == 1)
                return mo.showMsg("已领取");
            var argKeys = gc.iface.a_task_getVitalityChest_args;
            var args = {};
            args[argKeys.index] = index;
            mo.requestWaiting4Server(gc.iface.a_task_getVitalityChest, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var bagItems = data[gc.dsConsts.ExUserData.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                var taskData = data[gc.dsConsts.ExUserData.taskData] || {};
                var items = data[gc.dsConsts.ExUserData.items] || {}; //抽奖所得OBJ {itemId:数量，itemId:数量，。。。}
                self.updateEntity(taskData);
                gd.userCtrl.updateEntity(userData);
                cb.call(target, items);
                self.pushNotify(self.__class.ON_RECIVED_BOX);
            });
        };
        p._isResId = function (itemId) {
            return itemId == gc.c_prop.spItemIdKey.gold
                || itemId == gc.c_prop.spItemIdKey.diamond;
        };
        //获取宝箱奖励
        p.queryVitalityBoxReward = function (index) {
            var self = this;
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var vitalityCfg = cfg_c_game[gc.id_c_game.vitalityCfg] || [];
            var rewardBoxId = vitalityCfg[index + 3];
            var t_itemLogic = mo.getJSONWithFileNameAndID(gc.cfg_t_itemLogic, rewardBoxId);
            var createArr = t_itemLogic[gc.t_itemLogic_create];
            var spItems = {}, normalItems = {};
            for (var i = 0, li = createArr.length; i < li; i++) {
                var create = createArr[i];
                var itemId = create[0];
                var count = create[1];
                if (self._isResId(itemId)) {
                    spItems[itemId] = count;
                }
                else {
                    normalItems[itemId] = count;
                }
            }
            return [spItems, normalItems];
        };
        //判断是否有任务可以领取     [每日,成就]
        p.isTaskReddot = function () {
            var self = this;
            var returnArr = [false, false];
            if (!self._data)
                returnArr;
            //每日
            var dailyTasks = self.getDailyTasks();
            var cfg_c_task = mo.getJSONWithFileName(gc.cfg_c_task);
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.dailyTasksCfg);
            var startId = c_game[0], endId = c_game[1];
            for (var id = startId; id <= endId; id++) {
                var c_task = cfg_c_task[id];
                var needValue = c_task[gc.c_task_targetValue];
                if (!dailyTasks[id])
                    dailyTasks[id] = [0, 0];
                if (dailyTasks[id][0] < needValue)
                    continue;
                if (dailyTasks[id][1] != 0)
                    continue;
                returnArr[0] = true;
                break;
            }
            //成就
            var tasks = self.get(gc.dsConsts.TaskEntity.tasks);
            var tasksValue = self.get(gc.dsConsts.TaskEntity.tasksValue);
            var doneTasks = self.get(gc.dsConsts.TaskEntity.doneTasks) || [];
            for (var key in tasks) {
                var needValue = cfg_c_task[tasks[key]][gc.c_task_targetValue];
                if (tasksValue[key] < needValue)
                    continue;
                if (doneTasks.indexOf(tasks[key]) != -1)
                    continue;
                returnArr[1] = true;
                break;
            }
            return returnArr;
        };
        TaskCtrl.ON_RECIVED_BOX = "on_recevied_box";
        return TaskCtrl;
    })(mo.DataController);
    gd.TaskCtrl = TaskCtrl;
    egret.registerClass(TaskCtrl,"gd.TaskCtrl");
    function sortList(list) {
        //数据结构：[id,是否可领取]       [tasksId,self.getTaskOpt(tasksId).isComplete,self.getTaskOpt(tasksId).isReceive]
        var sortIdx = [1, 0]; //排序规则：是否可领取＞id
        var sortType = [-1, 1]; //id升序，其他降序
        list.sort(function (a, b) {
            for (var i = 0; i < 2; i++) {
                var type = sortType[i];
                if (a[sortIdx[i]] > b[sortIdx[i]]) {
                    return type <= 0 ? -1 : 1;
                }
                else if (a[sortIdx[i]] < b[sortIdx[i]]) {
                    return type <= 0 ? 1 : -1;
                }
            }
            return 0;
        });
        return list;
    }
    gd.sortList = sortList;
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/5/27.
 */
var gd;
(function (gd) {
    var TimeCtrl = (function (_super) {
        __extends(TimeCtrl, _super);
        function TimeCtrl() {
            _super.apply(this, arguments);
            this._addTime = 0;
            this._timeErrorNum = 0;
            this._addTime2 = 0;
        }
        var d = __define,c=TimeCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
        };
        p.initData = function (data) {
            var self = this;
            self._lastTime = new Date();
            self._clearUpdateIntervalId();
            self._syncIntervalId1 = mo.setInterval(self._update1, self, 2 * 60 * 1000); //2分钟
            self._syncIntervalId2 = mo.setInterval(self._update2, self, 5 * 1000); //5秒
            self._syncIntervalId3 = mo.setInterval(self._update3, self, 3 * 1000); //3秒
            mo.tick(self._tick, self);
        };
        p.clearAll = function () {
            var self = this;
            self._clearUpdateIntervalId();
        };
        p._tick = function (dt) {
            this._addTime += dt;
            this._addTime2 += dt;
        };
        p._update1 = function () {
            var self = this;
            //2分钟一次
            //同步用户数据
            gd.userCtrl.syncData2(function (serverTime) {
            }, self);
        };
        p._update2 = function () {
            var self = this;
            var sendData = [];
            sendData[0] = gd.chatCtrl.getLastId();
            sendData[1] = gd.taskCtrl.getUpdateId();
            //hd {
            sendData[2] = gd.hoodinnCtlr.getLastBugChatId();
            sendData[3] = gd.hoodinnCtlr.getLastSysMsgId();
            sendData[4] = gd.bossFightCtrl.getEntity(1).getInspireNum();
            sendData[5] = gd.redEnvelopeCtrl.getLastId(); //红包
            sendData[6] = gd.chatCtrl.getGuildLastId(); //公会
            sendData[7] = gd.guildPersonalCtrl.getData() ? gd.guildPersonalCtrl.getGuildId() : 0; //公会id
            //hd }
            gd.userCtrl.syncData(sendData, function (data) {
                var chat = data[gc.dsConsts.AsyncData.chat];
                var guildChat = data[gc.dsConsts.AsyncData.guildChat];
                if (chat || guildChat)
                    gd.chatCtrl.syncData();
                var redEnvelope = data[gc.dsConsts.AsyncData.redEnvelope];
                var allListCountCount = gd.redEnvelopeCtrl._allList || [];
                if (redEnvelope || allListCountCount.length > 0)
                    gd.redEnvelopeCtrl.syncData();
                var task = data[gc.dsConsts.AsyncData.task];
                if (task)
                    gd.taskCtrl.syncData();
                var pkDeal = data[gc.dsConsts.AsyncData.pkDeal];
                if (pkDeal)
                    gd.pkOutCtrl.dealRecord();
                var bePkKill = data[gc.dsConsts.AsyncData.bePkKill];
                if (bePkKill)
                    gd.pkOutCtrl.setBePkKill(bePkKill);
                //hd { 增加bug反馈的聊天消息、及时公告消息
                var bugchat = data[gc.dsConsts.AsyncData.kefu];
                if (bugchat)
                    gd.hoodinnCtlr.syncBugChatData();
                var anno = data[gc.dsConsts.AsyncData.sysMsg];
                if (anno)
                    gd.hoodinnCtlr.syncSysMsgData();
                //hd }
                var rankPkDeal = data[gc.dsConsts.AsyncData.rankPkDeal];
                if (rankPkDeal)
                    gd.pkOutCtrl.dealRankPkRecord();
                var inspire = data[gc.dsConsts.AsyncData.inspire];
                //if(inspire) bossFightCtrl.getEntity(1).syncInspire();
                var openBossIds = data[gc.dsConsts.AsyncData.isBossOpen];
                gd.bossFightCtrl.setOpenIds(openBossIds);
                var buffArr = data[gc.dsConsts.AsyncData.buffArr];
                gd.fightCtrl.setBuffArr(buffArr);
                var isGuildChange = data[gc.dsConsts.AsyncData.isGuildChange];
                if (isGuildChange)
                    gd.guildCtrl.getInfo(function () { }, this);
                var guildWarIsOpen = data[gc.dsConsts.AsyncData.guildWarIsOpen];
                gd.guildWarCtrl.setIsOpen(guildWarIsOpen);
            }, self);
            gd.pkOutCtrl.calPkValue();
        };
        p._update3 = function () {
            gd.guildWarCtrl.syncData();
        };
        p._clearUpdateIntervalId = function () {
            var self = this;
            if (self._syncIntervalId1) {
                mo.clearInterval(self._syncIntervalId1);
                self._syncIntervalId1 = null;
            }
            if (self._syncIntervalId2) {
                mo.clearInterval(self._syncIntervalId2);
                self._syncIntervalId2 = null;
            }
            if (self._syncIntervalId3) {
                mo.clearInterval(self._syncIntervalId3);
                self._syncIntervalId3 = null;
            }
        };
        return TimeCtrl;
    })(mo.DataController);
    gd.TimeCtrl = TimeCtrl;
    egret.registerClass(TimeCtrl,"gd.TimeCtrl");
    gd.timeCtrl = TimeCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/5/27.
 */
var gd;
(function (gd) {
    var UserCtrl = (function (_super) {
        __extends(UserCtrl, _super);
        function UserCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=UserCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this._equipBk = {};
            this.DATA_KEY = gc.dsConsts.UserEntity;
        };
        //使用兑换码
        p.initData = function (loginData) {
            var self = this;
            gd.signCtrl = gd.SignCtrl.getInstance();
            gd.heroCtrl = gd.HeroCtrl.getInstance();
            gd.heroCtrl.initData(loginData[gc.dsConsts.LoginData.heroList]);
            gd.arenaCtrl.initData(loginData[gc.dsConsts.LoginData.arenaData]);
            gd.copyCtrl = gd.CopyCtrl.getInstance();
            gd.copyCtrl.initData(loginData[gc.dsConsts.LoginData.copyProgressList]);
            gd.pkOutCtrl = gd.PkOutCtrl.getInstance();
            gd.pkOutCtrl.initData(loginData[gc.dsConsts.LoginData.pkOut]);
            gd.lotteryCtrl = gd.LotteryCtrl.getInstance();
            gd.lotteryCtrl.initData(loginData[gc.dsConsts.LoginData.lottery]);
            gd.taskCtrl = gd.TaskCtrl.getInstance();
            gd.taskCtrl.initData(loginData[gc.dsConsts.LoginData.task]);
            gd.shopCtrl = gd.ShopCtrl.getInstance();
            gd.equipCtrl = gd.EquipCtrl.getInstance();
            gd.rankCtrl = gd.RankCtrl.getInstance();
            gd.kingCtrl = gd.KingCtrl.getInstance();
            gd.rechargeCtrl.initData(loginData[gc.dsConsts.LoginData.rechargeData]);
            gd.mailCtrl.initData();
            gd.signCtrl.initData();
            gd.timeCtrl.initData();
            gd.msgReceiverCtrl.initData();
            gd.demonLotusCtrl.initData();
            self.offLineData = loginData[gc.dsConsts.LoginData.offLineData];
            self._lootTypeArr = loginData[gc.dsConsts.LoginData.lootTypeArr];
            //体力相关配置
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            self.strengthReplayInterval = c_game[gc.id_c_game.strengthCfg][2] * 60 * 1000;
            //计算一遍红点
            mo.setTimeout(gd.pointCtrl.calAll, gd.pointCtrl, 4000);
            mo.setTimeout(function () {
                if (!gd.guildCtrl.getData())
                    gd.guildCtrl.getInfo(function () {
                        gd.chatCtrl.initData();
                    }, self);
            }, self, 1000);
            //延迟5秒获取商店信息
            mo.setTimeout(function () {
                gd.shopCtrl.requestShopData(gc.c_prop.shopTypeKey.equip, function () { }, self);
                gd.redEnvelopeCtrl.syncRedEnvelope(function () { }, self);
                //检查绑定是否领奖
                self.checkBindPhoneReward();
            }, self, 5000);
        };
        p.getLootTypeArr = function () {
            return this._lootTypeArr;
        };
        /**
         * 同步数据
         * @param sendData [聊天id]
         * @param cb
         * @param target
         */
        p.syncData = function (sendData, cb, target) {
            var self = this;
            var args = {};
            var argsObj = gc.iface.a_user_syncData_args, args = {};
            args[argsObj.sendData] = sendData;
            mo.request4Server(gc.iface.a_user_syncData, args, function (data) {
                //同步一些数据
                if (cb)
                    cb.call(target, data);
            });
        };
        p.syncData2 = function (cb, target) {
            var self = this;
            mo.request4Server(gc.iface.a_user_syncData2, {}, function (data) {
                var lastUpdateTime = data[gc.dsConsts.AsyncData2.lastUpdateTime];
                var lootTypeArr = data[gc.dsConsts.AsyncData2.lootTypeArr];
                lastUpdateTime = Date.newDate(lastUpdateTime);
                self.set(gc.dsConsts.UserEntity.lastUpdateTime, lastUpdateTime);
                Date.setStandard(lastUpdateTime.getTime());
                self._lootTypeArr = lootTypeArr;
                if (cb)
                    cb.call(target, lastUpdateTime);
            });
        };
        /**
         * 更新引导
         * @param guideId
         * @param cb
         * @param target
         */
        p.updateGuide = function (guideId, cb, target) {
            var self = this;
            var argsObj = gc.iface.a_user_updateGuide_args, args = {};
            args[argsObj.guideId] = guideId;
            mo.request4Server(gc.iface.a_user_updateGuide, args, function (data) {
                if (data)
                    self.updateEntity(data);
                if (cb)
                    cb.call(target);
            });
        };
        //获取当前引导
        p.getGuide = function () {
            var self = this;
            var exData = self.get(gc.dsConsts.UserEntity.exData);
            return exData[gc.c_prop.userExDataKey.guide] || 0;
        };
        /**
         * 设置自动战斗
         * @param isAuto
         */
        p.setAutoFight = function (isAuto) {
            var self = this;
            var exData = self.get(gc.dsConsts.UserEntity.exData);
            exData[gc.c_prop.userExDataKey.autoFight] = isAuto;
            self.set(gc.dsConsts.UserEntity.exData, exData);
            var argsObj = gc.iface.a_user_setAutoFight_args, args = {};
            args[argsObj.isAuto] = isAuto;
            mo.request4Server(gc.iface.a_user_setAutoFight, args, function (data) { });
            if (isAuto) {
                mo.showMsg(gc.id_c_msgCode.autoOpen);
            }
            else {
                mo.showMsg(gc.id_c_msgCode.autoClose);
            }
        };
        /**
         * 更新Setting数据
         * @param catNoVipChat,autoBuyLittleHorn
         */
        p.updateSetting = function (catNoVipChat, autoBuyLittleHorn, cb, target) {
            var self = this;
            var exData = self.get(gc.dsConsts.UserEntity.exData);
            exData[gc.c_prop.userExDataKey.catNoVipChat] = catNoVipChat;
            exData[gc.c_prop.userExDataKey.autoBuyLittleHorn] = autoBuyLittleHorn;
            self.set(gc.dsConsts.UserEntity.exData, exData);
            var argsObj = gc.iface.a_user_updateSetting_args, args = {};
            args[argsObj.catNoVipChat] = catNoVipChat;
            args[argsObj.autoBuyLittleHorn] = autoBuyLittleHorn;
            mo.request4Server(gc.iface.a_user_updateSetting, args, function (data) {
                if (cb)
                    cb.call(target);
            });
        };
        //获取当前引导
        p.isAutoFight = function () {
            var self = this;
            var exData = self.get(gc.dsConsts.UserEntity.exData);
            return exData[gc.c_prop.userExDataKey.autoFight] || 0;
        };
        /**
         * 设置自动战斗
         */
        p.setTimeError = function () {
            var self = this;
            var num = self.getTimeError();
            num++;
            var exData = self.get(gc.dsConsts.UserEntity.exData);
            exData[gc.c_prop.userExDataKey.timeError] = num;
            var argsObj = gc.iface.a_user_setTimeError_args, args = {};
            args[argsObj.errorNum] = num;
            mo.request4Server(gc.iface.a_user_setTimeError, args, function (data) { });
        };
        //获取当前次数
        p.getTimeError = function () {
            var self = this;
            var exData = self.get(gc.dsConsts.UserEntity.exData);
            return exData[gc.c_prop.userExDataKey.timeError] || 0;
        };
        /**
         * 改名
         * @param name
         * @param heroTempId  1|2|3
         * @param cb
         * @param target
         */
        p.changeName = function (name, heroTempId, cb, target) {
            var sensitiveArr = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.fuckWord)[0].split(",");
            if (name == null || name == "") {
                return mo.showMsg(gc.id_c_msgCode.inputRoleName);
            }
            else if (mo.STR.getStringLength(name) > 14) {
                return mo.showMsg(gc.id_c_msgCode.roleNameOutLenght);
            }
            else if (mo.STR.checkSensitiveWord(name, sensitiveArr)) {
                return mo.showMsg(gc.id_c_msgCode.sensitiveInRoleName);
            }
            var self = this;
            var argsObj = gc.iface.a_user_changeName_args, args = {};
            args[argsObj.name] = name;
            args[argsObj.heroTempId] = heroTempId;
            mo.requestWaiting4Server(gc.iface.a_user_changeName, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData];
                self.updateEntity(userData);
                var heroData = data[gc.dsConsts.ExUserData.heroData];
                gd.heroCtrl.updateHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id], heroData);
                if (cb)
                    cb.call(target);
            });
        };
        /**
         * 添加背包
         * @param itemId
         * @param num
         */
        p.addBag = function (itemId, num) {
            var self = this;
            var bag = self.get(gc.dsConsts.UserEntity.bag) || {};
            if (typeof itemId == "object") {
                for (var key in itemId) {
                    self._addBag(bag, key, itemId[key]);
                }
            }
            else {
                self._addBag(bag, itemId, num);
            }
            self.set(gc.dsConsts.UserEntity.bag, bag);
        };
        p._addBag = function (bag, itemId, num) {
            var ownItemCount = bag[itemId] || 0;
            ownItemCount += num;
            bag[itemId] = ownItemCount;
            return bag;
        };
        /**
         * 扣除背包
         * @param itemId
         * @param num
         * @returns {*}
         */
        p.delBag = function (itemId, num) {
            var self = this;
            var bag = self.get(gc.dsConsts.UserEntity.bag) || {};
            if (typeof itemId == "object") {
                for (var key in itemId) {
                    self._delBag(bag, key, itemId[key]);
                }
            }
            else {
                self._delBag(bag, itemId, num);
            }
            self.set(gc.dsConsts.UserEntity.bag, bag);
        };
        //获取物品数量
        p.getItemNum = function (itemId) {
            var self = this;
            var cfg_t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            var locItemData = cfg_t_item[itemId];
            if (!locItemData)
                return 0;
            var num = 0;
            switch (itemId) {
                case gc.c_prop.spItemIdKey.diamond:
                    num = self.getDiamond();
                    break;
                case gc.c_prop.spItemIdKey.gold:
                    num = self.getGold();
                    break;
                default:
                    var bag = self.get(gc.dsConsts.UserEntity.bag) || {};
                    num = bag[itemId] || 0;
                    break;
            }
            return num;
        };
        //根据物品类型获取物品 {itemId:num}
        p.getItemByType = function (itemType) {
            var self = this;
            var retObj = {};
            var bag = self.get(gc.dsConsts.UserEntity.bag);
            var cfg_t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            for (var itemId in bag) {
                var item = cfg_t_item[itemId];
                if (item[gc.t_item_type] == itemType) {
                    retObj[itemId] = bag[itemId];
                }
            }
            return retObj;
        };
        p._delBag = function (bag, itemId, num) {
            var ownItemCount = bag[itemId] || 0;
            var reItemCount = ownItemCount - num;
            bag[itemId] = reItemCount;
            if (reItemCount <= 0)
                delete bag[itemId];
            return bag;
        };
        //获取体力
        p.getStrength = function () {
            var self = this;
            var maxStrength = self.getMaxStrength();
            var interval = self.strengthReplayInterval;
            var strength = self._data[gc.dsConsts.UserEntity.strength];
            if (strength >= maxStrength)
                return strength;
            var strengthReTime = self._data[gc.dsConsts.UserEntity.strengthReTime];
            if (!strengthReTime)
                return strength; //不存在则直接返回当前的体力值
            var now = Date.newDate().getTime();
            var time = strengthReTime.getTime();
            if (now >= time)
                return maxStrength; //已经超过了满体力的时间
            var s = maxStrength - Math.ceil((time - now) / interval);
            if (s < 0)
                return strength;
            return Math.min(maxStrength, s);
        };
        /**
         * 获取最大体力上限，跟领主等级相关
         */
        p.getMaxStrength = function () {
            var self = this, entityKey = gc.dsConsts.UserEntity;
            var userLvl = self.get(entityKey.lvl);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            //体力相关配置
            var baseMaxStrength = c_game[gc.id_c_game.strengthCfg][0];
            var addPerStrength = c_game[gc.id_c_game.strengthCfg][1];
            return baseMaxStrength + (userLvl - 1) * addPerStrength;
        };
        //更新数据，不显示变化
        p.updateEntityNotShow = function (data) {
            var self = this;
            var oldData = JSON.parse(JSON.stringify(self.getData()));
            self.__adjust_equpBag_final(data);
            _super.prototype.updateEntity.call(this, data);
            self._calPoint(oldData, data);
        };
        p.__adjust_equpBag_final = function (data) {
            //--->data
            var equipBk = this._equipBk;
            var equipBag = data[gc.dsConsts.UserEntity.equipBag];
            if (equipBag) {
                //计算装备评分
                var props;
                for (var key in equipBag) {
                    var tempId = equipBag[key][0];
                    if (equipBk[key] && equipBk[key][0] == tempId) {
                        equipBag[key][2] = equipBk[key][1];
                    }
                    else {
                        props = equipBag[key][1];
                        if (gd.equipCtrl.isSpecialEquip(tempId) || gd.equipCtrl.isRareEquip(tempId)) {
                            props = gd.equipCtrl.getSpecialEquipExtra(tempId);
                        }
                        if (equipBag[key][5]) {
                            equipBag[key][2] = gd.userUtils.getEquipGrade(tempId, props, equipBag[key][5]);
                        }
                        else {
                            equipBag[key][2] = gd.userUtils.getEquipGrade(tempId, props);
                        }
                        equipBk[key] = [tempId, equipBag[key][2]];
                    }
                }
            }
        };
        //更新数据，返回变化的数据
        p.updateEntity = function (data) {
            var self = this;
            var oldData = JSON.parse(JSON.stringify(self.getData()));
            self.calProChanged(data, oldData);
            self.__adjust_equpBag_final(data);
            _super.prototype.updateEntity.call(this, data);
            self._calPoint(oldData, data);
        };
        p._calPoint = function (oldData, data) {
            var self = this;
            if (data[gc.dsConsts.UserEntity.lvl]) {
                var oldLvl = oldData[gc.dsConsts.UserEntity.lvl];
                var newLvl = data[gc.dsConsts.UserEntity.lvl];
                if (oldLvl != newLvl) {
                    var cfg_c_genuineQi = mo.getJSONWithFileName(gc.cfg_c_genuineQi);
                    var exData = self.get(gc.dsConsts.UserEntity.exData);
                    if ((!exData || !exData[gc.c_prop.userExDataKey.genuineQi]) && cfg_c_genuineQi[newLvl]) {
                        gd.demonLotusCtrl.initData();
                        self.getGenuineQi(function () { }, this);
                    }
                    //升级需要判断的红点
                    gd.pointCtrl.cal(gc.c_prop.pointGreenKey.copy_boss);
                    gd.heroCtrl.calPropAndCombat();
                    if (newLvl >= 10) {
                        var newLvlArr = newLvl.toString().split("");
                        if (newLvlArr[newLvlArr.length - 1] == 0) {
                            gd.shopCtrl.refresh(gc.c_prop.shopTypeKey.equip, true, function (itemList) {
                                self.pushNotify(self.__class.ON_TEN_LVL, gc.c_prop.shopTypeKey.equip);
                            }, this);
                        }
                    }
                    // 升级需要汇报一下
                    mo_channel.getCurChannel().footmark('levelUpgrade', { level: newLvl });
                }
            }
            if (data[gc.dsConsts.UserEntity.bag]) {
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role1_wing);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role2_wing);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role3_wing);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role1_realm);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role2_realm);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role3_realm);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role1_intensify);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role2_intensify);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role3_intensify);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role1_star);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role2_star);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role3_star);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role1_gem);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role2_gem);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role3_gem);
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.medal);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role1_tring);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role2_tring);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role3_tring);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.demonLotus_1);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.demonLotus_2);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.demonLotus_main);
            }
            if (data[gc.dsConsts.UserEntity.equipBag]) {
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role1_equip);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role2_equip);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role3_equip);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role4_equip);
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.bag);
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.chuanChen);
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.custom);
            }
            if (data[gc.dsConsts.UserEntity.gold]) {
                /*
                pointCtrl.cal(gc.c_prop.pointRedKey.role1_skill);
                 pointCtrl.cal(gc.c_prop.pointRedKey.role2_skill);
                 pointCtrl.cal(gc.c_prop.pointRedKey.role3_skill);
                 */
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role1_wing);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role2_wing);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role3_wing);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role1_realm);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role2_realm);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role3_realm);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role1_intensify);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role2_intensify);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role3_intensify);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role1_star);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role2_star);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role3_star);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role1_gem);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role2_gem);
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.role3_gem);
            }
        };
        p.calProChanged = function (data, oldData) {
            var self = this;
            var UserEntity = gc.dsConsts.UserEntity;
            var changeItems = {}; //{1:999, 2:999}
            var addEquips = []; //[tempId, tempId]
            for (var key in UserEntity) {
                var obj = UserEntity[key];
                if (data[obj] && oldData[obj] && data[obj] != oldData[obj]) {
                    if (UserEntity.bag == obj) {
                        var oldBagData = oldData[obj];
                        var newBagData = data[obj];
                        for (var key in newBagData) {
                            var newCount = newBagData[key] || 0;
                            var oldCount = oldBagData[key] || 0;
                            if (newCount != oldCount) {
                                var locChange = newCount - oldCount;
                                if (locChange > 0) {
                                    changeItems[key] = locChange;
                                }
                            }
                        }
                    }
                    else if (UserEntity.equipBag == obj) {
                        var oldBagData = oldData[obj];
                        var newBagData = data[obj];
                        for (var equipId in newBagData) {
                            /*
                            判断装备是否有增加的条件
                            1.旧背包里没有 或者
                            2.旧背包里有同样的equipId的装备但是tempId不同
                            */
                            if ((oldBagData[equipId] == null
                                || (oldBagData[equipId] != null && newBagData[equipId][0] != oldBagData[equipId][0]))) {
                                addEquips.push(newBagData[equipId][0]);
                            }
                        }
                    }
                    else if (UserEntity.combat == obj) {
                        var oldCombat = oldData[obj];
                        var newCombat = data[obj];
                        if (oldCombat > 0) {
                            g_msg.UIMsgCombatCtrl.push({ oldCombat: oldCombat, newCombat: newCombat });
                        }
                    }
                    else if (UserEntity.gold == obj) {
                        var oldCount = oldData[obj];
                        var newCount = data[obj];
                        var locChange = newCount - oldCount;
                        if (locChange > 0) {
                            changeItems[gc.c_prop.spItemIdKey.gold] = locChange;
                        }
                    }
                    else if (UserEntity.diamond == obj) {
                        var oldCount = oldData[obj];
                        var newCount = data[obj];
                        var locChange = newCount - oldCount;
                        if (locChange > 0) {
                            changeItems[gc.c_prop.spItemIdKey.diamond] = locChange;
                        }
                    }
                    else if (UserEntity.medalData == obj) {
                        var oldMedalData = oldData[obj];
                        var newMedalData = data[obj];
                        if (JSON.stringify(oldMedalData) != JSON.stringify(newMedalData)) {
                            gd.heroCtrl.calPropAndCombat();
                        }
                    }
                }
            }
            if (Object.keys(changeItems).length > 0 || addEquips.length > 0) {
                g_msg.GetItemTips.create().setData({ items: changeItems, equips: addEquips }).show();
            }
        };
        p._appendValue = function (key, value) {
            var oldValue = this._data[key] || 0;
            this.set(key, oldValue + value);
        };
        p.getName = function () {
            return this.get(gc.dsConsts.UserEntity.nickName);
        };
        p.getId = function () {
            return this.get(gc.dsConsts.UserEntity.id);
        };
        //获取金币
        p.getGold = function () {
            return this.get(gc.dsConsts.UserEntity.gold);
        };
        //获取竞技场声望
        p.getPrestige = function () {
            return this.get(gc.dsConsts.UserEntity.prestige);
        };
        //获取购买金币次数
        p.getBuyGoldCount = function () {
            return this.getTodayCount(gc.c_prop.userRefreshCountKey.buyGold);
        };
        //获取购买凌云石次数
        p.getBuyLingyunCount = function () {
            return this.getTodayCount(gc.c_prop.userRefreshCountKey.buyLingyun);
        };
        //获取钻石
        p.getDiamond = function () {
            return this.get(gc.dsConsts.UserEntity.diamond);
        };
        //战力
        p.getCombat = function () {
            return this.get(gc.dsConsts.UserEntity.combat);
        };
        //活动
        p.getActivity = function () {
            return this.get(gc.dsConsts.UserEntity.activity);
        };
        //获取而外数据
        p.getExData = function () {
            return this.get(gc.dsConsts.UserEntity.exData);
        };
        //获取是否霸主
        p.getIsKing = function () {
            return this.get(gc.dsConsts.UserEntity.isKing);
        };
        //设置是否霸主
        p.setIsKing = function (isKing) {
            return this.set(gc.dsConsts.UserEntity.isKing, isKing);
        };
        //更新战力
        p.updateCombat = function () {
            var self = this;
            var totalCombat = gd.heroCtrl.getTotalCombat();
            var updateData = {};
            updateData[gc.dsConsts.UserEntity.combat] = totalCombat;
            self.updateEntity(updateData);
            mo.request4Server(gc.iface.a_user_updateCombat, {}, function () { }, self);
        };
        //VIP
        p.getVip = function () {
            return this.get(gc.dsConsts.UserEntity.vip);
        };
        //VIP当前积分
        p.getVipScore = function () {
            return this.get(gc.dsConsts.UserEntity.vipScore);
        };
        //获取下一级所需积分
        p.getNextVipScore = function () {
            var curVip = this.getVip();
            var info = mo.getJSONWithFileNameAndID(gc.cfg_c_vip, curVip);
            return info[gc.c_vip_score];
        };
        //vip加成   [vip等级,金币加成，经验加成]
        //getVipExtra(){
        //    var cfg_c_vip = mo.getJSONWithFileName(gc.cfg_c_vip);
        //    var vip = this.get(gc.dsConsts.UserEntity.vip);
        //    var offlineGoldAdd = cfg_c_vip[vip][gc.c_vip_offlineGoldAdd];
        //    var c_vip_offlineExpAdd = cfg_c_vip[vip][gc.c_vip_offlineExpAdd];
        //    return [vip,offlineGoldAdd,c_vip_offlineExpAdd];
        //}
        //等级
        p.getLvl = function () {
            return this.get(gc.dsConsts.UserEntity.lvl);
        };
        //转生等级
        p.getRebirthLvl = function () {
            return this.get(gc.dsConsts.UserEntity.rebirthLvl);
        };
        //获取注入经验
        p.getInfuseExpc = function () {
            return this.get(gc.dsConsts.UserEntity.infuseExpc);
        };
        p.getExp = function () {
            return this.get(gc.dsConsts.UserEntity.expc);
        };
        //头像
        p.getIconId = function () {
            return this.get(gc.dsConsts.UserEntity.iconId);
        };
        //装备背包  {"1":[模板id,[随到的属性值],评价,是否穿戴],...}  "1":指定id,累加上去的
        p.getEquipBag = function () {
            return this.get(gc.dsConsts.UserEntity.equipBag);
        };
        //是否开启自动注入     return true/false
        p.isOpenInfuseExpc = function () {
            var isOpenIn = this.get(gc.dsConsts.UserEntity.isOpenIn);
            if (isOpenIn && isOpenIn == 1)
                return true;
            return false;
        };
        //获得未穿戴的装备数量
        p.getEquipBagNum = function () {
            var equipBag = this.getEquipBag();
            var count = 0;
            for (var key in equipBag) {
                var equip = equipBag[key];
                if (equip[3] == 0)
                    count++;
            }
            return count;
        };
        //背包
        p.getBag = function () {
            return this.get(gc.dsConsts.UserEntity.bag);
        };
        //装备背包格数
        p.getEquipBagGrid = function () {
            var self = this;
            var cfg_c_vip = mo.getJSONWithFileName(gc.cfg_c_vip);
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var count = this.get(gc.dsConsts.UserEntity.equipBagBuyCount);
            var starCount = parseInt(cfg_c_game[gc.id_c_game.equipBagCfg][0]);
            var addCount = parseInt(cfg_c_game[gc.id_c_game.equipBagCfg][1]);
            var vipCount = parseInt(cfg_c_vip[self.getVip()][gc.c_vip_addEquipBag]);
            var equipBagGrid = starCount + count * addCount + vipCount;
            return equipBagGrid;
        };
        p.increaseGold = function (gold) {
            this._appendValue(gc.dsConsts.UserEntity.gold, gold);
        };
        p.reduceDiamond = function (diamond) {
            this._appendValue(gc.dsConsts.UserEntity.diamond, -diamond);
        };
        /**
         * 获取用户中的今日次数
         * @param type
         */
        p.getTodayCount = function (type) {
            var self = this;
            var counts = self.get(gc.dsConsts.UserEntity.counts);
            var countsRefreshTime = self.get(gc.dsConsts.UserEntity.countsRefreshTime);
            var count = counts[type] || 0;
            var refreshTime = Date.newDate(countsRefreshTime[type]);
            if (refreshTime) {
                refreshTime = Date.newDate(refreshTime);
                if (!refreshTime.equalsDay(Date.newDate())) {
                    refreshTime = Date.newDate();
                    count = 0;
                }
            }
            counts[type] = count;
            countsRefreshTime[type] = refreshTime;
            self.set(gc.dsConsts.UserEntity.counts, counts);
            self.set(gc.dsConsts.UserEntity.countsRefreshTime, countsRefreshTime);
            return count;
        };
        p.getLastTime = function (type) {
            var self = this;
            var countsRefreshTime = self.get(gc.dsConsts.UserEntity.countsRefreshTime);
            return countsRefreshTime[type];
        };
        /**
         * 获取购买金币获得数量和所需钻石
         * @returns [得到金币，消耗元宝，已经购买次数，最大购买次数]
         */
        p.getBuyGoldData = function () {
            var self = this;
            var lvl = self.get(gc.dsConsts.UserEntity.lvl);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var buyCount = self.getBuyGoldCount();
            var zengLiang = c_game[gc.id_c_game.goldBuySet][0];
            var jiShu = c_lvl[lvl][gc.c_lvl_buyGoldMult];
            var getGold = gc.calBuyGold(buyCount + 1, zengLiang, jiShu);
            var costDiamond = gc.calBuyGoldDiamond(buyCount + 1);
            //var maxCount = self._getBuyGoldMaxCount();
            return [getGold, costDiamond]; //[getGold,costDiamond,buyCount,maxCount];
        };
        //购买金币
        p.buyGold = function (cb, target) {
            var self = this;
            var buyData = self.getBuyGoldData();
            var getGold = buyData[0], costDiamond = buyData[1]; //,buyCount = buyData[2],maxCount = buyData[3];
            //是否花费[ubb color=red]%s元宝[/ubb]购买[ubb color=yellow]%s金币[/ubb]?
            mo.showMsg(gc.id_c_msgCode.buyGolds, costDiamond, getGold, function () {
                //今日已达使用上限[/br][/br][ubb size=60]（今日已使用%s次）[/ubb]
                //if(buyCount>=maxCount)  return  mo.showMsg(gc.id_c_msgCode.cantUseMax,buyCount);
                //计算消耗的钻石
                if (self.getDiamond() < costDiamond)
                    return mo.showMsg(gc.id_c_msgCode.noDiamond); //钻石不足
                var args = {};
                mo.requestWaiting4Server(gc.iface.a_user_buyGold, args, function (data) {
                    var userData = data[gc.dsConsts.ExUserData.userData];
                    self.updateEntity(userData);
                    if (cb)
                        cb.call(target, data);
                });
            });
        };
        //购买金币
        p.noGolds = function (cb, target) {
            var self = this;
            var buyData = self.getBuyGoldData();
            var getGold = buyData[0], costDiamond = buyData[1]; //,buyCount = buyData[2],maxCount = buyData[3];
            //是否花费[ubb color=red]%s元宝[/ubb]购买[ubb color=yellow]%s金币[/ubb]?
            mo.showMsg(gc.id_c_msgCode.noGolds, costDiamond, getGold, function () {
                //今日已达使用上限[/br][/br][ubb size=60]（今日已使用%s次）[/ubb]
                //if(buyCount>=maxCount)  return  mo.showMsg(gc.id_c_msgCode.cantUseMax,buyCount);
                //计算消耗的钻石
                if (self.getDiamond() < costDiamond)
                    return mo.showMsg(gc.id_c_msgCode.noDiamond); //钻石不足
                var args = {};
                mo.requestWaiting4Server(gc.iface.a_user_buyGold, args, function (data) {
                    var userData = data[gc.dsConsts.ExUserData.userData];
                    self.updateEntity(userData);
                    if (cb)
                        cb.call(target, data);
                });
            });
        };
        //购买凌云石价格
        p.getBuyLingyunCos = function () {
            var self = this;
            var costDiamond = 999999;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var buyCount = self.getBuyLingyunCount();
            var getLingyun = c_game[gc.id_c_game.buyLingyunCfg][0] || 0;
            var cosArr = c_game[gc.id_c_game.buyLingyunCfg][1].split(";") || [];
            var lastArr = cosArr[cosArr.length - 1].split(",") || [];
            if ((buyCount + 1) >= lastArr[0]) {
                costDiamond = parseInt(lastArr[1]) / 10 * getLingyun;
            }
            else {
                for (var i = 0; i < cosArr.length; i++) {
                    var costDiaArr = cosArr[i].split(",") || [];
                    if (costDiaArr[0] && costDiaArr[1]) {
                        if ((buyCount + 1) <= costDiaArr[0]) {
                            costDiamond = parseInt(costDiaArr[1]) / 10 * getLingyun;
                            break;
                        }
                    }
                }
            }
            return costDiamond;
        };
        //购买凌云石
        p.buyLingyun = function (cb, target) {
            var self = this;
            var vip = self.getVip();
            var c_vip = mo.getJSONWithFileName(gc.cfg_c_vip);
            var buyCount = self.getBuyLingyunCount();
            var costDiamond = self.getBuyLingyunCos();
            var maxCount = c_vip[vip][gc.c_vip_buyLingyunCount];
            if (buyCount >= maxCount)
                return mo.showMsg(gc.id_c_msgCode.cantBusMax); //购买次数不能超过限制
            //计算消耗的钻石
            if (self.getDiamond() < costDiamond)
                return mo.showMsg(gc.id_c_msgCode.noDiamond); //钻石不足
            var args = {};
            mo.requestWaiting4Server(gc.iface.a_user_buyLingyun, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData];
                var bagItems = data[gc.dsConsts.ExUserData.bagItems] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                self.updateEntity(userData);
                if (cb)
                    cb.call(target, data);
            });
        };
        //获取每天可以购买的次数
        //private _getBuyGoldMaxCount(){
        //    var self = this;
        //    var c_vip = mo.getJSONWithFileName(gc.cfg_c_vip);
        //    var vip = self.getVip();
        //    var maxCount = c_vip[vip][gc.c_vip_goldCount];//获取该玩家的最大购买次数
        //    return maxCount;
        //}
        //获取当前装备属性
        p.getEquipAttribute = function (id) {
            var equipBag = gd.userCtrl.get(gc.dsConsts.UserEntity.equipBag);
            var equipId = equipBag[id][0]; //模板id
            var addition = equipBag[id][1]; //附加属性{}
        };
        /**
         * 创建角色
         * @param name
         * @param heroTempId  1|2|3
         * @param sex
         * @param cb
         * @param target
         */
        UserCtrl.createUser = function (name, heroTempId, sex, cb, target) {
            var sensitiveArr = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.fuckWord)[0].split(",");
            if (name == null || name == "") {
                return mo.showMsg(gc.id_c_msgCode.inputRoleName);
            }
            else if (mo.STR.getStringLength(name) > 12) {
                return mo.showMsg(gc.id_c_msgCode.roleNameOutLenght);
            }
            else if (mo.STR.checkSensitiveWord(name, sensitiveArr)) {
                return mo.showMsg(gc.id_c_msgCode.sensitiveInRoleName);
            }
            else if (name.indexOf("'") > -1) {
                return mo.showMsg("不能包含单引号");
            }
            else if (name.indexOf('"') > -1) {
                return mo.showMsg("不能包含双引号");
            }
            else if (name.indexOf('\\') > -1) {
                return mo.showMsg("不能包含斜杠");
            }
            var serverIndexId = gd.serverInfoCtrl.getSelectIndex();
            if (!serverIndexId)
                return mo.showMsg("请先选择服务器！");
            var self = this;
            //ws.recordEvent("创建角色的人数", 1);
            var argsObj = gc.iface.c_account_createUser_args, args = {};
            args[argsObj.name] = name;
            args[argsObj.heroTempId] = heroTempId;
            args[argsObj.sex] = sex;
            args[argsObj.serverIndexId] = serverIndexId;
            //hd { 增加通过分享进来的用户
            var suk = gd.HoodinnCtlr.SharedUserKey();
            if (suk)
                args[argsObj.shareKey] = suk;
            //hd }
            mo.requestWaiting4Server(gc.iface.c_account_createUser, args, function (data) {
                if (cb)
                    cb.call(target);
                self.CREATEDUSER = true;
            });
        };
        //获取真气数据
        p.getGenuineQi = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_user_getGenuineQi, {}, function (data) {
                var genuineQi = data[gc.dsConsts.UserEntity.genuineQi] || 0;
                if (parseInt(genuineQi) > 0) {
                    gd.demonLotusCtrl._genuineQi = parseInt(genuineQi);
                    gd.demonLotusCtrl._lastUpTime = Date.newDate().toString();
                }
                self.updateEntity(data);
                if (cb)
                    cb.call(target);
            });
        };
        /**
         * 购买背包格子
         * @param cb
         * @param target
         */
        p.buyBagGrid = function (cb, target) {
            var self = this;
            var diamond = self.getDiamond();
            var equipBagBuyCount = this.get(gc.dsConsts.UserEntity.equipBagBuyCount); //购买次数
            var cosDiamond = gc.callBuyEquipBag(equipBagBuyCount); //消耗钻石
            var gameCfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.equipBagCfg);
            mo.showMsg(gc.id_c_msgCode.ifBuyBag, cosDiamond, gameCfg[1], function () {
                if (diamond < cosDiamond)
                    return mo.showMsg(gc.id_c_msgCode.noDiamond);
                mo.requestWaiting4Server(gc.iface.a_user_buyBagGrid, {}, function (data) {
                    self.updateEntity(data);
                    cb.call(target, data);
                });
            });
        };
        //获取宝箱开启所需道具     【数量，id】
        p.getNeedItems = function (chestId) {
            var self = this;
            var returnArr = [0];
            var cfg_t_itemLogic = mo.getJSONWithFileName(gc.cfg_t_itemLogic);
            if (cfg_t_itemLogic[chestId][gc.t_itemLogic_needItems]) {
                var needItems = cfg_t_itemLogic[chestId][gc.t_itemLogic_needItems];
                returnArr[1] = needItems[0];
                returnArr[0] = needItems[1];
            }
            return returnArr;
        };
        /**
         * 打开背包宝箱
         * @param chestId
         * @param count
         * @param cb
         * @param target
         */
        p.getBagChest = function (chestId, count, cb, target) {
            var self = this;
            if (self.getItemNum(chestId) <= 0)
                return mo.showMsg("不存在该宝箱");
            //是否需要钥匙
            var getBag = self.getBag();
            var needItemsArr = self.getNeedItems(chestId);
            if (needItemsArr[0] != 0) {
                var needItemsId = needItemsArr[1];
                var needItemsNum = needItemsArr[0];
                if (!getBag[needItemsId] || getBag[needItemsId] < needItemsNum) {
                }
            }
            var argsObj = gc.iface.a_user_getBagChest_args, args = {};
            args[argsObj.chestId] = chestId;
            args[argsObj.count] = count;
            mo.requestWaiting4Server(gc.iface.a_user_getBagChest, args, function (data) {
                var wingExp = data[gc.dsConsts.ExUserData.wingExp];
                gd.demonLotusCtrl._genuineQi = parseInt(wingExp);
                gd.demonLotusCtrl._lastUpTime = Date.newDate().toString();
                var expc = data[gc.dsConsts.ExUserData.expc]; //经验丹获得经验
                if (expc > 0)
                    g_msg.UIMsgTextCtrl.push("获得经验：" + expc);
                var rebirthExp = data[gc.dsConsts.ExUserData.rebirthExp]; //飞升丹获得经验
                if (rebirthExp > 0)
                    g_msg.UIMsgTextCtrl.push("获得飞升经验：" + rebirthExp);
                var genuineQi = data[gc.dsConsts.ExUserData.genuineQi]; //真气
                if (genuineQi > 0) {
                    g_msg.UIMsgTextCtrl.push("获得真气：" + genuineQi);
                }
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var isMail = data[gc.dsConsts.ExUserData.isMail]; //true 需要提示发送邮箱  false  不需要
                if (isMail)
                    mo.showMsg(gc.id_c_msgCode.bagMaxMail);
                var bagItems = data[gc.dsConsts.ExUserData.bagItems] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                self.updateEntity(userData);
                if (cb)
                    cb.call(target, isMail);
            });
        };
        //判断装备背包是否满    //true  满
        p.isEquipBagReddot = function () {
            var self = this;
            var equipBagGrid = self.getEquipBagGrid();
            var equipBag = this.getEquipBag() || {};
            var sum = 0;
            for (var key in equipBag) {
                if (equipBag[key][3] == 1)
                    sum += 1;
            }
            var equipSum = Object.keys(equipBag).length;
            var residualSpace = equipBagGrid - equipSum + sum; //剩余空间
            if (residualSpace <= 0)
                return true;
            return false;
        };
        //判断熔炼是否提示
        p.isSmeltReddot = function () {
            var self = this;
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var limit = cfg_c_game[gc.id_c_game.equipBagCfg][2];
            var equipBagGrid = self.getEquipBagGrid();
            var equipBag = this.getEquipBag() || {};
            var sum = 0;
            for (var key in equipBag) {
                if (equipBag[key][3] == 1)
                    sum += 1;
            }
            var equipSum = Object.keys(equipBag).length;
            var pro = parseInt(((equipSum - sum) / equipBagGrid * 100).toString());
            var smeltArr = gd.equipCtrl.getSmeltArr(1);
            if (pro >= limit && smeltArr.length > 0)
                return true;
            return false;
        };
        //是否领取奖励
        p.isGetDeskReward = function () {
            var self = this;
            var record = self.get(gc.dsConsts.UserEntity.record);
            var isGet = record[gc.c_prop.userRecordTypeKey.saveDesk] || 0;
            return isGet;
        };
        //保存桌面
        p.getAddDeskReward = function (cb, target) {
            var self = this;
            var argsObj = gc.iface.a_user_saveDeskSuccess_args, args = {};
            args[argsObj.type] = gc.c_prop.userRecordTypeKey.saveDesk;
            mo.requestWaiting4Server(gc.iface.a_user_saveDeskSuccess, args, function (data) {
                if (data)
                    self.updateEntity(data);
                mo.showMsg(gc.id_c_msgCode.rewardMail);
                if (cb)
                    cb.call(target, data);
            });
        };
        //绑定手机
        p.getBindPhoneReward = function (cb, target) {
            var self = this;
            var argsObj = gc.iface.a_user_saveDeskSuccess_args, args = {};
            args[argsObj.type] = gc.c_prop.userRecordTypeKey.bindPhone;
            mo.requestWaiting4Server(gc.iface.a_user_saveDeskSuccess, args, function (data) {
                if (data)
                    self.updateEntity(data);
                if (cb)
                    cb.call(target, data);
                self.pushNotify(self.__class.ON_GET_BINDPHONE_REWARD);
            });
        };
        //是否领取绑定手机奖励
        p.isGetBindPhoneReward = function () {
            var self = this;
            var record = self.get(gc.dsConsts.UserEntity.record);
            var isGet = record[gc.c_prop.userRecordTypeKey.bindPhone] || 0;
            return isGet > 0;
        };
        //大于30级要检查是否有未领过绑定奖
        p.checkBindPhoneReward = function () {
            var self = this;
            if (self.getLvl() < 30)
                return;
            var ch = mo_channel.getCurChannel();
            ch.isBindMobile(function (isOpen, isBind) {
                if (isOpen && isBind && !self.isGetBindPhoneReward()) {
                    self.getBindPhoneReward(function () {
                        console.log("-->自动领奖");
                    }, self);
                }
            }, self);
        };
        //得到绑定手机的url
        p.getBindPhoneUrl = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_user_getBindPhoneUrl, {}, function (url) {
                if (cb)
                    cb.call(target, url);
            });
        };
        //hd { 提供SDK调用发奖
        p.addDesktopReward = function (type, cb, target) {
            var self = this;
            var argsObj = gc.iface.a_user_saveDeskSuccess_args, args = {};
            args[argsObj.type] = type;
            mo.requestWaiting4Server(gc.iface.a_user_saveDeskSuccess, args, function (data) {
                if (data)
                    self.updateEntity(data);
                mo.showMsg(gc.id_c_msgCode.rewardMail);
                if (cb)
                    cb.call(target, data);
            });
        };
        //hd }
        p.getWanbaGift = function (os, gitfId, cb, target) {
            var self = this;
            var argsObj = gc.iface.a_user_getWanbagift_args, args = {};
            args[argsObj.os] = os;
            args[argsObj.giftId] = gitfId;
            mo.requestWaiting4Server(gc.iface.a_user_getWanbagift, args, function (data) {
                var code = data[gc.dsConsts.WanbaGift.code];
                if (code == 0) {
                    var userData = data[gc.dsConsts.WanbaGift.userData];
                    var bagItems = data[gc.dsConsts.WanbaGift.bagItems] || {};
                    var equipBagItems = data[gc.dsConsts.WanbaGift.equipBagItems] || {};
                    var bag = gd.userUtils.getNewBag({}, bagItems);
                    userData[gc.dsConsts.UserEntity.bag] = bag;
                    var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                    userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                    self.updateEntity(userData);
                }
                if (cb)
                    cb.call(target, data);
            });
        };
        p.sellItems = function (itemId, itemNum, cb, target) {
            var self = this;
            var argsObj = gc.iface.a_item_sellItems_args, args = {};
            args[argsObj.itemId] = itemId;
            args[argsObj.itemNum] = itemNum;
            mo.requestWaiting4Server(gc.iface.a_item_sellItems, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var bagItems = data[gc.dsConsts.ExUserData.bagItems] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                self.pushNotify(self.__class.ON_ITEM_CHANGE);
                if (cb)
                    cb.call(target, data);
            });
        };
        p.deleteItem = function (itemId, count) {
            var self = this;
            if (!itemId)
                return;
            var delBagItems = {};
            delBagItems[itemId] = count;
            var bag = gd.userUtils.getNewBag(delBagItems, {});
            var userData = {};
            userData[gc.dsConsts.UserEntity.bag] = bag;
            gd.userCtrl.updateEntity(userData);
            self.pushNotify(self.__class.ON_ITEM_CHANGE);
        };
        p.updateBagItems = function (itemId, cb, target) {
            var self = this;
            var argsObj = gc.iface.a_user_updateItems4Bag_args, args = {};
            args[argsObj.itemId] = itemId;
            mo.requestWaiting4Server(gc.iface.a_user_updateItems4Bag, args, function (updatebagItems) {
                var bag = gd.userUtils.getNewBag4update(updatebagItems);
                var userData = {};
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                if (cb)
                    cb.call(target, updatebagItems);
            });
        };
        //是否达最大等级
        p.isMaxLvl = function () {
            var self = this;
            var gameInfo = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.initCfg);
            return self.getLvl() >= gameInfo[0];
        };
        //获取勋章数量
        p.getMedalDataNum = function (medalId) {
            var self = this;
            var medalData = self.get(gc.dsConsts.UserEntity.medalData);
            var num = medalData[medalId] ? 1 : 0;
            num += self.getItemNum(medalId);
            return num;
        };
        UserCtrl.ON_TEN_LVL = "on_ten_lvl";
        UserCtrl.ON_GET_BINDPHONE_REWARD = "on_getBindPhone";
        UserCtrl.ON_ITEM_CHANGE = "on_itemChange";
        UserCtrl.enterGame = function (cb, target) {
            var self = this;
            var serverIndexId = gd.serverInfoCtrl.getSelectIndex();
            if (!serverIndexId)
                return mo.showMsg("请先选择服务器！");
            var selectServer = gd.serverInfoCtrl.getSelectServer();
            var isClose = selectServer[gc.dsConsts.ServerInfoEntity.isClose];
            if (isClose)
                return mo.showMsg("服务器维护中！");
            var argsObj = gc.iface.c_account_enterGame_args, args = {};
            args[argsObj.accountId] = gd.accountCtrl.getId();
            args[argsObj.loginKey] = gd.accountCtrl.getLoginKey();
            args[argsObj.serverIndexId] = serverIndexId;
            mo.requestWaiting4Server(gc.iface.c_account_enterGame, args, function (loginData) {
                gc.net.httpRetryMaxTimes = 5; //尝试5次才弹出断线提示
                if (!loginData) {
                    if (cb)
                        cb.call(target, loginData);
                }
                else {
                    var userData = loginData[gc.dsConsts.LoginData.user];
                    gd.userCtrl = gd.UserCtrl.getInstance(userData);
                    gd.userCtrl.initData(loginData);
                    if (cb)
                        cb.call(target, loginData);
                    mo_channel.getCurChannel().footmark('enterGame', {
                        'level': self.getInstance().getLvl(),
                        'vipLevel': self.getInstance().getVip(),
                        'score': self.getInstance().getCombat(),
                        'isNew': self.CREATEDUSER
                    });
                    self.CREATEDUSER = false;
                }
            });
        };
        return UserCtrl;
    })(mo.DataController);
    gd.UserCtrl = UserCtrl;
    egret.registerClass(UserCtrl,"gd.UserCtrl");
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/5/27.
 */
var gd;
(function (gd) {
    var RechargeCtrl = (function (_super) {
        __extends(RechargeCtrl, _super);
        function RechargeCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=RechargeCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
        };
        p.initData = function (rechargeData) {
            this._rechargeData = rechargeData;
        };
        p.getList = function () {
            var os = egret.Capabilities.os;
            var pt = mo_channel.getCurChannel().channel();
            var list = [];
            var rechargeData = mo.getJSONWithFileName(gc.cfg_c_recharge);
            for (var key in rechargeData) {
                var data = rechargeData[key];
                if (!!data[gc.c_recharge_visible]) {
                    //hd { 如过是QQ浏览器iOS渠道，需要筛掉>388元的物品
                    if (os == 'iOS' && pt == 'qqbrowser') {
                        var cost = data[gc.c_recharge_cost];
                        if (cost >= 388)
                            continue;
                    }
                    //hd }
                    list.push(data);
                }
            }
            list.sort(function (a, b) {
                return a[gc.c_recharge_index] - b[gc.c_recharge_index];
            });
            return list;
        };
        /**
         * 获取数据
         */
        p.getInfo = function (cb, target) {
            var self = this;
            mo.request4Server(gc.iface.a_recharge_getInfo, {}, function (rechargeData) {
                self.initData(rechargeData);
                //对应修改
                if (cb)
                    cb.call(target, rechargeData);
            });
        };
        //充值
        p.recharge = function (rechargeId, channelId, cb, target) {
            var self = this;
            //{rechargeId:"充值项ID",channelId:"渠道号",receiptData:"苹果验证数据"}
            var argsObj = gc.iface.a_recharge_recharge_args, args = {};
            args[argsObj.rechargeId] = rechargeId;
            args[argsObj.channelId] = channelId;
            mo.request4Server(gc.iface.a_recharge_recharge, args, function (data) {
                self.getInfo(function () {
                    //更新钻石
                    gd.userCtrl.updateEntity(data);
                    //对应修改
                    if (cb)
                        cb.call(target, data);
                }, self);
            });
        };
        //获取所有消费的RMB
        p.getAllCostRMB = function () {
            var c_recharge = mo.getJSONWithFileName(gc.cfg_c_recharge);
            var countMap = this._rechargeData[gc.dsConsts.RechargeData.countMap];
            var allCost = 0;
            for (var key in countMap) {
                var locRechargeId = parseInt(key);
                var locRechargeData = c_recharge[locRechargeId];
                var locNum = countMap[key] || 0;
                allCost += (locRechargeData[gc.c_recharge_cost] || 0) * locNum;
            }
            return allCost;
            //var rechargeTemp = ws.getJSONWithFileNameAndID(uw.cfg_c_recharge, rechargeId);
            //cost
        };
        p.getMaxVip = function () {
            var infos = mo.getJSONWithFileName(gc.cfg_c_vip);
            var level = -1;
            for (var key in infos) {
                if (infos[key][gc.c_vip_id] > level) {
                    level = infos[key][gc.c_vip_id];
                }
            }
            return level;
        };
        p.getVipCost = function (vipLv) {
            var info = mo.getJSONWithFileNameAndID(gc.cfg_c_vip, vipLv - 1);
            return info[gc.c_vip_score];
        };
        //判断是否购买过改档位充值
        p.hasBuy = function (rechargeId) {
            var countMap = this._rechargeData[gc.dsConsts.RechargeData.countMap];
            var num = countMap[rechargeId] || 0;
            return num > 0;
        };
        //充值
        p.getRequest = function (rechargeId, goodsId, cb, target) {
            var self = this;
            //{rechargeId:"充值项ID",goodsId:"渠道物品id"}
            var argsObj = gc.iface.a_recharge_getRequest_args, args = {};
            args[argsObj.rechargeId] = rechargeId;
            args[argsObj.goodsId] = goodsId;
            mo.request4Server(gc.iface.a_recharge_getRequest, args, function (data) {
                if (cb)
                    cb.call(target, data);
            });
        };
        //处理请求
        p.handleRequest = function (cb, target) {
            var self = this;
            mo.request4Server(gc.iface.a_recharge_handleRequest, {}, function (data) {
                var userData = data[gc.dsConsts.HandleRecharge.userData];
                var addDiamond = data[gc.dsConsts.HandleRecharge.addDiamond];
                var isFinish = data[gc.dsConsts.HandleRecharge.isFinish];
                var rechargeId = data[gc.dsConsts.HandleRecharge.rechargeId];
                if (userData)
                    gd.userCtrl.updateEntity(userData);
                self.getInfo(function () { }, self);
                if (addDiamond) {
                    //统计支付
                    // var c_recharge = mo.getJSONWithFileName(gc.cfg_c_recharge);
                    //var cost = c_recharge[rechargeId][gc.c_recharge_cost];
                    // var cnyMark = cost + "元";
                    // ws.recordRecharge(cost, cnyMark);
                    //第一次支付成功后要弹一次
                    var isPoped = g_cache.getLocalStorageItem(g_consts.GUIDE_LCK.popBindPhoneAfterPay);
                    if (!isPoped) {
                        mo.moduleMgr.runModule(g_consts.moduleId.bindPhone);
                        g_cache.recordGuideDone(g_consts.GUIDE_LCK.popBindPhoneAfterPay);
                    }
                }
                if (cb)
                    cb.call(target, [isFinish, rechargeId]);
                self.pushNotify(RechargeCtrl.ON_RECHARGE_SUCC);
            });
        };
        RechargeCtrl.ON_RECHARGE_SUCC = "onRechargeSucc";
        return RechargeCtrl;
    })(mo.DataController);
    gd.RechargeCtrl = RechargeCtrl;
    egret.registerClass(RechargeCtrl,"gd.RechargeCtrl");
    gd.rechargeCtrl = RechargeCtrl.getInstance();
})(gd || (gd = {}));

/**
* Created by huanghaiying on 14/12/16.
*/
var gd;
(function (gd) {
    var ServerInfoCtrl = (function (_super) {
        __extends(ServerInfoCtrl, _super);
        function ServerInfoCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=ServerInfoCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            self._serverList = [];
            self._myServerList = [];
            self._channelServerList = [];
        };
        //设置选择
        p.setSelectIndex = function (index) {
            this._selectIndex = index;
        };
        //获取选择
        p.getSelectIndex = function () {
            return this._selectIndex;
        };
        //设置选择
        p.setSelectServer = function (index) {
            this._selectServer = index;
        };
        //获取选择
        p.getSelectServer = function () {
            return this._selectServer;
        };
        //进来前必须调用
        p.getInfo = function (cb, target) {
            var self = this;
            var args = {};
            var argsKeys = gc.iface.h_serverInfo_getServerList_args;
            var accountStatus = gd.accountCtrl.getStatus();
            var isTest = 0;
            if (accountStatus == 3)
                isTest = 1;
            args[argsKeys.isTest] = isTest;
            var accountId = gd.accountCtrl.getId();
            mo.request4Http(gc.iface.h_serverInfo_getServerList, args, function (serverList) {
                self._serverList = serverList;
                self._channelServerList = self._calChannel(serverList);
                var argsObj = gc.iface.h_serverInfo_getUserServers_args, args = {};
                args[argsObj.accountId] = accountId;
                mo.request4Http(gc.iface.h_serverInfo_getUserServers, args, function (myServerList) {
                    self._myServerList = myServerList;
                    cb.call(target);
                });
            });
        };
        p._calChannel = function (serverList) {
            var exList = []; //当前特殊
            var fixList = []; //混服
            var appId = mo_channel.getCurChannel().channel();
            for (var i = 0; i < serverList.length; i++) {
                var locServer = serverList[i];
                var locAppId = locServer[gc.dsConsts.ServerInfoEntity.appId];
                if (!locAppId) {
                    fixList.push(locServer);
                }
                if (locAppId && appId == locAppId) {
                    exList.push(locServer);
                }
            }
            if (exList.length > 0) {
                return exList;
            }
            else {
                return fixList;
            }
        };
        /**
         * 获取左边标题
         * @returns ["标题","标题"]
         */
        p.getTitleList = function () {
            var self = this;
            var titleArr = [];
            for (var i = 0; i < 100; i++) {
                var locRange = self._getRang(i);
                var locStart = locRange[0], locEnd = locRange[1];
                var locTitle = locStart + "-" + locEnd + "服";
                titleArr.push(locTitle);
                if (locEnd >= self._channelServerList.length)
                    break;
            }
            titleArr.push("登录过的");
            return titleArr;
        };
        /**
         * 获取右边列表
         * @param index 标题列数组下标
         * @returns [gc.dsConsts.ServerInfoEntity,....]
         */
        p.getServerList = function (index) {
            var self = this;
            if (index == 0)
                return self._myServerList.reverse();
            var locRange = self._getRang(index - 1);
            var locStart = locRange[0], locEnd = locRange[1];
            var reList = [];
            for (var i = locStart - 1; i < locEnd; i++) {
                var locData = self._channelServerList[i];
                if (!locData)
                    break;
                reList.push(locData);
            }
            return reList;
        };
        /**
         * 获取最新的服务器信息
         * @returns gc.dsConsts.ServerInfoEntity
         */
        p.getNewServer = function () {
            return this._channelServerList[this._channelServerList.length - 1];
        };
        /**
         * 获取最新的未关闭的服务器Index , 没有为-1
         * @returns [列表idx, 真实idx]
         */
        p.getNewGoodServerIndex = function () {
            var self = this;
            var list = self.getNewServers();
            for (var i = list.length - 1; i >= 0; i--) {
                var locData = list[i];
                if (!locData[gc.dsConsts.ServerInfoEntity.isClose]) {
                    return [i, self._channelServerList.indexOf(locData)];
                }
            }
            return [-1, -1];
        };
        /**
         * 获取最新的服务器列表
         * @returns [gc.dsConsts.ServerInfoEntity ]
         */
        p.getNewServers = function () {
            var self = this;
            if (!self._channelServerList)
                return [];
            var size = 6;
            if (self._channelServerList.length < size)
                return self._channelServerList.slice(-self._channelServerList.length);
            return self._channelServerList.slice(-size);
        };
        /**
         * 获取服务器详细
         * @param id 服务器id
         * @returns gc.dsConsts.ServerInfoEntity
         */
        p.getServerInfoById = function (id) {
            var self = this;
            for (var i = 0; i < self._serverList.length; i++) {
                var locData = self._serverList[i];
                if (locData[gc.dsConsts.ServerInfoEntity.id] == id) {
                    return locData;
                }
            }
            return self._channelServerList[0];
        };
        /**
         * 获取服务器详细
         * @param index 服务器index
         * @returns gc.dsConsts.ServerInfoEntity 或者 null
         */
        p.getServerByIndex = function (index) {
            var self = this;
            if (index >= 0 && index < self._channelServerList.length) {
                return self._channelServerList[index];
            }
            return null;
        };
        //获取范围 1-20
        p._getRang = function (index) {
            //获取范围
            var start = index * 20 + 1;
            var end = index * 20 + 20;
            return [start, end];
        };
        ServerInfoCtrl.__className = "ServerDataCtrl";
        return ServerInfoCtrl;
    })(mo.DataController);
    gd.ServerInfoCtrl = ServerInfoCtrl;
    egret.registerClass(ServerInfoCtrl,"gd.ServerInfoCtrl");
    gd.serverInfoCtrl = ServerInfoCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/5/27.
 */
var gd;
(function (gd) {
    var FightCtrl = (function (_super) {
        __extends(FightCtrl, _super);
        function FightCtrl() {
            _super.apply(this, arguments);
            //获取buff列表
            this.getBuffArr = function () {
                return this._buffArr;
            };
            //设置buff列表
            this.setBuffArr = function (buffArr) {
                var self = this;
                self._buffArr = buffArr;
                self._checkKingBuff();
            };
            //判断霸主buff
            this._checkKingBuff = function () {
                var self = this;
                var has = false;
                if (self._buffArr.indexOf(gc.c_prop.otherBuffIdKey.king) > -1) {
                    has = true;
                }
                return gd.kingCtrl.setIsOpenBuff(has);
            };
            //获取经验倍率
            this.getExpcRate = function () {
                var self = this;
                var expcRate = 1;
                var t_otherBuff = mo.getJSONWithFileName(gc.cfg_t_otherBuff);
                for (var i = 0; i < self._buffArr.length; i++) {
                    var locBuffId = self._buffArr[i];
                    var locRate = t_otherBuff[locBuffId][gc.t_otherBuff_addHurt] / 10000;
                    locRate = parseInt(locRate.toString());
                    if (locBuffId == gc.c_prop.otherBuffIdKey.king) {
                        expcRate += locRate;
                    }
                }
                return expcRate;
            };
        }
        var d = __define,c=FightCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this._copyLootDic = {};
            this.isSpFighting = false;
            this._buffArr = [];
        };
        /**
         * 获取下一次掉落
         * @param copyId
         * @param isBoss
         * @param cb
         * @param target
         * @returns [[uid,[[物品id,物品数量],[物品id,物品数量]]],.........]
         */
        p.getNextLoot = function (copyId, isBoss, cb, target) {
            var self = this;
            self._initNextLoot(copyId, isBoss, function () {
                /*var reLootArr = [];
                for(var i =0;i<num;i++){
                    reLootArr.push(self._getUnUseCopyLootByUid(copyId,isBoss));
                }*/
                var reLootArr = self._getAllUnUseCopyLoot(copyId, isBoss);
                cb.call(target, reLootArr);
                self.pushNotify(self.__class.ON_NEXT_LOOT, {});
                mo.emitter.emit(self.__class.ON_NEXT_LOOT);
            }, self);
        };
        /**
         * 获取怪物，得到金币，物品
         * @param uidArr
         * @param fightData [公式计算的一波怪的时间，真实的一波怪的时间，是否异常]
         * @param cb
         * @param target
         */
        p.pickLoot = function (uidArr, fightData, cb, target) {
            var self = this;
            var copyId = gd.copyCtrl.getNormalCurCopyId();
            var args = {};
            var argsKey = gc.iface.a_fight_pickLoot_args;
            args[argsKey.copyId] = copyId;
            args[argsKey.uidArr] = uidArr;
            args[argsKey.fightData] = fightData;
            var oldUserLvl = gd.userCtrl.getLvl();
            mo.request4Server(gc.iface.a_fight_pickLoot, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var copyProgressData = data[gc.dsConsts.ExUserData.copyProgressData];
                var bagItems = data[gc.dsConsts.ExUserData.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntityNotShow(userData);
                if (oldUserLvl != gd.userCtrl.getLvl()) {
                    gd.heroCtrl.calPropAndCombat();
                }
                if (copyProgressData)
                    gd.copyCtrl.updateCopyProgressCtrl(gd.copyCtrl.getCopyType(copyId), copyProgressData);
                if (cb)
                    return cb.call(target, data);
            });
        };
        p.startPvpFight = function (myHeroEntityCtrlAry, enemyHeroEntityCtrlAry, isPkOut, name) {
            if (name === void 0) { name = null; }
            //this.pushNotify(this.__class.ON_START_PVP_FIGHT, {my:myHeroEntityCtrlAry, enemy:enemyHeroEntityCtrlAry, isPkOut:isPkOut});
            if (mo.moduleMgr.curModule.name != g_consts.moduleId.fight)
                mo.moduleMgr.runModule(g_consts.moduleId.fight);
            //process.nextTick(function(){
            //    process.nextTick(function(){
            gd.fightLayer.onStartPvpFight({ my: myHeroEntityCtrlAry, enemy: enemyHeroEntityCtrlAry, isPkOut: isPkOut, name: name });
            //    });
            //});
        };
        p.enterCopy = function (copyID) {
            gd.copyCtrl.start(copyID, function (loots) {
                var copyInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_copy, copyID);
                if (copyInfo[gc.t_copy_type] != gc.c_prop.copyTypeKey.normal && mo.moduleMgr.curModule.name != g_consts.moduleId.fight)
                    mo.moduleMgr.runModule(g_consts.moduleId.fight);
                //process.nextTick(function(){
                //    process.nextTick(function(){
                gd.fightLayer.onEnterCopy({ pveType: gc.c_prop.fightTypeKey.copy, copyID: copyID, loots: loots.concat() });
                //    });
                //});
            }, this);
        };
        p.forceNormalCopy = function () {
            gd.fightLayer.forceNormalCopy();
        };
        p._getAndInitNextLoot = function (copyId, isBoss, cb, target) {
            var self = this;
            var lvl = gd.userCtrl.getLvl();
            var args = {};
            var argsKey = gc.iface.a_fight_getAndInitNextLoot_args;
            args[argsKey.copyId] = copyId;
            args[argsKey.isBoss] = isBoss;
            args[argsKey.lvl] = lvl;
            mo.request4Server(gc.iface.a_fight_getAndInitNextLoot, args, function (data) {
                if (!data) {
                    //mo.showMsg("检测到数据异常!\n如果用外挂，将会严惩！");
                    data = {};
                }
                for (var key in data) {
                    self._setUnUseCopyLootByUid(copyId, isBoss, key, data[key]);
                }
                if (cb)
                    return cb.call(target, data);
            });
        };
        p._initNextLoot = function (copyId, isBoss, cb, target) {
            var self = this;
            self._getAndInitNextLoot(copyId, isBoss, cb, target);
            /*var unUseLootDic = self._getUnUseLootDic(copyId,isBoss);
            if(Object.keys(unUseLootDic).length>=num){
                cb.call(target);
            }else{
                self._getAndInitNextLoot(copyId,isBoss,cb, target);
            }*/
        };
        p._getUseLootDic = function (copyId, isBoss) {
            var self = this;
            var lootObj = self._getCopyLootDic(copyId);
            var useLootDic = isBoss ? lootObj.useBossLootDic : lootObj.useLootDic;
            return useLootDic;
        };
        p._getUnUseLootDic = function (copyId, isBoss) {
            var self = this;
            var lootObj = self._getCopyLootDic(copyId);
            var unUseLootDic = isBoss ? lootObj.unUseBossLootDic : lootObj.unUseLootDic;
            return unUseLootDic;
        };
        p._getCopyLootDic = function (copyId) {
            var self = this;
            var lootObj = self._copyLootDic[copyId];
            if (!lootObj) {
                lootObj = new gd.LootObj();
                lootObj.copyId = copyId;
                self._copyLootDic[copyId] = lootObj;
            }
            return lootObj;
        };
        p._getAllUnUseCopyLoot = function (copyId, isBoss) {
            var self = this;
            var unUseLootDic = self._getUnUseLootDic(copyId, isBoss);
            var useLootDic = self._getUseLootDic(copyId, isBoss);
            var reLootArr = [];
            for (var key in unUseLootDic) {
                var items = unUseLootDic[key];
                delete unUseLootDic[key];
                useLootDic[key] = items;
                reLootArr.push([key, items]);
            }
            return reLootArr;
        };
        p._getUnUseCopyLootByUid = function (copyId, isBoss) {
            var self = this;
            var unUseLootDic = self._getUnUseLootDic(copyId, isBoss);
            var useLootDic = self._getUseLootDic(copyId, isBoss);
            var keys = Object.keys(unUseLootDic);
            var lastKey = keys[keys.length - 1];
            var items = unUseLootDic[lastKey];
            if (items && lastKey) {
                delete unUseLootDic[lastKey];
                useLootDic[lastKey] = items;
                return [lastKey, items];
            }
            return null;
        };
        p._setUnUseCopyLootByUid = function (copyId, isBoss, uid, items) {
            var self = this;
            var unUseLootDic = self._getUnUseLootDic(copyId, isBoss);
            unUseLootDic[uid] = items;
        };
        FightCtrl.ON_START_PVP_FIGHT = "ON_START_PVP_FIGHT";
        FightCtrl.ON_NEXT_LOOT = "ON_NEXT_LOOT";
        FightCtrl.ON_ENTER_COPY = "ON_ENTER_COPY";
        return FightCtrl;
    })(mo.DataController);
    gd.FightCtrl = FightCtrl;
    egret.registerClass(FightCtrl,"gd.FightCtrl");
    gd.fightCtrl = FightCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by SmallAiTT on 2015/7/21.
 */
var g_base;
(function (g_base) {
    var LoginCtrl = (function (_super) {
        __extends(LoginCtrl, _super);
        function LoginCtrl() {
            _super.apply(this, arguments);
            this.isLogout = false;
            this.isAutoLogin = false;
        }
        var d = __define,c=LoginCtrl,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            self._isLoginSucc = false;
        };
        //检查渠道是否已经登录了
        p.loginChannel = function (loginInfo) {
            var self = this;
            self.loginOpt = loginInfo;
            var channel = mo_channel.getCurChannel();
            self.requestTimeOut();
            if (self.isLogout) {
                channel.login(self.responseCb, self, self.loginOpt);
            }
            else {
                channel.checkLogin(self.checkLoginCb, self, loginInfo);
            }
        };
        p.changeAccount = function () {
            var self = this;
            self.isLogout = true;
            self._isLoginSucc = false;
            var channel = mo_channel.getCurChannel();
            channel.logout(function () {
                self.loginChannel(null);
            }, self);
        };
        p.checkLoginCb = function (succ) {
            var self = this;
            var channel = mo_channel.getCurChannel();
            self.clearRequestTimeOut();
            if (succ) {
                self.onLoginSucc();
                mo.stopWaiting();
            }
            else {
                if (channel.isAutoLogin) {
                    self.requestTimeOut();
                    channel.login(self.responseCb, self, self.loginOpt);
                }
                else {
                    self.onLoginFail();
                    mo.stopWaiting();
                }
            }
        };
        p.requestTimeOut = function () {
            var self = this;
            mo.playWaiting();
            if (self._timerId == null) {
                self._timerId = tm.setTimeout(function () {
                    self.clearRequestTimeOut();
                    self.onLoginFail();
                    mo.showErrMsg("请求超时了，请重新登录!", 10);
                }, 80000);
            }
        };
        p.clearRequestTimeOut = function () {
            var self = this;
            if (self._timerId != null) {
                mo.stopWaiting();
                tm.clearTimeout(self._timerId);
                self._timerId = null;
            }
        };
        //登录状态回调
        p.responseCb = function (isSucc) {
            var self = this;
            if (self._isLoginSucc)
                return;
            self.clearRequestTimeOut();
            if (isSucc == true) {
                self._isLoginSucc = true;
                self.onLoginSucc();
            }
            else {
                self.onLoginFail();
            }
            mo.stopWaiting();
        };
        p.onLoginSucc = function () {
            var self = this;
            self.emit(self.__class.ON_LOGIN_SUCC);
        };
        p.onLoginFail = function () {
            var self = this;
            self.emit(self.__class.ON_LOGIN_FAIL);
        };
        p.asyncAccount = function (loginInfo, cb) {
            var self = this;
            mo.playWaiting();
            if (self._timerId == null) {
                self._timerId = tm.setTimeout(function () {
                    self.clearRequestTimeOut();
                    mo.showErrMsg("请求超时了，请重新登录!", 10);
                }, 80000);
            }
            var channel = mo_channel.getCurChannel();
            channel.login(function (succ) {
                if (self._isLoginSucc)
                    return;
                self.clearRequestTimeOut();
                self._isLoginSucc = !!succ;
                cb(succ);
            }, self, loginInfo);
        };
        /**
         * 开始游戏
         */
        p.enterGame = function (isCreateRole) {
            var self = this;
            g_cache.initGuideKeyCache();
            gd.UserCtrl.enterGame(function (data) {
                if (!data) {
                    //创角
                    g_base.CreateRole.create().setData({ action: 0 }).show();
                    g_cache.clearGuideKeyCache();
                }
                else {
                    mo.log("登陆成功！");
                    gd.activityCtrl.getInfo(function () {
                        //检查支付结果
                        var channel = mo_channel.getCurChannel();
                        channel.restorePayment();
                        //常在资源组
                        mo.R.moduleInfoMap['mapview'] = {};
                        //进入战斗
                        mo.moduleMgr.runModule(g_consts.moduleId.fight, null, function () {
                            var gift = mo_channel.getCurChannel().getHdpuProperty("GIFT");
                            if (gift && gift.length > 0) {
                                gd.userCtrl.getWanbaGift(egret.Capabilities.os, gift, function (data) {
                                    var code = data[gc.dsConsts.WanbaGift.code];
                                    if ((data && code == 0) || (data && code == 1)) {
                                        g_base.WanbaGift.create().setData({ type: code, giftId: gift, exData: isCreateRole }).show();
                                    }
                                    else {
                                        self.showNoticeOrFirstEnterGame(isCreateRole);
                                    }
                                }, self);
                            }
                            else {
                                self.showNoticeOrFirstEnterGame(isCreateRole);
                            }
                        });
                    });
                }
            }, self);
        };
        p.showNoticeOrFirstEnterGame = function (isCreateRole) {
            var self = this;
            if (isCreateRole) {
                mo.showMsg(gc.id_c_msgCode.firstEnterGame, {});
                mo.emitter.emit("logined");
            }
            else {
                gd.NoticeCtrl.getNewOne(function (data) {
                    mo.showMsg(gc.id_c_msgCode.sysNotice, { sysNotice: data });
                    //在网络请求后通知引导启动
                    mo.emitter.emit("logined");
                }, self);
            }
        };
        LoginCtrl.ON_LOGIN_SUCC = "on_login_succ";
        LoginCtrl.ON_LOGIN_FAIL = "on_login_fail";
        return LoginCtrl;
    })(egret.Emitter);
    g_base.LoginCtrl = LoginCtrl;
    egret.registerClass(LoginCtrl,"g_base.LoginCtrl");
    g_base.loginCtrl = new LoginCtrl();
})(g_base || (g_base = {}));

/**
   hd 主控制类
*/
var gd;
(function (gd) {
    var HoodinnCtlr = (function (_super) {
        __extends(HoodinnCtlr, _super);
        function HoodinnCtlr() {
            _super.apply(this, arguments);
            this._lastBugChatId = 0; // 最近的客服消息ID
            this._lastSysMsgId = 0; // 最近的通知消息id
            this._bugchatDatas = [];
            // 即时通知
            this._annouDatas = [];
            // 跑马灯消息
            this._noticeDatas = [];
        }
        var d = __define,c=HoodinnCtlr,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
        };
        p.getLastBugChatId = function () {
            return this._lastBugChatId;
        };
        p.getLastSysMsgId = function () {
            return this._lastSysMsgId;
        };
        // 锁定的服务器，如过开放服务器选区，则返回null
        HoodinnCtlr.LockedServer = function () {
            return this.UrlField('area', null);
        };
        // 通过分享进来的用户会有概数据
        HoodinnCtlr.SharedUserKey = function () {
            return this.UrlField('shareKey', null);
        };
        // 获得服务器传入的参数
        HoodinnCtlr.UrlField = function (name, def, url) {
            if (def === void 0) { def = ''; }
            if (url === void 0) { url = location.href; }
            var res = url.match(new RegExp(name + "=([0-9a-z]+)", 'i'));
            return res ? res[1] : def;
        };
        p.openBugChatWindow = function () {
            this.syncBugChatData();
            this.pushNotify(this.__class.ON_BUGCHAT_UPDATE, this._bugchatDatas);
            // 定时5s刷新下数据
            this._tmrBugChatUpdate = new egret.Timer(5000, 0);
            this._tmrBugChatUpdate.addEventListener(egret.TimerEvent.TIMER, this.syncBugChatData, this);
            this._tmrBugChatUpdate.start();
        };
        p.closeBugChatWindow = function () {
            this._tmrBugChatUpdate.stop();
            this._tmrBugChatUpdate = null;
        };
        // 刷新客服消息
        p.syncBugChatData = function () {
            var self = this;
            var argKeys = gc.iface.h_kefu_getList_args;
            var args = {};
            args[argKeys.lastId] = self._lastBugChatId;
            args[argKeys.openId] = gd.accountCtrl.get(gc.dsConsts.AccountEntity.sdkData).open_id;
            mo.request4Server(gc.iface.h_kefu_getList, args, function (dataList) {
                self._updateBugChatData(dataList);
            });
        };
        // 刷新系统消息，包括跑马灯、即时公告
        p.syncSysMsgData = function () {
            var self = this;
            var argKeys = gc.iface.a_chat_getNewSysMsgList_args;
            var args = {};
            args[argKeys.lastId] = self._lastSysMsgId;
            mo.request4Server(gc.iface.a_chat_getNewSysMsgList, args, function (dataList) {
                self._updateSysMsgData(dataList);
            });
        };
        p.getAllBugChats = function () {
            return this._bugchatDatas;
        };
        p.getAllAnnounces = function () {
            return this._annouDatas;
        };
        p.delAnnounce = function (uniqueId) {
            var self = this;
            for (var i = 0; i < self._annouDatas.length; ++i) {
                var locData = self._annouDatas[i];
                if (locData[gc.dsConsts.ChatData.uniqueId] == uniqueId) {
                    self._annouDatas.splice(i, 1);
                    break;
                }
            }
        };
        p.getAllNotices = function () {
            return this._noticeDatas;
        };
        p.delNotice = function (uniqueId) {
            var self = this;
            for (var i = 0; i < self._noticeDatas.length; ++i) {
                var locData = self._noticeDatas[i];
                if (locData[gc.dsConsts.ChatData.uniqueId] == uniqueId) {
                    self._noticeDatas.splice(i, 1);
                    // 如过消息属于可以重复的，需要做－1，再判断是否移除
                    var sysArgs = locData[gc.dsConsts.ChatData.sysArgs];
                    var cfgid = sysArgs[0];
                    if (cfgid == 9999) {
                        var times = sysArgs[sysArgs.length - 2];
                        var interval = sysArgs[sysArgs.length - 1];
                        // 到期
                        if (times && interval) {
                            sysArgs[sysArgs.length - 2] = --times;
                            if (times <= 0)
                                break;
                            egret.setTimeout(function (locData) {
                                self._noticeDatas.push(locData);
                                self.pushNotify(self.__class.ON_SYSNOTICE_UPDATE, self._noticeDatas);
                            }, self, interval * 1000, locData);
                            break;
                        }
                        // 播放到指定次数
                        if (times) {
                            sysArgs[sysArgs.length - 2] = --times;
                            if (times <= 0)
                                break;
                        }
                        // 添加到最后
                        self._noticeDatas.push(locData);
                    }
                    break;
                }
            }
        };
        p._updateBugChatData = function (dataList) {
            var c_chatSys = mo.getJSONWithFileName(gc.cfg_c_chatSys);
            for (var i = 0; i < dataList.length; ++i) {
                var locData = dataList[i];
                this._bugchatDatas.push(locData);
                var uid = locData[gc.dsConsts.ChatData.uniqueId];
                if (uid > this._lastBugChatId) {
                    // 新的消息
                    this._lastBugChatId = uid;
                    this.pushNotify(this.__class.ON_NEWBUGCHAT_RECEIVED, locData);
                }
            }
            this.pushNotify(this.__class.ON_BUGCHAT_UPDATE, this._bugchatDatas);
        };
        p._updateSysMsgData = function (dataList) {
            var chnNotice = false;
            var chnAnnou = false;
            for (var i = 0; i < dataList.length; ++i) {
                var locData = dataList[i];
                var subtype = locData[gc.dsConsts.ChatData.subType];
                switch (subtype) {
                    case 1:
                        {
                            this._noticeDatas.push(locData);
                            chnNotice = true;
                        }
                        break;
                    case 2:
                        {
                            this._annouDatas.push(locData);
                            chnAnnou = true;
                        }
                        break;
                }
                var uid = locData[gc.dsConsts.ChatData.uniqueId];
                if (uid > this._lastSysMsgId) {
                    this._lastSysMsgId = uid;
                }
            }
            if (chnNotice)
                this.pushNotify(this.__class.ON_SYSNOTICE_UPDATE, this._noticeDatas);
            if (chnAnnou)
                this.pushNotify(this.__class.ON_ANNOUNCE_UPDATE, this._annouDatas);
        };
        // 推入一组通知消息，为了合并掉getNewList中的消息
        p.pushNotices = function (arr) {
            for (var i = 0; i < arr.length; ++i) {
                var locData = arr[i];
                // 为了和通过getSysMsg接口取得的消息做区分
                locData[gc.dsConsts.ChatData.uniqueId] += '::getnewlist';
                this._noticeDatas.push(locData);
            }
            this.pushNotify(this.__class.ON_SYSNOTICE_UPDATE, this._noticeDatas);
        };
        // 获得到系统通知的字符串
        p.getSysNoticeStr = function (chatData) {
            var self = this;
            var type = chatData[gc.dsConsts.ChatData.type];
            var str = "";
            var sysArgs = chatData[gc.dsConsts.ChatData.sysArgs];
            var sysInfo = mo.getJSONWithFileNameAndID(gc.cfg_c_chatSys, sysArgs[0]);
            if (sysArgs.length == 1) {
                str = mo.STR.format(sysInfo[gc.c_chatSys_text]);
            }
            else if (sysArgs.length == 2) {
                str = mo.STR.format(sysInfo[gc.c_chatSys_text], sysArgs[1]);
            }
            else if (sysArgs.length == 3) {
                str = mo.STR.format(sysInfo[gc.c_chatSys_text], sysArgs[1], sysArgs[2]);
            }
            else if (sysArgs.length == 4) {
                str = mo.STR.format(sysInfo[gc.c_chatSys_text], sysArgs[1], sysArgs[2], sysArgs[3]);
            }
            else if (sysArgs.length == 5) {
                str = mo.STR.format(sysInfo[gc.c_chatSys_text], sysArgs[1], sysArgs[2], sysArgs[3], sysArgs[4]);
            }
            else if (sysArgs.length == 6) {
                str = mo.STR.format(sysInfo[gc.c_chatSys_text], sysArgs[1], sysArgs[2], sysArgs[3], sysArgs[4], sysArgs[5]);
            }
            else if (sysArgs.length == 7) {
                str = mo.STR.format(sysInfo[gc.c_chatSys_text], sysArgs[1], sysArgs[2], sysArgs[3], sysArgs[4], sysArgs[5], sysArgs[6]);
            }
            else if (sysArgs.length == 8) {
                str = mo.STR.format(sysInfo[gc.c_chatSys_text], sysArgs[1], sysArgs[2], sysArgs[3], sysArgs[4], sysArgs[5], sysArgs[6], sysArgs[7]);
            }
            return str;
        };
        // 获得聊天的内容
        p.getBugChatStr = function (locData) {
            var data = locData[gc.dsConsts.ChatData.userArgs];
            var who = data[0];
            var cnt = data[1];
            // ubb混杂多行好像会导致label崩溃，所以保护一下
            cnt = cnt.replace(/\n/g, ',');
            // 我自己发的，需要用颜色区分开            
            if (data[0] == gd.userCtrl.getName()) {
                return mo.STR.format("[ubb color=0xf7d26e]%s: %s[/ubb]", who, cnt);
            }
            return mo.STR.format("[ubb color=0xec964a]%s: %s[/ubb]", who, cnt);
        };
        // 发送一条消息        
        p.sendBugChat = function (content, cb, ctx) {
            var self = this;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var sensitiveArr = c_game[gc.id_c_game.fuckWord][0].split(",");
            var cd = c_game[gc.id_c_game.chatCfg][1];
            var maxLength = c_game[gc.id_c_game.chatCfg][3];
            if (content == null || content == "") {
                return mo.showMsg(gc.id_c_msgCode.noWord);
            }
            else if (mo.STR.getStringLength(content) > maxLength) {
                return mo.showMsg(gc.id_c_msgCode.wordTooLong);
            }
            else if (mo.STR.checkSensitiveWord(content, sensitiveArr)) {
                return mo.showMsg(gc.id_c_msgCode.wordIllegal);
            }
            //限制5秒
            if (self._lastBugSendTime) {
                if (self._lastBugSendTime.getSecondsBetween(Date.newDate()) < cd)
                    return mo.showMsg(gc.id_c_msgCode.wordTooFast);
            }
            self._lastBugSendTime = Date.newDate();
            var argKeys = gc.iface.h_kefu_sendData_args;
            var args = {};
            args[argKeys.lastId] = this._lastBugChatId;
            args[argKeys.content] = content;
            args[argKeys.openId] = gd.accountCtrl.get(gc.dsConsts.AccountEntity.sdkData).open_id;
            args[argKeys.nickname] = gd.userCtrl.getName();
            args[argKeys.vipLevel] = gd.userCtrl.getVip();
            mo.requestWaiting4Server(gc.iface.h_kefu_sendData, args, function (dataList) {
                self._updateBugChatData(dataList);
                cb.call(ctx);
            });
        };
        // 客服消息变更
        HoodinnCtlr.ON_BUGCHAT_UPDATE = "ON_BUGCHAT_UPDATE";
        // 收到新的客服消息
        HoodinnCtlr.ON_NEWBUGCHAT_RECEIVED = "ON_NEWBUGCHAT_RECEIVED";
        // 即时消息变动
        HoodinnCtlr.ON_ANNOUNCE_UPDATE = "ON_ANNOUNCE_UPDATE";
        // 跑马灯消息变动
        HoodinnCtlr.ON_SYSNOTICE_UPDATE = "ON_SYSNOTICE_UPDATE";
        return HoodinnCtlr;
    })(mo.DataController);
    gd.HoodinnCtlr = HoodinnCtlr;
    egret.registerClass(HoodinnCtlr,"gd.HoodinnCtlr");
    gd.hoodinnCtlr = new HoodinnCtlr();
})(gd || (gd = {}));

/**
 * Created by Sara on 2016/1/13.
 */
var gd;
(function (gd) {
    var HeartStuntCtrl = (function (_super) {
        __extends(HeartStuntCtrl, _super);
        function HeartStuntCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=HeartStuntCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.HeartStuntEntity;
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
        };
        //更新数据
        p.updateData = function (data) {
            var self = this;
            if (!self._data)
                return;
            self.updateEntity(data);
        };
        //获取开启条件  【开启等级，vip提前开启等级】
        p.getOpenCon = function (index) {
            var self = this;
            var c_open = mo.getJSONWithFileName(gc.cfg_c_open);
            var vip = gd.userCtrl.getVip();
            var returnArr = [];
            var openStr = "heartStunt" + (parseInt(index) + 1).toString();
            var vipopenStr = "vip" + openStr;
            if (index == 0)
                return [c_open[gc.id_c_open.heartStunt1][gc.c_open_lvlRequired], 0];
            if (!c_open[gc.id_c_open[openStr]] || !c_open[gc.id_c_open[vipopenStr]])
                return returnArr;
            var openLvl = c_open[gc.id_c_open[openStr]][gc.c_open_lvlRequired];
            var openVip = c_open[gc.id_c_open[vipopenStr]][gc.c_open_lvlRequired];
            returnArr[0] = openLvl;
            returnArr[1] = openVip;
            return returnArr;
        };
        //获取心法等级      【等级，层数，当前点数】
        p.getHeartStuntArr = function (heartStuntId) {
            var self = this;
            var c_heartStunt = mo.getJSONWithFileNameAndID(gc.cfg_c_heartStunt, heartStuntId);
            var layer = parseInt(c_heartStunt[gc.c_heartStunt_layer]);
            var series = parseInt(c_heartStunt[gc.c_heartStunt_series]);
            var returnArr = [-1];
            if (!self.getData())
                return returnArr;
            var lvl = -1;
            var stateArr = self.get(gc.dsConsts.HeartStuntEntity.stateArr) || [];
            var heartLvlArr = self.get(gc.dsConsts.HeartStuntEntity.heartLvlArr) || [];
            for (var i = 0; i < stateArr.length; i++) {
                if (stateArr[i] == heartStuntId) {
                    lvl = heartLvlArr[i];
                }
            }
            returnArr[0] = lvl;
            if (lvl == 0)
                return [0, 1, 0];
            if (lvl > 0) {
                var rem = lvl % series;
                returnArr[1] = (lvl - rem) / series + 1;
                returnArr[2] = rem;
                if (returnArr[1] > layer) {
                    returnArr[1] = layer;
                    returnArr[2] = series;
                }
            }
            return returnArr;
        };
        //获取心法神功数据
        p.getInfo = function (cb, target) {
            var self = this;
            if (self.getData())
                return cb.call(target, self.getData());
            var cfg_c_open = mo.getJSONWithFileName(gc.cfg_c_open);
            var lvl = gd.userCtrl.getLvl();
            var openLvl = cfg_c_open[gc.id_c_open.heartStunt1][gc.c_open_lvlRequired];
            if (lvl < openLvl)
                return mo.showMsg(gc.id_c_msgCode.noRoleLvl, openLvl);
            mo.request4Server(gc.iface.a_heartStunt_getInfo, {}, function (data) {
                if (self.getData()) {
                    self.updateEntity(data);
                }
                else {
                    self.init(data);
                }
                cb.call(target, data);
            });
        };
        //选择心法
        p.choMenCulMethods = function (index, heartStuntId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_heartStunt_choMenCulMethods_args;
            var args = {};
            args[argKeys.index] = index;
            args[argKeys.heartStuntId] = heartStuntId;
            mo.requestWaiting4Server(gc.iface.a_heartStunt_choMenCulMethods, args, function (data) {
                var heartStuntData = data[gc.dsConsts.ExHeartStuntData.heartStuntData];
                var userData = data[gc.dsConsts.ExHeartStuntData.userData];
                gd.userCtrl.updateEntity(userData);
                self.updateEntity(heartStuntData);
                gd.heroCtrl.calPropAndCombat();
                gd.heroCtrl.calSkill();
                cb.call(target, heartStuntData);
            });
        };
        //心法加点
        p.stuMenCulMethods = function (index, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_heartStunt_stuMenCulMethods_args;
            var args = {};
            args[argKeys.index] = index;
            mo.requestWaiting4Server(gc.iface.a_heartStunt_stuMenCulMethods, args, function (data) {
                var heartStuntData = data[gc.dsConsts.ExHeartStuntData.heartStuntData];
                var userData = data[gc.dsConsts.ExHeartStuntData.userData];
                var isSucceed = data[gc.dsConsts.ExHeartStuntData.isSucceed];
                var genuineQiArr = data[gc.dsConsts.ExHeartStuntData.genuineQiArr];
                if (genuineQiArr.length > 0) {
                    gd.demonLotusCtrl._genuineQi = parseInt(genuineQiArr[0]);
                    gd.demonLotusCtrl._lastUpTime = Date.newDate().toString();
                }
                gd.userCtrl.updateEntity(userData);
                self.updateEntity(heartStuntData);
                gd.heroCtrl.calPropAndCombat();
                gd.heroCtrl.calSkill();
                cb.call(target, [isSucceed, heartStuntData]);
            });
        };
        //更换心法
        p.chaMenCulMethods = function (index, heartStuntId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_heartStunt_chaMenCulMethods_args;
            var args = {};
            args[argKeys.index] = index;
            args[argKeys.heartStuntId] = heartStuntId;
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.heartStuntCfg);
            mo.showMsg(gc.id_c_msgCode.changeheartStunt, c_game[2], function () {
                mo.requestWaiting4Server(gc.iface.a_heartStunt_chaMenCulMethods, args, function (data) {
                    var heartStuntData = data[gc.dsConsts.ExHeartStuntData.heartStuntData];
                    var userData = data[gc.dsConsts.ExHeartStuntData.userData];
                    gd.userCtrl.updateEntity(userData);
                    self.updateEntity(heartStuntData);
                    gd.heroCtrl.calPropAndCombat();
                    gd.heroCtrl.calSkill();
                    cb.call(target, heartStuntData);
                });
            });
        };
        return HeartStuntCtrl;
    })(mo.DataController);
    gd.HeartStuntCtrl = HeartStuntCtrl;
    egret.registerClass(HeartStuntCtrl,"gd.HeartStuntCtrl");
    gd.heartStuntCtrl = HeartStuntCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/12/16.
 */
var gd;
(function (gd) {
    var FiveDaysTargetCtrl = (function (_super) {
        __extends(FiveDaysTargetCtrl, _super);
        function FiveDaysTargetCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=FiveDaysTargetCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.FiveDaysTaret;
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
        };
        //初始化五日目标数据
        p.getInfo = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_fiveDaysTarget_getInfo, {}, function (data) {
                //self.init(data);
                self._day = data[gc.dsConsts.FiveDaysTaret.day];
                self._items = data[gc.dsConsts.FiveDaysTaret.items];
                cb.call(target, data);
            });
        };
        //得到特定天数的数据
        //[status 0 可领取 -2活动过期 -1未达成 1 已领取, [排行数据], 第几天]
        p.getItemInfoByDay = function (dayIdx) {
            var self = this;
            if (dayIdx < self._items.length) {
                var item = self._items[dayIdx];
                var value = item[gc.dsConsts.ExFiveDaysTargetData.value];
                var status = -1;
                var exActivity = gd.activityCtrl.getFiveTargetActivity();
                var activityId = gd.activityCtrl.getActivityValue(exActivity, gc.dsConsts.ActivityEntity.id);
                var activityData = gd.userCtrl.getActivity() || {};
                var receiveData = activityData[activityId] || [];
                var receiveCount = 0;
                receiveCount = receiveData[dayIdx] || -1;
                //获取领奖信息
                if (receiveCount > 0) {
                    return [receiveCount, item[gc.dsConsts.ExFiveDaysTargetData.rank], dayIdx];
                }
                //活动结束
                var curActDay = self.getCurActDay();
                if (curActDay >= self.__class.MAX_DAY) {
                    return [-2, item[gc.dsConsts.ExFiveDaysTargetData.rank], dayIdx];
                }
                var taskId = FiveDaysTargetCtrl.FIVE_TASK[dayIdx];
                if (!taskId)
                    return [-1, [], dayIdx];
                var taskData = mo.getJSONWithFileNameAndID(gc.cfg_c_task, taskId);
                var needValue = taskData[gc.c_task_targetValue];
                switch (dayIdx) {
                    case 0:
                        {
                            if (gd.userCtrl.getCombat() >= needValue) {
                                status = 0;
                            }
                            break;
                        }
                    case 1:
                        {
                            var heroMap = gd.heroCtrl.getHeroMap();
                            var wingLvl = 0;
                            for (var key in heroMap) {
                                wingLvl += heroMap[key].wingData[1];
                            }
                            if (wingLvl >= needValue) {
                                status = 0;
                            }
                            break;
                        }
                    case 2:
                        {
                            var exData = gd.userCtrl.getExData();
                            var arenaCount = exData[gc.c_prop.userExDataKey.arenaCount] || 0;
                            if (arenaCount >= needValue) {
                                status = 0;
                            }
                            break;
                        }
                    case 3:
                        {
                            if (value >= needValue) {
                                status = 0;
                            }
                            break;
                        }
                    case 4:
                        return [-1, [], dayIdx];
                        break;
                }
                return [status, item[gc.dsConsts.ExFiveDaysTargetData.rank], dayIdx];
            }
            return [-1, [], dayIdx];
        };
        p.getNormalTargetInfo = function (dayIdx) {
            var self = this;
            //0 可领取 -2活动过期 -1未达成 1 已领取
            var status = gd.fiveDaysTargetCtrl.getItemInfoByDay(dayIdx)[0];
            var finished = status >= 0;
            var outDate = status == -2;
            var canGet = status == 0;
            var isGot = status == 1;
            return [finished, canGet, isGot, outDate];
        };
        p.getRankList = function (dayIdx) {
            var self = this;
            var rankList = gd.fiveDaysTargetCtrl.getItemInfoByDay(dayIdx)[1];
            var ret = [];
            for (var i = 0, li = 3; i < li; i++) {
                ret[i] = null;
                if (rankList[i])
                    ret[i] = rankList[i];
            }
            return ret;
        };
        //领奖
        p.receive = function (idx, cb, ctx) {
            var self = this;
            //不准领为开启的活动
            var todayIdx = self.getCurActDay();
            if (idx > todayIdx)
                return mo.showMsg(gc.id_c_msgCode.eventNoStart);
            //目标是否达成
            var normalTargetInfo = self.getNormalTargetInfo(idx);
            var finished = normalTargetInfo[0];
            var outDate = normalTargetInfo[3];
            if (!finished) {
                if (outDate) {
                    return mo.showMsg(gc.id_c_msgCode.activitiesEnd);
                }
                else {
                    return mo.showMsg(gc.id_c_msgCode.goalNotGet);
                }
            }
            var exActivity = gd.activityCtrl.getFiveTargetActivity();
            gd.activityCtrl.receive(gd.activityCtrl.getActivityValue(exActivity, gc.dsConsts.ActivityEntity.id), idx, function () {
                self.pushNotify(self.__class.ON_RECEIVED, idx);
                cb.call(ctx, idx);
            }, self);
        };
        p.getActivityStartTime = function () {
            var exActivity = gd.activityCtrl.getFiveTargetActivity();
            var activity = exActivity[gc.dsConsts.ExActivity.activity];
            return activity[gc.dsConsts.ActivityEntity.startTime];
        };
        p.getActivityEndTime = function () {
            var self = this;
            var endTime = Date.newDate(self.getActivityStartTime());
            endTime.addDays(self.__class.MAX_DAY);
            endTime.setHours(0);
            endTime.setMinutes(0);
            endTime.setSeconds(0);
            return endTime;
        };
        //今天是活动第几天
        p.getCurActDay = function () {
            var self = this;
            var exActivity = gd.activityCtrl.getFiveTargetActivity();
            return exActivity[gc.dsConsts.ExActivity.days];
        };
        //是否认证过了
        p.isCertified = function (dayIdx) {
            var self = this;
            var curActDay = self.getCurActDay();
            return dayIdx < curActDay;
        };
        p.isTodayTarget = function (dayIdx) {
            var self = this;
            var curActDay = self.getCurActDay();
            return curActDay == dayIdx;
        };
        // 获取结算时间
        p.getCalTime = function (dayIdx) {
            var self = this;
            var starTime = Date.newDate(self.getActivityStartTime());
            var endTime = Date.newDate(starTime);
            endTime.addDays(dayIdx + 1);
            endTime.setHours(0);
            endTime.setMinutes(0);
            endTime.setSeconds(0);
            return endTime;
        };
        //获取改日目标开始时间
        p.getStarTime = function (dayIdx) {
            var self = this;
            var starTime = Date.newDate(self.getActivityStartTime());
            var starTime = starTime.addDays(dayIdx);
            if (dayIdx > 0) {
                starTime.setHours(0);
                starTime.setMinutes(0);
                starTime.setSeconds(0);
            }
            return starTime;
        };
        FiveDaysTargetCtrl.ON_RECEIVED = "on_received";
        FiveDaysTargetCtrl.FIVE_TASK = { 0: "3100004", 1: "3100002", 2: "3100003", 3: "3100005", 4: "0" };
        FiveDaysTargetCtrl.MAX_DAY = 4;
        return FiveDaysTargetCtrl;
    })(mo.DataController);
    gd.FiveDaysTargetCtrl = FiveDaysTargetCtrl;
    egret.registerClass(FiveDaysTargetCtrl,"gd.FiveDaysTargetCtrl");
    gd.fiveDaysTargetCtrl = FiveDaysTargetCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Sara on 2016/6/23.
 */
var gd;
(function (gd) {
    var NewFourDaysCtrl = (function (_super) {
        __extends(NewFourDaysCtrl, _super);
        function NewFourDaysCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=NewFourDaysCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.FiveDaysTaret;
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
        };
        //初始化四日目标数据
        p.getInfo = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_fiveDaysTarget_getInfo1, {}, function (data) {
                //self.init(data);
                self._day = data[gc.dsConsts.FiveDaysTaret.day];
                self._items = data[gc.dsConsts.FiveDaysTaret.items];
                cb.call(target, data);
            });
        };
        //得到特定天数的数据
        //[status 0 可领取 -2活动过期 -1未达成 1 已领取, [排行数据], 第几天]
        p.getItemInfoByDay = function (dayIdx) {
            var self = this;
            if (dayIdx < self._items.length) {
                var item = self._items[dayIdx];
                var value = item[gc.dsConsts.ExFiveDaysTargetData.value];
                var status = -1;
                var exActivity = gd.activityCtrl.getNewFourActivity();
                var activityId = gd.activityCtrl.getActivityValue(exActivity, gc.dsConsts.ActivityEntity.id);
                var activityData = gd.userCtrl.getActivity() || {};
                var receiveData = activityData[activityId] || [];
                var receiveCount = 0;
                receiveCount = receiveData[dayIdx] || -1;
                //获取领奖信息
                if (receiveCount > 0) {
                    return [receiveCount, item[gc.dsConsts.ExFiveDaysTargetData.rank], dayIdx];
                }
                //活动结束
                var curActDay = self.getCurActDay();
                if (curActDay >= self.__class.MAX_DAY) {
                    return [-2, item[gc.dsConsts.ExFiveDaysTargetData.rank], dayIdx];
                }
                var wingSumLvl = 0;
                var gemSumLvl = 0;
                var realmSumLvl = 0;
                var heroMap = gd.heroCtrl.getHeroMap();
                for (var key in heroMap) {
                    var heroData = heroMap[key];
                    if (heroData.get(gc.dsConsts.HeroEntity.wingSumLvl))
                        wingSumLvl += parseInt(heroData.get(gc.dsConsts.HeroEntity.wingSumLvl));
                    if (heroData.get(gc.dsConsts.HeroEntity.gemSumLvl))
                        gemSumLvl += parseInt(heroData.get(gc.dsConsts.HeroEntity.gemSumLvl));
                    if (heroData.get(gc.dsConsts.HeroEntity.realmSumLvl))
                        realmSumLvl += parseInt(heroData.get(gc.dsConsts.HeroEntity.realmSumLvl));
                }
                wingSumLvl = (wingSumLvl / 100);
                realmSumLvl = (realmSumLvl / 100);
                var needValue = 99999999;
                var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
                var newFourNeedValue = c_game[gc.id_c_game.newFourNeedValue];
                switch (dayIdx) {
                    case 0:
                        {
                            needValue = newFourNeedValue[0];
                            if (wingSumLvl >= needValue) {
                                status = 0;
                            }
                            break;
                        }
                    case 1:
                        {
                            needValue = newFourNeedValue[1];
                            if (gemSumLvl >= needValue) {
                                status = 0;
                            }
                            break;
                        }
                    case 2:
                        {
                            needValue = newFourNeedValue[2];
                            if (realmSumLvl >= needValue) {
                                status = 0;
                            }
                            break;
                        }
                    case 3:
                        {
                            needValue = newFourNeedValue[3];
                            if (gd.userCtrl.getCombat() >= needValue) {
                                status = 0;
                            }
                            break;
                        }
                    case 4:
                        return [-1, [], dayIdx];
                        break;
                }
                return [status, item[gc.dsConsts.ExFiveDaysTargetData.rank], dayIdx];
            }
            return [-1, [], dayIdx];
        };
        p.getNormalTargetInfo = function (dayIdx) {
            var self = this;
            //0 可领取 -2活动过期 -1未达成 1 已领取
            var status = gd.newFourDaysCtrl.getItemInfoByDay(dayIdx)[0];
            var finished = status >= 0;
            var outDate = status == -2;
            var canGet = status == 0;
            var isGot = status == 1;
            return [finished, canGet, isGot, outDate];
        };
        p.getRankList = function (dayIdx) {
            var self = this;
            var rankList = gd.newFourDaysCtrl.getItemInfoByDay(dayIdx)[1];
            var ret = [];
            for (var i = 0, li = 3; i < li; i++) {
                ret[i] = null;
                if (rankList[i])
                    ret[i] = rankList[i];
            }
            return ret;
        };
        //领奖
        p.receive = function (idx, cb, ctx) {
            var self = this;
            //不准领为开启的活动
            var todayIdx = self.getCurActDay();
            if (idx > todayIdx)
                return mo.showMsg(gc.id_c_msgCode.eventNoStart);
            //目标是否达成
            var normalTargetInfo = self.getNormalTargetInfo(idx);
            var finished = normalTargetInfo[0];
            var outDate = normalTargetInfo[3];
            if (!finished) {
                if (outDate) {
                    return mo.showMsg(gc.id_c_msgCode.activitiesEnd);
                }
                else {
                    return mo.showMsg(gc.id_c_msgCode.goalNotGet);
                }
            }
            var exActivity = gd.activityCtrl.getNewFourActivity();
            gd.activityCtrl.receive(gd.activityCtrl.getActivityValue(exActivity, gc.dsConsts.ActivityEntity.id), idx, function () {
                self.pushNotify(self.__class.ON_RECEIVED, idx);
                cb.call(ctx, idx);
            }, self);
        };
        p.getActivityStartTime = function () {
            var exActivity = gd.activityCtrl.getNewFourActivity();
            var activity = exActivity[gc.dsConsts.ExActivity.activity];
            return activity[gc.dsConsts.ActivityEntity.startTime];
        };
        p.getActivityEndTime = function () {
            var self = this;
            var endTime = Date.newDate(self.getActivityStartTime());
            endTime.addDays(self.__class.MAX_DAY);
            endTime.setHours(0);
            endTime.setMinutes(0);
            endTime.setSeconds(0);
            return endTime;
        };
        //今天是活动第几天
        p.getCurActDay = function () {
            var self = this;
            var exActivity = gd.activityCtrl.getNewFourActivity();
            return exActivity[gc.dsConsts.ExActivity.days];
        };
        //是否认证过了
        p.isCertified = function (dayIdx) {
            var self = this;
            var curActDay = self.getCurActDay();
            return dayIdx < curActDay;
        };
        p.isTodayTarget = function (dayIdx) {
            var self = this;
            var curActDay = self.getCurActDay();
            return curActDay == dayIdx;
        };
        // 获取结算时间
        p.getCalTime = function (dayIdx) {
            var self = this;
            var starTime = Date.newDate(self.getActivityStartTime());
            var endTime = Date.newDate(starTime);
            endTime.addDays(dayIdx + 1);
            endTime.setHours(0);
            endTime.setMinutes(0);
            endTime.setSeconds(0);
            return endTime;
        };
        //获取改日目标开始时间
        p.getStarTime = function (dayIdx) {
            var self = this;
            var starTime = Date.newDate(self.getActivityStartTime());
            var starTime = starTime.addDays(dayIdx);
            if (dayIdx > 0) {
                starTime.setHours(0);
                starTime.setMinutes(0);
                starTime.setSeconds(0);
            }
            return starTime;
        };
        NewFourDaysCtrl.ON_RECEIVED = "on_received";
        NewFourDaysCtrl.MAX_DAY = 4;
        return NewFourDaysCtrl;
    })(mo.DataController);
    gd.NewFourDaysCtrl = NewFourDaysCtrl;
    egret.registerClass(NewFourDaysCtrl,"gd.NewFourDaysCtrl");
    gd.newFourDaysCtrl = NewFourDaysCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Sara on 2016/1/13.
 */
var gd;
(function (gd) {
    var DemonLotusCtrl = (function (_super) {
        __extends(DemonLotusCtrl, _super);
        function DemonLotusCtrl() {
            _super.apply(this, arguments);
            this._genuineQi = 0;
            this._lastUpTime = "";
            this._dlLastUpTime = "";
        }
        var d = __define,c=DemonLotusCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.DemonLotusEntity;
        };
        p.initData = function (data) {
            var cfg_c_open = mo.getJSONWithFileName(gc.cfg_c_open);
            var lvl = gd.userCtrl.getLvl();
            var openLvl = cfg_c_open[gc.id_c_open.expBox][gc.c_open_lvlRequired];
            if (lvl >= openLvl)
                this.getInfo(function () { }, this);
        };
        //更新数据
        p.updateData = function (data) {
            var self = this;
            if (!self._data)
                return;
            self.updateEntity(data);
        };
        p.calGenuineQi = function () {
            var self = this;
            var userData = gd.userCtrl.getData();
            var exData = userData[gc.dsConsts.UserEntity.exData] || {};
            var demonLotusData = gd.demonLotusCtrl.getData();
            var cfg_c_genuineQi = mo.getJSONWithFileName(gc.cfg_c_genuineQi);
            var cfg_c_demonLotus = mo.getJSONWithFileName(gc.cfg_c_demonLotus);
            var cfg_t_talismanSkill = mo.getJSONWithFileName(gc.cfg_t_talismanSkill);
            var lvl = userData[gc.dsConsts.UserEntity.lvl];
            var offAddGenuineQi = 0;
            var genuLimit = 0;
            var nowTime = Date.newDate();
            var genuineQi = self._genuineQi;
            var lastTime = Date.newDate(self._lastUpTime); //最后结算时间
            if (!cfg_c_genuineQi[lvl] || self._lastUpTime.length <= 0)
                return [offAddGenuineQi, genuLimit];
            var produceFix = cfg_c_genuineQi[userData[gc.dsConsts.UserEntity.lvl]][gc.c_genuineQi_recovery] || 0; //基础速度
            if (exData[gc.c_prop.userExDataKey.talismanSkill] && exData[gc.c_prop.userExDataKey.talismanSkill][gc.c_prop.talismanSkillTypeKey.genuineQi]) {
                var skillArr = exData[gc.c_prop.userExDataKey.talismanSkill][gc.c_prop.talismanSkillTypeKey.genuineQi];
                for (var i = 0; i < skillArr.length; i++) {
                    var skillId = skillArr[i];
                    if (cfg_t_talismanSkill[skillId]) {
                        produceFix += cfg_t_talismanSkill[skillId][gc.t_talismanSkill_effect][0][0];
                    }
                }
            }
            if (!userData[gc.dsConsts.UserEntity.exData][gc.c_prop.userExDataKey.genuineQi])
                userData[gc.dsConsts.UserEntity.exData][gc.c_prop.userExDataKey.genuineQi] = [];
            var exData1 = userData[gc.dsConsts.UserEntity.exData][gc.c_prop.userExDataKey.genuineQi];
            if (!exData1[0])
                userData[gc.dsConsts.UserEntity.exData][gc.c_prop.userExDataKey.genuineQi][0] = Date.newDate();
            //距离上次结算的秒差
            var second = (nowTime.getTime() - lastTime.getTime()) / 1000;
            if (second < 0)
                second = 0;
            offAddGenuineQi = Math.ceil(second * produceFix) + genuineQi;
            var advanceLvl = 0;
            if (demonLotusData)
                advanceLvl = demonLotusData[gc.dsConsts.DemonLotusEntity.advanceLvl];
            var genqiAccLimit = cfg_c_demonLotus[advanceLvl][gc.c_demonLotus_genqiAccLimit];
            genuLimit = parseInt(cfg_c_genuineQi[lvl][gc.c_genuineQi_genuLimit]) + genqiAccLimit; //真气上限
            if (offAddGenuineQi > genuLimit) {
                if (genuineQi < genuLimit) {
                    offAddGenuineQi = genuLimit;
                }
                else {
                    offAddGenuineQi = genuineQi;
                }
            }
            if (second >= 1) {
            }
            return [offAddGenuineQi, genuLimit, produceFix];
        };
        //是否最大经验
        p.isMaxExpc = function () {
            var self = this;
            var nowExpc = self.calNowGet();
            var limitExpc = self.getExpcLimit();
            return nowExpc >= limitExpc;
        };
        //获取经验上限
        p.getExpcLimit = function () {
            var c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var c_demonLotus = mo.getJSONWithFileName(gc.cfg_c_demonLotus);
            var demonLotusData = gd.demonLotusCtrl.getData();
            var lvl = demonLotusData[gc.dsConsts.DemonLotusEntity.lvl];
            var advanceLvl = demonLotusData[gc.dsConsts.DemonLotusEntity.advanceLvl] || 0;
            var storeLimit = parseInt(c_lvl[lvl][gc.c_lvl_storeLimit]); //经验贮存上限
            storeLimit += parseInt(c_demonLotus[advanceLvl][gc.c_demonLotus_expcAccLimit]);
            return storeLimit;
        };
        //计算妖莲经验
        p.calNowGet = function () {
            var self = this;
            var returnAddUpExpc = 0;
            var c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var c_demonLotus = mo.getJSONWithFileName(gc.cfg_c_demonLotus);
            var demonLotusData = gd.demonLotusCtrl.getData();
            var nowTime = Date.newDate();
            var lvl = demonLotusData[gc.dsConsts.DemonLotusEntity.lvl];
            var advanceLvl = demonLotusData[gc.dsConsts.DemonLotusEntity.advanceLvl] || 0;
            var addUpExpc = parseInt(demonLotusData[gc.dsConsts.DemonLotusEntity.addUpExpc]);
            var lastOpeTime = self._dlLastUpTime; //demonLotusData[gc.dsConsts.DemonLotusEntity.lastOpeTime];
            var expOutput = parseInt(c_lvl[lvl][gc.c_lvl_expOutput]); //经验产量（每秒）
            expOutput += parseInt(c_demonLotus[advanceLvl][gc.c_demonLotus_expOutput]);
            var storeLimit = parseInt(c_lvl[lvl][gc.c_lvl_storeLimit]); //经验贮存上限
            storeLimit += parseInt(c_demonLotus[advanceLvl][gc.c_demonLotus_expcAccLimit]);
            var expc = 0;
            if (addUpExpc < storeLimit && lastOpeTime && nowTime > Date.newDate(lastOpeTime)) {
                var second = (nowTime.getTime() - Date.newDate(lastOpeTime).getTime()) / 1000;
                if (second > 1)
                    expc = Math.round(expOutput * second);
            }
            var expcSum = addUpExpc + expc;
            returnAddUpExpc = expcSum;
            if (expcSum > storeLimit)
                returnAddUpExpc = storeLimit;
            gd.pointCtrl.cal(gc.c_prop.pointRedKey.demonLotus_main);
            return returnAddUpExpc;
        };
        //获取聚灵妖莲数据          return [是否周卡,是否月卡,gc.dsConsts.DemonLotusEntity]
        p.getInfo = function (cb, target) {
            var self = this;
            if (self.getData())
                return cb.call(target, [false, false, self.getData()]);
            var cfg_c_open = mo.getJSONWithFileName(gc.cfg_c_open);
            var lvl = gd.userCtrl.getLvl();
            var openLvl = cfg_c_open[gc.id_c_open.expBox][gc.c_open_lvlRequired];
            if (lvl < openLvl)
                return mo.showMsg(gc.id_c_msgCode.noRoleLvl, openLvl);
            mo.request4Server(gc.iface.a_demonLotus_getInfo, {}, function (data) {
                var isWeek = data[gc.dsConsts.ExDemonLotusData.isWeek];
                var isMonth = data[gc.dsConsts.ExDemonLotusData.isMonth];
                var demonLotusData = data[gc.dsConsts.ExDemonLotusData.demonLotusData];
                var genuineQiArr = data[gc.dsConsts.ExDemonLotusData.genuineQiArr];
                self._dlLastUpTime = Date.newDate().toString();
                if (genuineQiArr.length > 0) {
                    self._genuineQi = parseInt(genuineQiArr[0]);
                    self._lastUpTime = Date.newDate().toString();
                }
                if (self.getData()) {
                    self.updateEntity(demonLotusData);
                }
                else {
                    self.init(demonLotusData);
                }
                cb.call(target, [isWeek, isMonth, demonLotusData]);
            });
        };
        //升级聚灵妖莲
        p.upLotus = function (cb, target) {
            var self = this;
            var cfg_c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var lvl = self.get(gc.dsConsts.DemonLotusEntity.lvl);
            var upLotusId = cfg_c_game[gc.id_c_game.demonLotusCfg][0];
            var lvlLimit = cfg_c_game[gc.id_c_game.demonLotusCfg][1];
            if (lvl >= lvlLimit)
                return mo.showMsg("等级已达上限");
            var upLotusNum = cfg_c_lvl[lvl + 1][gc.c_lvl_upLotusNum]; //升级需要的道具数量
            var count = gd.userCtrl.getItemNum(upLotusId);
            if (count < upLotusNum) {
                g_base.GainWay.create().setData({ itemId: upLotusId }).show();
                return;
            }
            mo.requestWaiting4Server(gc.iface.a_demonLotus_upLotus, {}, function (data) {
                var demonLotusData = data[gc.dsConsts.ExDemonLotusData.demonLotusData];
                var delBagItems = data[gc.dsConsts.ExDemonLotusData.delBagItems];
                var userData = gd.userCtrl.getData();
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                self.updateEntity(demonLotusData);
                self._dlLastUpTime = Date.newDate().toString();
                cb.call(target, demonLotusData);
            });
        };
        //领取收益
        p.getRevenue = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_demonLotus_getRevenue, {}, function (data) {
                var expSum = data[gc.dsConsts.ExDemonLotusData.expSum];
                if (expSum > 0)
                    g_msg.UIMsgTextCtrl.push("获得经验：" + expSum);
                var demonLotusData = data[gc.dsConsts.ExDemonLotusData.demonLotusData];
                var userData = data[gc.dsConsts.ExDemonLotusData.userData];
                gd.userCtrl.updateEntity(userData);
                self.updateEntity(demonLotusData);
                self._dlLastUpTime = Date.newDate().toString();
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.demonLotus_main);
                cb.call(target, demonLotusData);
            });
        };
        //获得开光次数
        p.getOpeningCount = function () {
            return gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.opening) || 0;
        };
        //开光
        p.opening = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_demonLotus_opening, {}, function (data) {
                var diffExp = data[gc.dsConsts.Opening.diffExp] || 0;
                if (diffExp > 0)
                    g_msg.UIMsgTextCtrl.push("获得经验：" + Math.floor(diffExp));
                var userData = data[gc.dsConsts.Opening.userData] || {};
                gd.userCtrl.updateEntity(userData);
                cb.call(target, data);
            });
        };
        //妖莲进阶
        p.lotusAdvance = function (cb, target) {
            var self = this;
            var cfg_c_demonLotus = mo.getJSONWithFileName(gc.cfg_c_demonLotus);
            var lvl = self.get(gc.dsConsts.DemonLotusEntity.lvl);
            var upLotusId = gc.c_prop.spItemIdKey.lotus;
            var advanceLvl = parseInt(self.get(gc.dsConsts.DemonLotusEntity.advanceLvl)) || 0; //妖莲进阶等级
            if (!cfg_c_demonLotus[advanceLvl + 1])
                return mo.showMsg("进阶等级已达上限");
            var advNeedLvl = cfg_c_demonLotus[advanceLvl][gc.c_demonLotus_advNeedLvl]; //进阶需要妖莲等级
            if (lvl < advNeedLvl)
                return mo.showMsg(advNeedLvl + "级可进阶");
            var upLotusNum = cfg_c_demonLotus[advanceLvl][gc.c_demonLotus_advCosLotus]; //妖莲进阶消耗妖莲之心
            var count = gd.userCtrl.getItemNum(upLotusId);
            if (count < upLotusNum) {
                g_base.GainWay.create().setData({ itemId: upLotusId }).show();
                return;
            }
            mo.requestWaiting4Server(gc.iface.a_demonLotus_lotusAdvance, {}, function (data) {
                var isSucceed = data[gc.dsConsts.ExDemonLotusData.isSucceed];
                var demonLotusData = data[gc.dsConsts.ExDemonLotusData.demonLotusData];
                var delBagItems = data[gc.dsConsts.ExDemonLotusData.delBagItems];
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                gd.userCtrl.set(gc.dsConsts.UserEntity.bag, bag);
                self.updateEntity(demonLotusData);
                cb.call(target, [isSucceed, demonLotusData]);
            });
        };
        //是否最大经验
        p.isCanTrain = function () {
            var self = this;
            var lvl = gd.userCtrl.getLvl();
            var cfg_c_demonLotus = mo.getJSONWithFileName(gc.cfg_c_demonLotus);
            var upLotusId = gc.c_prop.spItemIdKey.lotus;
            var treasureLvl = parseInt(self.get(gc.dsConsts.DemonLotusEntity.treasureLvl)) || 0; //妖莲宝物等级
            if (!cfg_c_demonLotus[treasureLvl][gc.c_demonLotus_treaCosGenqi])
                return false;
            var treaNeedUserLvl = cfg_c_demonLotus[treasureLvl][gc.c_demonLotus_treaNeedUserLvl];
            if (lvl < treaNeedUserLvl)
                return false;
            var treaCosLotus = cfg_c_demonLotus[treasureLvl][gc.c_demonLotus_treaCosLotus]; //宝物升级消耗妖莲
            var treaCosGenqi = cfg_c_demonLotus[treasureLvl][gc.c_demonLotus_treaCosGenqi]; //宝物升级消耗真气
            var count = gd.userCtrl.getItemNum(upLotusId);
            if (count < treaCosLotus) {
                return false;
            }
            var genqiData = self.calGenuineQi();
            if (genqiData[0] < treaCosGenqi) {
                return false;
            }
            return true;
        };
        //妖莲宝物培养
        p.treasureTrain = function (cb, target) {
            var self = this;
            var cfg_c_demonLotus = mo.getJSONWithFileName(gc.cfg_c_demonLotus);
            var upLotusId = gc.c_prop.spItemIdKey.lotus;
            var lvl = gd.userCtrl.getLvl();
            var advanceLvl = parseInt(self.get(gc.dsConsts.DemonLotusEntity.advanceLvl)) || 0; //妖莲进阶等级
            var treasureLvl = parseInt(self.get(gc.dsConsts.DemonLotusEntity.treasureLvl)) || 0; //妖莲宝物等级
            if (!cfg_c_demonLotus[treasureLvl][gc.c_demonLotus_treaCosGenqi])
                return mo.showMsg("妖莲宝物等级已达上限");
            var treaNeedUserLvl = cfg_c_demonLotus[treasureLvl][gc.c_demonLotus_treaNeedUserLvl];
            if (lvl < treaNeedUserLvl)
                return mo.showMsg("人物升至" + treaNeedUserLvl + "级后可培养莲宝");
            var treaCosLotus = cfg_c_demonLotus[treasureLvl][gc.c_demonLotus_treaCosLotus]; //宝物升级消耗妖莲
            var count = gd.userCtrl.getItemNum(upLotusId);
            if (count < treaCosLotus) {
                g_base.GainWay.create().setData({ itemId: upLotusId }).show();
                return;
            }
            mo.requestWaiting4Server(gc.iface.a_demonLotus_treasureTrain, {}, function (data) {
                var isSucceed = data[gc.dsConsts.ExDemonLotusData.isSucceed];
                var userData = data[gc.dsConsts.ExDemonLotusData.userData];
                var demonLotusData = data[gc.dsConsts.ExDemonLotusData.demonLotusData];
                var delBagItems = data[gc.dsConsts.ExDemonLotusData.delBagItems];
                var genuineQiArr = data[gc.dsConsts.ExDemonLotusData.genuineQiArr];
                if (genuineQiArr.length > 0) {
                    self._genuineQi = parseInt(genuineQiArr[0]);
                    self._lastUpTime = Date.newDate().toString();
                }
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                self.updateEntity(demonLotusData);
                gd.heroCtrl.calPropAndCombat();
                gd.pointCtrl.cal(gc.c_prop.pointRedKey.demonLotus_main);
                cb.call(target, [isSucceed, demonLotusData]);
            });
        };
        p._getOpenConNum = function () {
            var record = gd.userCtrl.get(gc.dsConsts.UserEntity.record);
            var conNum = record[gc.c_prop.userRecordTypeKey.demonLotusOpenNum] || 0;
            var conDate = record[gc.c_prop.userRecordTypeKey.demonLotusOpenDate] || Date.newDate();
            conDate = Date.newDate(conDate);
            if (conDate.getDaysBetween(Date.newDate()) > 1) {
                conNum = 0;
            }
            return conNum;
        };
        p._getOpenExpc = function () {
            var self = this;
            var lvInfo = mo.getJSONWithFileNameAndID(gc.cfg_c_lvl, self.get(gc.dsConsts.DemonLotusEntity.lvl));
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.demonLotusCfg);
            //计算经验
            var expc = lvInfo[gc.c_lvl_openingExp] || 0;
            var curMult = self._getAddMult();
            expc += Math.floor(expc * curMult / 10000);
            return expc;
        };
        p._getAddMult = function () {
            var self = this;
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.demonLotusCfg);
            var expcMult = cfg[4];
            var expcMultMax = cfg[5];
            var conNum = self._getOpenConNum();
            var curMult = expcMult * conNum;
            if (curMult >= expcMultMax)
                curMult = expcMultMax;
            return curMult;
        };
        p._getOpenCost = function () {
            var self = this;
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.demonLotusCfg);
            var costData = cfg[3];
            costData = costData.split(",");
            var costDiamond = parseInt(costData[self.getOpeningCount()] || 0);
            if (costDiamond <= 0)
                costDiamond = costData[costData.length - 1];
            return costDiamond;
        };
        p.getOpeningData = function () {
            var self = this;
            var data = {};
            var vip = gd.userCtrl.getVip();
            var vipInfo = mo.getJSONWithFileNameAndID(gc.cfg_c_vip, vip);
            var openingCount = vipInfo[gc.c_vip_openingCount] || 0;
            var leftNum = openingCount - self.getOpeningCount();
            leftNum = leftNum >= 0 ? leftNum : 0;
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.demonLotusCfg);
            var lvInfo = mo.getJSONWithFileNameAndID(gc.cfg_c_lvl, self.get(gc.dsConsts.DemonLotusEntity.lvl));
            var cost = self._getOpenCost();
            data = {
                lotusLvl: self.get(gc.dsConsts.DemonLotusEntity.lvl) || 0,
                vip: gd.userCtrl.getVip(),
                openingCount: openingCount,
                cost: cost || 0,
                exp: self._getOpenExpc(),
                leftNum: leftNum,
                conDays: self._getOpenConNum(),
                addMult: self._getAddMult(),
                maxMult: cfg[5] //最大经验加成
            };
            return data;
        };
        return DemonLotusCtrl;
    })(mo.DataController);
    gd.DemonLotusCtrl = DemonLotusCtrl;
    egret.registerClass(DemonLotusCtrl,"gd.DemonLotusCtrl");
    gd.demonLotusCtrl = DemonLotusCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Sara on 2016/1/5.
 */
var gd;
(function (gd) {
    var RedEnvelopeCtrl = (function (_super) {
        __extends(RedEnvelopeCtrl, _super);
        function RedEnvelopeCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=RedEnvelopeCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this._lastId = 0;
            this._allList = [];
            this._allCanGetList = [];
            this._allName = {};
            this.DATA_KEY = gc.dsConsts.RedEnvelopeEntity;
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
        };
        //更新数据
        p.updateData = function (updata) {
            var self = this;
            var id = updata[gc.dsConsts.RedEnvelopeEntity.id];
            var data = self._allList;
            for (var key in data) {
                if (id == data[key][gc.dsConsts.RedEnvelopeEntity.id])
                    self._allList[key] = updata;
            }
        };
        //获取最后的id
        p.getLastId = function () {
            return this._lastId;
        };
        //是否领取  gc.dsConsts.RedEnvelopeEntity.getData   false:未领取  true：已领取  [元宝数量，用户Id,用户名称]
        p.isPicked = function (getData) {
            var self = this;
            var isPicked = false;
            var userId = gd.userCtrl.getId();
            for (var i = 0; i < getData.length; i++) {
                if (getData[i][1] == userId) {
                    isPicked = true;
                    break;
                }
            }
            return isPicked;
        };
        p.getNameById = function (id) {
            return this._allName[id] || "";
        };
        /**
         * 获取红包列表
         * @param cb
         * @param target
         * @returns gc.dsConsts.RedEnvelopeEntity
         */
        p.getList = function (cb, target) {
            var self = this;
            mo.request4Server(gc.iface.a_redEnvelope_getList, {}, function (data) {
                cb.call(target, data);
            });
        };
        /**
         * 发送红包
         * @param type 红包类型
         * @param amount 红包金额
         * @param personNum 红包领取份数
         * @param wish 祝福文本
         * @param cb
         * @param target
         * @returns gc.dsConsts.GuildEntity
         */
        p.sendRedEnvelope = function (type, spItemId, amount, personNum, wish, cb, target) {
            var self = this;
            var sensitiveArr = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.fuckWord)[0].split(",");
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var diamond = gd.userCtrl.getDiamond();
            var amountMin = c_game[gc.id_c_game.redEnvelopeCfg][0]; //红包元宝数量最小值
            var personNumMin = c_game[gc.id_c_game.redEnvelopeCfg][1]; //元宝最小分配份数
            if (diamond < amount)
                return mo.showMsg(gc.id_c_msgCode.noDiamond);
            if (amount < amountMin)
                return mo.showMsg(gc.id_c_msgCode.packetMin20);
            if (personNum < personNumMin)
                return mo.showMsg("元宝分配份数低于最小值");
            //限制25字
            if (wish.replace(/[^\x00-\xFF]/g, '**').length > 50)
                return mo.showMsg("红包祝福最多25字！");
            //过滤敏感字符
            if (mo.STR.checkSensitiveWord(wish, sensitiveArr))
                return mo.showMsg("输入祝福内容不合法");
            var argKeys = gc.iface.a_redEnvelope_sendRedEnvelope_args;
            var args = {};
            args[argKeys.type] = type;
            args[argKeys.amount] = amount;
            args[argKeys.personNum] = personNum;
            args[argKeys.wish] = wish;
            args[argKeys.spItemId] = spItemId;
            mo.requestWaiting4Server(gc.iface.a_redEnvelope_sendRedEnvelope, args, function (data) {
                var userData = data[gc.dsConsts.ExRedEnvelopeData.userData] || {};
                var redEnvelopeData = data[gc.dsConsts.ExRedEnvelopeData.redEnvelopeData] || {};
                var redEnvelopePersonalData = data[gc.dsConsts.ExRedEnvelopeData.redEnvelopePersonalData] || {};
                if (gd.redEnvelopePersonalCtrl.getData()) {
                    gd.redEnvelopePersonalCtrl.updateEntity(redEnvelopePersonalData);
                }
                else {
                    gd.redEnvelopePersonalCtrl.init(redEnvelopePersonalData);
                }
                gd.userCtrl.updateEntity(userData);
                self.updateData(redEnvelopeData);
                cb.call(target, redEnvelopeData);
            });
        };
        /**
         * 抢红包
         * @param redEnvelopeId
         * @param cb
         * @param target
         * @returns
         */
        p.receiveBonus = function (redEnvelopeId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_redEnvelope_receiveBonus_args;
            var args = {};
            args[argKeys.redEnvelopeId] = redEnvelopeId;
            mo.requestWaiting4Server(gc.iface.a_redEnvelope_receiveBonus, args, function (data) {
                var isGet = data[gc.dsConsts.ExRedEnvelopeData.isGet];
                var userData = data[gc.dsConsts.ExRedEnvelopeData.userData] || {};
                gd.userCtrl.updateEntity(userData);
                var redEnvelopeData = {};
                if (isGet) {
                    redEnvelopeData = data[gc.dsConsts.ExRedEnvelopeData.redEnvelopeData] || {};
                    var redEnvelopePersonalData = data[gc.dsConsts.ExRedEnvelopeData.redEnvelopePersonalData] || {};
                    if (gd.redEnvelopePersonalCtrl.getData()) {
                        gd.redEnvelopePersonalCtrl.updateEntity(redEnvelopePersonalData);
                    }
                    else {
                        gd.redEnvelopePersonalCtrl.init(redEnvelopePersonalData);
                    }
                    for (var i = 0; i < self._allList.length; ++i) {
                        if (self._allList[i][gc.dsConsts.RedEnvelopeEntity.id] == redEnvelopeData[gc.dsConsts.RedEnvelopeEntity.id]) {
                            self._allList.splice(i--, 1);
                        }
                    }
                    self.onNewAll();
                    cb.call(target, redEnvelopeData);
                }
                else {
                    mo.showMsg("该红包已经被领光了");
                }
            });
        };
        /**
         * 同步红包数据
         * @param cb
         * @param target
         * @returns
         */
        p.syncRedEnvelope = function (cb, target) {
            var self = this;
            mo.request4Server(gc.iface.a_redEnvelope_syncRedEnvelope, {}, function (data) {
                cb.call(target, data);
            });
        };
        //同步数据
        p.syncData = function () {
            var self = this;
            var argKeys = gc.iface.a_redEnvelope_getNewList_args;
            var args = {};
            args[argKeys.lastId] = self._lastId;
            mo.request4Server(gc.iface.a_redEnvelope_getNewList, args, function (data) {
                var dataList = data[gc.dsConsts.ExRedEnvelopeData.redEnvelopeData] || {};
                self._allName = data[gc.dsConsts.ExRedEnvelopeData.nameObj] || {};
                self._updateData(dataList);
                self.onNewAll();
            });
        };
        /**
         * 获取所有可抢红包
         * @returns
         */
        p.getCanGetList = function () {
            return this._allCanGetList;
        };
        //有新的可抢红包消息
        p.onNewAll = function () {
            var self = this;
            var isChanged = false;
            var isDel = false;
            var now = Date.newDate();
            for (var i = 0; i < this._allCanGetList.length; ++i) {
                if (this._allList.indexOf(this._allCanGetList[i]) == -1) {
                    isDel = true;
                    this._allCanGetList.splice(i--, 1);
                }
            }
            for (var i = 0; i < this._allList.length; ++i) {
                var redEntity = this._allList[i];
                var addTime = Date.newDate(redEntity[gc.dsConsts.RedEnvelopeEntity.addTime]);
                if (now.getTime() - addTime.getTime() >= 15 * 1000) {
                    if (!isChanged) {
                        isChanged = true;
                        this._allCanGetList = [];
                    }
                    this._allCanGetList.push(redEntity);
                }
            }
            if (this._allCanGetList.length == this._allList.length) {
                this.startCheckCanGet(false);
            }
            if (isChanged || isDel) {
                self.pushNotify(self.__class.ON_REDENVELOPE_UPDATE, self.getCanGetList());
            }
        };
        p.startCheckCanGet = function (isStart) {
            egret.clearInterval(this.checkTimeId);
            if (isStart) {
                this.checkTimeId = egret.setInterval(function () {
                    this.onNewAll();
                }, this, 500);
            }
        };
        p.needToDel = function () {
            var self = this;
            var allList = self._allList;
            var nowTime = Date.newDate();
            for (var i = 0; i < allList.length; ++i) {
                var redEnvelopeData = allList[i];
                var expireTime = redEnvelopeData[gc.dsConsts.RedEnvelopeEntity.expireTime];
                //判断是否已经过期
                if (expireTime && (Date.newDate(expireTime).isBefore(nowTime) || Date.newDate(expireTime).equals(nowTime))) {
                    self._allList.splice(i--, 1);
                }
            }
            self.onNewAll();
        };
        p._updateData = function (dataList) {
            var self = this;
            var updateType = {};
            self._allList.length = 0;
            var isSync = false;
            for (var i = 0; i < dataList.length; i++) {
                var locData = dataList[i];
                updateType[0] = 1;
                self._pushAllList(locData);
                self._lastId = locData[gc.dsConsts.RedEnvelopeEntity.id];
            }
            self.startCheckCanGet(self._allList.length > 0);
        };
        p._pushAllList = function (data) {
            var self = this;
            self._allList.push(data);
        };
        RedEnvelopeCtrl.ON_REDENVELOPE_UPDATE = "ON_REDENVELOPE_UPDATE";
        return RedEnvelopeCtrl;
    })(mo.DataController);
    gd.RedEnvelopeCtrl = RedEnvelopeCtrl;
    egret.registerClass(RedEnvelopeCtrl,"gd.RedEnvelopeCtrl");
    gd.redEnvelopeCtrl = RedEnvelopeCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Sara on 2016/1/5.
 */
var gd;
(function (gd) {
    var RedEnvelopePersonalCtrl = (function (_super) {
        __extends(RedEnvelopePersonalCtrl, _super);
        function RedEnvelopePersonalCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=RedEnvelopePersonalCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.RedEnvelopePersonalEntity;
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
        };
        //更新数据
        p.updateData = function (data) {
            var self = this;
            if (!self._data)
                return;
            self.updateEntity(data);
        };
        p.getGetData = function () {
        };
        //获取今日次数数据      【vip等级,剩余次数,次数上限】       VIP%s今日发送次数剩余%s/%s（当前剩余次数/次数上限）
        p.getDayCount = function (type) {
            var self = this;
            var returnArr = [];
            var vip = gd.userCtrl.getVip();
            returnArr[0] = vip;
            var cfg_c_vip = mo.getJSONWithFileName(gc.cfg_c_vip);
            var exData = {};
            var lastSendTime = self.get(gc.dsConsts.RedEnvelopePersonalEntity.lastSendTime);
            if (lastSendTime && Date.newDate(lastSendTime).equalsDay(Date.newDate()))
                exData = self.get(gc.dsConsts.RedEnvelopePersonalEntity.exData);
            if (type == gc.c_prop.redEnvelopeTypeKey.comRed) {
                var count = cfg_c_vip[vip][gc.c_vip_worldCount];
                returnArr[2] = count;
                var comRedArr = exData[gc.c_prop.redEnvelopeTypeKey.comRed] || [0];
                returnArr[1] = count - comRedArr[0];
            }
            else if (type == gc.c_prop.redEnvelopeTypeKey.guildRed) {
                var count = cfg_c_vip[vip][gc.c_vip_guildCount];
                returnArr[2] = count;
                var guildArr = exData[gc.c_prop.redEnvelopeTypeKey.guildRed] || [0];
                returnArr[1] = count - guildArr[0];
            }
            else {
                returnArr[2] = 0;
                returnArr[1] = 0;
            }
            return returnArr;
        };
        //获取今日剩余额度      -1:无限制
        p.getDayShare = function () {
            var self = this;
            var vip = gd.userCtrl.getVip();
            var cfg_c_vip = mo.getJSONWithFileName(gc.cfg_c_vip);
            var dayShare = cfg_c_vip[vip][gc.c_vip_redEnvelopeCount];
            if (!self.getData())
                return dayShare;
            if (dayShare == -1)
                return dayShare;
            var refreshTime = self.get(gc.dsConsts.RedEnvelopePersonalEntity.lastSendTime);
            if (!refreshTime)
                return dayShare;
            if (refreshTime) {
                if (Date.newDate(refreshTime).equalsDay(Date.newDate())) {
                    var count = self.get(gc.dsConsts.RedEnvelopePersonalEntity.sendCount) || 0;
                    dayShare -= count;
                }
            }
            return dayShare;
        };
        //          getData:发送记录[红包id,红包id........]
        p.getInfo = function (cb, target) {
            var self = this;
            if (gd.guildPersonalCtrl.getData() && self.getData())
                return cb.call(target, self.getData());
            mo.requestWaiting4Server(gc.iface.a_redEnvelopePersonal_getInfo, {}, function (data) {
                var guildPersonalData = data[gc.dsConsts.ExRedEnvelopeData.guildPersonalData] || {};
                var redEnvelopePersonalData = data[gc.dsConsts.ExRedEnvelopeData.redEnvelopePersonalData] || {};
                if (self.getData()) {
                    self.updateEntity(redEnvelopePersonalData);
                }
                else {
                    self.init(redEnvelopePersonalData);
                }
                if (gd.guildPersonalCtrl.getData()) {
                    gd.guildPersonalCtrl.updateEntity(guildPersonalData);
                }
                else {
                    gd.guildPersonalCtrl.init(guildPersonalData);
                }
                cb.call(target, redEnvelopePersonalData);
            });
        };
        return RedEnvelopePersonalCtrl;
    })(mo.DataController);
    gd.RedEnvelopePersonalCtrl = RedEnvelopePersonalCtrl;
    egret.registerClass(RedEnvelopePersonalCtrl,"gd.RedEnvelopePersonalCtrl");
    gd.redEnvelopePersonalCtrl = RedEnvelopePersonalCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2016/1/9.
 */
var gd;
(function (gd) {
    var KingCtrl = (function (_super) {
        __extends(KingCtrl, _super);
        function KingCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=KingCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.King;
            this._isOpenBuff = false;
        };
        /**
         * 获取数据
         * @param cb
         * @param target
         */
        p.getInfo = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_king_getInfo, {}, function (data) {
                self.init(data);
                if (cb)
                    cb.call(target, data);
            });
        };
        //设置是否开启
        p.setIsOpenBuff = function (value) {
            var self = this;
            var oldValue = self._isOpenBuff;
            if (self._isOpenBuff != value) {
                self._isOpenBuff = value;
                self.pushNotify(self.__class.ON_KING_BUFF_CHANGE);
            }
        };
        //是否开启buff
        p.isOpenBuff = function () {
            return this._isOpenBuff;
        };
        //是否是霸主
        p.isKing = function () {
            var self = this;
            var myId = gd.userCtrl.getId();
            var kingId = self.get(gc.dsConsts.King.kingId);
            if (myId == kingId)
                return true;
            else
                return false;
        };
        //霸主是否有加入行会
        p.isKingInGuild = function () {
            var self = this;
            var kingGuildId = self.get(gc.dsConsts.King.kingGuildId);
            if (!kingGuildId)
                return false;
            return true;
        };
        //个人领取福利次数
        p.getMyWelfare = function () {
            return gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.getKingWelfare);
        };
        //个人膜拜次数
        p.getMyWorshipNum = function () {
            return gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.worShip);
        };
        //获取buff剩余cd秒数
        p.getBuffReCd = function () {
            var self = this;
            var buffEndTime = self.get(gc.dsConsts.King.buffEndTime);
            if (!buffEndTime)
                return 0;
            buffEndTime = Date.newDate(buffEndTime);
            var reSeconds = Date.newDate().getSecondsBetween(buffEndTime);
            if (reSeconds < 0)
                reSeconds = 0;
            return reSeconds;
        };
        //膜拜
        p.worship = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_king_worship, {}, function (data) {
                var king = data[gc.dsConsts.ExKing.king];
                self.updateEntity(king);
                var userData = data[gc.dsConsts.ExKing.userData];
                var bagItems = data[gc.dsConsts.ExKing.bagItems];
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                if (cb)
                    cb.call(target);
            });
        };
        //领取福利
        p.receiveWelfare = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_king_receiveWelfare, {}, function (data) {
                var userData = data[gc.dsConsts.ExKing.userData];
                var bagItems = data[gc.dsConsts.ExKing.bagItems];
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                if (cb)
                    cb.call(target);
            });
        };
        //开启
        p.openBuff = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_king_openBuff, {}, function (data) {
                self.updateEntity(data);
                if (cb)
                    cb.call(target);
            });
        };
        p.getBuffOpenNum = function () {
            var self = this;
            var buffOpenTime = self.get(gc.dsConsts.King.buffOpenTime);
            var buffOpenNum = self.get(gc.dsConsts.King.buffOpenNum);
            buffOpenTime = Date.newDate(buffOpenTime);
            if (buffOpenTime && !buffOpenTime.equalsDay(Date.newDate())) {
                buffOpenTime = Date.newDate();
                buffOpenNum = 0;
            }
            return buffOpenNum;
        };
        //获取霸主数据
        p.getKingData = function () {
            var self = this;
            var data;
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.king);
            data = {
                kingGuildName: self.get(gc.dsConsts.King.kingGuildName),
                kingVip: self.get(gc.dsConsts.King.kingVip),
                kingLvl: self.get(gc.dsConsts.King.kingLvl),
                kingName: self.get(gc.dsConsts.King.kingName),
                beWorshipNum: self.get(gc.dsConsts.King.beWorshipNum),
                beWorshipCount: self.get(gc.dsConsts.King.beWorshipCount),
                buffOpenNum: self.getBuffOpenNum(),
                avatarData: self.get(gc.dsConsts.King.kingHeroDisplay),
                buffEndCD: self.getBuffReCd(),
                buffOpenNeedNum: cfg[1],
                dayBuffOpenNum: cfg[3] //每日可开启BUFF次数
            };
            return data;
        };
        //个人和霸主是否在同一个行会
        p.isInSameGuild = function () {
            var self = this;
            if (!self.isKingInGuild())
                return false;
            return self.get(gc.dsConsts.King.kingGuildId) == self.get(gc.dsConsts.King.myGuildId);
        };
        //获取福利数据
        p.getWelfareItemList = function () {
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.king);
            var str = cfg[2];
            var itemStrs = str.split(";");
            var items = [];
            for (var i = 0; i < itemStrs.length; ++i) {
                var is = itemStrs[i].split(',');
                items.push({ itemId: is[0], count: is[1] });
            }
            return items;
        };
        //膜拜可以莫得的经验
        p.getWorshipItemList = function () {
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.king);
            var str = cfg[0];
            var itemStrs = str.split(";");
            var items = [];
            for (var i = 0; i < itemStrs.length; ++i) {
                var is = itemStrs[i].split(',');
                items.push({ itemId: is[0], count: is[1] });
            }
            return items;
        };
        p.getBuffData = function () {
            var self = this;
            var buffId = self.getKingBuffId();
            var t_buff = mo.getJSONWithFileNameAndID(gc.cfg_t_otherBuff, buffId);
            if (!t_buff)
                return null;
            var data = {
                name: t_buff[gc.t_otherBuff_name],
                addHurt: t_buff[gc.t_otherBuff_addHurt],
                conTime: t_buff[gc.t_otherBuff_conTime] / 60,
                icon: t_buff[gc.t_otherBuff_icon],
                des: t_buff[gc.t_otherBuff_des]
            };
            return data;
        };
        p.getKingBuffId = function () {
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.king);
            return cfg[4];
        };
        p.getCloakProAdd = function () {
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.challengeCupCfg);
            return cfg[11];
        };
        KingCtrl.ON_KING_BUFF_CHANGE = "ON_KING_BUFF_CHANGE";
        return KingCtrl;
    })(mo.DataController);
    gd.KingCtrl = KingCtrl;
    egret.registerClass(KingCtrl,"gd.KingCtrl");
})(gd || (gd = {}));

/**
 * Created by Administrator on 2016/1/20.
 */
var gd;
(function (gd) {
    var ReBirthCtrl = (function (_super) {
        __extends(ReBirthCtrl, _super);
        function ReBirthCtrl() {
            _super.apply(this, arguments);
            //转生
            this.rebirth = function (cb, target) {
                var self = this;
                mo.requestWaiting4Server(gc.iface.a_rebirth_rebirth, {}, function (data) {
                    var userData = data[gc.dsConsts.Rebirth.userData] || {};
                    var heroList = data[gc.dsConsts.Rebirth.heroList] || {};
                    gd.userCtrl.updateEntity(userData);
                    for (var i = 0; i < heroList.length; i++) {
                        var heroData = heroList[i];
                        var tempId = heroData[gc.dsConsts.HeroEntity.tempId];
                        var hec = gd.heroCtrl.getHeroByJob(tempId);
                        gd.heroCtrl.getHeroByJob(tempId).updateEntity(heroData);
                    }
                    cb.call(target, data);
                });
            };
            //购买转生丹  哈哈哈
            this.buyRebirth = function (index, num, cb, target) {
                var self = this;
                var argKeys = gc.iface.a_rebirth_buyRebirth_args;
                var args = {};
                args[argKeys.index] = index;
                args[argKeys.num] = num;
                mo.requestWaiting4Server(gc.iface.a_rebirth_buyRebirth, args, function (data) {
                    var userData = data[gc.dsConsts.ExUserData.userData] || {};
                    var bagItems = data[gc.dsConsts.ExUserData.bagItems] || {};
                    var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                    var bag = gd.userUtils.getNewBag({}, bagItems);
                    userData[gc.dsConsts.UserEntity.bag] = bag;
                    var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                    userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                    gd.userCtrl.updateEntity(userData);
                    cb.call(target, data);
                });
            };
        }
        var d = __define,c=ReBirthCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
        };
        //获得转生等级
        p.getRebirthLvl = function () {
            return gd.userCtrl.get(gc.dsConsts.UserEntity.rebirthLvl) || 0;
        };
        //获得转生经验
        p.getRebirthExp = function () {
            return Math.floor(gd.userCtrl.get(gc.dsConsts.UserEntity.rebirthExp));
        };
        //获得相应转生丹的今日购买次数 buyRebirthType 0 初级丹 1 中级丹 2 高级丹
        p.getBuyRebirthCount = function (index) {
            switch (index) {
                case 0:
                    return gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.buyPrimaryRebirth);
                    break;
                case 1:
                    return gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.buyMidRebirth);
                    break;
                case 2:
                    return gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.buyAdvancedRebirth);
                    break;
            }
            return -1;
        };
        p.getRebirthCfg = function (id) {
            var t_rebirth = mo.getJSONWithFileName(gc.cfg_t_rebirth);
            var rebirthTemp = t_rebirth[id];
            if (!rebirthTemp) {
                return null;
            }
            var data = {
                rebirthLvl: rebirthTemp[gc.t_rebirth_rebirthLvl],
                lvl: rebirthTemp[gc.t_rebirth_lvl],
                limitLvl: rebirthTemp[gc.t_rebirth_limitLvl],
                exp: rebirthTemp[gc.t_rebirth_exp],
                maxHpTemp: rebirthTemp[gc.t_rebirth_maxHpTemp],
                attackTemp: rebirthTemp[gc.t_rebirth_attackTemp],
                defenceTemp: rebirthTemp[gc.t_rebirth_defenceTemp],
                magicDefenceTemp: rebirthTemp[gc.t_rebirth_magicDefenceTemp],
                hitTemp: rebirthTemp[gc.t_rebirth_hitTemp],
                dodgeTemp: rebirthTemp[gc.t_rebirth_dodgeTemp],
                criticalTemp: rebirthTemp[gc.t_rebirth_criticalTemp],
                disCriticalTemp: rebirthTemp[gc.t_rebirth_disCriticalTemp]
            };
            return data;
        };
        p.getItems = function () {
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.rebirth);
            var itemIds = cfg[0].split(",");
            return itemIds;
        };
        p.getItemBagDataCtrl = function (itemId) {
            var items = gd.userCtrl.getBag();
            // 进行物品堆叠
            var results = gd.BagDataCtrl.pileItems(items);
            for (var key in results) {
                var locItem = results[key];
                if (locItem.tempId == itemId) {
                    return locItem;
                }
            }
            return null;
        };
        p.getItemShopLeftNum = function (index) {
            var self = this;
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.rebirth);
            var totalNums = cfg[2].split(",");
            var leftNum = totalNums[index] - self.getBuyRebirthCount(index);
            leftNum = leftNum >= 0 ? leftNum : 0;
            return leftNum;
        };
        p.getItemShopData = function (index) {
            var self = this;
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.rebirth);
            var itemIds = cfg[0].split(",");
            var prices = cfg[1].split(",");
            var shopItem = [];
            shopItem[0] = itemIds[index]; //itemId
            shopItem[1] = 0; //itemNum
            shopItem[2] = 2; //moneyType
            shopItem[3] = prices[index]; //moneyNum
            shopItem[4] = self.getItemShopLeftNum(index); //leftNum
            return shopItem;
        };
        return ReBirthCtrl;
    })(mo.DataController);
    gd.ReBirthCtrl = ReBirthCtrl;
    egret.registerClass(ReBirthCtrl,"gd.ReBirthCtrl");
    gd.reBirthCtrl = ReBirthCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2016/1/8.
 */
var gd;
(function (gd) {
    var ChallengeCupCtrl = (function (_super) {
        __extends(ChallengeCupCtrl, _super);
        function ChallengeCupCtrl() {
            _super.apply(this, arguments);
            this.isOpen = false;
        }
        var d = __define,c=ChallengeCupCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this.DATA_KEY = gc.dsConsts.ChallengeCupData;
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
            self._initTrigger();
        };
        p._initTrigger = function () {
            var self = this;
            var KEY = self.DATA_KEY;
            var info = self._data;
            //比服务器晚一秒结算
            var actLeftTime = info[KEY.activityLeftTime] + 1;
            var kingLeftTime = info[KEY.leftTime] + 1;
            self.removeTrigger();
            if (actLeftTime > 1) {
                var nextCdTime = Date.newDate(Date.newDate().getTime() + actLeftTime * 1000);
                var timeTrigger = self.actTrigger = new tm.Trigger(nextCdTime);
                timeTrigger.on(tm.Trigger.ON_SECOND, function () {
                    info[KEY.activityLeftTime]--;
                }, self);
                timeTrigger.on(tm.Trigger.ON_END, self._onActEnd, self);
                tm.timer.add(timeTrigger);
            }
            if (kingLeftTime > 1) {
                var nextCdTime = Date.newDate(Date.newDate().getTime() + kingLeftTime * 1000);
                var timeTrigger = self.kingTrigger = new tm.Trigger(nextCdTime);
                timeTrigger.on(tm.Trigger.ON_SECOND, function () {
                    info[KEY.leftTime]--;
                }, self);
                timeTrigger.on(tm.Trigger.ON_END, self._onActEnd, self);
                tm.timer.add(timeTrigger);
            }
        };
        p._onActEnd = function () {
            var self = this;
            //活动结束
            self.removeTrigger();
            gd.fightCtrl.forceNormalCopy();
            self.getInfo(function (data) {
                self.pushNotify(self.__class.ON_ACT_END, data);
            }, self);
        };
        //删除计时器
        p.removeTrigger = function () {
            var self = this;
            if (self.actTrigger) {
                tm.timer.remove(self.actTrigger);
                self.actTrigger = null;
            }
            if (self.kingTrigger) {
                tm.timer.remove(self.kingTrigger);
                self.kingTrigger = null;
            }
        };
        //获取擂台赛数据
        p.getInfo = function (cb, target) {
            var self = this;
            self._initGuild(function () {
                mo.requestWaiting4Server(gc.iface.a_challengeCup_getInfo, {}, function (data) {
                    self.initData(data);
                    cb.call(target, data);
                });
            }, self);
        };
        p._initGuild = function (cb, target) {
            if (gd.guildCtrl.getData()) {
                cb.call(target);
            }
            else {
                gd.guildCtrl.getInfo(cb, target);
            }
        };
        p.getIsOpen = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_challengeCup_getIsOpen, {}, function (data) {
                self.isOpen = data[0];
                self.nextOpenTime = Date.newDate(data[2]);
                cb.call(target);
            });
        };
        //发起战斗，挑战擂主
        p.startFight = function (cb, target) {
            var self = this;
            if (gd.fightCtrl.isSpFighting)
                return mo.showMsg("还在挑战中，请稍后");
            if (self.getOpenLvl() > gd.userCtrl.getLvl()) {
                return mo.showMsg(gc.id_c_msgCode.noRoleLvl, self.getOpenLvl());
            }
            var KEY = self.DATA_KEY;
            var info = self._data;
            var championUserId = info[KEY.userId];
            var argsObj = gc.iface.a_challengeCup_startFight_args, args = {};
            args[argsObj.championUserId] = championUserId;
            mo.requestWaiting4Server(gc.iface.a_challengeCup_startFight, args, function (data) {
                var errCode = data[gc.dsConsts.ExChallengeCupFight.errCode];
                if (errCode) {
                    cb.call(target, errCode);
                    return;
                }
                var userData = data[gc.dsConsts.ExChallengeCupFight.userData];
                if (userData)
                    gd.userCtrl.updateEntity(userData);
                var heroList = data[gc.dsConsts.ExChallengeCupFight.heroList];
                var otherDataList = data[gc.dsConsts.ExChallengeCupFight.otherDataList];
                var fightData = data[gc.dsConsts.ExChallengeCupFight.fightData];
                var heroCtrlList = [];
                for (var i = 0; i < heroList.length; i++) {
                    var locHero = heroList[i];
                    var locHeroEntityCtrl = gd.HeroEntityCtrl.createNewEnemy(locHero, fightData, otherDataList[i]);
                    heroCtrlList.push(locHeroEntityCtrl);
                }
                heroCtrlList.sort(gd.heroCtrl._sortHeroList);
                gd.fightCtrl.isSpFighting = true;
                var myList = gd.heroCtrl.getFightList();
                gd.fightCtrl.startPvpFight(myList, heroCtrlList, gc.c_prop.fightTypeKey.challengeCupPk, self._data[self.DATA_KEY.nickName]);
                cb.call(target);
            });
        };
        //战斗结束
        p.endFight = function (isWin, cb, target) {
            var argsObj = gc.iface.a_challengeCup_endFight_args, args = {};
            args[argsObj.isWin] = isWin;
            var self = this;
            mo.request4Server(gc.iface.a_challengeCup_endFight, args, function (fightResult) {
                cb.call(target, fightResult);
            });
        };
        /**
         * 踩顶操作
         * @param op 0:踩 1：顶
         * @param cb
         * @param target
         */
        p.op = function (op, cb, target) {
            var self = this;
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.challengeCupCfg);
            //判断VIP
            var vip = gd.userCtrl.getVip();
            var lvl = gd.userCtrl.getLvl();
            var needLvl = cfg[17];
            if (vip <= 0) {
                //等级和行会
                if (lvl < needLvl || !gd.guildCtrl.getData()) {
                    return mo.showMsg(gc.id_c_msgCode.noRightarena);
                }
            }
            var argsObj = gc.iface.a_challengeCup_op_args, args = {};
            args[argsObj.op] = op;
            mo.request4Server(gc.iface.a_challengeCup_op, args, function (data) {
                self.updateEntity(data);
                //得到物品
                var bagItems = {};
                var getItemId = cfg[16];
                bagItems[getItemId] = 1;
                var bag = gd.userUtils.getNewBag({}, bagItems);
                var updateUser = {};
                updateUser[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(updateUser);
                cb.call(target, data);
            });
        };
        //获取总属性加成
        p.getPropTotal = function () {
            var ret = this.getPropAdd() + this.getPropDel();
            return ret;
        };
        //获取增加属性百分比
        p.getPropAdd = function () {
            /*
             参数13：每增加一点，对应增加属性（万分比）
             参数14：增加属性最高上限
            */
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.challengeCupCfg);
            var perProp = cfg[12];
            var maxProp = cfg[13];
            var upNum = this.get(gc.dsConsts.ChallengeCupData.upCount);
            var ret = perProp * upNum;
            if (ret > maxProp)
                ret = maxProp;
            return ret;
        };
        //获取减少属性百分比
        p.getPropDel = function () {
            /*
             参数15：每减少一点，对应减少属性（万分比）
             参数16：减少属性最高上限
             */
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.challengeCupCfg);
            var perProp = cfg[14];
            var minProp = cfg[15];
            var downCount = this.get(gc.dsConsts.ChallengeCupData.downCount);
            var ret = perProp * downCount;
            if (ret < minProp)
                ret = minProp;
            return ret;
        };
        //清楚cd
        p.clearCd = function (cb, target) {
            var self = this;
            mo.request4Server(gc.iface.a_challengeCup_clearCd, {}, function (data) {
                gd.userCtrl.updateEntity(data);
                cb.call(target, data);
            });
        };
        //登台
        p.toBeChampoin = function (cb, target) {
            var self = this;
            if (self.getOpenLvl() > gd.userCtrl.getLvl()) {
                return mo.showMsg(gc.id_c_msgCode.noRoleLvl, self.getOpenLvl());
            }
            mo.request4Server(gc.iface.a_challengeCup_toBeChampion, {}, function (data) {
                if (data[self.DATA_KEY.userId] != gd.userCtrl.getId()) {
                    mo.showMsg(gc.id_c_msgCode.someoneHoldArena);
                }
                self.initData(data);
                cb.call(target, data);
            });
        };
        //获得参与奖
        p.getRward = function () {
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.challengeCupCfg);
            return cfg[4].split(',');
        };
        //每次挑战需要消耗元宝
        p.getChallegeCost = function () {
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.challengeCupCfg);
            return cfg[9];
        };
        //披风物品id
        p.getFirstReward = function () {
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.challengeCupCfg);
            return cfg[5];
        };
        //获取达标防守时间,单位秒
        p.getDefTime = function () {
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.challengeCupCfg);
            return cfg[1];
        };
        //获取守擂排行
        p.getRank = function (cb, target) {
            var self = this;
            mo.request4Server(gc.iface.a_challengeCup_getDurationTimeRankList, {}, function (data) {
                //最后一个元素表示自己上榜信息
                self._myRank = data.pop();
                cb.call(target, data);
            });
        };
        p.getMyRank = function () {
            var self = this;
            return self._myRank;
        };
        //获取排名奖励和段位奖励
        //return [[金币,数量],[道具id,数量]
        p.getRankReward = function (rank) {
            var c_challengeCupRankReward = mo.getJSONWithFileName(gc.cfg_c_challengeCupRankReward);
            var curData = null;
            for (var i = 1; i < 50; i++) {
                var locData = c_challengeCupRankReward[i];
                if (!locData)
                    break;
                if (rank >= locData[gc.c_challengeCupRankReward_rangeStart] && rank <= locData[gc.c_challengeCupRankReward_rangeEnd]) {
                    curData = locData;
                    break;
                }
            }
            if (curData) {
                var gold = [gc.c_prop.spItemIdKey.gold, curData[gc.c_challengeCupRankReward_gold]];
                var reward = curData[gc.c_challengeCupRankReward_reward];
                var ary = [gold];
                ary = ary.concat(reward);
            }
            return ary;
        };
        p.getOpenLvl = function () {
            var c_open = mo.getJSONWithFileName(gc.cfg_c_open);
            var openInfo = c_open[gc.id_c_open.challengeCup];
            return openInfo[gc.c_open_lvlRequired];
        };
        ChallengeCupCtrl.ON_ACT_END = "on_act_end";
        return ChallengeCupCtrl;
    })(mo.DataController);
    gd.ChallengeCupCtrl = ChallengeCupCtrl;
    egret.registerClass(ChallengeCupCtrl,"gd.ChallengeCupCtrl");
    gd.challengeCupCtrl = ChallengeCupCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Administrator on 2016/1/20.
 */
var gd;
(function (gd) {
    var ReBirthCtrl = (function (_super) {
        __extends(ReBirthCtrl, _super);
        function ReBirthCtrl() {
            _super.apply(this, arguments);
            //转生
            this.rebirth = function (cb, target) {
                var self = this;
                mo.requestWaiting4Server(gc.iface.a_rebirth_rebirth, {}, function (data) {
                    var userData = data[gc.dsConsts.Rebirth.userData] || {};
                    var heroList = data[gc.dsConsts.Rebirth.heroList] || {};
                    gd.userCtrl.updateEntity(userData);
                    for (var i = 0; i < heroList.length; i++) {
                        var heroData = heroList[i];
                        var tempId = heroData[gc.dsConsts.HeroEntity.tempId];
                        var hec = gd.heroCtrl.getHeroByJob(tempId);
                        gd.heroCtrl.getHeroByJob(tempId).updateEntity(heroData);
                    }
                    cb.call(target, data);
                });
            };
            //购买转生丹  哈哈哈
            this.buyRebirth = function (index, num, cb, target) {
                var self = this;
                var argKeys = gc.iface.a_rebirth_buyRebirth_args;
                var args = {};
                args[argKeys.index] = index;
                args[argKeys.num] = num;
                mo.requestWaiting4Server(gc.iface.a_rebirth_buyRebirth, args, function (data) {
                    var userData = data[gc.dsConsts.ExUserData.userData] || {};
                    var bagItems = data[gc.dsConsts.ExUserData.bagItems] || {};
                    var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                    var bag = gd.userUtils.getNewBag({}, bagItems);
                    userData[gc.dsConsts.UserEntity.bag] = bag;
                    var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                    userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                    gd.userCtrl.updateEntity(userData);
                    cb.call(target, data);
                });
            };
        }
        var d = __define,c=ReBirthCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
        };
        //获得转生等级
        p.getRebirthLvl = function () {
            return gd.userCtrl.get(gc.dsConsts.UserEntity.rebirthLvl) || 0;
        };
        //获得转生经验
        p.getRebirthExp = function () {
            return Math.floor(gd.userCtrl.get(gc.dsConsts.UserEntity.rebirthExp));
        };
        //获得相应转生丹的今日购买次数 buyRebirthType 0 初级丹 1 中级丹 2 高级丹
        p.getBuyRebirthCount = function (index) {
            switch (index) {
                case 0:
                    return gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.buyPrimaryRebirth);
                    break;
                case 1:
                    return gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.buyMidRebirth);
                    break;
                case 2:
                    return gd.userCtrl.getTodayCount(gc.c_prop.userRefreshCountKey.buyAdvancedRebirth);
                    break;
            }
            return -1;
        };
        p.getRebirthCfg = function (id) {
            var t_rebirth = mo.getJSONWithFileName(gc.cfg_t_rebirth);
            var rebirthTemp = t_rebirth[id];
            if (!rebirthTemp) {
                return null;
            }
            var data = {
                rebirthLvl: rebirthTemp[gc.t_rebirth_rebirthLvl],
                lvl: rebirthTemp[gc.t_rebirth_lvl],
                limitLvl: rebirthTemp[gc.t_rebirth_limitLvl],
                exp: rebirthTemp[gc.t_rebirth_exp],
                maxHpTemp: rebirthTemp[gc.t_rebirth_maxHpTemp],
                attackTemp: rebirthTemp[gc.t_rebirth_attackTemp],
                defenceTemp: rebirthTemp[gc.t_rebirth_defenceTemp],
                magicDefenceTemp: rebirthTemp[gc.t_rebirth_magicDefenceTemp],
                hitTemp: rebirthTemp[gc.t_rebirth_hitTemp],
                dodgeTemp: rebirthTemp[gc.t_rebirth_dodgeTemp],
                criticalTemp: rebirthTemp[gc.t_rebirth_criticalTemp],
                disCriticalTemp: rebirthTemp[gc.t_rebirth_disCriticalTemp]
            };
            return data;
        };
        p.getItems = function () {
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.rebirth);
            var itemIds = cfg[0].split(",");
            return itemIds;
        };
        p.getItemBagDataCtrl = function (itemId) {
            var items = gd.userCtrl.getBag();
            // 进行物品堆叠
            var results = gd.BagDataCtrl.pileItems(items);
            for (var key in results) {
                var locItem = results[key];
                if (locItem.tempId == itemId) {
                    return locItem;
                }
            }
            return null;
        };
        p.getItemShopLeftNum = function (index) {
            var self = this;
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.rebirth);
            var totalNums = cfg[2].split(",");
            var leftNum = totalNums[index] - self.getBuyRebirthCount(index);
            leftNum = leftNum >= 0 ? leftNum : 0;
            return leftNum;
        };
        p.getItemShopData = function (index) {
            var self = this;
            var cfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.rebirth);
            var itemIds = cfg[0].split(",");
            var prices = cfg[1].split(",");
            var shopItem = [];
            shopItem[0] = itemIds[index]; //itemId
            shopItem[1] = 0; //itemNum
            shopItem[2] = 2; //moneyType
            shopItem[3] = prices[index]; //moneyNum
            shopItem[4] = self.getItemShopLeftNum(index); //leftNum
            return shopItem;
        };
        return ReBirthCtrl;
    })(mo.DataController);
    gd.ReBirthCtrl = ReBirthCtrl;
    egret.registerClass(ReBirthCtrl,"gd.ReBirthCtrl");
    gd.reBirthCtrl = ReBirthCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Sara on 2015/9/18.
 */
var gd;
(function (gd) {
    var CustomCtrl = (function (_super) {
        __extends(CustomCtrl, _super);
        function CustomCtrl() {
            _super.apply(this, arguments);
            //定制武器
            this.custing = false;
        }
        var d = __define,c=CustomCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
        };
        /**
         * 获取订制券
         * @param color 制定颜色 c_prop.equipColorKey
         * @returns {Array}
         */
        p.getCustomTicket = function (color) {
            var self = this;
            var ticket = [];
            var customPara = mo.getJSONWithFileName(gc.cfg_c_customParameter);
            var num = 0;
            for (var itemId in customPara) {
                num = gd.userCtrl.getBag()[itemId];
                if (num) {
                    if (color != null && customPara[itemId][gc.c_customParameter_color] != color) {
                        continue;
                    }
                    for (var i = 0, li = num; i < num; i++) {
                        ticket.push(itemId);
                    }
                }
            }
            return ticket;
        };
        p.getCustomEquips = function () {
            var self = this;
            var equipBag = gd.userCtrl.getEquipBag();
            var equipIds = [];
            for (var equipId in equipBag) {
                if (gd.equipCtrl.isCustomEquip(equipId)) {
                    equipIds.push(equipId);
                }
            }
            return equipIds;
        };
        //是否为可以订制的订制券
        p.canCustomTicket = function (ticktId) {
            var self = this;
            var customPara = mo.getJSONWithFileNameAndID(gc.cfg_c_customParameter, ticktId);
            if (customPara[gc.c_customParameter_gainType] > 1)
                return true; //非vip产出的
            return gd.userCtrl.getVip() >= customPara[gc.c_customParameter_vip];
        };
        //红点
        p.isCustomRed = function () {
            var self = this;
            var tickets = self.getCustomTicket();
            if (tickets.length > 0) {
                for (var i = 0, li = tickets.length; i < li; i++) {
                    if (self.canCustomTicket(tickets[i]))
                        return true;
                }
            }
            var equips = self.getCustomEquips();
            for (var i = 0, li = equips.length; i < li; i++) {
                var opt = self.getInheritedEquipOpt(equips[i]);
                if (opt.nextEquipNeedLvlEnough && opt.isItemEnough) {
                    return true;
                }
            }
            return false;
        };
        p.getCustomListInfo = function () {
            var self = this;
            var info = [];
            var tickets = self.getCustomTicket();
            tickets.sort(function (t1, t2) {
                var c1 = self.canCustomTicket(t1) ? 0 : -1;
                var c2 = self.canCustomTicket(t2) ? 0 : -1;
                return c1 > c2 ? -1 : 1;
            });
            for (var i = 0, li = tickets.length; i < li; i++) {
                info.push({ itemId: tickets[i] });
            }
            var equipIds = self.getCustomEquips();
            equipIds.sort(function (a, b) {
                var aw = self.getInheritedEquipOpt(a).nextEquipNeedLvlEnough ? 1 : -1;
                var bw = self.getInheritedEquipOpt(b).nextEquipNeedLvlEnough ? 1 : -1;
                if (aw == bw) {
                    if (gd.equipCtrl.getEquipItemLvl(a) >= gd.equipCtrl.getEquipItemLvl(b)) {
                        aw -= 1;
                    }
                    else {
                        bw -= 1;
                    }
                }
                return aw > bw ? -1 : 1;
            });
            for (var i = 0, li = equipIds.length; i < li; i++) {
                info.push({ equipId: equipIds[i] });
            }
            return info;
        };
        p.getCustomLvlLimt = function (ticketId) {
            var customPara = mo.getJSONWithFileNameAndID(gc.cfg_c_customParameter, ticketId);
            return customPara[gc.c_customParameter_equip_lvl_range];
        };
        p.getTicketInfo = function (ticketId, lvl, equipType) {
            var self = this;
            var starItemIds = {};
            starItemIds[gc.c_prop.heroJobKey.zs] = self.getCustomizationId(ticketId, gc.c_prop.heroJobKey.zs, lvl, equipType);
            starItemIds[gc.c_prop.heroJobKey.fs] = self.getCustomizationId(ticketId, gc.c_prop.heroJobKey.fs, lvl, equipType);
            starItemIds[gc.c_prop.heroJobKey.ds] = self.getCustomizationId(ticketId, gc.c_prop.heroJobKey.ds, lvl, equipType);
            return starItemIds;
        };
        //定制武器附加属性（万分比）
        p.getExtrPropAddRatio = function () {
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.customizationCfg);
            return c_game[1];
        };
        //橙色定制武器可选择属性数量
        p.getMaxCustomPropNum = function () {
            var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.customizationCfg);
            return c_game[12];
        };
        //获取定制id             certificate:定制凭证,job:定制职业,lvl:定制等级
        p.getCustomizationId = function (certificate, job, lvl, equipType) {
            //var equipType = "00";
            var jobStr = job.toString();
            var cfg_c_customParameter = mo.getJSONWithFileName(gc.cfg_c_customParameter);
            var color = parseInt(cfg_c_customParameter[certificate][gc.c_customParameter_color]);
            //var part = parseInt(cfg_c_customParameter[certificate][gc.c_customParameter_part]);
            //if (part == 0) {
            //    equipType = gc.c_prop.equipTypeKey.weapon.toString();
            //} else if (part == 1) {
            //    equipType = gc.c_prop.equipTypeKey.clothes.toString();
            //} else if (part == 10) {
            //    equipType = gc.c_prop.equipTypeKey.helmet.toString();
            //} else if (part == 3) {
            //    equipType = gc.c_prop.equipTypeKey.ring.toString();
            //} else if (part == 2) {
            //    equipType = gc.c_prop.equipTypeKey.bracelet.toString();
            //} else if (part == 11) {
            //    equipType = gc.c_prop.equipTypeKey.necklace.toString();
            //}
            if (color == 6)
                jobStr = (parseInt(job) + 3).toString();
            var customizationId = "9" + jobStr + equipType.toString() + (Math.ceil(lvl / 10) * 10).toString();
            return parseInt(customizationId);
        };
        p.customization = function (certificate, job, name, lvl, abilityIndex, equipType, cb, target) {
            var self = this;
            if (self.custing == true)
                return;
            //限制长度
            var bag = gd.userCtrl.getBag();
            var cfg_c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var cfg_t_itemEquip = mo.getJSONWithFileName(gc.cfg_t_itemEquip);
            //var sensitiveArr = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.fuckWord)[0].split(",");
            var sensitiveArr = cfg_c_game[gc.id_c_game.fuckWord][0].split(",");
            if (name.indexOf(" ") >= 0)
                return mo.showMsg("名称不能包含空格");
            if (name == null || name == "") {
                return mo.showMsg(gc.id_c_msgCode.noItemName);
            }
            else if (mo.STR.getStringLength(name) > 12) {
                return mo.showMsg(gc.id_c_msgCode.nameToolong);
            }
            else if (mo.STR.checkSensitiveWord(name, sensitiveArr)) {
                return mo.showMsg(gc.id_c_msgCode.fuckword);
            }
            if (cfg_c_game[gc.id_c_game.customizationCfg][3].indexOf(certificate.toString()) == -1)
                return mo.showMsg("定制凭证错误");
            var customizationId = self.getCustomizationId(certificate, job, lvl, equipType); //定制武器id
            if (!cfg_t_itemEquip[customizationId])
                return mo.showMsg("没有该定制装备");
            if ((abilityIndex.length - 1) != self.getMaxCustomPropNum())
                return mo.showMsg(gc.id_c_msgCode.choseProperty, self.getMaxCustomPropNum());
            var itemEquip = cfg_t_itemEquip[customizationId];
            var propertys = itemEquip[gc.t_itemEquip_propertys];
            for (var i = 0; i < abilityIndex.length; i++) {
                if (!propertys[abilityIndex[i]])
                    return mo.showMsg("属性勾选出错");
            }
            if (!bag[certificate] || bag[certificate] == 0)
                return mo.showMsg("缺少定制凭证");
            //确认
            mo.showMsg(gc.id_c_msgCode.makeItem, function () {
                var needLvl = mo.getJSONWithFileNameAndID(gc.cfg_t_item, customizationId)[gc.t_item_level];
                if (gd.userCtrl.getLvl() < needLvl) {
                    mo.showMsg(gc.id_c_msgCode.makeLvlBigger, function () {
                        self._doCustomization(certificate, job, name, lvl, abilityIndex, equipType, cb, target);
                    });
                }
                else {
                    self._doCustomization(certificate, job, name, lvl, abilityIndex, equipType, cb, target);
                }
            });
        };
        p._doCustomization = function (certificate, job, name, lvl, abilityIndex, equipType, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_equip_customization_args;
            var args = {};
            args[argKeys.certificate] = certificate;
            args[argKeys.job] = job;
            args[argKeys.name] = name;
            args[argKeys.lvl] = lvl;
            args[argKeys.abilityIndex] = abilityIndex;
            args[argKeys.equipType] = equipType;
            self.custing = true;
            mo.requestWaiting4Server(gc.iface.a_equip_customization, args, function (data) {
                self.custing = false;
                var isMail = data[gc.dsConsts.ExUserData.isMail]; //true 需要提示发送邮箱  false  不需要
                if (isMail)
                    mo.showMsg(gc.id_c_msgCode.bagMaxMail);
                var userData = {};
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                cb.call(target, data);
                self.pushNotify(self.__class.ON_CUSTOM);
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.custom);
            });
        };
        //升级定制武器
        p.upCustomization = function (opt, cb, target) {
            var self = this;
            var equipId = opt.equipId;
            var equipBag = gd.userCtrl.getEquipBag();
            if (!equipBag[equipId])
                return mo.showMsg("背包没有该装备");
            if (opt.isMaxLvl)
                return mo.showMsg("定制武器已升到最高级");
            if (!opt.isItemEnough)
                return mo.showMsg("材料不足");
            var argKeys = gc.iface.a_equip_upCustomization_args;
            var args = {};
            args[argKeys.equipId] = equipId;
            mo.requestWaiting4Server(gc.iface.a_equip_upCustomization, args, function (data) {
                var userData = {};
                var equipBagItems = data[gc.dsConsts.ExUserData.equipBagItems] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                gd.userCtrl.updateEntity(userData);
                cb.call(target, data);
                self.pushNotify(self.__class.ON_INHERITED);
                gd.heroCtrl.calPropAndCombat();
                gd.pointCtrl.cal(gc.c_prop.pointEffectKey.custom);
            });
        };
        p.getInheritedEquipOpt = function (equipId) {
            var self = this;
            var opt = {
                equipId: equipId,
                nextEquipInfo: null,
                nextEquipNeedLvl: 0,
                nextEquipNeedLvlEnough: false,
                isMaxLvl: false,
                costItemId: null,
                costCount: null,
                isItemEnough: false
            };
            var trans = gd.equipCtrl.equipTrans(equipId);
            var tempId = trans.tempId;
            //下一个装备的相关信息
            var nextEquipTempId = parseInt(tempId) + 10;
            var idxs = gd.userCtrl.getEquipBag()[equipId][5];
            var t_itemEqup = mo.getJSONWithFileNameAndID(gc.cfg_t_itemEquip, nextEquipTempId);
            if (t_itemEqup) {
                var t_props = t_itemEqup[gc.t_itemEquip_propertys];
                var nextBasePropArr = [];
                for (var i = 0, li = idxs.length; i < li; i++) {
                    nextBasePropArr.push(t_props[idxs[i]]);
                }
                var nextEquipInfo = {
                    tempId: nextEquipTempId,
                    name: trans.name,
                    basePropArr: nextBasePropArr,
                    extraPropArr: trans.extraPropArr,
                    scrore: gd.userUtils.getEquipGrade(nextEquipTempId, trans.extraPropArr, idxs)
                };
                opt.nextEquipInfo = nextEquipInfo;
                //消耗
                var c_game = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.customizationCfg);
                var needArr = c_game[4].split(",");
                opt.costItemId = c_game[2];
                var needCount = 999999;
                var t_item = mo.getJSONWithFileNameAndID(gc.cfg_t_item, tempId);
                switch (parseInt(t_item[gc.t_item_itemLvl])) {
                    case 120:
                        needCount = parseInt(needArr[0]);
                        break;
                    case 130:
                        needCount = parseInt(needArr[1]);
                        break;
                    case 140:
                        needCount = parseInt(needArr[2]);
                        break;
                    case 150:
                        needCount = parseInt(needArr[3]);
                        break;
                    case 160:
                        needCount = parseInt(needArr[4]);
                        break;
                    case 170:
                        needCount = parseInt(needArr[5]);
                        break;
                    case 180:
                        needCount = parseInt(needArr[6]);
                        break;
                    case 190:
                        needCount = parseInt(needArr[7]);
                        break;
                }
                opt.costCount = needCount;
                //需求等级
                opt.nextEquipNeedLvl = mo.getJSONWithFileNameAndID(gc.cfg_t_item, nextEquipTempId)[gc.t_item_level];
                opt.nextEquipNeedLvlEnough = gd.userCtrl.getLvl() >= opt.nextEquipNeedLvl;
                opt.isItemEnough = gd.userCtrl.getItemNum(opt.costItemId) >= opt.costCount;
            }
            else {
                opt.isMaxLvl = true;
            }
            return opt;
        };
        CustomCtrl.ON_INHERITED = "ON_INHERITED"; //传承完成
        CustomCtrl.ON_CUSTOM = "ON_CUSTOM"; //订制完成
        return CustomCtrl;
    })(mo.DataController);
    gd.CustomCtrl = CustomCtrl;
    egret.registerClass(CustomCtrl,"gd.CustomCtrl");
    gd.customCtrl = CustomCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Sara on 2016/4/6.
 */
var gd;
(function (gd) {
    var GuildCopyCtrl = (function (_super) {
        __extends(GuildCopyCtrl, _super);
        function GuildCopyCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=GuildCopyCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this._guildCopyArr = [-1];
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
        };
        //更新数据
        p.updateData = function (data) {
            var self = this;
            if (!self._data)
                return;
            self.updateEntity(data);
        };
        //获得所有章节
        p.getGuildSection = function () {
            var self = this;
            var t_guildCopy = mo.getJSONWithFileName(gc.cfg_t_guildCopy);
            var ret = [];
            for (var i = 1, li = Object.keys(t_guildCopy).length; i <= li; ++i) {
                ret.push(t_guildCopy[i]);
            }
            return ret;
        };
        //获取章节信息
        p.getSectionInfo = function (sectionId) {
            var self = this;
            return mo.getJSONWithFileNameAndID(gc.cfg_t_guildCopy, sectionId);
        };
        //获取该章节所有boss
        p.getGuildBossList = function (sectionId) {
            var self = this;
            var sectionInfo = self.getSectionInfo(sectionId);
            var bossIdRange = sectionInfo[gc.t_guildCopy_section];
            var bossList = [];
            for (var bossId = parseInt(bossIdRange[0]), li = parseInt(bossIdRange[1]); bossId <= li; ++bossId) {
                bossList.push(bossId);
            }
            return bossList;
        };
        //获取副本长度
        p.getGuildBossListLength = function (sectionId) {
            var self = this;
            var sectionInfo = self.getSectionInfo(sectionId);
            var bossIdRange = sectionInfo[gc.t_guildCopy_section];
            return parseInt(bossIdRange[1]) - parseInt(bossIdRange[0]) + 1;
        };
        //获取boss进度
        p.getGuildProgress = function (bossId) {
            var self = this;
            var returnProgress = 0;
            var guildCopyData = gd.guildCtrl.get(gc.dsConsts.GuildEntity.guildCopyData);
            if (!guildCopyData[bossId])
                return 0;
            if (guildCopyData[bossId][0])
                returnProgress = guildCopyData[bossId][0];
            return returnProgress;
        };
        //获取当前进度bossid      reutrn {"章节id":当前bossid,"章节id":当前bossid,...}       当前bossid    -1:打完所有
        p.getNewGuildBossId = function () {
            var self = this;
            var obj = {};
            if (!gd.guildCtrl.getData())
                return obj;
            var guildCopyData = gd.guildCtrl.get(gc.dsConsts.GuildEntity.guildCopyData);
            var t_guildCopy = mo.getJSONWithFileName(gc.cfg_t_guildCopy);
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var needProgress = c_game[gc.id_c_game.guildCopyCfg][2];
            for (var key in t_guildCopy) {
                var section = t_guildCopy[key][gc.t_guildCopy_section];
                var start = section[0];
                var end = section[1];
                var isCom = true;
                for (var i = start; i <= end; i++) {
                    if (!guildCopyData[i] || !guildCopyData[i][0] || guildCopyData[i][0] < needProgress) {
                        obj[key] = i;
                        isCom = false;
                        break;
                    }
                }
                if (isCom)
                    obj[key] = -1;
            }
            return obj;
        };
        //获取章节当前bossId
        p.getCurBossId = function (sectionId) {
            var self = this;
            var curBossId = self.getNewGuildBossId()[sectionId];
            if (curBossId < 0) {
                var sectionInfo = self.getSectionInfo(sectionId);
                curBossId = parseInt(sectionInfo[gc.t_guildCopy_section][1]);
            }
            return curBossId;
        };
        //是否通关某个boss
        p.isBossKilled = function (sectionId, bossId) {
            var self = this;
            var curBossId = self.getNewGuildBossId()[sectionId];
            if (curBossId > 0) {
                return parseInt(curBossId) > parseInt(bossId);
            }
            return true;
        };
        //获取副本CD状态
        p.getGuildCopyCdState = function () {
            var self = this;
            var state = {
                threshold: mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.guildCopyCfg)[3] //阈值,秒
                ,
                needBuy: false
            };
            state.needBuy = self.isNeedClearFightCD();
            return state;
        };
        //是否需要清战斗CD
        p.isNeedClearFightCD = function () {
            var self = this;
            var isCopy = false;
            var progressCtrl = gd.copyCtrl.getCopyProgressCtrl(gc.c_prop.copyTypeKey.guild);
            var refreshTime = progressCtrl.get(gc.dsConsts.CopyProgressEntity.refreshTime);
            if (refreshTime) {
                //判断cd
                var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
                var timeLimit = c_game[gc.id_c_game.guildCopyCfg][3];
                var pCopyId = progressCtrl.get(gc.dsConsts.CopyProgressEntity.pCopyId) || 0; //cd秒数
                var second = (Date.newDate().getTime() - Date.newDate(refreshTime).getTime()) / 1000;
                if (pCopyId >= timeLimit) {
                    if (second < pCopyId)
                        isCopy = true;
                }
            }
            return isCopy;
        };
        //获取副本cd,返回秒
        p.getGuildCopyCd = function () {
            var self = this;
            var progressCtrl = gd.copyCtrl.getCopyProgressCtrl(gc.c_prop.copyTypeKey.guild);
            var pCopyId = progressCtrl.get(gc.dsConsts.CopyProgressEntity.pCopyId) || 0; //cd秒数
            var refreshTime = progressCtrl.get(gc.dsConsts.CopyProgressEntity.refreshTime);
            if (refreshTime) {
                var second = (Date.newDate().getTime() - Date.newDate(refreshTime).getTime()) / 1000;
                pCopyId -= second;
            }
            if (pCopyId < 0)
                pCopyId = 0;
            return pCopyId;
        };
        //获取重置剩余秒数
        p.getResetCd = function () {
            var self = this;
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var resetDay = c_game[gc.id_c_game.guildCopyCfg][1];
            var returnSeconds = 0;
            var resetTime = gd.guildCtrl.get(gc.dsConsts.GuildEntity.resetTime);
            if (!resetTime)
                return returnSeconds;
            var nextResetTime = Date.newDate(resetTime).addDays(resetDay);
            if (Date.newDate() >= nextResetTime)
                return returnSeconds;
            returnSeconds = (nextResetTime.getTime() - Date.newDate().getTime()) / 1000;
            return returnSeconds;
        };
        //获取章节里副本数量
        p.getCompletedNum = function (sectionId) {
            var self = this;
            var curBossId = parseInt(self.getNewGuildBossId()[sectionId]);
            if (curBossId > 0) {
                var sectionInfo = self.getSectionInfo(sectionId);
                return curBossId - parseInt(sectionInfo[gc.t_guildCopy_section][0]);
            }
            return self.getGuildBossListLength(sectionId);
        };
        /**
         * 行会副本开始
         * @param chapterId 章节ID
         * @param bossId
         * @param cb
         * @param target
         * @returns []
         */
        p.guildStart = function (chapterId, bossId, cb, target) {
            var self = this;
            if (gd.fightCtrl.isSpFighting)
                return mo.showMsg("还在挑战中，请稍后");
            if (gd.fightCtrl.isDie)
                return mo.showMsg("复活中，请稍后");
            var cdTime = self.getGuildCopyCd();
            var needBuy = self.getGuildCopyCdState().needBuy;
            if (cdTime && needBuy) {
                var cleanCost = gc.calGuildCopyCd(gd.guildCopyCtrl.getGuildCopyCd());
                mo.showMsg(gc.id_c_msgCode.buyTime, cleanCost, function () {
                    if (gd.userCtrl.getGold() < cleanCost) {
                        gd.userCtrl.noGolds(function () {
                            self.clearGuildCopy(bossId, function () { }, self);
                        }, self);
                    }
                    else {
                        self.clearGuildCopy(bossId, function () { }, self);
                    }
                });
                return;
            }
            var t_guildCopy = mo.getJSONWithFileName(gc.cfg_t_guildCopy);
            if (!t_guildCopy[chapterId])
                return mo.showMsg("数据异常");
            var section = t_guildCopy[chapterId][gc.t_guildCopy_section];
            if (bossId < section[0] || bossId > section[1])
                return mo.showMsg("数据异常");
            var openLvl = t_guildCopy[chapterId][gc.t_guildCopy_openLvl];
            if (!gd.guildCtrl.getData())
                return mo.showMsg("数据异常");
            var lvl = gd.guildCtrl.get(gc.dsConsts.GuildEntity.lvl);
            if (openLvl > lvl)
                return mo.showMsg("行会等级不足");
            this._guildCopyArr[0] = chapterId;
            this._guildCopyArr[1] = bossId;
            var argKeys = gc.iface.a_copy_guildStart_args;
            var args = {};
            args[argKeys.copyId] = chapterId;
            args[argKeys.bossId] = bossId;
            self.curFightGuildBossId = bossId;
            mo.requestWaiting4Server(gc.iface.a_copy_guildStart, args, function (data) {
                gd.fightCtrl.isSpFighting = true;
                var guildBossInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_guildCopyBoss, bossId);
                var copyId = guildBossInfo[gc.t_guildCopyBoss_copyId];
                if (mo.moduleMgr.curModule.name != g_consts.moduleId.fight)
                    mo.moduleMgr.runModule(g_consts.moduleId.fight);
                gd.fightLayer.onEnterCopy({ pveType: gc.c_prop.fightTypeKey.guildCopy, copyID: copyId, bossId: bossId });
                cb.call(target, data);
            });
        };
        //行会副本结束        return[是否胜利,进度（需要除以100）,伤害,获得物品]
        p.guildEnd = function (isWin, cb, target) {
            if (this._guildCopyArr[0] == -1)
                return;
            var self = this;
            var copyId = this._guildCopyArr[0];
            var bossId = this._guildCopyArr[1];
            var argKeys = gc.iface.a_copy_guildEnd_args;
            var args = {};
            args[argKeys.copyId] = copyId;
            args[argKeys.bossId] = bossId;
            args[argKeys.isWin] = isWin;
            self._guildCopyArr[0] = -1;
            mo.requestWaiting4Server(gc.iface.a_copy_guildEnd, args, function (data) {
                var msg = data[gc.dsConsts.ExCopyProgress.msg] || "";
                if (msg.length > 0) {
                    mo.showMsg(msg);
                    return cb.call(target, [0, 0, {}]);
                }
                var userData = data[gc.dsConsts.ExCopyProgress.userData] || {};
                var copyProgressData = data[gc.dsConsts.ExCopyProgress.copyProgress] || {};
                var bagItems = data[gc.dsConsts.ExCopyProgress.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExCopyProgress.equipBagItems] || {};
                var isWin = data[gc.dsConsts.ExCopyProgress.isWin];
                var progress = data[gc.dsConsts.ExCopyProgress.progress] || 0;
                var items = data[gc.dsConsts.ExCopyProgress.items] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                if (userData)
                    gd.userCtrl.updateEntity(userData);
                if (copyProgressData)
                    gd.copyCtrl.updateCopyProgressCtrl(gc.c_prop.copyTypeKey.guild, copyProgressData);
                //公会贡献
                var guildData = data[gc.dsConsts.ExCopyProgress.guildData];
                if (guildData)
                    gd.guildCtrl.updateData(guildData);
                cb.call(target, [isWin, progress, items]);
            });
        };
        //行会副本重置
        p.guildCopyReset = function (cb, target) {
            var self = this;
            mo.showMsg(gc.id_c_msgCode.resetCopy, function () {
                mo.requestWaiting4Server(gc.iface.a_copy_guildCopyReset, {}, function (updateGuildData) {
                    if (updateGuildData) {
                        if (gd.guildCtrl.getData()) {
                            gd.guildCtrl.updateEntity(updateGuildData);
                        }
                        else {
                            gd.guildCtrl.initData(updateGuildData);
                        }
                    }
                    cb.call(target, updateGuildData);
                });
            });
        };
        //公会副本清除CD
        p.clearGuildCopy = function (bossId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_copy_clearGuildCopy_args;
            var args = {};
            args[argKeys.bossId] = bossId;
            mo.requestWaiting4Server(gc.iface.a_copy_clearGuildCopy, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var copyProgressData = data[gc.dsConsts.ExUserData.copyProgressData] || {};
                gd.userCtrl.updateEntity(userData);
                gd.copyCtrl.updateCopyProgressCtrl(gc.c_prop.copyTypeKey.guild, copyProgressData);
                self.pushNotify(self.__class.ON_GUILD_COPY_CD_CLEAR);
                cb.call(target, data);
            });
        };
        //获取副本购买次数
        p.getBuyCopyCount = function () {
            var self = this;
            var type = gc.c_prop.copyTypeKey.guild;
            var copyProgressCtrl = gd.copyCtrl.getCopyProgressCtrl(type);
            var buyCopyCount = 1;
            var resetTime = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.resetTime); //购买时间
            var resetCounts = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.resetCounts); //子副本今日购买次数
            if (!resetTime)
                return buyCopyCount;
            if (!resetTime || !Date.newDate(resetTime).equalsDay(Date.newDate()))
                resetCounts = {};
            if (!resetTime || !Date.newDate(resetTime).equalsDay(Date.newDate()) || !resetCounts.hasOwnProperty(type))
                return buyCopyCount;
            return resetCounts[type] + 1;
        };
        //获取公会副本今日剩余次数
        p.getCopyCount = function (bossId) {
            var self = this;
            var c_vip = mo.getJSONWithFileName(gc.cfg_c_vip);
            var copyProgressCtrl = gd.copyCtrl.getCopyProgressCtrl(gc.c_prop.copyTypeKey.guild);
            var vip = gd.userCtrl.getVip() || 0; //vip等级
            var maxTimes = c_vip[vip][gc.c_vip_guildFbCount];
            var vipExt = maxTimes - c_vip[0][gc.c_vip_guildFbCount];
            if (!copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.refreshTime))
                return maxTimes;
            var refreshTime = Date.newDate(copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.refreshTime)); //最后一次通关子副本时间
            var timesPerDay = copyProgressCtrl.get(gc.dsConsts.CopyProgressEntity.timesPerDay); //子副本剩余挑战次数
            if (!refreshTime || !refreshTime.equalsDay(Date.newDate()) || !timesPerDay.hasOwnProperty(bossId))
                return maxTimes;
            return parseInt(timesPerDay[bossId]) + vipExt;
        };
        p.getMaxCopyCount = function () {
            var self = this;
            return mo.getJSONWithFileNameAndID(gc.cfg_c_vip, gd.userCtrl.getVip())[gc.c_vip_guildFbCount];
        };
        /**
         * 行会副本领取奖励
         * @param type
         * @param typeId
         * @param cb
         * @param target
         * @returns []
         */
        p.guildCopyAward = function (type, typeId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_copy_guildCopyAward_args;
            var args = {};
            args[argKeys.type] = type;
            args[argKeys.typeId] = typeId;
            mo.requestWaiting4Server(gc.iface.a_copy_guildCopyAward, args, function (data) {
                var userData = data[gc.dsConsts.ExCopyProgress.userData] || {};
                var copyProgressData = data[gc.dsConsts.ExCopyProgress.copyProgress] || {};
                var bagItems = data[gc.dsConsts.ExCopyProgress.bagItems] || {};
                var equipBagItems = data[gc.dsConsts.ExCopyProgress.equipBagItems] || {};
                var bag = gd.userUtils.getNewBag({}, bagItems);
                userData[gc.dsConsts.UserEntity.bag] = bag;
                var equipBag = gd.userUtils.getNewEquipBag({}, equipBagItems);
                userData[gc.dsConsts.UserEntity.equipBag] = equipBag;
                if (userData)
                    gd.userCtrl.updateEntity(userData);
                if (copyProgressData)
                    gd.copyCtrl.updateCopyProgressCtrl(gc.c_prop.copyTypeKey.guild, copyProgressData);
                cb.call(target, copyProgressData);
            });
        };
        p._calProgress = function (progress) {
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var needProgress = c_game[gc.id_c_game.guildCopyCfg][2];
            progress = Math.floor(progress / needProgress * 10000) / 100;
            if (progress > 100)
                progress = 100;
            return progress;
        };
        p.getSectionIdByBossId = function (bossId) {
            var self = this;
            var t_guildCopy = mo.getJSONWithFileName(gc.cfg_t_guildCopy);
            for (var id in t_guildCopy) {
                var section = t_guildCopy[id][gc.t_guildCopy_section];
                if (parseInt(bossId) >= parseInt(section[0]) && parseInt(bossId) <= parseInt(section[1])) {
                    return parseInt(id);
                }
            }
            return -1;
        };
        //单个boss最大击杀次数
        p.getMaxKillTimes = function () {
            return mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.guildCopyCfg)[2];
        };
        GuildCopyCtrl.ON_GUILD_COPY_CD_CLEAR = "on_guild_copy_cd_clear";
        return GuildCopyCtrl;
    })(mo.DataController);
    gd.GuildCopyCtrl = GuildCopyCtrl;
    egret.registerClass(GuildCopyCtrl,"gd.GuildCopyCtrl");
    gd.guildCopyCtrl = GuildCopyCtrl.getInstance();
})(gd || (gd = {}));

/**
 * Created by Sara on 2016/5/13.
 */
var gd;
(function (gd) {
    var HeroTalismanCtrl = (function (_super) {
        __extends(HeroTalismanCtrl, _super);
        function HeroTalismanCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=HeroTalismanCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
        };
        p.initData = function (data) {
            if (!data)
                return;
            var self = this;
            self.init(data);
        };
        //更新数据
        p.updateData = function (data) {
            var self = this;
            if (!self._data)
                return;
            self.updateEntity(data);
        };
        p.getGiftById = function (giftId) {
            var self = this;
            var t_talisman = mo.getJSONWithFileNameAndID(gc.cfg_t_talisman, giftId);
            if (!t_talisman)
                return null;
            var job = t_talisman[gc.t_talisman_job];
            var heroEntityCtrl = gd.heroCtrl.hasHeroJobData(job);
            if (!heroEntityCtrl)
                return null;
            var talismanData = heroEntityCtrl.get(gc.dsConsts.HeroEntity.talismanData) || {};
            if (talismanData[giftId])
                return talismanData[giftId];
            return null;
        };
        //获取佩戴法宝id
        p.getTalismanAdorn = function (id) {
            var self = this;
            var heroEntityCtrl = gd.heroCtrl.getHeroEntityCtrl(id);
            if (!heroEntityCtrl)
                return 0;
            var talismanAdorn = heroEntityCtrl.get(gc.dsConsts.HeroEntity.talismanAdorn) || 0;
            return talismanAdorn;
        };
        //该英雄拥有法宝  法宝数据{法宝id:[等级,资质,星级,最高星级,{星级:技能id,星级:技能id,...},临时资质],法宝id:[等级,资质,星级,最高星级,{星级:技能id,星级:技能id,...},临时资质],....}
        p.getHaveTrump = function (id) {
            var self = this;
            var heroEntityCtrl = gd.heroCtrl.getHeroEntityCtrl(id);
            if (!heroEntityCtrl)
                return {};
            var talismanData = heroEntityCtrl.get(gc.dsConsts.HeroEntity.talismanData) || {};
            return talismanData;
        };
        //是否拥有该法宝道具
        p.isHaveTrupId = function (trupId) {
            var self = this;
            var isHavr = false;
            var bag = gd.userCtrl.getBag() || {};
            if (bag[trupId] && bag[trupId] >= 1)
                isHavr = true;
            return isHavr;
        };
        //获取英雄共鸣数据          法宝共鸣{共鸣id:[0,1],共鸣id:[1,0],...}
        p.getTalismanFg = function (id) {
            var self = this;
            var heroEntityCtrl = gd.heroCtrl.getHeroEntityCtrl(id);
            if (!heroEntityCtrl)
                return {};
            var talismanFg = heroEntityCtrl.get(gc.dsConsts.HeroEntity.talismanFg) || {};
            return talismanFg;
        };
        //计算该英雄所有法宝战力       [总战力，总属性，法宝数，技能数，共鸣数]
        p.calTaliCombat = function (id) {
            var self = this;
            var heroEntityCtrl = gd.heroCtrl.getHeroEntityCtrl(id);
            if (!heroEntityCtrl)
                return [0, {}, 0, 0, 0];
            var talismanData = heroEntityCtrl.get(gc.dsConsts.HeroEntity.talismanData) || {};
            var talismanFg = heroEntityCtrl.get(gc.dsConsts.HeroEntity.talismanFg) || {};
            if (Object.keys(talismanData).length <= 0)
                return [0, {}, 0, 0, 0];
            var combatSum = 0;
            var proObj = { 33: 0, 34: 0, 35: 0, 36: 0, 37: 0, 38: 0, 39: 0, 40: 0 }; //总属性
            var skillObj = {};
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var t_talismanRes = mo.getJSONWithFileName(gc.cfg_t_talismanRes);
            var t_talismanSkill = mo.getJSONWithFileName(gc.cfg_t_talismanSkill);
            var combatMult = c_game[gc.id_c_game.combatMult];
            //参数1：血量参数
            //参数2：攻击参数
            //参数3：物防参数
            //参数4：魔防参数
            //参数5：暴击参数
            //参数6：抗暴参数
            //参数7：闪避参数
            //参数8：命中参数
            //参数9：攻击频率
            var maxHp1 = combatMult[0] / 10000;
            var attack1 = combatMult[1] / 10000;
            var defence1 = combatMult[2] / 10000;
            var magicDefence1 = combatMult[3] / 10000;
            var hit1 = combatMult[4] / 10000;
            var dodge1 = combatMult[5] / 10000;
            var critical1 = combatMult[6] / 10000;
            var disCritical1 = combatMult[7] / 10000;
            var attackInterval1 = combatMult[8];
            var talCount = 0;
            var skillCount = 0;
            for (var key in talismanData) {
                talCount += 1;
                var propMult = 0;
                var talisman = talismanData[key]; //法宝id:[等级,资质,星级,最高星级,{星级:技能id,星级:技能id,...},临时资质]
                var skillData = talisman[4]; //法宝id:[等级,资质,星级,最高星级,{星级:技能id,星级:技能id,...},临时资质]
                var t_talismanLvlId = parseInt(key) + parseInt(talisman[0]);
                propMult = parseInt(talisman[1]) / 1000; //资质影响
                proObj[33] += self._getPropByIndex(33, t_talismanLvlId) * (1 + propMult);
                proObj[34] += self._getPropByIndex(34, t_talismanLvlId) * (1 + propMult);
                proObj[35] += self._getPropByIndex(35, t_talismanLvlId) * (1 + propMult);
                proObj[36] += self._getPropByIndex(36, t_talismanLvlId) * (1 + propMult);
                proObj[37] += self._getPropByIndex(37, t_talismanLvlId) * (1 + propMult);
                proObj[38] += self._getPropByIndex(38, t_talismanLvlId) * (1 + propMult);
                proObj[39] += self._getPropByIndex(39, t_talismanLvlId) * (1 + propMult);
                proObj[40] += self._getPropByIndex(40, t_talismanLvlId) * (1 + propMult);
                //技能
                for (var key1 in skillData) {
                    skillCount += 1;
                    var skillType = t_talismanSkill[skillData[key1]][gc.t_talismanSkill_type];
                    if (skillType != 1)
                        continue;
                    var effect = t_talismanSkill[skillData[key1]][gc.t_talismanSkill_effect];
                    for (var i = 0; i < effect.length; i++) {
                        var value = 0;
                        if (skillObj[effect[i][0]])
                            value = parseInt(skillObj[effect[i][0]]);
                        skillObj[effect[i][0]] = value + parseInt(effect[i][1]);
                    }
                }
            }
            //共鸣
            var resCount = 0;
            for (var key in talismanFg) {
                var talismanRes = t_talismanRes[key];
                if (!talismanRes)
                    continue;
                if (talismanRes[gc.t_talismanRes_type] == 1) {
                    var resArr = talismanFg[key] || [];
                    var resonance = talismanRes[gc.t_talismanRes_resonance];
                    var isRes = true;
                    var resLength = resonance.length;
                    //预防
                    if (resLength <= 0)
                        continue;
                    for (var i = 0; i < resLength; i++) {
                        if (!resArr[i])
                            isRes = false;
                    }
                    if (isRes) {
                        resCount += 1;
                        var extraPro = talismanRes[gc.t_talismanRes_extraPro];
                        for (var j = 0; j < extraPro.length; j++) {
                            var value = 0;
                            if (proObj[extraPro[j][0]])
                                value = parseInt(proObj[extraPro[j][0]]);
                            proObj[extraPro[j][0]] = value + parseInt(extraPro[j][1]);
                        }
                    }
                }
            }
            var maxHp = proObj[33] + (skillObj[33] || 0);
            var attack = proObj[34] + (skillObj[34] || 0);
            var defence = proObj[35] + (skillObj[35] || 0);
            var magicDefence = proObj[36] + (skillObj[36] || 0);
            var critical = proObj[39] + (skillObj[39] || 0);
            var disCritical = proObj[40] + (skillObj[40] || 0);
            var dodge = proObj[38] + (skillObj[38] || 0);
            var hit = proObj[37] + (skillObj[37] || 0);
            var attackInterval = 500;
            maxHp = Math.floor(maxHp);
            attack = Math.floor(attack);
            defence = Math.floor(defence);
            magicDefence = Math.floor(magicDefence);
            critical = Math.floor(critical);
            disCritical = Math.floor(disCritical);
            dodge = Math.floor(dodge);
            hit = Math.floor(hit);
            //基础属性战斗力公式
            //console.log(maxHp,maxHp1,attack,attack1,defence,defence1,magicDefence,magicDefence1,critical,critical1,disCritical,disCritical1,dodge,dodge1,hit,hit1,attackInterval,attackInterval1);
            var combat1 = gc.calBaseCombat(maxHp, maxHp1, attack, attack1, defence, defence1, magicDefence, magicDefence1, critical, critical1, disCritical, disCritical1, dodge, dodge1, hit, hit1, attackInterval, attackInterval1);
            combatSum = parseInt(combat1.toString());
            for (var key in proObj) {
                proObj[key] = Math.floor(proObj[key]);
            }
            return [combatSum, proObj, talCount, skillCount, resCount];
        };
        /**
         * 计算该英雄所有法宝战力
         * @param heroId
         * @param talismanId
         * @returns {number} 总战力
         */
        p.calTaliCombatById = function (heroId, talismanId) {
            var self = this;
            var heroEntityCtrl = gd.heroCtrl.getHeroEntityCtrl(heroId);
            if (!heroEntityCtrl)
                return 0;
            var talismanData = heroEntityCtrl.get(gc.dsConsts.HeroEntity.talismanData) || {};
            var combatSum = 0;
            var proObj = { 33: 0, 34: 0, 35: 0, 36: 0, 37: 0, 38: 0, 39: 0, 40: 0 }; //总属性
            var skillObj = {};
            var c_game = mo.getJSONWithFileName(gc.cfg_c_game);
            var t_talismanRes = mo.getJSONWithFileName(gc.cfg_t_talismanRes);
            var t_talismanSkill = mo.getJSONWithFileName(gc.cfg_t_talismanSkill);
            var combatMult = c_game[gc.id_c_game.combatMult];
            //参数1：血量参数
            //参数2：攻击参数
            //参数3：物防参数
            //参数4：魔防参数
            //参数5：暴击参数
            //参数6：抗暴参数
            //参数7：闪避参数
            //参数8：命中参数
            //参数9：攻击频率
            var maxHp1 = combatMult[0] / 10000;
            var attack1 = combatMult[1] / 10000;
            var defence1 = combatMult[2] / 10000;
            var magicDefence1 = combatMult[3] / 10000;
            var hit1 = combatMult[4] / 10000;
            var dodge1 = combatMult[5] / 10000;
            var critical1 = combatMult[6] / 10000;
            var disCritical1 = combatMult[7] / 10000;
            var attackInterval1 = combatMult[8];
            var talisman = talismanData[talismanId] || [1, 0, 0, 0]; //法宝id:[等级,资质,星级,最高星级,{星级:技能id,星级:技能id,...},临时资质]
            var skillData = talisman[4] || {}; //法宝id:[等级,资质,星级,最高星级,{星级:技能id,星级:技能id,...},临时资质]
            var t_talismanLvlId = parseInt(talismanId) + parseInt(talisman[0]);
            var propMult = parseInt(talisman[1]) / 1000; //资质影响
            proObj[33] += self._getPropByIndex(33, t_talismanLvlId) * (1 + propMult);
            proObj[34] += self._getPropByIndex(34, t_talismanLvlId) * (1 + propMult);
            proObj[35] += self._getPropByIndex(35, t_talismanLvlId) * (1 + propMult);
            proObj[36] += self._getPropByIndex(36, t_talismanLvlId) * (1 + propMult);
            proObj[37] += self._getPropByIndex(37, t_talismanLvlId) * (1 + propMult);
            proObj[38] += self._getPropByIndex(38, t_talismanLvlId) * (1 + propMult);
            proObj[39] += self._getPropByIndex(39, t_talismanLvlId) * (1 + propMult);
            proObj[40] += self._getPropByIndex(40, t_talismanLvlId) * (1 + propMult);
            //技能
            for (var key1 in skillData) {
                var skillType = t_talismanSkill[skillData[key1]][gc.t_talismanSkill_type];
                if (skillType != 1)
                    continue;
                var effect = t_talismanSkill[skillData[key1]][gc.t_talismanSkill_effect];
                for (var i = 0; i < effect.length; i++) {
                    var value = 0;
                    if (skillObj[effect[i][0]])
                        value = parseInt(skillObj[effect[i][0]]);
                    skillObj[effect[i][0]] = value + parseInt(effect[i][1]);
                }
            }
            var maxHp = proObj[33] + (skillObj[33] || 0);
            var attack = proObj[34] + (skillObj[34] || 0);
            var defence = proObj[35] + (skillObj[35] || 0);
            var magicDefence = proObj[36] + (skillObj[36] || 0);
            var critical = proObj[39] + (skillObj[39] || 0);
            var disCritical = proObj[40] + (skillObj[40] || 0);
            var dodge = proObj[38] + (skillObj[38] || 0);
            var hit = proObj[37] + (skillObj[37] || 0);
            var attackInterval = 500;
            maxHp = Math.floor(maxHp);
            attack = Math.floor(attack);
            defence = Math.floor(defence);
            magicDefence = Math.floor(magicDefence);
            critical = Math.floor(critical);
            disCritical = Math.floor(disCritical);
            dodge = Math.floor(dodge);
            hit = Math.floor(hit);
            //基础属性战斗力公式
            //console.log(maxHp,maxHp1,attack,attack1,defence,defence1,magicDefence,magicDefence1,critical,critical1,disCritical,disCritical1,dodge,dodge1,hit,hit1,attackInterval,attackInterval1);
            var combat1 = gc.calBaseCombat(maxHp, maxHp1, attack, attack1, defence, defence1, magicDefence, magicDefence1, critical, critical1, disCritical, disCritical1, dodge, dodge1, hit, hit1, attackInterval, attackInterval1);
            combatSum = parseInt(combat1.toString());
            return combatSum;
        };
        p.useTrumpItem = function (itemId, cb, target) {
            var argKeys = gc.iface.a_talisman_useTrumpItem_args;
            var args = {};
            args[argKeys.itemId] = itemId;
            mo.requestWaiting4Server(gc.iface.a_talisman_useTrumpItem, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var heroDataList = data[gc.dsConsts.ExUserData.heroData] || [];
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                for (var i = 0; i < heroDataList.length; i++) {
                    var heroData = heroDataList[i][1];
                    if (heroData)
                        gd.heroCtrl.updateHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id], heroData);
                }
                gd.equipCtrl.pushNotify(gd.equipCtrl.__class.ON_SMELT);
                cb.call(target, delBagItems);
            });
        };
        /**
         * 佩戴法宝
         * @param tempId
         * @param trumpId
         * @param cb
         * @param target
         */
        p.wearTrump = function (tempId, trumpId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_talisman_wearTrump_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.trumpId] = trumpId;
            mo.requestWaiting4Server(gc.iface.a_talisman_wearTrump, args, function (data) {
                var userData = {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var talismanData = heroData[gc.dsConsts.HeroEntity.talismanData] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                if (heroData)
                    gd.heroCtrl.updateHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id], heroData);
                self.pushNotify(self.__class.ON_GIFT_EQUIP_CHANGED);
                var hec = gd.heroCtrl.getHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id]);
                hec.pushNotify(self.__class.ON_GIFT_EQUIP_CHANGED);
                cb.call(target, talismanData);
            });
        };
        p.isCanUpLvl = function (index, trumpId) {
            var heroEntityCtrl = gd.heroCtrl.getHeroByIndex(index);
            if (!heroEntityCtrl)
                return false;
            var t_talismanLvl = mo.getJSONWithFileName(gc.cfg_t_talismanLvl);
            var talismanData = heroEntityCtrl.get(gc.dsConsts.HeroEntity.talismanData) || {};
            var trumpData = talismanData[trumpId];
            if (!trumpData)
                return false;
            var upLvlData = t_talismanLvl[trumpId + trumpData[0]];
            var nextUpLvlData = t_talismanLvl[trumpId + trumpData[0] + 1];
            if (!nextUpLvlData)
                return false;
            if (nextUpLvlData[gc.t_talismanLvl_userLv] > gd.userCtrl.getLvl())
                return false;
            var bag = gd.userCtrl.getBag();
            var delBagItems = {};
            var needItems = upLvlData[gc.t_talismanLvl_needItems];
            for (var val in upLvlData[gc.t_talismanLvl_needItems]) {
                var needItemsId = needItems[val][0];
                var needItemsNum = needItems[val][1];
                var ownItemsNum = bag[needItemsId] || 0;
                if (ownItemsNum < needItemsNum)
                    return false;
            }
            return true;
        };
        p.upTrumpLvl = function (tempId, trumpId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_talisman_upTrumpLvl_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.trumpId] = trumpId;
            mo.requestWaiting4Server(gc.iface.a_talisman_upTrumpLvl, args, function (data) {
                var userData = {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {}; //userData[gc.dsConsts.UserEntity.lastUpdateTime];
                var talismanData = heroData[gc.dsConsts.HeroEntity.talismanData] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                if (heroData)
                    gd.heroCtrl.updateHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id], heroData);
                self.pushNotify(self.__class.ON_GIFT_CHANGED, trumpId, talismanData[trumpId]);
                cb.call(target, talismanData[trumpId]);
            });
        };
        p.isCanUpStar = function (index, trumpId) {
            var heroEntityCtrl = gd.heroCtrl.getHeroEntityCtrl(index);
            if (!heroEntityCtrl)
                return false;
            var t_talismanStar = mo.getJSONWithFileName(gc.cfg_t_talismanStar);
            var talismanData = heroEntityCtrl.get(gc.dsConsts.HeroEntity.talismanData) || {};
            var trumpData = talismanData[trumpId];
            if (!trumpData)
                return false;
            var lvl = trumpData[0] || 1; //当前等级
            var starLvl = trumpData[2] || 0; //当前升星等级
            var lvlLimit = t_talismanStar[parseInt(trumpId) + parseInt(lvl)][gc.t_talismanLvl_starLimit]; //等级上限
            if (starLvl >= lvlLimit)
                return false;
            var trumpCfg = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.trumpCfg);
            var starLimit = trumpCfg[2]; //升星上限
            if (starLvl >= starLimit)
                return false;
            var bag = gd.userCtrl.getBag();
            var t_talismanStarId = parseInt(trumpId) + parseInt(starLvl);
            var needItems = t_talismanStar[t_talismanStarId][gc.t_talismanLvl_needItems];
            for (var val in needItems) {
                var needItemsId = needItems[val][0];
                var needItemsNum = needItems[val][1];
                var ownItemsNum = bag[needItemsId] || 0;
                if (ownItemsNum < needItemsNum)
                    return false;
            }
            return true;
        };
        /**
         * 法宝升星
         * @param tempId
         * @param trumpId
         * @param cb
         * @param target
         */
        p.upTrumpStar = function (tempId, trumpId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_talisman_upTrumpStar_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.trumpId] = trumpId;
            mo.requestWaiting4Server(gc.iface.a_talisman_upTrumpStar, args, function (data) {
                var userData = data[gc.dsConsts.ExUserData.userData] || {};
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var talismanData = heroData[gc.dsConsts.HeroEntity.talismanData] || {};
                var isGetSkill = data[gc.dsConsts.ExUserData.isGetSkill];
                var isHighStar = data[gc.dsConsts.ExUserData.isFull];
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                if (heroData)
                    gd.heroCtrl.updateHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id], heroData);
                var hec = gd.heroCtrl.getHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id]);
                if (isGetSkill) {
                    hec.pushNotify(gd.HeroEntityCtrl.ON_GIFT_SKILL_CHANGED);
                }
                self.pushNotify(self.__class.ON_GIFT_CHANGED, trumpId, talismanData[trumpId]);
                cb.call(target, [talismanData[trumpId], isGetSkill, isHighStar]);
            });
        };
        /**
         * 法宝重铸
         * @param tempId
         * @param trumpId
         * @param cb
         * @param target
         */
        p.recastTrump = function (tempId, trumpId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_talisman_recastTrump_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.trumpId] = trumpId;
            mo.requestWaiting4Server(gc.iface.a_talisman_recastTrump, args, function (data) {
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var isGetSkill = data[gc.dsConsts.ExUserData.isGetSkill];
                var hec = gd.heroCtrl.getHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id]);
                if (isGetSkill) {
                    var userData = data[gc.dsConsts.ExUserData.userData] || {};
                    gd.userCtrl.updateEntity(userData);
                    hec.pushNotify(gd.HeroEntityCtrl.ON_GIFT_SKILL_CHANGED);
                }
                if (heroData)
                    gd.heroCtrl.updateHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id], heroData);
                var talismanData = heroData[gc.dsConsts.HeroEntity.talismanData] || {};
                self.pushNotify(self.__class.ON_GIFT_CHANGED, trumpId, talismanData[trumpId]);
                cb.call(target, talismanData[trumpId]);
            });
        };
        /**
         * 法宝合成
         * @param tempId
         * @param trumpId
         * @param compoundId
         * @param cb
         * @param target
         */
        p.compoundTrump = function (tempId, trumpId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_talisman_compoundTrump_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.trumpId] = trumpId;
            mo.requestWaiting4Server(gc.iface.a_talisman_compoundTrump, args, function (data) {
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var bagItems = data[gc.dsConsts.ExUserData.bagItems] || {};
                if (Object.keys(bagItems).length > 0) {
                    var userData = {};
                    var bag = gd.userUtils.getNewBag({}, bagItems);
                    userData[gc.dsConsts.UserEntity.bag] = bag;
                    gd.userCtrl.updateEntity(userData);
                }
                if (heroData)
                    gd.heroCtrl.updateHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id], heroData);
                var hec = gd.heroCtrl.getHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id]);
                hec.pushNotify(self.__class.ON_GIFT_EQUIP_CHANGED);
                cb.call(target, bagItems);
            });
        };
        /**
         * 法宝洗炼
         * @param tempId
         * @param trumpId
         * @param isCheck
         * @param cb
         * @param target
         */
        p.baptizeTrump = function (tempId, trumpId, isCheck, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_talisman_baptizeTrump_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.trumpId] = trumpId;
            args[argKeys.isCheck] = isCheck;
            mo.requestWaiting4Server(gc.iface.a_talisman_baptizeTrump, args, function (data) {
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var delBagItems = data[gc.dsConsts.ExUserData.delBagItems] || {};
                var value = data[gc.dsConsts.ExUserData.baptizeValue] || {};
                var talismanData = heroData[gc.dsConsts.HeroEntity.talismanData] || {};
                var bag = gd.userUtils.getNewBag(delBagItems, {});
                var userData = {};
                userData[gc.dsConsts.UserEntity.bag] = bag;
                gd.userCtrl.updateEntity(userData);
                if (heroData)
                    gd.heroCtrl.updateHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id], heroData);
                self.pushNotify(self.__class.ON_GIFT_CHANGED, trumpId, talismanData[trumpId]);
                cb.call(target, talismanData[trumpId], value);
            });
        };
        /**
         * 确认法宝洗炼
         * @param tempId
         * @param trumpId
         * @param compoundId
         * @param cb
         * @param target
         */
        p.confirmBaptizeTrump = function (tempId, trumpId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_talisman_confirmBaptizeTrump_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.trumpId] = trumpId;
            mo.requestWaiting4Server(gc.iface.a_talisman_confirmBaptizeTrump, args, function (data) {
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var talismanData = heroData[gc.dsConsts.HeroEntity.talismanData] || {};
                if (heroData)
                    gd.heroCtrl.updateHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id], heroData);
                self.pushNotify(self.__class.ON_GIFT_CHANGED, trumpId, talismanData[trumpId]);
                cb.call(target, talismanData[trumpId]);
            });
        };
        /**
         * 取消法宝洗炼
         * @param tempId
         * @param trumpId
         * @param compoundId
         * @param cb
         * @param target
         */
        p.cancelBaptizeTrump = function (tempId, trumpId, cb, target) {
            var self = this;
            var argKeys = gc.iface.a_talisman_cancelBaptizeTrump_args;
            var args = {};
            args[argKeys.tempId] = tempId;
            args[argKeys.trumpId] = trumpId;
            mo.requestWaiting4Server(gc.iface.a_talisman_cancelBaptizeTrump, args, function (data) {
                var heroData = data[gc.dsConsts.ExUserData.heroData] || {};
                var talismanData = heroData[gc.dsConsts.HeroEntity.talismanData] || {};
                if (heroData)
                    gd.heroCtrl.updateHeroEntityCtrl(heroData[gc.dsConsts.HeroEntity.id], heroData);
                self.pushNotify(self.__class.ON_GIFT_CHANGED, trumpId, talismanData[trumpId]);
                cb.call(target, talismanData[trumpId]);
            });
        };
        /*****************************************************************************************************/
        p._getPropByIndex = function (index, t_talismanLvlId) {
            var self = this;
            var t_talismanLvl = mo.getJSONWithFileNameAndID(gc.cfg_t_talismanLvl, t_talismanLvlId);
            if (!t_talismanLvl)
                return 0;
            var props = t_talismanLvl[gc.t_talismanLvl_propertys];
            var reValue = 0;
            for (var i = 0; i < props.length; i++) {
                var locProp = props[i];
                var locIndex = locProp[0];
                var locValue = locProp[1];
                if (locIndex == index) {
                    reValue = locValue;
                    break;
                }
            }
            return reValue;
        };
        p.getPropObjBy = function (tid, ziZhi, lv) {
            var self = this;
            var propObj = {};
            var t_talismanLvl = mo.getJSONWithFileNameAndID(gc.cfg_t_talismanLvl, tid + lv);
            if (!t_talismanLvl)
                return 0;
            var props = t_talismanLvl[gc.t_talismanLvl_propertys];
            for (var i = 0; i < props.length; i++) {
                var locProp = props[i];
                var locIndex = locProp[0];
                var locValue = locProp[1];
                propObj[locIndex] = locValue * (1 + ziZhi / 1000) >> 0;
            }
            return propObj;
        };
        p.getMaxZiZhi = function (giftId, star) {
            var giftInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_talisman, giftId);
            var starInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_talismanStar, giftId + star);
            return giftInfo[gc.t_talisman_atEnd] + starInfo[gc.t_talismanStar_aptitude];
        };
        p.getSkillList = function (giftId, jiHuoObj) {
            var skills = [];
            var starInfos = mo.getJSONWithFileName(gc.cfg_t_talismanStar);
            var gameInfo = mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.trumpCfg);
            for (var i = 0; i <= gameInfo[2]; ++i) {
                var starInfo = starInfos[giftId + i];
                if (!starInfo)
                    break;
                var skillId = starInfo[gc.t_talismanStar_skillId];
                if (!skillId)
                    continue;
                var skillObj = { skillId: skillId, jiHuo: false, star: i };
                if (jiHuoObj) {
                    if (jiHuoObj[i + 1])
                        skillObj.jiHuo = true;
                }
                skills.push(skillObj);
            }
            return skills;
        };
        HeroTalismanCtrl.ON_GIFT_CHANGED = "ON_GIFT_CHANGED";
        HeroTalismanCtrl.ON_GIFT_EQUIP_CHANGED = "ON_GIFT_EQUIP_CHANGED";
        return HeroTalismanCtrl;
    })(mo.DataController);
    gd.HeroTalismanCtrl = HeroTalismanCtrl;
    egret.registerClass(HeroTalismanCtrl,"gd.HeroTalismanCtrl");
    gd.heroTalismanCtrl = HeroTalismanCtrl.getInstance();
})(gd || (gd = {}));

var gd;
(function (gd) {
    var ExpeditionCtrl = (function (_super) {
        __extends(ExpeditionCtrl, _super);
        function ExpeditionCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=ExpeditionCtrl,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            this._expHeroBase = {};
            this.DATA_KEY = gc.dsConsts.ExpeditionEntity;
        };
        /**
         * ��ȡ����
         * @param cb
         * @param target
         */
        p.getInfo = function (cb, target) {
            var self = this;
            mo.requestWaiting4Server(gc.iface.a_expedition_getInfo, {}, function (data) {
                var initData = data[gc.dsConsts.ExpeditionData.expData];
                self.init(initData);
                self._expHeroBase = data[gc.dsConsts.ExpeditionData.expHeroData];
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * װ��ԪӤ
         * @param cb
         * @param tempId:"ģ��id", soulId:"ԪӤid"
         * @param target
         */
        p.wearSoul = function (tempId, soulId, cb, target) {
            var self = this;
            var args = {};
            var argsKey = gc.iface.a_expedition_wearSoul_args;
            args[argsKey.tempId] = tempId;
            args[argsKey.soulId] = soulId;
            mo.requestWaiting4Server(gc.iface.a_expedition_wearSoul, args, function (data) {
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * ��ʼս��
         * @param cb
         * @param stageId:"�ؿ�id"
         * @param target
         */
        p.startBattle = function (stageId, cb, target) {
            var self = this;
            var args = {};
            var argsKey = gc.iface.a_expedition_startBattle_args;
            args[argsKey.stageId] = stageId;
            mo.requestWaiting4Server(gc.iface.a_expedition_startBattle, args, function (data) {
                if (cb)
                    cb.call(target, data);
            });
        };
        /**
         * ����ս��
         * @param cb
         * @param target
         * @returns ds.ArenaEntity
         */
        p.endBattle = function (isWin, herosHp, cb, target) {
            var self = this;
            var args = {};
            var argsKey = gc.iface.a_expedition_endBattle_args;
            args[argsKey.isWin] = isWin;
            args[argsKey.herosHp] = herosHp;
            mo.requestWaiting4Server(gc.iface.a_expedition_endBattle, args, function (data) {
                if (cb)
                    cb.call(target, data);
            });
        };
        return ExpeditionCtrl;
    })(mo.DataController);
    gd.ExpeditionCtrl = ExpeditionCtrl;
    egret.registerClass(ExpeditionCtrl,"gd.ExpeditionCtrl");
    gd.expeditionCtrl = ExpeditionCtrl.getInstance();
})(gd || (gd = {}));

var g_comp;
(function (g_comp) {
    /**
     *
     * @author
     *
     */
    var BossRewardPanel = (function (_super) {
        __extends(BossRewardPanel, _super);
        function BossRewardPanel() {
            _super.apply(this, arguments);
        }
        var d = __define,c=BossRewardPanel,p=c.prototype;
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
        };
        p.onEnter = function () {
            _super.prototype.onEnter.call(this);
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.item0.label_text.visible = false;
            self.item1.label_text.visible = false;
            self.item2.label_text.visible = false;
            self.item3.label_text.visible = false;
            self.item0.onClick(function (data) {
                g_base.BaseItemDetail.create().setData({ bdc: gd.BagDataCtrl.create(data.get('itemId'), null) }).show();
            });
            self.item1.onClick(function (data) {
                g_base.BaseItemDetail.create().setData({ bdc: gd.BagDataCtrl.create(data.get('itemId'), null) }).show();
            });
            self.item2.onClick(function (data) {
                g_base.BaseItemDetail.create().setData({ bdc: gd.BagDataCtrl.create(data.get('itemId'), null) }).show();
            });
            self.item3.onClick(function (data) {
                g_base.BaseItemDetail.create().setData({ bdc: gd.BagDataCtrl.create(data.get('itemId'), null) }).show();
            });
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var item0 = self.data["0"];
            self.item0.visible = item0 ? true : false;
            if (self.item0.visible)
                self.item0.setData({ itemId: item0[0], count: item0[1] });
            var item1 = self.data["1"];
            self.item1.visible = item1 ? true : false;
            if (self.item1.visible)
                self.item1.setData({ itemId: item1[0], count: item1[1] });
            var item2 = self.data["2"];
            self.item2.visible = item2 ? true : false;
            if (self.item2.visible)
                self.item2.setData({ itemId: item2[0], count: item2[1] });
            var item3 = self.data["3"];
            self.item3.visible = item3 ? true : false;
            if (self.item3.visible)
                self.item3.setData({ itemId: item3[0], count: item3[1] });
        };
        return BossRewardPanel;
    })(mo.gui.Comp);
    g_comp.BossRewardPanel = BossRewardPanel;
    egret.registerClass(BossRewardPanel,"g_comp.BossRewardPanel");
})(g_comp || (g_comp = {}));

var g_comp;
(function (g_comp) {
    /**
     *
     * @author
     *
     */
    var Tab_Sys = (function (_super) {
        __extends(Tab_Sys, _super);
        function Tab_Sys() {
            _super.apply(this, arguments);
        }
        var d = __define,c=Tab_Sys,p=c.prototype;
        p.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.red_point.visible = false;
            self.new_point.visible = false;
            self.img_s.visible = false;
            self.img_s.source = self.iconDisplay.source + "_";
        };
        p.onClick = function (listener, ctx, data) {
            this._onClick = listener;
            this._onClickCtx = ctx;
            this._onClickData = data || {};
        };
        return Tab_Sys;
    })(egret.gui.Button);
    g_comp.Tab_Sys = Tab_Sys;
    egret.registerClass(Tab_Sys,"g_comp.Tab_Sys");
})(g_comp || (g_comp = {}));

/**
 * Created by admin on 16/2/24.
 */
var g_comp;
(function (g_comp) {
    /**
     *
     * @author
     *
     */
    var ActivityItem = (function (_super) {
        __extends(ActivityItem, _super);
        function ActivityItem() {
            _super.apply(this, arguments);
        }
        var d = __define,c=ActivityItem,p=c.prototype;
        p.setActivity = function (activity) {
            if (!activity)
                return;
            var self = this;
            var icon_map = activity[gc.dsConsts.ActivityEntity.exData];
            if (icon_map) {
                var iconStr = icon_map[gc.c_prop.activityExDataTypeKey.titleIcon];
                if (iconStr) {
                    var url = "resource/ui2/ui_activity/" + iconStr;
                    RES.getResByUrl(url + "_3.jpg", function (texture) {
                        self.img_bg.source = texture;
                    }, self, RES.ResourceItem.TYPE_IMAGE);
                }
            }
            uiHelper.setEventTime(self.lbl_time, Date.newDate(activity[gc.dsConsts.ActivityEntity.startTime]), Date.newDate(activity[gc.dsConsts.ActivityEntity.endTime]));
        };
        return ActivityItem;
    })(mo.gui.Comp);
    g_comp.ActivityItem = ActivityItem;
    egret.registerClass(ActivityItem,"g_comp.ActivityItem");
})(g_comp || (g_comp = {}));

var g_comp;
(function (g_comp) {
    /**
     *
     * @author
     *
     */
    var Ico_Item = (function (_super) {
        __extends(Ico_Item, _super);
        function Ico_Item() {
            _super.apply(this, arguments);
            this._showEquipName = false;
        }
        var d = __define,c=Ico_Item,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            mo.gui.helper.setCompSkinName(this);
            this.showItemInfoOnClick = false;
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.label_count.visible = false;
        };
        d(p, "showEquipName"
            ,function () {
                return this._showEquipName;
            }
            ,function (show) {
                var self = this;
                self._showEquipName = show;
                if (show && self.data.itemId) {
                    var temp = mo.getJSONWithFileNameAndID(gc.cfg_t_item, self.data.itemId);
                    if (temp[gc.t_item_type] == gc.c_prop.itemTypeKey.equip) {
                        self.label_text.text = temp[gc.t_item_name];
                        self.label_count.visible = true;
                        self.label_count.text = mo.STR.format("Lv.%s", temp[gc.t_item_level]);
                        var markSrc = self.getIcoMarkSource();
                        self.ico_equipMark.visible = markSrc.length > 0;
                        if (markSrc.length > 0)
                            self.ico_equipMark.source = markSrc;
                    }
                }
            }
        );
        //设置 传,极,定,超 图标
        p.getIcoMarkSource = function () {
            var self = this;
            var source = "";
            var equipCtrl = gd.equipCtrl;
            var isSpecialEquip = equipCtrl.isSpecialEquip(self.data.itemId);
            var isRareEquip = equipCtrl.isRareEquip(self.data.itemId);
            var isCustomEquipByTempId = equipCtrl.isCustomEquipByTempId(self.data.itemId);
            var isSuperEquip = equipCtrl.isSuperEquip(self.data.itemId);
            var isJingEquip = equipCtrl.isJingEquip(self.data.itemId);
            if (isSpecialEquip) {
                source = "ico_special";
            }
            else if (isRareEquip) {
                source = "ico_best";
            }
            else if (isCustomEquipByTempId) {
                source = "ico_custom";
            }
            else if (isSuperEquip) {
                source = "ico_cao";
            }
            else if (isJingEquip) {
                source = "ico_jing";
            }
            return source;
        };
        //@override
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var itemId = self.get('itemId');
            var count = self.get('count') || 1;
            if (!itemId)
                return;
            if (typeof self.data == 'number' || typeof self.data == 'string') {
                itemId = self.data;
            }
            //// 获取物品模板
            var temp = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
            if (!temp) {
                itemId = 99999;
                temp = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
            }
            var type = temp[gc.t_item_type];
            var itemTypeKey = gc.c_prop.itemTypeKey;
            // 更换图标
            self.ico.source = resHelper.getItemIconPath(itemId);
            // 更换边框
            var color = temp[gc.t_item_color];
            self.ico_border.source = resHelper.getBorderByQuality(1, color);
            self.label_count.visible = count > 1;
            if (self.label_count.visible) {
                self.label_count.text = "" + count;
            }
            var pileCount = self.get('pileCount');
            if (pileCount != null) {
                self.label_count.text = pileCount + '/' + count;
            }
            else {
                self.label_count.text = count;
            }
            self.ico_job.visible = (self.ico_job_visible != null) ? self.ico_job_visible : (type == itemTypeKey.equip || type == itemTypeKey.gift);
            self.ico_equipMark.visible = false;
            if (self.hideLabelText != null)
                self.label_text.visible = !self.hideLabelText; //是否隐藏文本标签
            if (type == itemTypeKey.equip) {
                if (self.showEquipName) {
                    self.label_text.text = temp[gc.t_item_name];
                    self.label_count.visible = true;
                    self.label_count.text = mo.STR.format("Lv.%s", temp[gc.t_item_itemLvl]);
                }
                else {
                    self.label_text.text = mo.STR.format("Lv.%s", temp[gc.t_item_itemLvl]);
                }
                var markSrc = self.getIcoMarkSource();
                self.ico_equipMark.visible = markSrc.length > 0;
                if (markSrc.length > 0)
                    self.ico_equipMark.source = markSrc;
            }
            else {
                self.label_text.text = temp[gc.t_item_name];
            }
            if (self.ico_job.visible) {
                self.ico_job.source = "ico_job" + gd.equipCtrl.getEquipJob(itemId);
            }
        };
        p.onClick = function (listener, ctx, data) {
            this._onClick = listener;
            this._onClickCtx = ctx;
            this._onClickData = data || {};
        };
        p._tap_rect_touch = function (event) {
            var self = this;
            if (self.showItemInfoOnClick) {
                g_base.BaseItemDetail.create().setData({ bdc: gd.BagDataCtrl.create(self.data.itemId, self._showEquipName ? null : self.data.count) }).show();
            }
            if (self._onClick) {
                self._onClick.call(self._onClickCtx, self, event.target, self._onClickData);
            }
        };
        p.setLineWidth = function (width) {
            var self = this;
            self.label_text.width = width;
        };
        p.getTextHeight = function () {
            var self = this;
            return self.label_text.height;
        };
        return Ico_Item;
    })(mo.gui.Comp);
    g_comp.Ico_Item = Ico_Item;
    egret.registerClass(Ico_Item,"g_comp.Ico_Item");
})(g_comp || (g_comp = {}));

var g_comp;
(function (g_comp) {
    /**
     *
     * @author
     *
     */
    var Ico_Hero = (function (_super) {
        __extends(Ico_Hero, _super);
        function Ico_Hero() {
            _super.apply(this, arguments);
        }
        var d = __define,c=Ico_Hero,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            mo.gui.helper.setCompSkinName(this);
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.img_red.visible = false;
        };
        //@override
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var index = self.data.index;
            var heroCtrl = self.data.heroCtrl;
            var hasHero = heroCtrl.hasHeroByIndex(index);
            var isToBeOpen = heroCtrl.isToBeOpen(index);
            var isMy4thRole = heroCtrl.isMy4thRole(index);
            self.enabled = hasHero || isToBeOpen || isMy4thRole;
            self.invalidateSkinState();
            if (isToBeOpen) {
                var cfg = self.openCfg = index < 3 ? heroCtrl.getHeroOpenCfg(index) : heroCtrl.getSpHeroOpenCfg(index);
                self.label_unlock_lvl.text = mo.STR.format("%s级解锁", index < 3 ? cfg[0] : cfg[0][0]);
            }
            if (hasHero) {
                var hec = heroCtrl.getHeroByIndex(index);
                self.img_pos.source = mo.STR.format("ico_num%s", heroCtrl.getFightList().indexOf(hec) + 1);
                if (isMy4thRole) {
                    self.ico.source = mo.STR.format("avatar_%s_%s_1", gc.c_prop.heroJobKey.ys, 0); // job gender type
                }
                else {
                    self.ico.source = mo.STR.format("avatar_%s_%s_1", hec.job, hec.sex); // job gender type
                }
            }
        };
        p.setRedPointShow = function (isShow) {
            var self = this;
            if (self.img_red) {
                self.img_red.visible = isShow;
            }
        };
        p.setSelected = function (selected) {
            var self = this;
            if (self.img_light_border)
                self.img_light_border.visible = selected;
        };
        p.getCurrentSkinState = function () {
            var self = this;
            var heroCtrl = self.data.heroCtrl;
            if (!heroCtrl)
                return 'disabled';
            var index = self.data.index;
            var hasHero = heroCtrl.hasHeroByIndex(index);
            if (hasHero)
                return 'normal';
            var toBeOpen = heroCtrl.isToBeOpen(index);
            if (toBeOpen)
                return 'unlock';
            return 'disabled';
        };
        p.onClick = function (listener, ctx, data) {
            this._onClick = listener;
            this._onClickCtx = ctx;
            this._onClickData = data || {};
        };
        p._tap_touch_rect = function (event) {
            var self = this;
            if (self._onClick)
                self._onClick.call(self._onClickCtx, self, event.target, self._onClickData);
        };
        return Ico_Hero;
    })(mo.gui.Comp);
    g_comp.Ico_Hero = Ico_Hero;
    egret.registerClass(Ico_Hero,"g_comp.Ico_Hero");
})(g_comp || (g_comp = {}));

/**
 * Created by Administrator on 2015/11/20.
 */
var g_comp;
(function (g_comp) {
    var Ico_Head = (function (_super) {
        __extends(Ico_Head, _super);
        function Ico_Head() {
            _super.apply(this, arguments);
        }
        var d = __define,c=Ico_Head,p=c.prototype;
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var icoId = self.data.icoId;
            var vip = self.data.vip;
            self.ico_role.source = uiHelper.getHeroIcon(icoId);
            if (!vip) {
                self.grp_vip.visible = false;
            }
            else {
                self.grp_vip.visible = true;
                self.label_vipLv.text = vip.toString();
            }
        };
        return Ico_Head;
    })(mo.gui.Comp);
    g_comp.Ico_Head = Ico_Head;
    egret.registerClass(Ico_Head,"g_comp.Ico_Head");
})(g_comp || (g_comp = {}));

var g_comp;
(function (g_comp) {
    /**
     *
     * @author
     *
     */
    var Ico_Rune = (function (_super) {
        __extends(Ico_Rune, _super);
        function Ico_Rune() {
            _super.apply(this, arguments);
        }
        var d = __define,c=Ico_Rune,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            mo.gui.helper.setCompSkinName(this);
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.label_count.visible = false;
        };
        //@override
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var itemId = self.get('itemId');
            var count = self.get('count');
            if (typeof self.data == 'number' || typeof self.data == 'string') {
                itemId = self.data;
            }
            //// 获取物品模板
            var temp = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
            if (!temp) {
                itemId = 99999;
                temp = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
            }
            var type = temp[gc.t_item_type];
            var itemTypeKey = gc.c_prop.itemTypeKey;
            // 更换图标
            self.ico.source = resHelper.getItemIconPath(itemId);
            // 更换边框
            var color = temp[gc.t_item_color];
            self.ico_border.source = resHelper.getBorderByQuality(1, color);
            // 不是装备的时候才需要显示count
            self.label_count.visible = count && type != itemTypeKey.equip;
            var pileCount = self.get('pileCount');
            if (pileCount != null) {
                self.label_count.text = pileCount + '/' + count;
            }
            else {
                self.label_count.text = count;
            }
            //if(type == itemTypeKey.equip){
            //	self.label_text.text = mo.STR.format("Lv.%s", temp[gc.t_item_level]);
            //}else{
            //	self.label_text.text = temp[gc.t_item_name];
            //}
            //self._setEquipState();
        };
        p.onClick = function (listener, ctx, data) {
            this._onClick = listener;
            this._onClickCtx = ctx;
            this._onClickData = data || {};
        };
        p._tap_ico_border = function (event) {
            var self = this;
            if (self._onClick)
                self._onClick.call(self._onClickCtx, self, event.target, self._onClickData);
        };
        p.setGray = function (gray) {
            return this;
        };
        p.showTip = function (flag) {
            return this;
        };
        p._setEquipState = function () {
            var self = this;
            var state = self.get('equipState');
            return self;
        };
        return Ico_Rune;
    })(mo.gui.Comp);
    g_comp.Ico_Rune = Ico_Rune;
    egret.registerClass(Ico_Rune,"g_comp.Ico_Rune");
})(g_comp || (g_comp = {}));

var g_comp;
(function (g_comp) {
    /**
     *
     * @author
     *
     */
    var Ico_Medal = (function (_super) {
        __extends(Ico_Medal, _super);
        function Ico_Medal() {
            _super.apply(this, arguments);
        }
        var d = __define,c=Ico_Medal,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            mo.gui.helper.setCompSkinName(this);
            this.noAnimate = false;
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.efx_medal.ico.visible = false;
        };
        //@override
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var itemId = self.get('itemId');
            var t_medal = mo.getJSONWithFileNameAndID(gc.cfg_t_medal, itemId);
            var t_item = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
            self.ico_medal.visible = self.efx_medal.visible = self.label_medalTitle.visible = false;
            if (t_medal[gc.t_medal_iconId] && !self.noAnimate) {
                self.efx_medal.effectId = t_medal[gc.t_medal_iconId];
                self.efx_medal.visible = true;
            }
            else if (t_medal[gc.t_medal_staIconId]) {
                self.ico_medal.source = resHelper.getWarPrintIconPath(itemId);
                self.ico_medal.visible = true;
            }
            var metalType = t_medal[gc.t_medal_metalType];
            if (metalType == 1) {
                self.label_medalTitle.text = t_item[gc.t_item_name];
                self.label_medalTitle.visible = true;
            }
            //else{
            //   self.label_medalTitle.text = t_medal[gc.t_medal_text];
            //	self.label_medalTitle.visible = true;
            //}
        };
        p.getShowType = function () {
            var self = this;
        };
        p.checkNeedAdjuestPos = function (itemId) {
            var self = this;
            var t_medal = mo.getJSONWithFileNameAndID(gc.cfg_t_medal, itemId);
            var metalType = t_medal[gc.t_medal_metalType];
            return metalType == 3;
        };
        return Ico_Medal;
    })(mo.gui.Comp);
    g_comp.Ico_Medal = Ico_Medal;
    egret.registerClass(Ico_Medal,"g_comp.Ico_Medal");
})(g_comp || (g_comp = {}));

var g_comp;
(function (g_comp) {
    /**
     *
     * @author
     *
     */
    var Ico_Soul = (function (_super) {
        __extends(Ico_Soul, _super);
        function Ico_Soul() {
            _super.apply(this, arguments);
            this._showEquipName = false;
        }
        var d = __define,c=Ico_Soul,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            mo.gui.helper.setCompSkinName(this);
            this.showItemInfoOnClick = false;
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
        };
        //@override
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var itemId = self.get('itemId');
            var count = self.get('count') || 1;
            if (!itemId)
                return;
            if (typeof self.data == 'number' || typeof self.data == 'string') {
                itemId = self.data;
            }
            //// 获取物品模板
            var temp = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
            if (!temp) {
                itemId = 99999;
                temp = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
            }
            var type = temp[gc.t_item_type];
            var itemTypeKey = gc.c_prop.itemTypeKey;
            // 更换图标
            self.ico.source = resHelper.getItemIconPath(itemId);
            // 更换边框
            var color = temp[gc.t_item_color];
            self.ico_border.source = resHelper.getBorderByQuality(1, color);
        };
        p.onClick = function (listener, ctx, data) {
            this._onClick = listener;
            this._onClickCtx = ctx;
            this._onClickData = data || {};
        };
        p._tap_rect_touch = function (event) {
            var self = this;
            if (self.showItemInfoOnClick) {
                g_base.BaseItemDetail.create().setData({ bdc: gd.BagDataCtrl.create(self.data.itemId, self._showEquipName ? null : self.data.count) }).show();
            }
            if (self._onClick) {
                self._onClick.call(self._onClickCtx, self, event.target, self._onClickData);
            }
        };
        p.setLineWidth = function (width) {
            var self = this;
            self.label_name.width = width;
        };
        p.getTextHeight = function () {
            var self = this;
            return self.label_name.height;
        };
        return Ico_Soul;
    })(mo.gui.Comp);
    g_comp.Ico_Soul = Ico_Soul;
    egret.registerClass(Ico_Soul,"g_comp.Ico_Soul");
})(g_comp || (g_comp = {}));

var g_comp;
(function (g_comp) {
    /**
     *
     * @author
     *
     */
    var Ico_Gift = (function (_super) {
        __extends(Ico_Gift, _super);
        function Ico_Gift() {
            _super.apply(this, arguments);
        }
        var d = __define,c=Ico_Gift,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            mo.gui.helper.setCompSkinName(this);
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
        };
        //@override
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var itemId = self.get('itemId');
            self.ico_job.visible = itemId != 0;
            if (itemId != 0) {
                var t_gift = mo.getJSONWithFileNameAndID(gc.cfg_t_talisman, itemId);
                self.label_giftTitle.text = t_gift[gc.t_talisman_name];
                self.ico_gift.source = resHelper.getItemIconPath(itemId);
                self.ico_job.source = "ico_job" + gd.equipCtrl.getEquipJob(itemId);
            }
            else {
                self.ico_gift.source = null;
                self.label_giftTitle.text = "";
            }
        };
        p.getShowType = function () {
            var self = this;
        };
        return Ico_Gift;
    })(mo.gui.Comp);
    g_comp.Ico_Gift = Ico_Gift;
    egret.registerClass(Ico_Gift,"g_comp.Ico_Gift");
})(g_comp || (g_comp = {}));

/**
 * Created by lihex on 9/17/15.
 */
var g_comp;
(function (g_comp) {
    /**
     *
     * @author
     *
     */
    var Dlg_Close = (function (_super) {
        __extends(Dlg_Close, _super);
        function Dlg_Close() {
            _super.apply(this, arguments);
        }
        var d = __define,c=Dlg_Close,p=c.prototype;
        return Dlg_Close;
    })(egret.gui.Panel);
    g_comp.Dlg_Close = Dlg_Close;
    egret.registerClass(Dlg_Close,"g_comp.Dlg_Close");
})(g_comp || (g_comp = {}));

/**
 * Created by lihex on 9/17/15.
 */
var g_comp;
(function (g_comp) {
    /**
     *
     * @author
     *
     */
    var Dlg_Info_Close = (function (_super) {
        __extends(Dlg_Info_Close, _super);
        function Dlg_Info_Close() {
            _super.apply(this, arguments);
        }
        var d = __define,c=Dlg_Info_Close,p=c.prototype;
        return Dlg_Info_Close;
    })(g_comp.Dlg_Close);
    g_comp.Dlg_Info_Close = Dlg_Info_Close;
    egret.registerClass(Dlg_Info_Close,"g_comp.Dlg_Info_Close");
})(g_comp || (g_comp = {}));

var g_comp;
(function (g_comp) {
    /**
     *
     * @author
     *
     */
    var ResBar = (function (_super) {
        __extends(ResBar, _super);
        function ResBar() {
            _super.apply(this, arguments);
        }
        var d = __define,c=ResBar,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            mo.gui.helper.setCompSkinName(self);
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.registerClassByKey(gd.UserCtrl, gc.dsConsts.UserEntity.gold.toString(), self._updateRes);
            self.registerClassByKey(gd.UserCtrl, gc.dsConsts.UserEntity.diamond.toString(), self._updateRes);
            self._updateRes();
        };
        p._updateRes = function () {
            var self = this;
            self.label_gold.text = gd.userCtrl.getGold();
            self.label_yuanbao.text = gd.userCtrl.getDiamond();
        };
        p.showRes = function (isShowGold, isShowYuanBao) {
            var self = this;
            self.grp_gold.visible = isShowGold;
            self.grp_yuanbao.visible = isShowYuanBao;
        };
        //@override
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
        };
        return ResBar;
    })(mo.gui.Comp);
    g_comp.ResBar = ResBar;
    egret.registerClass(ResBar,"g_comp.ResBar");
})(g_comp || (g_comp = {}));

/**
 * Created by lihex on 9/17/15.
 */
var g_comp;
(function (g_comp) {
    /**
     *
     * @author
     *
     */
    var IcoLabel = (function (_super) {
        __extends(IcoLabel, _super);
        function IcoLabel() {
            _super.apply(this, arguments);
        }
        var d = __define,c=IcoLabel,p=c.prototype;
        d(p, "text"
            ,function () {
                return this._textSource;
            }
            ,function (txt) {
                var self = this;
                self._textSource = txt;
                self.source = self._textSource;
            }
        );
        return IcoLabel;
    })(egret.gui.UIAsset);
    g_comp.IcoLabel = IcoLabel;
    egret.registerClass(IcoLabel,"g_comp.IcoLabel");
})(g_comp || (g_comp = {}));

var g_comp;
(function (g_comp) {
    /**
     *
     * @author
     *
     */
    var Equip_Item = (function (_super) {
        __extends(Equip_Item, _super);
        function Equip_Item() {
            _super.apply(this, arguments);
            this.showType = 0; //0角色 1强化 2升星 3宝石
        }
        var d = __define,c=Equip_Item,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            mo.gui.helper.setCompSkinName(this);
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.ico_item.ico_job_visible = false;
        };
        //@override
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            self.part = self.get('part');
            self.hec = self.get('hec');
            self.showType = self.get('showType') || 0;
            var equipId = self.hec.getEquipIdByPart(self.part);
            self.equipId = equipId;
            var isEmpty = self.isEmpty = !equipId;
            self.ico_item.visible = !isEmpty;
            self.img_red.visible = false;
            self.label_plus.visible = false;
            self.img_num_bg.visible = false;
            self.label_star.visible = false;
            self.img_green_plus.visible = false;
            self.img_red.visible = false;
            if (!isEmpty) {
                var tempId;
                if (gd.equipCtrl.isBreakRing(self.part)) {
                    tempId = equipId;
                }
                else {
                    tempId = self.hec.getEquipTempIdByPart(self.part);
                }
                self.ico_item.setData({ itemId: tempId });
            }
            switch (self.showType) {
                case 0:
                    self._setShowInRole();
                    break;
                case 1:
                    self._setShowInStr();
                    break;
                case 2:
                    self._setShowInStar();
                    break;
                case 3:
                    self._setShowInGem();
                    break;
                case 4:
                    self._setShowInRefine();
                    break;
            }
        };
        //在强化系统中显示
        p._setShowInStr = function () {
            var self = this;
            var isEmpty = self.isEmpty;
            if (!isEmpty) {
                self.ico_item.label_text.visible = false;
                //设置强化等级
                self._setStrLvl();
                var equipReds = self.hec.isStrengthReddot();
                self.img_red.visible = !isEmpty && equipReds.indexOf(self.part) != -1;
            }
        };
        //在精炼系统中显示
        p._setShowInRefine = function () {
            var self = this;
            var isEmpty = self.isEmpty;
            if (!isEmpty) {
                self.ico_item.label_text.visible = false;
                //设置强化等级
                self._setStrLvl();
                self.img_red.visible = false;
            }
        };
        //在升星系统中显示
        p._setShowInStar = function () {
            var self = this;
            var isEmpty = self.isEmpty;
            if (!isEmpty) {
                self.ico_item.label_text.visible = false;
                //设置升星等级
                self._setStar();
                var equipReds = self.hec.isUpStarReddot();
                self.img_red.visible = !isEmpty && equipReds.indexOf(self.part) != -1;
            }
        };
        //在升星系统中显示
        p._setShowInGem = function () {
            var self = this;
            var isEmpty = self.isEmpty;
            if (!isEmpty) {
                //设置宝石等级
                self._setGemLvl();
                var equipReds = self.hec.isUpGemReddot();
                self.img_red.visible = !isEmpty && equipReds.indexOf(self.part) != -1;
            }
        };
        //在角色系统中显示
        p._setShowInRole = function () {
            var self = this;
            var isEmpty = self.isEmpty;
            self.label_plus.visible = !isEmpty;
            self.label_star.visible = !isEmpty;
            self.img_num_bg.visible = !isEmpty;
            if (!isEmpty) {
                //设置强化等级
                self._setStrLvl();
                //设置星级
                self._setStar();
            }
            //判断是否有可穿戴的装备
            var canAdd = false;
            //是否是特戒
            if (gd.equipCtrl.isBreakRing(self.part)) {
                canAdd = isEmpty && (self.hec.getStanbyBreakId(self.part) != null);
                var ringReds = self.hec.isTringReddot();
                self.img_red.visible = (ringReds.indexOf(self.part) != -1) && !canAdd;
            }
            else {
                var equipList = self.hec.getStanbyEquip(self.part);
                canAdd = isEmpty && equipList.length > 0;
                var equipReds = self.hec.isEquipReddot();
                self.img_red.visible = !isEmpty && equipReds.indexOf(self.part) != -1;
            }
            self.canAdd = canAdd;
            self.img_green_plus.visible = canAdd;
        };
        p._setStrLvl = function () {
            var self = this;
            var strLvl = self.hec.getStrLvlByEquipPart(self.part);
            self.label_plus.text = strLvl;
            self.label_plus.visible = (strLvl != 0);
            self.img_num_bg.visible = (strLvl != 0);
        };
        p._setStar = function () {
            var self = this;
            var star = self.hec.getStarLvlByEquipPart(self.part);
            self.label_star.text = star;
            self.label_star.visible = (star != 0);
        };
        p._setGemLvl = function () {
            var self = this;
            var c_gem = self.hec.getGemInfoByPart(self.part);
            var gem_lvl = c_gem[gc.c_gem_gemLvl];
            self.label_plus.text = gem_lvl;
            self.label_plus.visible = (gem_lvl != 0);
            self.img_num_bg.visible = (gem_lvl != 0);
        };
        p.onClick = function (listener, ctx, data) {
            this._onClick = listener;
            this._onClickCtx = ctx;
            this._onClickData = data || {};
        };
        p._tap_rect_touch = function (event) {
            var self = this;
            if (self._onClick)
                self._onClick.call(self._onClickCtx, self, event.target, self._onClickData);
        };
        return Equip_Item;
    })(mo.gui.Comp);
    g_comp.Equip_Item = Equip_Item;
    egret.registerClass(Equip_Item,"g_comp.Equip_Item");
})(g_comp || (g_comp = {}));

var g_comp;
(function (g_comp) {
    /**
     *
     * @author
     *
     */
    var Gem_Stone = (function (_super) {
        __extends(Gem_Stone, _super);
        function Gem_Stone() {
            _super.apply(this, arguments);
        }
        var d = __define,c=Gem_Stone,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            mo.gui.helper.setCompSkinName(this);
        };
        p._getRealPart = function () {
            var self = this;
            var hec = self.data.hec;
            var part = (self.data.part != null) ? self.data.part : hec.getFirstEquipedPart();
            part = hec.isPartEquiped(part) ? part : hec.getFirstEquipedPart();
            return part;
        };
        //@override
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var hec = self.get('hec');
            if (!hec)
                return;
            var part = self._getRealPart();
            if (part == null) {
                self.label_gem_0.text = ["未激活", ""];
                self.label_gem_1.text = ["未激活", ""];
                self.label_gem_2.text = ["未激活", ""];
                self.label_gem_3.text = ["未激活", ""];
                self.img_gem0.source = "gem_gray";
                self.img_gem1.source = "gem_gray";
                self.img_gem2.source = "gem_gray";
                self.img_gem3.source = "gem_gray";
            }
            else {
                var c_gem = hec.getGemInfoByPart(part);
                var propName = gc.c_prop.heroProp;
                var _getStr = function (k, v) {
                    return v > 0 ?
                        mo.STR.format("%s+%s", propName[k].replace("加成", ""), v)
                        : "未激活";
                };
                var _getRes = function (gemId, v) {
                    return v > 0 ? ("ico_" + gemId) : "gem_gray";
                };
                self.label_gem_0.text = [c_gem[gc.c_gem_items1], mo.STR.format("%s+%s", propName[c_gem[gc.c_gem_effectType1]].replace("加成", ""), c_gem[gc.c_gem_effectPro1])];
                self.label_gem_1.text = [c_gem[gc.c_gem_items2], _getStr(c_gem[gc.c_gem_effectType2], c_gem[gc.c_gem_effectPro2])];
                self.label_gem_2.text = [c_gem[gc.c_gem_items3], _getStr(c_gem[gc.c_gem_effectType3], c_gem[gc.c_gem_effectPro3])];
                self.label_gem_3.text = [c_gem[gc.c_gem_items4], _getStr(c_gem[gc.c_gem_effectType4], c_gem[gc.c_gem_effectPro4])];
                self.img_gem0.source = "ico_" + c_gem[gc.c_gem_gemId0];
                self.img_gem1.source = _getRes(c_gem[gc.c_gem_gemId1], c_gem[gc.c_gem_effectPro2]);
                self.img_gem2.source = _getRes(c_gem[gc.c_gem_gemId2], c_gem[gc.c_gem_effectPro3]);
                self.img_gem3.source = _getRes(c_gem[gc.c_gem_gemId3], c_gem[gc.c_gem_effectPro4]);
            }
        };
        return Gem_Stone;
    })(mo.gui.Comp);
    g_comp.Gem_Stone = Gem_Stone;
    egret.registerClass(Gem_Stone,"g_comp.Gem_Stone");
})(g_comp || (g_comp = {}));

var g_comp;
(function (g_comp) {
    /**
     *
     * @author
     *
     */
    var Part_Item = (function (_super) {
        __extends(Part_Item, _super);
        function Part_Item() {
            _super.apply(this, arguments);
        }
        var d = __define,c=Part_Item,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            mo.gui.helper.setCompSkinName(this);
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
        };
        //@override
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            self.part = self.get('part');
            if (self.part == null) {
                self.img_part.visible = false;
                self.img_txt_part.visible = false;
                return;
            }
            self.img_part.visible = true;
            self.img_txt_part.visible = true;
            var res = uiHelper.getPartRes(self.part);
            self.img_part.source = res[0];
            self.img_txt_part.source = res[1];
        };
        return Part_Item;
    })(mo.gui.Comp);
    g_comp.Part_Item = Part_Item;
    egret.registerClass(Part_Item,"g_comp.Part_Item");
})(g_comp || (g_comp = {}));

var g_comp;
(function (g_comp) {
    var EfxAsset = (function (_super) {
        __extends(EfxAsset, _super);
        function EfxAsset() {
            _super.apply(this, arguments);
            this.performanceControl = true;
            this.needPlay = true;
        }
        var d = __define,c=EfxAsset,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            mo.gui.helper.setCompSkinName(this);
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.autoPlay = (self.autoPlay != null) ? self.autoPlay : true;
            if (self.performanceControl) {
                var hp = self.efx.getQueryString("high");
                if (hp && hp == "true") {
                    self.needPlay = true;
                }
                else if (hp && hp == "false") {
                    self.needPlay = false;
                }
            }
            self.efx.autoPlay = self.autoPlay;
            self.efx.effectId = self._effectId;
            if (self._effectId && self.needPlay) {
                self.efx.startLoadByKey(self._effectId, function () {
                    if (self.efx)
                        self.efx.width = self.efx.height = 0;
                });
            }
            if (self._source)
                self.ico.source = self._source;
        };
        d(p, "source",undefined
            ,function (src) {
                var self = this;
                if (self._source != src)
                    self._source = src;
                if (self.ico)
                    self.ico.source = src;
            }
        );
        p.playEffect = function (play) {
            var self = this;
            if (self.efx && self.needPlay) {
                self.efx.autoPlay = play;
                uiHelper.playUIEffect(self.efx, play);
            }
        };
        p._onEfxIdChanged = function (id) {
            var self = this;
            if (self.efx && self.needPlay) {
                self.playEffect(false);
                if (self._effectId && self.needPlay) {
                    self.efx.autoPlay = self.autoPlay;
                    self.efx.startLoadByKey(self._effectId, function () {
                        if (self.efx)
                            self.efx.width = self.efx.height = 0;
                        self.playEffect(true);
                    });
                }
            }
        };
        d(p, "effectId",undefined
            ,function (id) {
                var self = this;
                if (self._effectId != id) {
                    self._effectId = id;
                    self._onEfxIdChanged(id);
                }
            }
        );
        p.onClick = function (listener, ctx, data) {
            this._onClick = listener;
            this._onClickCtx = ctx;
            this._onClickData = data || {};
        };
        p._tap_ico = function (event) {
            var self = this;
            if (self._onClick) {
                self._onClick.call(self._onClickCtx, self, event.target, self._onClickData);
            }
        };
        EfxAsset.createEfxAsset = function (source, effectId, autoPlay) {
            var efxAsset = new g_comp.EfxAsset();
            efxAsset.source = source;
            efxAsset.autoPlay = autoPlay;
            efxAsset.effectId = effectId;
            return efxAsset;
        };
        return EfxAsset;
    })(mo.gui.Comp);
    g_comp.EfxAsset = EfxAsset;
    egret.registerClass(EfxAsset,"g_comp.EfxAsset");
})(g_comp || (g_comp = {}));

/**
 * Created by Joe on 2015/12/2.
 */
var g_comp;
(function (g_comp) {
    var Fight_Info = (function (_super) {
        __extends(Fight_Info, _super);
        function Fight_Info() {
            _super.apply(this, arguments);
        }
        var d = __define,c=Fight_Info,p=c.prototype;
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
        };
        p.onEnter = function () {
            _super.prototype.onEnter.call(this);
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
        };
        p.updateHp = function (now, all) {
            var self = this;
            if (all == 0) {
                now = all = 1;
            }
            var precent = self.img_hp.height - Math.floor((1 - now / all) * self.img_hp.height);
            self.img_hp.mask = new egret.Rectangle(0, self.img_hp.height - precent, self.img_hp.width, precent);
        };
        p.updateMp = function (now, all) {
            var self = this;
            if (all == 0) {
                now = all = 1;
            }
            var precent = self.img_mp.height - Math.floor((1 - now / all) * self.img_mp.height);
            self.img_mp.mask = new egret.Rectangle(0, self.img_mp.height - precent, self.img_mp.width, precent);
        };
        return Fight_Info;
    })(mo.gui.Comp);
    g_comp.Fight_Info = Fight_Info;
    egret.registerClass(Fight_Info,"g_comp.Fight_Info");
})(g_comp || (g_comp = {}));

/**
 * Created by admin on 16/4/5.
 */
var g_base;
(function (g_base) {
    /**
     *
     * @author
     *
     */
    var WanbaGift = (function (_super) {
        __extends(WanbaGift, _super);
        function WanbaGift() {
            _super.apply(this, arguments);
        }
        var d = __define,c=WanbaGift,p=c.prototype;
        //@override
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self._Item_list_items = g_base.BaseItemCell;
        };
        p._data_list_items = function () {
            var self = this;
            return self.actItems;
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var type = self.data.type;
            if (type == 0) {
                self.label_hint.text = "恭喜你获得:";
                self.ico_hint.source = "ico_wgift_get";
            }
            else if (type == 1) {
                self.label_hint.text = "今天已领取过:";
                self.ico_hint.source = "ico_wgift_hint";
            }
            self.actItems = [];
            var key = self.data["giftId"];
            var items = mo.getJSONWithFileName(gc.cfg_c_giftPack);
            var item = items[key];
            if (item) {
                var objs = item[gc.c_giftPack_content];
                for (var i = 0; i < objs.length; i++) {
                    var obj_ary = objs[i];
                    self.actItems.push({ "itemId": obj_ary[0], "count": obj_ary[1] });
                }
            }
            self.refreshList("list_items");
        };
        p.onExit = function () {
            var self = this;
            g_base.loginCtrl.showNoticeOrFirstEnterGame(self.data.exData);
        };
        return WanbaGift;
    })(mo.gui.Dlg);
    g_base.WanbaGift = WanbaGift;
    egret.registerClass(WanbaGift,"g_base.WanbaGift");
})(g_base || (g_base = {}));

var g_base;
(function (g_base) {
    /**
     *
     * @author
     *
     */
    var ActionPlayer = (function (_super) {
        __extends(ActionPlayer, _super);
        function ActionPlayer() {
            _super.apply(this, arguments);
            this.loop = false;
        }
        var d = __define,c=ActionPlayer,p=c.prototype;
        p.initMc = function () {
            var self = this;
            if (self.jsonData && self.texture) {
                var mcDataFactory = new egret.MovieClipDataFactory(self.jsonData, self.texture);
                self.movieClipData = mcDataFactory.generateMovieClipData();
                self.frameRate = 10;
                self.playAction();
            }
        };
        p.playAction = function () {
            if (this.loop) {
                this.play(-1);
            }
            else {
                this.gotoAndPlay(1, 1);
            }
        };
        //avatarSet: 形如r101_0a 的路径字符串
        p.loadRes = function (avatarSet, loop, cb, ctx) {
            if (cb === void 0) { cb = null; }
            if (ctx === void 0) { ctx = null; }
            if (this.avatarSet == avatarSet) {
                return;
            }
            this.avatarSet = avatarSet;
            var self = this;
            var jsonUrl = avatarSet;
            var imgUrl = "resource/dynamic2/" + avatarSet + ".png";
            self.jsonData = mo.getData('mc', jsonUrl);
            self.texture = null;
            RES.getResByUrl(imgUrl, function (texture) {
                if (self.avatarSet != avatarSet)
                    return;
                self.texture = texture;
                self.loop = loop;
                self.initMc();
                if (self.jsonData && self.texture) {
                    if (cb)
                        cb.call(ctx);
                }
            }, self);
        };
        return ActionPlayer;
    })(egret.MovieClip);
    g_base.ActionPlayer = ActionPlayer;
    egret.registerClass(ActionPlayer,"g_base.ActionPlayer");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/7/24.
 */
var g_base;
(function (g_base) {
    var BaseBottomBar = (function (_super) {
        __extends(BaseBottomBar, _super);
        function BaseBottomBar() {
            _super.apply(this, arguments);
        }
        var d = __define,c=BaseBottomBar,p=c.prototype;
        //@override
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self.redKeyArr = [
                -1,
                gc.c_prop.pointRedKey.home_main,
                gc.c_prop.pointRedKey.role_main,
                gc.c_prop.pointRedKey.make_main,
                -1,
                gc.c_prop.pointRedKey.shopMain
            ];
            self._checkLvls = [30, 50, 80, 110];
            self.registerClassByKey(gd.UserCtrl, gc.dsConsts.UserEntity.redPointData.toString(), self._updateRed);
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.modViewArr = [
                self.btn_fight,
                self.btn_home,
                self.btn_role,
                self.btn_forge,
                self.btn_bag,
                self.btn_shop
            ];
            self._updateRed();
            self.selected = g_base.modIdx;
            //if(g_fight.mapView){
            //    g_fight.mapView.addEventListener(g_fight.MAP_EVENT_HPMP_CHANGE,this.updateHP,this);
            // }
        };
        p._updateRed = function () {
            var self = this;
            if (!self.modViewArr)
                return;
            for (var i = 0, li = self.redKeyArr.length; i < li; i++) {
                var btn = self.modViewArr[i];
                var key = self.redKeyArr[i];
                if (key > 0) {
                    btn.red_point.visible = gd.pointCtrl.isShow(key);
                }
                else {
                    btn.red_point.visible = false;
                }
            }
        };
        p._tap_btn_fight = function () {
            this._onTabClick(this.btn_fight);
            var self = this;
            mo.moduleMgr.runModule(g_consts.moduleId.fight, null, function () {
                egret.setTimeout(function () {
                    self._checkBindCondtion(); //检查是否绑定手机弹窗
                }, self, 200);
            });
        };
        p._tap_btn_home = function () {
            //ws.recordEvent("进入【主城】模块", 1);
            this._onTabClick(this.btn_home);
            mo.moduleMgr.runModule(g_consts.moduleId.home);
        };
        p._tap_btn_role = function () {
            //ws.recordEvent("进入【角色】模块", 1);
            //return mo.showMsg("功能开发中...");
            this._onTabClick(this.btn_role);
            mo.moduleMgr.runModule(g_consts.moduleId.role);
        };
        p._tap_btn_forge = function () {
            //ws.recordEvent("进入【打造】模块", 1);
            this._onTabClick(this.btn_forge);
            mo.moduleMgr.runModule(g_consts.moduleId.forge);
        };
        p._tap_btn_bag = function () {
            //ws.recordEvent("进入【包裹】模块", 1);
            this._onTabClick(this.btn_bag);
            mo.moduleMgr.runModule(g_consts.moduleId.bag);
        };
        p._tap_btn_shop = function () {
            //ws.recordEvent("进入【探宝】模块", 1);
            this._onTabClick(this.btn_shop);
            mo.moduleMgr.runModule(g_consts.moduleId.shop);
        };
        p._onTabClick = function (tab) {
            var self = this;
            var modViewArr = self.modViewArr;
            for (var i = 0, li = modViewArr.length; i < li; i++) {
                var modTab = modViewArr[i];
                modTab.enabled = true;
                modTab.img_s.visible = false;
            }
            tab.enabled = false;
            tab.img_s.visible = true;
            self.curModIdx = modViewArr.indexOf(tab);
            self._updateRed();
        };
        p._checkBindCondtion = function () {
            var self = this;
            var userLvl = parseInt(gd.userCtrl.getLvl());
            var checkLvls = self._checkLvls;
            if (checkLvls.indexOf(userLvl) >= 0) {
                mo.moduleMgr.runModule(g_consts.moduleId.bindPhone);
            }
        };
        d(p, "selected"
            ,function () {
                return this.curModIdx;
            }
            ,function (idx) {
                var self = this;
                if (self.curModIdx == idx)
                    return;
                var modViewArr = self.modViewArr;
                for (var i = 0, li = modViewArr.length; i < li; i++) {
                    var modTab = modViewArr[i];
                    modTab.enabled = (i != idx);
                    modTab.img_s.visible = (i == idx);
                }
                self.fight_hp.visible = idx == 0 ? true : false;
                self.btn_fight.visible = idx != 0 ? true : false;
                self.curModIdx = idx;
            }
        );
        p.updateHP = function (infos) {
            var self = this;
            self.fight_hp.updateHp(infos[0], infos[1]);
        };
        p.updateMP = function (infos) {
            var self = this;
            self.fight_hp.updateMp(infos[0], infos[1]);
        };
        return BaseBottomBar;
    })(mo.gui.MenuLayer);
    g_base.BaseBottomBar = BaseBottomBar;
    egret.registerClass(BaseBottomBar,"g_base.BaseBottomBar");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/7/24.
 */
var g_base;
(function (g_base) {
    var BaseTopBar = (function (_super) {
        __extends(BaseTopBar, _super);
        function BaseTopBar() {
            _super.apply(this, arguments);
        }
        var d = __define,c=BaseTopBar,p=c.prototype;
        //@override
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self.touchEnabled = false;
            self.registerClassByKey(gd.UserCtrl, gc.dsConsts.UserEntity.gold.toString(), self._updateRes);
            self.registerClassByKey(gd.UserCtrl, gc.dsConsts.UserEntity.diamond.toString(), self._updateRes);
            self.registerClassByKey(gd.UserCtrl, gc.dsConsts.UserEntity.lvl.toString(), self._updateRes);
            self.registerClassByKey(gd.UserCtrl, gc.dsConsts.UserEntity.combat.toString(), self._updateRes);
            self.registerClassByKey(gd.UserCtrl, gc.dsConsts.UserEntity.expc.toString(), self._updateExp);
            self.registerClassByKey(gd.UserCtrl, gc.dsConsts.UserEntity.vip.toString(), self._updateRes);
            self.registerClassByKey(gd.PkOutCtrl, gc.dsConsts.PkOutEntity.pkValue.toString(), self._setUserName);
            //self.registerClassByKey(gd.CopyCtrl, gd.CopyCtrl.ON_COPY_CHANGE, self.onCopyChange)
            self.registerClassByKey(gd.CoffersCtrl, gd.CoffersCtrl.ON_COFFERS_FIGHT, self.showCopyNameCoffers);
        };
        //@override
        p.init = function (ownerScene) {
            var self = this, clazz = self.__class;
            _super.prototype.init.call(this, ownerScene);
            self.ownerScene = ownerScene;
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.label_vip.text = gd.userCtrl.getVip().toString();
            var resName = uiHelper.getHeroIcon(gd.userCtrl.getIconId(), 1);
            mo.R.loadTo(self.ownerScene, resName, function () { });
            self.img_head.source = resName;
            self._setUserName();
            var expcArr = [];
            var curLvl = gd.userCtrl.getLvl();
            var index = curLvl - 1;
            var cfg_c_lvl = mo.getJSONWithFileName(gc.cfg_c_lvl);
            var length = 0;
            for (var key in cfg_c_lvl) {
                if (cfg_c_lvl.hasOwnProperty(key))
                    length++;
            }
            var c_lvl;
            for (var i = 0; i < length; i++) {
                c_lvl = cfg_c_lvl[i + 1];
                if (!c_lvl)
                    break;
                expcArr.push(c_lvl[gc.c_lvl_reqExp]);
            }
            self._total = mo.getJSONWithFileName(gc.cfg_c_lvl)[curLvl][gc.c_lvl_minExp];
            self._total += gd.userCtrl.getExp();
            var guiHelper = mo.gui.helper;
            guiHelper.initProgress(self.pb_exp, {
                baseArr: expcArr,
                baseValue: gd.userCtrl.getExp(),
                baseIndex: index,
                onBaseChange: function (type) {
                    //on up lvl
                }
            });
            //self.onCopyChange();
            self._updateRes();
            //self.showBossIcon(gd.fightCtrl.isSpFighting);
            if (mo.moduleMgr.curModule.name == g_consts.moduleId.home) {
                self.grp_copyShow.visible = false;
            }
        };
        p._setUserName = function () {
            var self = this;
            if (self.label_name) {
                self.label_name.text = gd.userCtrl.getName();
                self.label_name.textColor = uiHelper.getUserNameColor(gd.pkOutCtrl.getPkValue());
            }
        };
        //onCopyChange(){
        //    var self = this;
        //    var curCopyId =  gd.copyCtrl.getNormalCurCopyId();
        //    self.label_copyId.text = "" + curCopyId;
        //    self.label_copy_name.text = mo.getJSONWithFileNameAndID(gc.cfg_t_copy, curCopyId)[gc.t_copy_name];
        //}
        //showBossIcon(isShow){
        //    var self = this;
        //    self.ico_boss.visible = isShow;
        //    self.label_copyId.visible = !isShow;
        //}
        p.showCopyName = function (copyId, monsterId) {
            var self = this;
            var copyInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_copy, copyId);
            var monsterInfos = mo.getJSONWithFileName(gc.cfg_t_monster);
            var monsterInfo = monsterInfos[monsterId];
            if (monsterInfo != null && monsterInfo[gc.t_monster_bossLevel] != 0) {
                self.label_copyId.visible = false;
                self.ico_boss.visible = true;
                self.label_copy_name.text = monsterInfo[gc.t_monster_name];
            }
            else {
                self.label_copyId.visible = true;
                self.ico_boss.visible = false;
                self.label_copyId.text = "" + copyId;
                self.label_copy_name.text = copyInfo[gc.t_copy_name];
            }
        };
        p.showCopyNameCoffers = function (serverId, door) {
            var self = this;
            self.label_copyId.visible = true;
            self.ico_boss.visible = false;
            self.label_copyId.text = serverId + "服";
            self.label_copy_name.text = gc.c_prop.offersDoor[door] + "门";
        };
        p._updateRes = function () {
            var self = this;
            self.label_yuanbao.text = gd.userCtrl.getDiamond();
            self.label_gold.text = gd.userCtrl.getGold() > 1000000 ? (gd.userCtrl.getGold() / 10000 >> 0) + "万" : gd.userCtrl.getGold();
            self.label_lvl.text = gd.userCtrl.getLvl();
            self.label_combat.text = gd.userCtrl.getCombat() + "";
            self.label_vip.text = gd.userCtrl.getVip().toString();
        };
        p._updateExp = function (exp) {
            var self = this;
            var curLvl = gd.userCtrl.getLvl();
            var total = mo.getJSONWithFileName(gc.cfg_c_lvl)[curLvl][gc.c_lvl_minExp] + exp;
            // 解决报错的问题
            if (self.pb_exp && mo.utils.getExtData(self.pb_exp, 'progressOpt') != null) {
                mo.gui.helper.progress(self.pb_exp, total - self._total);
            }
        };
        p._tap_btn_plus_gold = function () {
            var self = this;
            //ws.recordEvent("点击主城【金币加号】", 1);
            gd.userCtrl.buyGold(function () { }, self);
        };
        p._tap_btn_plus_yuanbao = function () {
            var self = this;
            //ws.recordEvent("点击主城【元宝加号】", 1);
            mo.moduleMgr.pushModule(g_consts.moduleId.recharge);
        };
        p._tap_img_vip = function () {
            var self = this;
            //ws.recordEvent("点击主城【VIP】", 1);
            mo.moduleMgr.pushModule(g_consts.moduleId.vip);
        };
        p._tap_img_detail = function () {
            var fs = mo.moduleMgr.curModule.target;
            if (fs) {
                fs.layer.showProfileInfo();
            }
        };
        return BaseTopBar;
    })(mo.gui.MenuLayer);
    g_base.BaseTopBar = BaseTopBar;
    egret.registerClass(BaseTopBar,"g_base.BaseTopBar");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/7/24.
 */
var g_base;
(function (g_base) {
    var BaseTopRole = (function (_super) {
        __extends(BaseTopRole, _super);
        function BaseTopRole() {
            _super.apply(this, arguments);
        }
        var d = __define,c=BaseTopRole,p=c.prototype;
        //@override
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self._curHeroIdx = 0;
            self._redKeyArr = [
                [
                    gc.c_prop.pointRedKey.role1_main,
                    gc.c_prop.pointRedKey.role2_main,
                    gc.c_prop.pointRedKey.role3_main,
                    gc.c_prop.pointRedKey.role4_main
                ],
                [
                    gc.c_prop.pointRedKey.role1_dazao,
                    gc.c_prop.pointRedKey.role2_dazao,
                    gc.c_prop.pointRedKey.role3_dazao
                ],
                []
            ];
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.registerClassByKey(gd.UserCtrl, gc.dsConsts.UserEntity.redPointData.toString(), self.checkRedPoint);
            self.registerClassByKey(gd.HeroEntityCtrl, gc.dsConsts.HeroEntity.combat.toString(), self._updateCombat);
            self.label_nickName.visible = false;
            self.ico_hero0.onClick(self.onIconClick, self);
            self.ico_hero1.onClick(self.onIconClick, self);
            self.ico_hero2.onClick(self.onIconClick, self);
            self.ico_hero3.onClick(self.onIconClick, self);
            var hec = gd.heroCtrl.getHeroByIndex(0);
            self._curHeroIdx = 0;
            self.label_job.text = gc.c_prop.heroJob[hec.job];
            self.label_combat.text = hec.combat;
            self.setRoleSelected(self.ico_hero0);
            self.dataChanged();
        };
        p._updateCombat = function () {
            var self = this;
            var hec = gd.heroCtrl.getHeroByIndex(self._curHeroIdx);
            self.label_combat.text = hec.combat;
        };
        p.hideCombat = function () {
            var self = this;
            self.label_combat.visible = false;
            self.ico_combat.visible = false;
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            self.ico_hero0.setData({ index: 0, heroCtrl: gd.heroCtrl });
            self.ico_hero1.setData({ index: 1, heroCtrl: gd.heroCtrl });
            self.ico_hero2.setData({ index: 2, heroCtrl: gd.heroCtrl });
            self.ico_hero3.setData({ index: 3, heroCtrl: gd.heroCtrl });
            self.checkRedPoint();
            if (!self.data.redType || self.data.redType == 0) {
                self.img_title.source = "ntc_text_role";
            }
            else if (self.data.redType == 1) {
                self.img_title.source = "ntc_text_forge";
            }
            else if (self.data.redType == 2) {
                self.img_title.source = "tit_txt_g_fabaosf";
            }
        };
        p.checkRedPoint = function () {
            var self = this;
            var redType = self.data.redType || 0; //红点类型 0 角色 1 打造
            self.ico_hero0.setRedPointShow(gd.pointCtrl.isShow(self._redKeyArr[redType][0]));
            self.ico_hero1.setRedPointShow(gd.pointCtrl.isShow(self._redKeyArr[redType][1]));
            self.ico_hero2.setRedPointShow(gd.pointCtrl.isShow(self._redKeyArr[redType][2]));
            self.ico_hero3.setRedPointShow(gd.pointCtrl.isShow(self._redKeyArr[redType][3]));
        };
        p.setRoleSelected = function (item) {
            var self = this;
            self.ico_hero0.setSelected(false);
            self.ico_hero1.setSelected(false);
            self.ico_hero2.setSelected(false);
            self.ico_hero3.setSelected(false);
            item.setSelected(true);
        };
        p.onIconClick = function (item) {
            var self = this;
            var index = item.data.index;
            if (gd.heroCtrl.hasHeroByIndex(index)) {
                gd.heroCtrl.curSelRoleIdx = index;
                self.setRoleSelected(item);
                self._curHeroIdx = index;
                var hec = gd.heroCtrl.getHeroByIndex(index);
                self.emitter.emit(self.__class.ON_HERO_CHANGED, hec, index, self);
                self.label_job.text = gc.c_prop.heroJob[hec.job];
                self.label_combat.text = hec.combat;
                return;
            }
            //进入解锁界面
            if (index < 3) {
                if (gd.heroCtrl.isToBeOpen(index)) {
                    g_base.CreateRole.create().setData({ action: 1 }).show().onClose(self._updateIcons, self);
                }
            }
            else {
                if (gd.userCtrl.get(gc.dsConsts.UserEntity.lvl) >= 145) {
                    g_base.Create4thRole.create().show().onClose(self._updateIcons, self);
                }
                else {
                    mo.showMsg(gc.id_c_msgCode.openRole4LvNotEnough);
                }
            }
        };
        p._updateIcons = function () {
            var self = this;
            self.ico_hero0.dataChanged();
            self.ico_hero1.dataChanged();
            self.ico_hero2.dataChanged();
            self.ico_hero3.dataChanged();
        };
        p.hide4thRole = function (hide) {
            var self = this;
            self.ico_hero3.visible = !hide;
            self.ico_hero3.includeInLayout = !hide;
        };
        BaseTopRole.ON_HERO_CHANGED = "on_hero_changed";
        return BaseTopRole;
    })(mo.gui.MenuLayer);
    g_base.BaseTopRole = BaseTopRole;
    egret.registerClass(BaseTopRole,"g_base.BaseTopRole");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/8/5.
 */
var g_base;
(function (g_base) {
    var BaseItemCell = (function (_super) {
        __extends(BaseItemCell, _super);
        function BaseItemCell() {
            _super.apply(this, arguments);
            this.tapShowDetail = false;
        }
        var d = __define,c=BaseItemCell,p=c.prototype;
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            var ico_item = self.ico_item;
            if (typeof data == 'object') {
                ico_item.setData({ itemId: data.itemId, count: data.count });
            }
            else {
                ico_item.setData({ itemId: data });
            }
        };
        p._tap_rect_touch = function (event) {
            var self = this;
            if (self.tapShowDetail) {
                g_base.BaseItemDetail.create().setData({ bdc: gd.BagDataCtrl.create(self.ico_item.get('itemId'), null) }).show();
            }
        };
        return BaseItemCell;
    })(mo.gui.ItemRenderer);
    g_base.BaseItemCell = BaseItemCell;
    egret.registerClass(BaseItemCell,"g_base.BaseItemCell");
})(g_base || (g_base = {}));

/**
 * Created by lihex on 9/19/15.
 */
var g_base;
(function (g_base) {
    var BaseTopMsg = (function (_super) {
        __extends(BaseTopMsg, _super);
        function BaseTopMsg() {
            _super.apply(this, arguments);
        }
        var d = __define,c=BaseTopMsg,p=c.prototype;
        //@override
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self._layerOpt.shownWithAction = false;
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
        };
        p.onEnter = function () {
            _super.prototype.onEnter.call(this);
            var self = this;
            mo.runAction(self.label_msg, mo.moveBy(5, mo.p(-self.width, 0)));
        };
        return BaseTopMsg;
    })(mo.gui.TopLayer);
    g_base.BaseTopMsg = BaseTopMsg;
    egret.registerClass(BaseTopMsg,"g_base.BaseTopMsg");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/7/24.
 */
var g_base;
(function (g_base) {
    var CloseInfoDlg = (function (_super) {
        __extends(CloseInfoDlg, _super);
        function CloseInfoDlg() {
            _super.apply(this, arguments);
        }
        var d = __define,c=CloseInfoDlg,p=c.prototype;
        //@override
        p.partAdded = function (name, instance) {
            _super.prototype.partAdded.call(this, name, instance);
            var self = this;
            // 设置默认的关闭按键
            var TAP = egret.TouchEvent.TOUCH_TAP;
            if (name == 'container') {
                var btn_info = instance.btn_info;
                if (btn_info)
                    btn_info.addEventListener(TAP, self._tap_btn_info, self);
            }
        };
        p._tap_btn_info = function () {
            var self = this;
            if (self._helpDataId != null) {
                g_base.BaseShowTip.create().setData({ id: self._helpDataId }).show();
            }
        };
        return CloseInfoDlg;
    })(mo.gui.Dlg);
    g_base.CloseInfoDlg = CloseInfoDlg;
    egret.registerClass(CloseInfoDlg,"g_base.CloseInfoDlg");
})(g_base || (g_base = {}));

/**
 * Created by Administrator on 2015/11/2.
 */
var g_base;
(function (g_base) {
    var GainWayItem = (function (_super) {
        __extends(GainWayItem, _super);
        function GainWayItem() {
            _super.apply(this, arguments);
        }
        var d = __define,c=GainWayItem,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var ary = self.data;
            if (ary.length && !ary.hasOwnProperty("label")) {
                var type = ary[0];
                var text = "";
                var texts = [null,
                    ["熔炼", "", "活动", "野外PK", "聊天", "签到", "充值", "VIP%s礼包"],
                    ["装备副本", "炼狱副本", "元神副本", "竞技场商店", "竞技场", "", "", "日常任务", "", "签到"],
                    ["", "技能", "", "翅膀", "", ""],
                    ["强化", "升星", "宝石", "", "", ""],
                    ["", "", "", "", "", ""],
                    ["", "", "商城", "", "", ""],
                    ["", "探宝"],
                    ["", "行会宝库"],
                    ["装备副本(110级以上)", "", "元神副本(玄冰古道1以上)"]
                ];
                // 1,0熔炼
                // 1,2活动
                // 1,3野外PK
                // 1,4聊天
                // 1,5签到
                // 1,6充值
                // 2,0装备副本
                // 2,1炼狱副本
                // 2,2元神副本
                // 2,10vip副本
                // 2,3竞技场商店
                // 2,4竞技场
                // 2,7日常任务
                // 3,1技能
                // 3,3翅膀
                // 4,0强化
                // 4,1升星
                // 4,2宝石
                // 6,1探宝
                // 6,2商城
                var moduleId = parseInt(ary[0]);
                var subModuleId = parseInt(ary[1]);
                var param = parseInt(ary[2] ? ary[2] : 0);
                var moduleParam;
                if (texts[moduleId]) {
                    text = texts[moduleId][subModuleId];
                }
                if (moduleId == 2 && param != 0) {
                    if (subModuleId == 10) {
                        var vip = param;
                        var vipCopyCfg = mo.getJSONWithFileNameAndID(gc.cfg_c_vipCopy, vip);
                        text = vipCopyCfg[gc.c_vipCopy_name];
                    }
                    else {
                        var copyId = param;
                        var copyInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_copy, copyId);
                        text = copyInfo[gc.t_copy_name];
                    }
                }
                else if (moduleId == 1 && param != 0) {
                    text = mo.STR.format(text, param);
                }
                else if (moduleId == 99) {
                    text = gc.c_prop.outActivityType[subModuleId];
                }
                self.label_copyName.text = text;
            }
        };
        return GainWayItem;
    })(mo.gui.ItemRenderer);
    g_base.GainWayItem = GainWayItem;
    egret.registerClass(GainWayItem,"g_base.GainWayItem");
})(g_base || (g_base = {}));

/**
 * Created by Administrator on 2015/9/28.
 */
var g_base;
(function (g_base) {
    var ItemMerge = (function (_super) {
        __extends(ItemMerge, _super);
        function ItemMerge() {
            _super.apply(this, arguments);
            this.curShowItemIds = [];
            this.curFromItemIds = [];
        }
        var d = __define,c=ItemMerge,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            self._Item_list_gainWay = g_base.GainWayItem;
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
        };
        p.onEnter = function () {
            _super.prototype.onEnter.call(this);
            var self = this;
            var itemId = self.data.itemId;
            self.setShowItemId(itemId, 0);
        };
        p.setShowItemId = function (itemId, index) {
            var self = this;
            var topItem;
            var itemInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
            if (!gd.heroCtrl.isRuneCom(itemId)) {
                if (g_base.GainWay.canBuyFromShop(itemId)) {
                    g_base.GainWayShop.create().setData({ itemId: itemId }).show();
                }
                else {
                    g_base.GainWay.create().setData({ itemId: itemId }).show();
                }
                self.close();
                return;
            }
            self.curShowItemIds.length = index + 1;
            self.curShowItemIds[index] = itemId;
            self.ico_arrow0.visible = false;
            self.ico_arrow1.visible = false;
            self.ico_topItem1.visible = false;
            self.ico_topItem2.visible = false;
            if (index == 0) {
                topItem = self.ico_topItem0;
            }
            else if (index == 1) {
                self.ico_topItem1.visible = true;
                topItem = self.ico_topItem1;
                self.ico_arrow0.visible = true;
            }
            else if (index == 2) {
                self.ico_topItem1.visible = self.ico_topItem2 = true;
                topItem = self.ico_topItem2;
                self.ico_arrow0.visible = self.ico_arrow1.visible = true;
            }
            self.ico_light.x = topItem.x - 4;
            self.ico_light.y = topItem.y - 4;
            self.label_name.text = itemInfo[gc.t_item_name];
            topItem.setData({ itemId: itemId, count: 0 });
            self.ico_toItem.setData({ itemId: itemId, count: 0 });
            self.btn_back.visible = self.btn_merge.visible = false;
            if (!gd.heroCtrl.isRuneCom(itemId)) {
                self.grp_merge.visible = false;
                var dropIdDatas = [].concat(itemInfo[gc.t_item_dropId] || []);
                if (dropIdDatas.length) {
                    self.list_gainWay.dataProvider = new egret.gui.ArrayCollection(dropIdDatas);
                    self.list_gainWay.visible = true;
                }
                else {
                    self.list_gainWay.visible = false;
                }
                self.btn_back.visible = true;
            }
            else {
                self.list_gainWay.visible = false;
                self.grp_merge.visible = true;
                var compInfo = mo.getJSONWithFileNameAndID(gc.cfg_c_compound, itemId);
                var compoundNeedObj = {};
                var reqItems1 = compInfo[gc.c_compound_reqItems1];
                self.curFromItemIds.length = 0;
                if (reqItems1 != 0) {
                    compoundNeedObj[reqItems1] = compInfo[gc.c_compound_reqCount1];
                    self.curFromItemIds.push(reqItems1);
                }
                var reqItems2 = compInfo[gc.c_compound_reqItems2];
                if (reqItems2 != 0) {
                    compoundNeedObj[reqItems2] = compInfo[gc.c_compound_reqCount2];
                    self.curFromItemIds.push(reqItems2);
                }
                var reqItems3 = compInfo[gc.c_compound_reqItems3];
                if (reqItems3 != 0) {
                    compoundNeedObj[reqItems3] = compInfo[gc.c_compound_reqCount3];
                    self.curFromItemIds.push(reqItems3);
                }
                var reqItems4 = compInfo[gc.c_compound_reqItems4];
                if (reqItems4 != 0) {
                    compoundNeedObj[reqItems4] = compInfo[gc.c_compound_reqCount4];
                    self.curFromItemIds.push(reqItems4);
                }
                self.ico_line1.visible = false;
                self.ico_line2.visible = false;
                self.ico_line3.visible = false;
                self.ico_fromItem1.visible = false;
                self.ico_fromItem2.visible = false;
                self.ico_fromItem0.x = 87;
                if (self.curFromItemIds.length == 1) {
                    self.ico_line1.visible = true;
                }
                else if (self.curFromItemIds.length == 2) {
                    self.ico_line2.visible = true;
                    self.ico_fromItem1.visible = true;
                    self.ico_fromItem0.x = 0;
                }
                else if (self.curFromItemIds.length == 3) {
                    self.ico_line3.visible = true;
                    self.ico_fromItem1.visible = true;
                    self.ico_fromItem2.visible = true;
                    self.ico_fromItem0.x = 0;
                }
                var fromItem;
                for (var i = 0; i < self.curFromItemIds.length; ++i) {
                    var itemId = self.curFromItemIds[i];
                    var needCount = compoundNeedObj[itemId];
                    var curCount = gd.heroCtrl.getRealmCount(itemId);
                    if (i == 0)
                        fromItem = self.ico_fromItem0;
                    else if (i == 1)
                        fromItem = self.ico_fromItem1;
                    else if (i == 2)
                        fromItem = self.ico_fromItem2;
                    fromItem.setData({ itemId: itemId, pileCount: curCount, count: needCount });
                }
                self.btn_merge.visible = true;
            }
        };
        p._tap_ico_topItem0 = function () {
            var self = this;
            self.setShowItemId(self.curShowItemIds[0], 0);
        };
        p._tap_ico_topItem1 = function () {
            var self = this;
            self.setShowItemId(self.curShowItemIds[1], 1);
        };
        p._tap_ico_fromItem0 = function () {
            var self = this;
            self.setShowItemId(self.curFromItemIds[0], self.curShowItemIds.length);
        };
        p._tap_ico_fromItem1 = function () {
            var self = this;
            self.setShowItemId(self.curFromItemIds[1], self.curShowItemIds.length);
        };
        p._tap_ico_fromItem2 = function () {
            var self = this;
            self.setShowItemId(self.curFromItemIds[2], self.curShowItemIds.length);
        };
        p._tap_btn_merge = function () {
            var self = this;
            var itemId = self.data.itemId;
            gd.equipCtrl.compound(itemId, function () {
                self.close();
                if (self.data.delegate) {
                    self.data.delegate.reset();
                }
            }, self);
        };
        p._tap_btn_back = function () {
            var self = this;
            if (self.curShowItemIds.length <= 1)
                self.close();
            else {
                self.setShowItemId(self.curShowItemIds[self.curShowItemIds.length - 2], self.curShowItemIds.length - 2);
            }
        };
        p._click_list_gainWay = function (e) {
            var item = e.item;
            // 1,0熔炼
            // 1,2活动
            // 1,3野外PK
            // 1,4聊天
            // 1,5签到
            // 1,6充值
            // 2,0装备副本
            // 2,1炼狱副本
            // 2,2元神副本
            // 2,10vip副本
            // 2,3竞技场商店
            // 2,4竞技场
            // 2,7日常任务
            // 3,1技能
            // 3,3翅膀
            // 4,0强化
            // 4,1升星
            // 4,2宝石
            // 6,1探宝
            // 6,2商城
            var self = this;
            var ary = item;
            var moduleId = parseInt(ary[0]);
            var subModuleId = parseInt(ary[1]);
            var param = parseInt(ary[2] ? ary[2] : 0);
            var moduleParam;
            switch (moduleId) {
                case 6:
                    moduleParam = { subModuleId: subModuleId };
                    mo.moduleMgr.runModule(g_consts.moduleId.shop, moduleParam);
                    break;
                case 4:
                    moduleParam = { subModuleId: subModuleId };
                    mo.moduleMgr.runModule(g_consts.moduleId.forge, moduleParam);
                    break;
                case 3:
                    moduleParam = { subModuleId: subModuleId };
                    mo.moduleMgr.runModule(g_consts.moduleId.role, moduleParam);
                    break;
                case 2:
                    if (param != 0) {
                        if (subModuleId == 10) {
                            mo.moduleMgr.runModule(g_consts.moduleId.vipCopy, { vip: param });
                        }
                        else {
                            var copyId = param;
                            if (!gd.copyCtrl.isCopyLocked(copyId)) {
                                g_base.CopyLoot.create().setData({ copyId: copyId }).show();
                            }
                            else {
                                mo.showMsg("该副本还未解锁！");
                            }
                        }
                    }
                    else {
                        moduleParam = { subModuleId: subModuleId };
                        mo.moduleMgr.runModule(g_consts.moduleId.home, moduleParam);
                    }
                    break;
                case 1:
                    moduleParam = { subModuleId: subModuleId };
                    mo.moduleMgr.runModule(g_consts.moduleId.fight, moduleParam);
                    break;
            }
        };
        return ItemMerge;
    })(mo.gui.Dlg);
    g_base.ItemMerge = ItemMerge;
    egret.registerClass(ItemMerge,"g_base.ItemMerge");
})(g_base || (g_base = {}));

/**
 * Created by Administrator on 2015/11/5.
 */
var g_base;
(function (g_base) {
    var GainWay = (function (_super) {
        __extends(GainWay, _super);
        function GainWay() {
            _super.apply(this, arguments);
        }
        var d = __define,c=GainWay,p=c.prototype;
        GainWay.canBuyFromShop = function (itemId) {
            var itemInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
            var dropIdDatas = [].concat(itemInfo[gc.t_item_dropId] || []);
            var isFromShop = false;
            for (var i = 0; i < dropIdDatas.length; ++i) {
                var ary = dropIdDatas[i];
                if (ary[0] == 6 && ary[1] == 2) {
                    isFromShop = true;
                    break;
                }
            }
            return isFromShop;
        };
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            self._Item_list_gainWay = g_base.GainWayItem;
        };
        p.onEnter = function () {
            _super.prototype.onEnter.call(this);
            var self = this;
            var itemId = self.data.itemId;
            var itemInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
            self.ico_item.setData({ itemId: itemId, count: 0 });
            self.label_name.text = itemInfo[gc.t_item_name];
            self.showGainWayList();
        };
        p.showGainWayList = function () {
            var self = this;
            var itemId = self.data.itemId;
            var itemInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
            var dropIdDatas = itemInfo[gc.t_item_dropId] || [];
            var exActivity = gd.activityCtrl.getLotteryActivity();
            if (!exActivity) {
                for (var i = 0; i < dropIdDatas.length; ++i) {
                    var ary = dropIdDatas[i];
                    var moduleId = parseInt(ary[0]);
                    if (moduleId == 7) {
                        dropIdDatas.splice(i, 1);
                        break;
                    }
                }
            }
            self.list_gainWay.dataProvider = new egret.gui.ArrayCollection(dropIdDatas);
            self.label_noOut.visible = dropIdDatas.length == 0;
            self.list_gainWay.visible = dropIdDatas.length != 0;
        };
        p._tap_btn_back = function () {
            var self = this;
            self.close();
        };
        p._click_list_gainWay = function (e) {
            var item = e.item;
            // 1,0熔炼
            // 1,2活动
            // 1,3野外PK
            // 1,4聊天
            // 1,5签到
            // 1,6充值
            // 2,0装备副本
            // 2,1炼狱副本
            // 2,2元神副本
            // 2,10vip副本
            // 2,3竞技场商店
            // 2,4竞技场
            // 2,7日常任务
            // 3,1技能
            // 3,3翅膀
            // 4,0强化
            // 4,1升星
            // 4,2宝石
            // 6,1探宝
            // 6,2商城
            var self = this;
            var ary = item;
            var moduleId = parseInt(ary[0]);
            var subModuleId = parseInt(ary[1]);
            var param = parseInt(ary[2] ? ary[2] : 0);
            var moduleParam;
            switch (moduleId) {
                case 8:
                    moduleParam = { subModuleId: subModuleId };
                    gd.guildCtrl.getInfo(function (data) {
                        var isGuild = data[0];
                        if (!isGuild) {
                            mo.showMsg(gc.id_c_msgCode.noGuild);
                        }
                        else {
                            mo.moduleMgr.runModule(g_consts.moduleId.guildMineLayer, moduleParam);
                        }
                    }, self);
                    //mo.moduleMgr.runModule(g_consts.moduleId.guildMineLayer, moduleParam);
                    break;
                case 7:
                    moduleParam = { subModuleId: subModuleId };
                    mo.moduleMgr.runModule(g_consts.moduleId.treasure, moduleParam);
                    break;
                case 6:
                    moduleParam = { subModuleId: subModuleId };
                    mo.moduleMgr.runModule(g_consts.moduleId.shop, moduleParam);
                    break;
                case 4:
                    moduleParam = { subModuleId: subModuleId };
                    mo.moduleMgr.runModule(g_consts.moduleId.forge, moduleParam);
                    break;
                case 3:
                    moduleParam = { subModuleId: subModuleId };
                    mo.moduleMgr.runModule(g_consts.moduleId.role, moduleParam);
                    break;
                case 2:
                    if (param != 0) {
                        if (subModuleId == 10) {
                            mo.moduleMgr.runModule(g_consts.moduleId.vipCopy, { vip: param });
                        }
                        else {
                            var copyId = param;
                            if (!gd.copyCtrl.isCopyLocked(copyId)) {
                                g_base.CopyLoot.create().setData({ copyId: copyId }).show();
                            }
                            else {
                                mo.showMsg("该副本还未解锁！");
                            }
                        }
                    }
                    else {
                        moduleParam = { subModuleId: subModuleId };
                        mo.moduleMgr.runModule(g_consts.moduleId.home, moduleParam);
                    }
                    break;
                case 1:
                    process.nextTick(function () {
                        moduleParam = { subModuleId: subModuleId, param: param };
                        mo.moduleMgr.runModule(g_consts.moduleId.fight, moduleParam);
                    });
                    break;
                case 99:
                    break;
            }
        };
        return GainWay;
    })(mo.gui.Dlg);
    g_base.GainWay = GainWay;
    egret.registerClass(GainWay,"g_base.GainWay");
})(g_base || (g_base = {}));

/**
 * Created by Administrator on 2015/11/5.
 */
/**
 * Created by Administrator on 2015/11/5.
 */
var g_base;
(function (g_base) {
    var GainWayShop = (function (_super) {
        __extends(GainWayShop, _super);
        function GainWayShop() {
            _super.apply(this, arguments);
        }
        var d = __define,c=GainWayShop,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
        };
        p.onEnter = function () {
            _super.prototype.onEnter.call(this);
            var self = this;
            var count = self.data.count || 0;
            if (count < 1)
                count = 1;
            self.buyNum = count;
            var shopType = self.getShopType();
            gd.shopCtrl.getList(shopType, function (itemList) {
                for (var i = 0; i < itemList.length; ++i) {
                    var shopItem = itemList[i];
                    //[物品id，数量，货币类型，货币价格,剩余购买次数]
                    var itemId = shopItem[0];
                    if (itemId == self.data.itemId) {
                        self.shopItem = shopItem;
                        self.index = i;
                        self.label_costOne.text = shopItem[3];
                        self.showNum();
                        break;
                    }
                }
            }, self);
        };
        p.showGainWayList = function () {
            var self = this;
            var itemId = self.data.itemId;
            var itemInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
            var dropIdDatas = [].concat(itemInfo[gc.t_item_dropId] || []);
            if (dropIdDatas.length) {
                for (var i = 0; i < dropIdDatas.length; ++i) {
                    var ary = dropIdDatas[i];
                    if (ary[0] == 6 && ary[1] == 2) {
                        dropIdDatas.splice(i--, 1);
                        break;
                    }
                }
                self.list_gainWay.dataProvider = new egret.gui.ArrayCollection(dropIdDatas);
            }
            self.label_noOut.visible = dropIdDatas.length == 0;
            self.list_gainWay.visible = dropIdDatas.length != 0;
        };
        p.getShopType = function () {
            var self = this;
            var itemInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_item, self.data.itemId);
            var shopType = 0;
            if (itemInfo[gc.t_item_type] == gc.c_prop.itemTypeKey.gem) {
                shopType = gc.c_prop.shopTypeKey.gem;
            }
            else {
                shopType = gc.c_prop.shopTypeKey.normal;
            }
            return shopType;
        };
        p.setCurShopItem = function () {
            var self = this;
            var shopItem = self.shopItem;
            var itemId = shopItem[0];
            var itemNum = shopItem[1];
            var moneyType = shopItem[2];
            var moneyNum = shopItem[3];
            var leftNum = shopItem[4];
        };
        p._tap_btn_sub = function () {
            var self = this;
            if (self.buyNum > 1) {
                self.buyNum--;
                self.showNum();
            }
        };
        p._tap_btn_add = function () {
            var self = this;
            if (self.buyNum < self._getMaxBuyNum()) {
                self.buyNum++;
                self.showNum();
            }
        };
        p._tap_btn_min = function () {
            var self = this;
            self.buyNum -= 10;
            if (self.buyNum < 1)
                self.buyNum = 1;
            self.showNum();
        };
        p._tap_btn_max = function () {
            var self = this;
            self.buyNum += 10;
            if (self.buyNum > self._getMaxBuyNum())
                self.buyNum = self._getMaxBuyNum();
            self.showNum();
        };
        p.showNum = function () {
            var self = this;
            self.label_num.text = self.buyNum;
            self.label_costAll.text = self.buyNum * self.shopItem[3];
        };
        p._getMaxBuyNum = function () {
            var self = this;
            var shopItem = self.shopItem;
            var moneyType = shopItem[2];
            var itemId = utils.getCurrencyTypeItemId(moneyType);
            var leftNum = shopItem[4];
            var price = shopItem[3];
            if (leftNum < 0) {
                return Math.max(1, Math.floor(gd.userCtrl.getItemNum(itemId) / price));
            }
            return leftNum;
        };
        p._tap_btn_ok = function () {
            var self = this;
            var shopType = self.getShopType();
            gd.shopCtrl.buy(shopType, self.index, self.buyNum, function () {
                self.close();
            }, self);
        };
        p._tap_btn_recharge = function () {
            mo.moduleMgr.pushModule(g_consts.moduleId.recharge);
        };
        return GainWayShop;
    })(g_base.GainWay);
    g_base.GainWayShop = GainWayShop;
    egret.registerClass(GainWayShop,"g_base.GainWayShop");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/7/24.
 */
var g_base;
(function (g_base) {
    g_base.isShowOffline = false;
    var Notice = (function (_super) {
        __extends(Notice, _super);
        function Notice() {
            _super.apply(this, arguments);
        }
        var d = __define,c=Notice,p=c.prototype;
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self.outsideClosable = true;
        };
        p.onExit = function () {
            _super.prototype.onExit.call(this);
            var count = mo.getLocalStorageItem("noticeCloseCount");
            mo.setLocalStorageItem("noticeCloseCount", parseInt(count) + 1);
            if (!g_base.isShowOffline) {
                g_base.isShowOffline = true;
                var offlineData = (gd.userCtrl && gd.userCtrl.offLineData) || [];
                if (offlineData[0] > 0) {
                    mo.showMsg(gc.id_c_msgCode.offlineGain, { offlineProfit: offlineData });
                }
            }
        };
        //@override
        p._handleExtArg = function (arg) {
            var self = this;
            var sysNotice = arg.sysNotice;
            if (sysNotice) {
                self.label_title.text = sysNotice[gc.dsConsts.NoticeEntity.title];
                self.label_text.text = sysNotice[gc.dsConsts.NoticeEntity.content];
                var exData = sysNotice[gc.dsConsts.NoticeEntity.exData];
                if (exData) {
                    var icon = exData['1'];
                    if (icon) {
                        var url = "resource/ui2/ui_notice/" + icon;
                        RES.getResByUrl(url, function (texture) {
                            self.ico_head.source = texture;
                        }, self, RES.ResourceItem.TYPE_IMAGE);
                    }
                }
            }
        };
        return Notice;
    })(mo.gui.MsgDlg);
    g_base.Notice = Notice;
    egret.registerClass(Notice,"g_base.Notice");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/7/24.
 */
var g_base;
(function (g_base) {
    var NoticeDlg = (function (_super) {
        __extends(NoticeDlg, _super);
        function NoticeDlg() {
            _super.apply(this, arguments);
        }
        var d = __define,c=NoticeDlg,p=c.prototype;
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self.outsideClosable = true;
        };
        p._tap_ico_title_1 = function () {
            g_base.NoticeContentDlg.create().setData({ notices: gd.NoticeCtrl.getTpyeNotice(3) }).show();
        };
        p._tap_ico_title_4 = function () {
            g_base.NoticeContentDlg.create().setData({ notices: gd.NoticeCtrl.getTpyeNotice(4) }).show();
        };
        p._tap_ico_title_2 = function () {
            g_base.NoticeContentDlg.create().setData({ notices: gd.NoticeCtrl.getTpyeNotice(2) }).show();
        };
        return NoticeDlg;
    })(mo.gui.Dlg);
    g_base.NoticeDlg = NoticeDlg;
    egret.registerClass(NoticeDlg,"g_base.NoticeDlg");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/7/24.
 */
var g_base;
(function (g_base) {
    var NoticeContentDlg = (function (_super) {
        __extends(NoticeContentDlg, _super);
        function NoticeContentDlg() {
            _super.apply(this, arguments);
        }
        var d = __define,c=NoticeContentDlg,p=c.prototype;
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self.outsideClosable = true;
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var notices = self.data.notices;
            if (notices.length == 0) {
                self.label_title.text = "暂无";
                self.label_text.text = "";
                return;
            }
            var sysNotice = notices[0];
            var type = sysNotice[gc.dsConsts.NoticeEntity.iconType];
            if (type != 4) {
                self.label_title.text = sysNotice[gc.dsConsts.NoticeEntity.title];
                self.label_text.text = sysNotice[gc.dsConsts.NoticeEntity.content];
                var exData = sysNotice[gc.dsConsts.NoticeEntity.exData];
                if (exData) {
                    var icon = exData['1'];
                    if (icon) {
                        var url = "resource/ui2/ui_notice/" + icon;
                        RES.getResByUrl(url, function (texture) {
                            self.ico_head.source = texture;
                        }, self, RES.ResourceItem.TYPE_IMAGE);
                    }
                }
            }
            else {
                self.label_title.text = "跨服战况";
                var str = "";
                for (var i = 0; i < notices.length; ++i) {
                    var notice = notices[i];
                    str += notice[gc.dsConsts.NoticeEntity.content] + "\n\n";
                }
                self.label_text.text = str;
            }
        };
        return NoticeContentDlg;
    })(mo.gui.Dlg);
    g_base.NoticeContentDlg = NoticeContentDlg;
    egret.registerClass(NoticeContentDlg,"g_base.NoticeContentDlg");
})(g_base || (g_base = {}));

/**
 * Created by Administrator on 2015/11/19.
 */
var g_base;
(function (g_base) {
    var FirstEnterGame = (function (_super) {
        __extends(FirstEnterGame, _super);
        function FirstEnterGame() {
            _super.apply(this, arguments);
        }
        var d = __define,c=FirstEnterGame,p=c.prototype;
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            var channel = mo_channel.getCurChannel();
            if (channel == 'weibo' || channel == '100191') {
                self.ico_sanpin_txt.visible = false;
            }
        };
        return FirstEnterGame;
    })(mo.gui.MsgDlg);
    g_base.FirstEnterGame = FirstEnterGame;
    egret.registerClass(FirstEnterGame,"g_base.FirstEnterGame");
})(g_base || (g_base = {}));

var g_base;
(function (g_base) {
    var BaseShowMsg = (function (_super) {
        __extends(BaseShowMsg, _super);
        function BaseShowMsg() {
            _super.apply(this, arguments);
        }
        var d = __define,c=BaseShowMsg,p=c.prototype;
        //@override
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self.outsideClosable = true;
            mo.gui.helper.setSkinName(this, g_base.BaseShowTip.__className);
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            self.label_tips.text = self.data.msg;
            // 是否自动关闭
            var interval = self.data.interval;
            if (interval != null) {
                self._timer = egret.setTimeout(self.close, self, interval * 1000);
            }
            process.nextTick(function () {
                process.nextTick(function () {
                    self.ico_bg.height = self.label_tips.y * 2 + self.label_tips.height;
                    if (self._timer) {
                        self.onClose(function () {
                            egret.clearTimeout(self._timer);
                            self._timer = null;
                        });
                    }
                });
            });
        };
        return BaseShowMsg;
    })(mo.gui.Dlg);
    g_base.BaseShowMsg = BaseShowMsg;
    egret.registerClass(BaseShowMsg,"g_base.BaseShowMsg");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/7/24.
 */
var g_base;
(function (g_base) {
    var BaseShowTip = (function (_super) {
        __extends(BaseShowTip, _super);
        function BaseShowTip() {
            _super.apply(this, arguments);
        }
        var d = __define,c=BaseShowTip,p=c.prototype;
        //@override
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self.outsideClosable = true;
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var info = mo.getJSONWithFileNameAndID(gc.cfg_c_help, self.data.id);
            var param1 = self.data.param1;
            var param2 = self.data.param2;
            var param3 = self.data.param3;
            if (param1 != undefined && param2 != undefined && param3 != undefined) {
                self.label_tips.text = mo.STR.format(info[gc.c_help_helpText], param1, param2, param3);
            }
            else if (param1 != undefined && param2 != undefined) {
                self.label_tips.text = mo.STR.format(info[gc.c_help_helpText], param1, param2);
            }
            else if (param1 != undefined) {
                self.label_tips.text = mo.STR.format(info[gc.c_help_helpText], param1);
            }
            else {
                self.label_tips.text = info[gc.c_help_helpText];
            }
            process.nextTick(function () {
                process.nextTick(function () {
                    self.ico_bg.height = self.label_tips.y * 2 + self.label_tips.height;
                });
            });
        };
        return BaseShowTip;
    })(mo.gui.Dlg);
    g_base.BaseShowTip = BaseShowTip;
    egret.registerClass(BaseShowTip,"g_base.BaseShowTip");
})(g_base || (g_base = {}));

var g_base;
(function (g_base) {
    g_base.baseShowAnnounce = null;
    var BaseShowAnnounce = (function (_super) {
        __extends(BaseShowAnnounce, _super);
        function BaseShowAnnounce() {
            _super.apply(this, arguments);
        }
        var d = __define,c=BaseShowAnnounce,p=c.prototype;
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            mo.gui.helper.setSkinName(this, g_base.BaseShowTip.__className);
            this.outsideClosable = false;
            self.dlgParam = {};
            self.msgData = {};
            self.msgArgs = [];
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            //self.label_tips.text = self.data.data;
            self.curAnnounce = self.data[0];
            var sysArgs = self.curAnnounce[gc.dsConsts.ChatData.sysArgs];
            self.label_tips.text = sysArgs[1];
            // 自动关闭
            var interval = sysArgs[sysArgs.length - 1];
            //self.btn_close.visible = interval <= 0;
            process.nextTick(function () {
                process.nextTick(function () {
                    self.ico_bg.height = self.label_tips.y * 2 + self.label_tips.height;
                    if (interval > 0) {
                        self.curTimer = egret.setTimeout(self.close, self, interval * 1000);
                    }
                    self.onClose(function () {
                        // 启动下一个
                        g_base.baseShowAnnounce = null;
                        // 关闭计时器
                        egret.clearTimeout(self.curTimer);
                        self.curTimer = null;
                        // 应用规则，开始下一个
                        gd.hoodinnCtlr.delAnnounce(self.curAnnounce[gc.dsConsts.ChatData.uniqueId]);
                        var datas = gd.hoodinnCtlr.getAllAnnounces();
                        if (datas.length)
                            g_base.baseShowAnnounce = g_base.BaseShowAnnounce.create().setData(datas).show();
                    });
                });
            });
        };
        return BaseShowAnnounce;
    })(mo.gui.MsgDlg);
    g_base.BaseShowAnnounce = BaseShowAnnounce;
    egret.registerClass(BaseShowAnnounce,"g_base.BaseShowAnnounce");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/7/24.
 */
var g_base;
(function (g_base) {
    var BaseItemDetail = (function (_super) {
        __extends(BaseItemDetail, _super);
        function BaseItemDetail() {
            _super.apply(this, arguments);
            this.outsideClosable = true;
        }
        var d = __define,c=BaseItemDetail,p=c.prototype;
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            this.ico_item.label_text.visible = false;
            this.label_specialEquip.visible = false;
            this.label_locked.visible = false;
            this.label_unlocked.visible = false;
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var bdc = self.data.bdc;
            self.ico_item.set('itemId', bdc.tempId);
            self.label_name.text = bdc.name;
            self.grp_equip.visible = false;
            self.grp_item_sale.visible = false;
            if (bdc.isEquip()) {
                self.grp_equip.visible = true;
                self._setEquipInfo();
                self.img_bg.height = 440;
            }
            else {
                self._setItemInfo();
            }
            var isBag = self.data['isBag'];
            if (!isBag || isBag == 0) {
                self.grp_equip.visible = false;
                self.grp_item_sale.visible = false;
                self.btn_ok.visible = true;
                self.img_bg.height = 400;
            }
        };
        p._calculateRewards = function () {
            var self = this;
            self.label_items.text = "";
            if (self.grp_gold.parent)
                self.grp_gold_container.removeElement(self.grp_gold);
            if (self.grp_yuanbao.parent)
                self.grp_gold_container.removeElement(self.grp_yuanbao);
            for (var rId in self.rewards) {
                var rObj = self.rewards[rId];
                if (rId == 99) {
                    if (!self.grp_gold.parent)
                        self.grp_gold_container.addElement(self.grp_gold);
                    self.label_gold.text = "获得: " + rObj['c'] * self.buyNum;
                }
                else if (rId == 200) {
                    if (!self.grp_yuanbao.parent)
                        self.grp_gold_container.addElement(self.grp_yuanbao);
                    self.label_yuanbao.text = "" + rObj['c'] * self.buyNum;
                }
                else {
                    self.label_items.text = self.label_items.text + " " + rObj['n'] + "x" + rObj['c'] * self.buyNum;
                }
            }
            process.nextTick(function () {
                process.nextTick(function () {
                    self.img_bg.height = self.grp_item_sale.y - self.img_bg.y + self.grp_item_sale.height + 20;
                });
            });
        };
        p._setItemInfo = function () {
            var self = this;
            this.ico_item.label_text.visible = false;
            var bdc = self.data.bdc;
            self.label_desc1.text = mo.STR.format("需求等级Lv%s", bdc.level);
            self.label_desc2.text = bdc.note;
            self.label_desc3.visible = false;
            var sellitem = mo.getJSONWithFileName(gc.cfg_t_sellItem);
            if (sellitem[bdc.tempId]) {
                self.rewards = {};
                //可以售卖的物品
                self.buyNum = 1;
                self.grp_item_sale.visible = true;
                var reward_arr = sellitem[bdc.tempId][gc.t_sellItem_items];
                for (var x = 0; x < reward_arr.length; x++) {
                    var rId = reward_arr[x][0];
                    var rCount = reward_arr[x][1];
                    var now = self.rewards[rId];
                    if (!now) {
                        var item = mo.getJSONWithFileNameAndID(gc.cfg_t_item, rId);
                        self.rewards[rId] = { 'c': rCount, 'n': item[gc.t_item_name] };
                    }
                    else {
                        self.rewards[rId]['c'] = now['c'] + rCount;
                    }
                }
                self._calculateRewards();
            }
            else {
                //不能售卖的物品
                self.grp_item_sale.visible = false;
                self.btn_ok.visible = true;
                self.img_bg.height = 395;
                self.btn_ok.icon = "btn_txt_g_ok";
                if (bdc.type == gc.c_prop.itemTypeKey.custom) {
                    self.btn_ok.icon = "btn_txt_g_dingzisfg";
                }
            }
        };
        p._setEquipInfo = function () {
            var self = this;
            this.ico_item.label_text.visible = true;
            var bdc = self.data.bdc;
            var extra = self.data.extra;
            //如果没有实例id,既不是传承装备或极品装备也没有额外指定extra,则认为是未知装备
            var isUnknow = (bdc.equipId == null && !extra
                && !(gd.equipCtrl.isSpecialEquip(bdc.tempId) || gd.equipCtrl.isRareEquip(bdc.tempId)));
            //在没有equipId的情况下,如果有extra值,则优先使用extra的值
            var evaluate = isUnknow ? 0 : (bdc.equipId ?
                gd.equipCtrl.getEquipEvaluate(bdc.equipId)
                : ((extra && extra[0] != null) ? extra[0] : gd.equipCtrl.getSpecialEquipEvaluate(bdc.tempId)));
            var addPropObj = isUnknow ? [] : (bdc.equipId ?
                gd.equipCtrl.getEquipExtraObj(bdc.equipId)
                : utils.kvArr2KvObj((extra && extra[1] != null) ? extra[1] : gd.equipCtrl.getSpecialEquipExtra(bdc.tempId)));
            self.label_desc1.text = isUnknow ?
                mo.STR.format("[ubb]部位: %s[/ubb]", bdc.equipTypeName)
                :
                    mo.STR.format("[ubb]评分: %s[/ubb][/br][ubb]部位: %s[/ubb]", evaluate, bdc.equipTypeName);
            var basePropArr = bdc.proptys;
            var strTemp1 = "[ubb]%s: %s[/ubb][ubb] +%s[/ubb][/br]";
            var strTemp2 = "[ubb color=0x2EAAF7]%s: %s[/ubb][ubb color=0x2EAAF7] +%s[/ubb][/br]";
            var str = "", propData;
            for (var i = 0, li = basePropArr.length; i < li; i++) {
                propData = basePropArr[i];
                var key = propData[0];
                var baseV = propData[1];
                str += mo.STR.format(i == 0 ? strTemp1 : strTemp2, gc.c_prop.equipProp[key], baseV, isUnknow ? " ?" : (addPropObj[key] || 0));
            }
            self.label_desc2.text = str;
            self.label_desc3.text = mo.STR.format("需求等级Lv%s", bdc.level);
            uiHelper.setLabelGreenOrRed(self.label_desc3, gd.userCtrl.getLvl() >= bdc.level);
            self.label_specialEquip.visible = gd.equipCtrl.isSpecialEquip(bdc.tempId);
            self.label_locked.visible = bdc.islock ? true : false;
            self.label_unlocked.visible = bdc.islock ? false : true;
            if (bdc.islock == 1) {
                self.grp_sell_btns.visible = false;
                self.btn_unlock.visible = true;
            }
            else {
                self.grp_sell_btns.visible = true;
                self.btn_unlock.visible = false;
            }
        };
        p._tap_btn_lock = function () {
            var self = this;
            var bdc = self.data.bdc;
            var cell = self.data["item"];
            if (bdc.isEquip()) {
                gd.equipCtrl.updateEquipItemLockStatus(bdc.equipId, true, function () {
                    bdc.islock = 1;
                    self.label_locked.visible = bdc.islock ? true : false;
                    self.label_unlocked.visible = bdc.islock ? false : true;
                    self.btn_lock.visible = false;
                    self.btn_unlock.visible = true;
                    cell.ico_lock.visible = true;
                    self.grp_sell_btns.visible = false;
                }, self);
            }
        };
        p._tap_btn_unlock = function () {
            var self = this;
            var bdc = self.data.bdc;
            var cell = self.data["item"];
            if (bdc.isEquip()) {
                gd.equipCtrl.updateEquipItemLockStatus(bdc.equipId, false, function () {
                    bdc.islock = 0;
                    self.label_locked.visible = bdc.islock ? true : false;
                    self.label_unlocked.visible = bdc.islock ? false : true;
                    self.btn_lock.visible = true;
                    self.btn_unlock.visible = false;
                    cell.ico_lock.visible = false;
                    self.grp_sell_btns.visible = true;
                }, self);
            }
        };
        p._tap_btn_sell = function () {
            var self = this;
            var bdc = self.data.bdc;
            var gotStr = "";
            var sellitem = mo.getJSONWithFileName(gc.cfg_t_sellItem);
            if (sellitem[bdc.tempId]) {
                var items = sellitem[bdc.tempId][gc.t_sellItem_items];
                for (var rId in items) {
                    var rObj = items[rId];
                    var item = mo.getJSONWithFileNameAndID(gc.cfg_t_item, rObj[0]);
                    gotStr = gotStr + " " + item[gc.t_item_name] + "x" + rObj[1] * self.buyNum;
                }
            }
            mo.showMsg(gc.id_c_msgCode.ifSellItem, gotStr, function () {
                gd.userCtrl.sellItems(bdc.tempId, self.buyNum, function () {
                    self.close();
                }, self);
            });
        };
        p._tap_btn_sale = function () {
            var self = this;
            var bdc = self.data.bdc;
            var gotStr = "";
            var sellitem = mo.getJSONWithFileName(gc.cfg_t_sellItem);
            var needStr = "";
            var needItems = null;
            if (sellitem[bdc.tempId]) {
                var items = sellitem[bdc.tempId][gc.t_sellItem_items];
                needItems = sellitem[bdc.tempId][gc.t_sellItem_sells];
                for (var rId in needItems) {
                    var rObj = needItems[rId];
                    var item = mo.getJSONWithFileNameAndID(gc.cfg_t_item, rObj[0]);
                    needStr = needStr + " " + item[gc.t_item_name] + "x" + rObj[1];
                }
                for (var rId in items) {
                    var rObj = items[rId];
                    var item = mo.getJSONWithFileNameAndID(gc.cfg_t_item, rObj[0]);
                    gotStr = gotStr + " " + item[gc.t_item_name] + "x" + rObj[1];
                }
            }
            if (needStr.length > 0) {
                mo.showMsg(gc.id_c_msgCode.ifSellItem3, needStr, gotStr, function () {
                    //checkItemEnought
                    var enought = self.checkNeedItemEnough(needItems);
                    if (enought == false) {
                        mo.showMsg("物品不足");
                        return;
                    }
                    gd.equipCtrl.sellEquipItem([bdc.equipId], function () {
                        self.close();
                    }, self);
                });
            }
            else {
                mo.showMsg(gc.id_c_msgCode.ifSellItem, gotStr, function () {
                    gd.equipCtrl.sellEquipItem([bdc.equipId], function () {
                        self.close();
                    }, self);
                });
            }
        };
        p.checkNeedItemEnough = function (needItems) {
            //for(var rId in needItems){
            //    var rObj = needItems[rId];
            //    var item = mo.getJSONWithFileNameAndID(gc.cfg_t_item,rObj[0]);
            //    needStr = needStr +" "+item[gc.t_item_name]+"x"+rObj[1];
            //
            //    var id = rObj[0];
            //    var value = rObj[1];
            //    if(元宝)
            //
            //        rObj[0]
            //
            //    if(!bag[gc.c_prop.spItemIdKey.plumage] || bag[gc.c_prop.spItemIdKey.plumage] <= 0) {
            //        if (isUseDiamond == false) {
            //            mo.showMsg(gc.id_c_msgCode.notEnoughFeather);//羽毛不足
            //        }
            //
            //    }
            //}
            return true;
        };
        p._tap_btn_ok = function () {
            var self = this;
            self.close();
            var bdc = self.data.bdc;
            if (bdc.type == gc.c_prop.itemTypeKey.custom) {
                mo.moduleMgr.runModule(g_consts.moduleId.customList, { itemId: bdc.tempId });
            }
            //else if(bdc.type == gc.c_prop.itemTypeKey.gift){
            //    gd.heroTalismanCtrl.useTrumpItem(bdc.tempId,function(){
            //        self.close();
            //    },self);
            //}
        };
        p._tap_btn_sub = function () {
            var self = this;
            if (self.buyNum > 1) {
                self.buyNum--;
                self.showNum();
            }
        };
        p._tap_btn_add = function () {
            var self = this;
            if (self.buyNum < self.data.bdc.count) {
                self.buyNum++;
                self.showNum();
            }
        };
        p._tap_btn_min = function () {
            var self = this;
            self.buyNum = 1;
            self.showNum();
        };
        p._tap_btn_max = function () {
            var self = this;
            self.buyNum = self.data.bdc.count;
            self.showNum();
        };
        p.showNum = function () {
            var self = this;
            var bdc = self.data.bdc;
            self.label_num.text = self.buyNum;
            self._calculateRewards();
        };
        return BaseItemDetail;
    })(mo.gui.Dlg);
    g_base.BaseItemDetail = BaseItemDetail;
    egret.registerClass(BaseItemDetail,"g_base.BaseItemDetail");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/7/11.
 */
var g_base;
(function (g_base) {
    /**
     *
     * @author
     *
     */
    var OfflineGain = (function (_super) {
        __extends(OfflineGain, _super);
        function OfflineGain() {
            _super.apply(this, arguments);
        }
        var d = __define,c=OfflineGain,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
        };
        p.onEnter = function () {
            _super.prototype.onEnter.call(this);
            var self = this;
            self.label_hour.text = Math.floor(mo.getJSONWithFileNameAndID(gc.cfg_c_game, gc.id_c_game.offlineCfg)[1] / 3600) + "";
            return;
            //var data = self.offlineData;
            //var vipLv = gd.userCtrl.getVip();
            ////var vipEx = gd.userCtrl.getVipExtra();////vip加成   [vip等级,金币加成，经验加成]
            //
            ////[离线时间（）秒、获得经验、获得金币、装备等级、件数、自动出售件数]
            //var second = data[0];
            //var hour = Math.floor(second/3600);
            //var minu = Math.floor((second-3600*hour)/60);
            //second = second%60;
            //self.label_offlineTime.text = mo.STR.format("%s时%s分%s秒", hour,minu,second);
            //self.label_offlineExp.text = mo.STR.format("经验：%s", data[1]);
            //self.label_offlineGold.text = mo.STR.format("金币：%s", data[2]);
            ////self.label_offlineExpVip.text = mo.STR.format("VIP%s 加成 +%s%", vipLv, Math.floor(vipEx[2]/10)/10);
            ////self.label_offlineExpVip.visible = vipEx[2]!=0;
            ////self.label_offlineGoldVip.text = mo.STR.format("VIP%s 加成 +%s%", vipLv, Math.floor(vipEx[1]/10)/10);
            ////self.label_offlineGoldVip.visible = vipEx[1]!=0;
            //self.label_offlineEquip.text = mo.STR.format("%s级装备*%s", data[3], data[4]);
            //self.label_offlineEquip.visible = data[4]!=0;
            //self.label_autoSell.text = mo.STR.format("因背包已满，自动出售%s件装备", data[5]);
            //self.label_autoSell.visible = data[5]!=0;
        };
        //@override
        p._handleExtArg = function (arg) {
            var self = this;
            var data = arg.offlineProfit;
            if (data) {
                var vipLv = gd.userCtrl.getVip();
                //var vipEx = gd.userCtrl.getVipExtra();////vip加成   [vip等级,金币加成，经验加成]
                //[离线时间（）秒、获得经验、获得金币、装备等级、件数、自动出售件数]
                var second = data[0];
                var hour = Math.floor(second / 3600);
                var minu = Math.floor((second - 3600 * hour) / 60);
                second = second % 60;
                self.label_offlineTime.text = mo.STR.format("%s时%s分%s秒", hour, minu, second);
                self.label_offlineExp.text = mo.STR.format("经验：%s", data[1]);
                self.label_offlineGold.text = mo.STR.format("金币：%s", data[2]);
                //self.label_offlineExpVip.text = mo.STR.format("VIP%s 加成 +%s%", vipLv, Math.floor(vipEx[2]/10)/10);
                //self.label_offlineExpVip.visible = vipEx[2]!=0;
                //self.label_offlineGoldVip.text = mo.STR.format("VIP%s 加成 +%s%", vipLv, Math.floor(vipEx[1]/10)/10);
                //self.label_offlineGoldVip.visible = vipEx[1]!=0;
                self.label_offlineEquip.text = mo.STR.format("%s级装备*%s", data[3], data[4]);
                self.label_offlineEquip.visible = data[4] != 0;
                self.label_autoSell.text = mo.STR.format("因背包已满，自动出售%s件装备", data[5]);
                self.label_autoSell.visible = data[5] != 0;
                var items = data[6];
                var str = "";
                for (var i = 0; i < items.length; ++i) {
                    var itemData = items[i];
                    var itemId = itemData[0];
                    var num = itemData[1];
                    var itemInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_item, itemId);
                    str += itemInfo[gc.t_item_name] + ": " + num + "个\n";
                }
                self.label_box.text = str;
            }
        };
        p._tap_btn_ok = function () {
            var self = this;
            self.close();
        };
        return OfflineGain;
    })(mo.gui.MsgDlg);
    g_base.OfflineGain = OfflineGain;
    egret.registerClass(OfflineGain,"g_base.OfflineGain");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/7/31.
 */
var g_base;
(function (g_base) {
    var BaseJuHua = (function (_super) {
        __extends(BaseJuHua, _super);
        function BaseJuHua() {
            _super.apply(this, arguments);
        }
        var d = __define,c=BaseJuHua,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            // 转菊花不影响下面的layer的激活状态
            this._layerOpt.activateUnderDisabled = true;
        };
        p.onEnter = function () {
            _super.prototype.onEnter.call(this);
            var grp_juHua = this.grp_juHua;
            mo.ACT.stop(grp_juHua);
            mo.ACT.run(grp_juHua, mo.repeatForever(mo.rotateBy(2, 360)));
        };
        p.onExit = function () {
            _super.prototype.onExit.call(this);
            var grp_juHua = this.grp_juHua;
            mo.ACT.stop(grp_juHua);
        };
        return BaseJuHua;
    })(mo.gui.TopLayer);
    g_base.BaseJuHua = BaseJuHua;
    egret.registerClass(BaseJuHua,"g_base.BaseJuHua");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/7/11.
 */
var g_base;
(function (g_base) {
    /**
     *
     * @author
     *
     */
    var CopyLoot = (function (_super) {
        __extends(CopyLoot, _super);
        function CopyLoot() {
            _super.apply(this, arguments);
        }
        var d = __define,c=CopyLoot,p=c.prototype;
        //@override
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self._Item_list_items = g_base.BaseItemCell;
        };
        p._data_list_items = function () {
            var self = this, filter, sorter;
            return gd.userUtils.getLoots(gd.copyCtrl.getCopyLootList(self.data.copyId));
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var copyId = self.data.copyId;
            var copyData = mo.getJSONWithFileNameAndID(gc.cfg_t_copy, copyId);
            self.titleDisplay.text = copyData[gc.t_copy_name];
            self.label_rest.text = gd.copyCtrl.getCopyCount(copyId);
            var copyType = gd.copyCtrl.getCopyType(copyId);
            var tesseraKey = (copyType == gc.c_prop.copyTypeKey.equip) ?
                gc.c_prop.spItemIdKey.equipTessera : gc.c_prop.spItemIdKey.realmTessera;
            var ticketCount = gd.copyCtrl.getTesseraCount(tesseraKey);
            var hasTicket = ticketCount > 0;
            self.TesseraKey = tesseraKey;
            self.grp_res0.visible = !hasTicket;
            self.label_cost.visible = hasTicket;
            if (hasTicket) {
                self.label_cost.text = mo.STR.format("[ubb color=0x6deb82]%s[/ubb]:%s/%s", gc.c_prop.spItemId[tesseraKey], gd.copyCtrl.getTesseraCount(tesseraKey), 1);
            }
            else {
                uiHelper.setResGrp(self.grp_res0, gc.c_prop.spItemIdKey.diamond, gd.copyCtrl.getTesseraPrice(tesseraKey));
            }
            var saoDangCount = Math.min(ticketCount, gd.copyCtrl.getCopyCount(copyId));
            self.label_saoDang.visible = saoDangCount > 0;
            if (saoDangCount > 0) {
                self.label_saoDang.text = saoDangCount;
            }
        };
        p._tap_btn_buy_times = function () {
            var self = this;
            var copyId = self.data.copyId;
            gd.copyCtrl.buyCopyCount1(copyId, function () {
                self.label_rest.text = gd.copyCtrl.getCopyCount(copyId);
            }, self);
        };
        p._tap_btn_enter = function () {
            var self = this;
            var copyId = self.data.copyId;
            gd.fightCtrl.enterCopy(copyId);
        };
        p._tap_btn_sweep = function () {
            var self = this;
            var copyId = self.data.copyId;
            var starNum = gd.copyCtrl.getCopyStar(copyId);
            if (starNum < 3) {
                return mo.showMsg(gc.id_c_msgCode.notPerfect);
            }
            if (gd.copyCtrl.getCopyCount(copyId) <= 0) {
                gd.copyCtrl.buyCopyCount1(copyId, function () {
                    self.label_rest.text = gd.copyCtrl.getCopyCount(copyId);
                }, self);
                return;
            }
            //g_base.CopySweepAward.create().show();
            if (gd.copyCtrl.getTesseraCount(self.TesseraKey) > 0) {
                gd.copyCtrl.copyWipe(copyId, function (data) {
                    g_base.CopySweepAward.create().setData({ copyId: copyId, items: data[0], num: data[1] }).show();
                    self.dataChanged();
                    self.close();
                }, self);
            }
            else {
                var gold = gd.copyCtrl.getTesseraPrice(self.TesseraKey) * gd.copyCtrl.getCopyCount(copyId);
                mo.showMsg(gc.id_c_msgCode.noticket, gold, gd.copyCtrl.getCopyCount(copyId), function () {
                    gd.copyCtrl.copyWipe(copyId, function (data) {
                        g_base.CopySweepAward.create().setData({ copyId: copyId, items: data[0], num: data[1] }).show();
                        self.dataChanged();
                        self.close();
                    }, self);
                });
            }
        };
        p._tap_btn_wipe = function () {
            var self = this;
        };
        return CopyLoot;
    })(mo.gui.Dlg);
    g_base.CopyLoot = CopyLoot;
    egret.registerClass(CopyLoot,"g_base.CopyLoot");
})(g_base || (g_base = {}));

/**
 * Created by Zhuang on 2016/4/26.
 */
var g_base;
(function (g_base) {
    var CopySweepAward = (function (_super) {
        __extends(CopySweepAward, _super);
        function CopySweepAward() {
            _super.apply(this, arguments);
        }
        var d = __define,c=CopySweepAward,p=c.prototype;
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self._Item_list_items = g_base.BaseItemCell;
        };
        p._data_list_items = function () {
            var self = this, filter, sorter;
            var arward_item = self.data.items;
            var arr = [];
            for (var key in arward_item) {
                arr.push({
                    itemId: key,
                    count: arward_item[key]
                });
            }
            return arr;
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var copyId = self.data.copyId;
            var copyData = mo.getJSONWithFileNameAndID(gc.cfg_t_copy, copyId);
            self.titleDisplay.text = copyData[gc.t_copy_name];
            self.sweep_num.text = "本次操作扫荡副本" + self.data.num + "次";
        };
        p.onEnter = function () {
            _super.prototype.onEnter.call(this);
            var self = this;
            var leftTime = 10;
            self.setCDTime(leftTime);
        };
        p._tap_btn_enter = function () {
            var self = this;
            self._tap_btn_back();
        };
        p.onExit = function () {
            _super.prototype.onExit.call(this);
            var self = this;
            if (self.timeTrigger) {
                tm.timer.remove(self.timeTrigger);
                self.timeTrigger = null;
            }
        };
        p.setCDTime = function (second) {
            var self = this;
            if (second > 0) {
                if (self.timeTrigger) {
                    tm.timer.remove(self.timeTrigger);
                    self.timeTrigger = null;
                }
                var nextCdTime = Date.newDate(Date.newDate().getTime() + second * 1000);
                var timeTrigger = self.timeTrigger = new tm.Trigger(nextCdTime);
                timeTrigger.on(tm.Trigger.ON_SECOND, self.timeSec, self);
                timeTrigger.on(tm.Trigger.ON_END, self.timeOut, self);
                tm.timer.add(timeTrigger);
                self.label_cost.text = mo.STR.format("确定(%s)", second.toString());
            }
        };
        p.timeSec = function (type, beginTime, endTime) {
            var self = this;
            var now = Date.newDate().getTime();
            var endTime1 = Date.newDate(endTime).getTime();
            var leftMillisecond = endTime1 - now;
            self.label_cost.text = mo.STR.format("确定(%s)", Math.floor(leftMillisecond / 1000).toString());
        };
        p.timeOut = function (type, beginTime, endTime) {
            var self = this;
            self._tap_btn_back();
        };
        p._tap_btn_back = function () {
            var self = this;
            self.close();
        };
        return CopySweepAward;
    })(mo.gui.Dlg);
    g_base.CopySweepAward = CopySweepAward;
    egret.registerClass(CopySweepAward,"g_base.CopySweepAward");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/7/11.
 */
var g_base;
(function (g_base) {
    /**
     *
     * @author
     *
     */
    var VipCopyLoot = (function (_super) {
        __extends(VipCopyLoot, _super);
        function VipCopyLoot() {
            _super.apply(this, arguments);
        }
        var d = __define,c=VipCopyLoot,p=c.prototype;
        //@override
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self._Item_list_items = g_base.BaseItemCell;
        };
        p._data_list_items = function () {
            var self = this;
            return gd.userUtils.getLoots(gd.copyCtrl.getCopyLootList(self.data.copyId));
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var copyId = self.data.copyId;
            var copyData = mo.getJSONWithFileNameAndID(gc.cfg_t_copy, copyId);
            self.titleDisplay.text = copyData[gc.t_copy_name];
            var vip = gd.copyCtrl.getCopyVip(copyId);
            self.label_rest.text = [gd.copyCtrl.getVipCopyReTimes(vip), gd.copyCtrl.getMaxVipCopyTimes(vip)];
        };
        p._tap_btn_enter = function () {
            var self = this;
            var copyId = self.data.copyId;
            gd.fightCtrl.enterCopy(copyId);
        };
        return VipCopyLoot;
    })(mo.gui.Dlg);
    g_base.VipCopyLoot = VipCopyLoot;
    egret.registerClass(VipCopyLoot,"g_base.VipCopyLoot");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/7/11.
 */
var g_base;
(function (g_base) {
    /**
     *
     * @author
     *
     */
    var CreateRole = (function (_super) {
        __extends(CreateRole, _super);
        function CreateRole() {
            _super.apply(this, arguments);
            this._isCustomName = false;
        }
        var d = __define,c=CreateRole,p=c.prototype;
        //@override
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self._layerOpt.shownWithAction = false;
            self._Item_list_jobs = g_base.CreateRoleItem;
        };
        p._data_list_jobs = function () {
            var self = this, filter, sorter;
            return [1, 2, 3];
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            //hd { 如果是android，则使用prompt来弹出输入框
            if (egret.Capabilities.os == 'Android') {
                self.inputName.touchEnabled = true;
                self.inputName.editable = false;
                self.inputName.addEventListener(egret.TouchEvent.TOUCH_TAP, function () {
                    var str = prompt('请输入角色名', self.inputName.text);
                    if (str != null)
                        self.inputName.text = str;
                }, self);
            }
            //hd }
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var action = self.data.action || 0; //0创角 1解锁英雄
            var isUnlock = action == 1;
            self.btn_back.visible = isUnlock;
            self.grp_create.visible = !isUnlock;
            self.label_unlock.visible = isUnlock;
            self.grp_userAgreement.visible = !isUnlock;
            if (isUnlock) {
                for (var job = 1; job <= 3; job++) {
                    if (!gd.heroCtrl.hasHeroByJob(job)) {
                        self.list_jobs.selectedItem = job;
                        self._setJobDesc(job);
                        break;
                    }
                }
                self.label_unlock.text = gd.heroCtrl.getList().length + 1;
            }
            else {
                var name = null;
                var sdkData = gd.accountCtrl.get(gc.dsConsts.AccountEntity.sdkData);
                if (sdkData)
                    name = sdkData.name;
                //hd { 添加通过服务器获取第三方平台名称
                var args = {};
                mo.requestWaiting4Server(gc.iface.c_account_getThirdUserInfo, args, function (data) {
                    self._isCustomName = data == null;
                    var nickname = data ? data.nickname :
                        mo.STR.sub(utils.filterName(name, gc.c_prop.sexKey.male), 0, 14);
                    self.inputName.text = nickname;
                });
                //hd }
                self.list_jobs.selectedIndex = 0; //默认选中第一个男性角色
                self._setJobDesc(1);
            }
            self._gender = gc.c_prop.sexKey.male;
        };
        p._setJobDesc = function (job) {
            var self = this;
            var cfg_t_hero = mo.getJSONWithFileName(gc.cfg_t_hero);
            var t_hero = cfg_t_hero[job];
            self.label_job_desc.text = [t_hero[gc.t_hero_name], t_hero[gc.t_hero_describe]];
            self._job = job;
        };
        p._tap_btn_create = function () {
            var self = this;
            var action = self.data.action || 0;
            var isUnlock = action == 1;
            if (isUnlock) {
                var openCfg = gd.heroCtrl.getHeroOpenCfg(gd.heroCtrl.getNextIdxToBeOpen());
                //提前解锁
                if (gd.userCtrl.getLvl() < openCfg[0]) {
                    var count = gd.heroCtrl.getNextIdxToBeOpen() + 1;
                    //ws.recordEvent("提前开启第" + count + "个角色的人数", 1);
                    if (openCfg[1] > gd.userCtrl.getVip())
                        return mo.showMsg(gc.id_c_msgCode.ifBuyRole, openCfg[1]);
                    gd.heroCtrl.callHero(self._job, self._gender, self.close, self);
                }
                else {
                    gd.heroCtrl.callHero(self._job, self._gender, self.close, self);
                }
            }
            else {
                if (!self.ckb_argree.selected)
                    return mo.showMsg(gc.id_c_msgCode.disAgree);
                gd.UserCtrl.createUser(self.inputName.text, self._job, self._gender, function () {
                    g_base.loginCtrl.enterGame(true);
                }, self);
            }
        };
        p._tap_btn_back = function () {
            var self = this;
            self.close();
        };
        p._tap_btn_dice = function () {
            var self = this;
            //self._isCustomName = true;
            var name = utils.getRandomName(self._gender);
            self.inputName.text = name;
        };
        p._tap_img_userAgreement = function () {
            var self = this;
            mo.moduleMgr.runModule(g_consts.moduleId.userAgreement);
        };
        p._initItem_list_jobs = function (cell) {
            var self = this;
            cell.emitter.on(g_base.CreateRoleItem.ON_GENDER_CHANGED, function (gender, job) {
                self._setJobDesc(job);
                self._gender = gender;
                if (self._isCustomName) {
                    var name = utils.getRandomName(self._gender);
                    self.inputName.text = name;
                }
            }, self);
        };
        return CreateRole;
    })(mo.gui.Dlg);
    g_base.CreateRole = CreateRole;
    egret.registerClass(CreateRole,"g_base.CreateRole");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/8/5.
 */
var g_base;
(function (g_base) {
    var CreateRoleItem = (function (_super) {
        __extends(CreateRoleItem, _super);
        function CreateRoleItem() {
            _super.apply(this, arguments);
        }
        var d = __define,c=CreateRoleItem,p=c.prototype;
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.img_border.visible = false;
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var job = self.data; //1战士 2法师 3道士
            self.enabled = gd.heroCtrl ? !gd.heroCtrl.hasHeroByJob(job) : true;
            if (self.enabled) {
                self.ico_0.source = mo.STR.format("avatar_%s_%s_1", job, 0);
                self.ico_1.source = mo.STR.format("avatar_%s_%s_1", job, 1);
            }
            else {
                self.ico_0.source = mo.STR.format("avatar_%s_%s_2", job, 0);
                self.ico_1.source = mo.STR.format("avatar_%s_%s_2", job, 1);
            }
            self.ico_job.source = mo.STR.format("txt_job_%s", job);
            self.img_border.visible = false;
            self.invalidateSkinState();
        };
        p._ico_clicked = function (ico) {
            var self = this;
            var iW = ico.width, iH = ico.height;
            var bW = self.img_border.width, bH = self.img_border.height;
            self.img_border.x = ico.x - (bW - iW) / 2;
            self.img_border.y = ico.y - (bH - iH) / 2;
        };
        p._tap_ico_0 = function () {
            var self = this;
            self._ico_clicked(self.ico_0);
            self.emitter.emit(self.__class.ON_GENDER_CHANGED, gc.c_prop.sexKey.female, self.data, self);
        };
        p._tap_ico_1 = function () {
            var self = this;
            self._ico_clicked(self.ico_1);
            self.emitter.emit(self.__class.ON_GENDER_CHANGED, gc.c_prop.sexKey.male, self.data, self);
        };
        p.getCurrentSkinState = function () {
            var str = _super.prototype.getCurrentSkinState.call(this);
            this.img_border.visible = this.selected;
            if (!this.selected) {
                this._ico_clicked(this.ico_1);
            }
            return str;
        };
        CreateRoleItem.ON_GENDER_CHANGED = "on_gender_changed"; //0女 1男
        return CreateRoleItem;
    })(mo.gui.ItemRenderer);
    g_base.CreateRoleItem = CreateRoleItem;
    egret.registerClass(CreateRoleItem,"g_base.CreateRoleItem");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/7/24.
 */
var g_base;
(function (g_base) {
    var BaseFightDlg = (function (_super) {
        __extends(BaseFightDlg, _super);
        function BaseFightDlg() {
            _super.apply(this, arguments);
        }
        var d = __define,c=BaseFightDlg,p=c.prototype;
        p.show = function () {
            var self = this;
            _super.prototype.show.call(this);
            self.visible = self._isFightScene();
            return self;
        };
        p._onShowReady = function () {
            var self = this;
            _super.prototype._onShowReady.call(this);
            //self.visible = self._isFightScene();
            //var scene = mo.runningScene;
            //scene.setDlgFightTrayVisible(self._isFightScene());
        };
        p._isFightScene = function () {
            var self = this;
            var name = mo.moduleMgr.curModule.name;
            return name == "FightScene";
        };
        return BaseFightDlg;
    })(mo.gui.Dlg);
    g_base.BaseFightDlg = BaseFightDlg;
    egret.registerClass(BaseFightDlg,"g_base.BaseFightDlg");
})(g_base || (g_base = {}));

/**
 * Created by Administrator on 2015/11/14.
 */
var g_base;
(function (g_base) {
    var RoleAvatar = (function (_super) {
        __extends(RoleAvatar, _super);
        function RoleAvatar() {
            _super.apply(this, arguments);
        }
        var d = __define,c=RoleAvatar,p=c.prototype;
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var clothesID = self.data.clothesID;
            var weaponID = self.data.weaponID;
            var wingID = self.data.wingID;
            var sex = self.data.sex;
            var isKing = self.data.isKing;
            if (clothesID) {
                self.ico_clothes.source = resHelper.getHeroClothesIconPath(clothesID);
            }
            else {
                self.ico_weapon.source = null;
            }
            if (weaponID) {
                self.ico_weapon.source = resHelper.getHeroWeaponIconPath(weaponID);
            }
            else {
                self.ico_weapon.source = null;
            }
            if (wingID) {
                if (sex == gc.c_prop.sexKey.male) {
                    self.ico_wing_male.source = resHelper.getHeroWingIconPath(wingID);
                    self.ico_wing_female.source = null;
                }
                else {
                    self.ico_wing_female.source = resHelper.getHeroWingIconPath(wingID);
                    self.ico_wing_male.source = null;
                }
            }
            else {
                self.ico_wing_male.source = null;
                self.ico_wing_female.source = null;
            }
            self.ico_isKing.visible = isKing;
        };
        return RoleAvatar;
    })(mo.gui.Layer);
    g_base.RoleAvatar = RoleAvatar;
    egret.registerClass(RoleAvatar,"g_base.RoleAvatar");
})(g_base || (g_base = {}));

var g_base;
(function (g_base) {
    /**
     * 通用弹出输入框。
     * 监听close方法回调获取输入的内容
     * 使用举例:
     * g_base.BasePromoteInput.create()
     * .setData({title:"输入姓名", text:"张德帅"})
     * .show()
     * .onClose(function(i){console.log(i.inputBox.text, i.doWhat)})
     */
    var BasePromoteInput = (function (_super) {
        __extends(BasePromoteInput, _super);
        function BasePromoteInput() {
            _super.apply(this, arguments);
            this.doWhat = 0; //0 取消 1确定
        }
        var d = __define,c=BasePromoteInput,p=c.prototype;
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            this.outsideClosable = false;
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            self.inputBox.text = self.data.text || "";
            self.titleDisplay.text = self.data.title || "";
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.container.btn_close.addEventListener(egret.TouchEvent.TOUCH_TAP, self.click_btn_close, self);
        };
        p.click_btn_close = function () {
            var self = this;
            self.doWhat = 0;
            self.container.btn_close.removeEventListener(egret.TouchEvent.TOUCH_TAP, self.click_btn_close, self);
        };
        p._tap_btn_confirm = function () {
            var self = this;
            self.doWhat = 1;
            self.close();
        };
        p._tap_btn_cancel = function () {
            var self = this;
            self.doWhat = 0;
            self.close();
        };
        return BasePromoteInput;
    })(mo.gui.Dlg);
    g_base.BasePromoteInput = BasePromoteInput;
    egret.registerClass(BasePromoteInput,"g_base.BasePromoteInput");
})(g_base || (g_base = {}));

/**
 * Created by Administrator on 2016/3/18.
 */
var g_base;
(function (g_base) {
    var ZhenQiDetail = (function (_super) {
        __extends(ZhenQiDetail, _super);
        function ZhenQiDetail() {
            _super.apply(this, arguments);
        }
        var d = __define,c=ZhenQiDetail,p=c.prototype;
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self.outsideClosable = true;
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.dataChanged();
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var infos = gd.demonLotusCtrl.calGenuineQi();
            var helpInfo = mo.getJSONWithFileNameAndID(gc.cfg_c_help, 57);
            var cfg_c_genuineQi = mo.getJSONWithFileName(gc.cfg_c_genuineQi);
            var userData = gd.userCtrl.getData();
            var produceFix = infos[2];
            self.label_zhenQiTotal.text = infos[0] + "/" + infos[1];
            self.label_zhenQiAdd.text = (produceFix * 60 >> 0) + "/分钟";
            self.label_desc.text = helpInfo[gc.c_help_helpText];
        };
        return ZhenQiDetail;
    })(mo.gui.Dlg);
    g_base.ZhenQiDetail = ZhenQiDetail;
    egret.registerClass(ZhenQiDetail,"g_base.ZhenQiDetail");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/7/11.
 */
var g_base;
(function (g_base) {
    /**
     *
     * @author
     *
     */
    var Create4thRole = (function (_super) {
        __extends(Create4thRole, _super);
        function Create4thRole() {
            _super.apply(this, arguments);
        }
        var d = __define,c=Create4thRole,p=c.prototype;
        //@override
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self._layerOpt.shownWithAction = false;
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.registerClassByKey(gd.UserCtrl, gc.dsConsts.UserEntity.infuseExpc.toString(), self._refreshUI);
            self.efx_open.visible = false;
            self._upStarEfxPlayer = uiHelper.EfxPlayer.create(self.efx_hit1);
            self._hitEfxPlayer = uiHelper.EfxPlayer.create(self.efx_hit2);
            var gameInfo = mo.getJSONWithFileName(gc.cfg_c_game)[gc.id_c_game.fourRole];
            var needExp = gameInfo[2];
            self.pb_exp.maximum = needExp;
            self.pb_exp.labelFunction = function (v, max) {
                return mo.STR.format("%s/%s", v, max);
            };
            var openCfg = gd.heroCtrl.getSpHeroOpenCfg(3);
            self.img_openTips.visible = openCfg[1][3] > gd.userCtrl.getRebirthLvl();
            self.mpUpdateTimer = setInterval(function () {
                self._refreshMyRes();
            }, 1000);
            self._refreshUI();
            self.label_ZQV.text = [gameInfo[6].split(",")[0] / 10000 >> 0, gameInfo[6].split(",")[1] / 10000 >> 0];
            self.label_YBV.text = [gameInfo[10].split(",")[0] / 10000 >> 0, gameInfo[10].split(",")[1] / 10000 >> 0];
        };
        p.onExit = function () {
            var self = this;
            _super.prototype.onExit.call(this);
            if (self.mpUpdateTimer)
                clearInterval(self.mpUpdateTimer);
            self.mpUpdateTimer = null;
        };
        p._refreshUI = function () {
            var self = this;
            var isAuto = gd.userCtrl.isOpenInfuseExpc();
            self.cb_auto.selected = isAuto;
            self.pb_exp.value = gd.userCtrl.getInfuseExpc();
            var needExp = mo.getJSONWithFileName(gc.cfg_c_game)[gc.id_c_game.fourRole][2];
            var canUnlock = gd.userCtrl.getInfuseExpc() >= needExp;
            self.grp_full.visible = canUnlock;
            self.grp_inject.visible = !canUnlock;
            uiHelper.setResGrp(self.grp_resZQ, gc.c_prop.spItemIdKey.genuineQi, gd.heroCtrl.getInjectCost(gc.c_prop.extraInfuseTypeKey.genuineQi));
            uiHelper.setResGrp(self.grp_resYB, gc.c_prop.spItemIdKey.diamond, gd.heroCtrl.getInjectCost(gc.c_prop.extraInfuseTypeKey.diamond));
            self._refreshMyRes();
        };
        p._refreshMyRes = function () {
            var self = this;
            //我的资源
            uiHelper.setResGrp(self.grp_myZq, gc.c_prop.spItemIdKey.genuineQi, gd.demonLotusCtrl.calGenuineQi()[0]);
            uiHelper.setResGrp(self.grp_myYB, gc.c_prop.spItemIdKey.diamond, gd.userCtrl.getDiamond());
        };
        p._tap_btn_back = function () {
            var self = this;
            self.close();
        };
        p._chg_cb_auto = function () {
            var self = this;
            if (!gd.heroCtrl.isOpenCfgOk(3)) {
                process.nextTick(function () {
                    self.cb_auto.selected = false;
                });
                return mo.showMsg(gc.id_c_msgCode.careerNotOpen);
            }
            gd.heroCtrl.autoInfuseSwitch(self.cb_auto.selected, function () {
                self._refreshUI();
                mo.showMsg(mo.STR.format("自动注入:%s", self.cb_auto.selected ?
                    "[ubb color=green]开启[/ubb]" : "[ubb color=red]关闭[/ubb]"));
            }, self);
        };
        p._tap_btn_create = function () {
            var self = this;
            gd.heroCtrl.callHero(gc.c_prop.heroJobKey.ys, 0, function () {
                self.efx_open.visible = true;
                self.efx_open.play(1);
                self.efx_open.addEventListener(egret.Event.COMPLETE, function () {
                    mo.showMsg("开启成功!");
                    self.close();
                }, self);
            }, self);
        };
        p._tap_btn_yuanbao = function () {
            var self = this;
            if (!gd.heroCtrl.isOpenCfgOk(3)) {
                return mo.showMsg(gc.id_c_msgCode.careerNotOpen);
            }
            var type = gc.c_prop.extraInfuseTypeKey.diamond;
            if (!gd.heroCtrl.ybInjectTipsed) {
                gd.heroCtrl.ybInjectTipsed = true;
                return mo.showMsg(gc.id_c_msgCode.buyPerfusion, gd.heroCtrl.getInjectCost(gc.c_prop.extraInfuseTypeKey.diamond), function () {
                    self._doInject(type);
                });
            }
            else {
                self._doInject(type);
            }
        };
        p._tap_btn_zq = function () {
            var self = this;
            if (!gd.heroCtrl.isOpenCfgOk(3)) {
                return mo.showMsg(gc.id_c_msgCode.careerNotOpen);
            }
            var type = gc.c_prop.extraInfuseTypeKey.genuineQi;
            self._doInject(type);
        };
        p._doInject = function (type) {
            var self = this;
            gd.heroCtrl.extraInfuse(type, function (data) {
                var isBaoJi = data[0], exp = data[1];
                if (isBaoJi) {
                    self._hitEfxPlayer.play();
                }
                g_msg.UIMsgTextCtrl.push(mo.STR.format("[ubb]获得进度%s[/ubb]", exp));
                self._upStarEfxPlayer.play();
            }, self);
        };
        p._tap_btn_help = function () {
            g_base.BaseShowTip.create().setData({ id: 103 }).show();
        };
        p._tap_img_skill38 = function () {
            g_base.SkillDescDlg.create().setData({ skillId: 38 }).show();
        };
        p._tap_img_skill39 = function () {
            g_base.SkillDescDlg.create().setData({ skillId: 39 }).show();
        };
        p._tap_img_skill40 = function () {
            g_base.SkillDescDlg.create().setData({ skillId: 40 }).show();
        };
        p._tap_img_skill41 = function () {
            g_base.SkillDescDlg.create().setData({ skillId: 41 }).show();
        };
        p._tap_img_skill42 = function () {
            g_base.SkillDescDlg.create().setData({ skillId: 42 }).show();
        };
        return Create4thRole;
    })(mo.gui.Dlg);
    g_base.Create4thRole = Create4thRole;
    egret.registerClass(Create4thRole,"g_base.Create4thRole");
})(g_base || (g_base = {}));

/**
 * Created by lihex on 4/14/16.
 */
var g_base;
(function (g_base) {
    var SkillDescDlg = (function (_super) {
        __extends(SkillDescDlg, _super);
        function SkillDescDlg() {
            _super.apply(this, arguments);
        }
        var d = __define,c=SkillDescDlg,p=c.prototype;
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self.outsideClosable = true;
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var id = self.data.skillId;
            var skillInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_skill, id);
            var userLvl = gd.userCtrl.getLvl();
            var level = Math.min(175, Math.max(145, userLvl));
            var cd = skillInfo[gc.t_skill_cd] * 10 / 1000;
            var damageScale = skillInfo[gc.t_skill_damage] / 10000;
            var buffID = skillInfo[gc.t_skill_buffID];
            self.ico_skill.source = resHelper.getSkillIconPath(id);
            self.label_name.text = mo.STR.format("%s Lv.%s", skillInfo[gc.t_skill_name], level);
            if (damageScale != 0) {
                var perLvScale = skillInfo[gc.t_skill_damageScaleA] / 10000;
                damageScale += (level - 1) * perLvScale;
                self.label_desc.text = mo.STR.format(skillInfo[gc.t_skill_desc], Math.abs(Math.round(-damageScale * 100)), cd);
            }
            else if (buffID != 0) {
                var buffInfo = mo.getJSONWithFileNameAndID(gc.cfg_t_buff, buffID);
                var perLvValue = buffInfo[gc.t_buff_linerScale];
                var value = (buffInfo[gc.t_buff_baseValue1] + perLvValue * (level - 1)) / 10000;
                value = Math.abs(value);
                self.label_desc.text = mo.STR.format(skillInfo[gc.t_skill_desc], Math.round(value * 100), cd);
            }
            else {
                self.label_desc.text = mo.STR.format(skillInfo[gc.t_skill_desc]);
            }
        };
        return SkillDescDlg;
    })(mo.gui.Dlg);
    g_base.SkillDescDlg = SkillDescDlg;
    egret.registerClass(SkillDescDlg,"g_base.SkillDescDlg");
})(g_base || (g_base = {}));

/**
 * Created by Administrator on 2015/9/9.
 */
var g_base;
(function (g_base) {
    var Effect = (function (_super) {
        __extends(Effect, _super);
        function Effect() {
            _super.apply(this, arguments);
        }
        var d = __define,c=Effect,p=c.prototype;
        p.initMc = function () {
            var self = this;
            if (!self.mc) {
                self.mc = new egret.MovieClip();
                self.mc.addEventListener(egret.Event.LOOP_COMPLETE, self.onMcEvent, self);
                self.mc.addEventListener(egret.Event.COMPLETE, self.onMcEvent, self);
                //self.mc.addEventListener(egret.Event.ENTER_FRAME, self.onEnterFrame, self);
                self.source = self.mc;
            }
            if (self.jsonData && self.texture) {
                var mcDataFactory = new egret.MovieClipDataFactory(self.jsonData, self.texture);
                self.mc.movieClipData = mcDataFactory.generateMovieClipData(self.mcName);
                //if(self.mc._getFrameLabelByName(self.frame)){
                if (!isNaN(self.playTimes))
                    self.gotoAndPlay(self.frame, self.playTimes);
            }
        };
        //setMcData(mcData:egret.MovieClipData){
        //    var self = this;
        //    self.jsonData = mcData.spriteSheet;
        //    self.texture = mcData.textureData;
        //    self.initMc();
        //}
        p.loadRes = function (jsonUrl, imgUrl, cb, ctx) {
            if (cb === void 0) { cb = null; }
            if (ctx === void 0) { ctx = null; }
            var self = this;
            self.jsonData = null;
            self.texture = null;
            RES.getResByUrl(jsonUrl, function (jsonData) {
                self.jsonData = jsonData;
                self.initMc();
                if (self.jsonData && self.texture) {
                    if (cb)
                        cb.call(ctx);
                }
            }, self);
            RES.getResByUrl(imgUrl, function (texture) {
                self.texture = texture;
                self.initMc();
                if (self.jsonData && self.texture) {
                    if (cb)
                        cb.call(ctx);
                }
            }, self);
        };
        p.gotoAndPlay = function (frame, playTimes) {
            this.frame = frame;
            this.playTimes = playTimes;
            if (this.mc && this.mc.movieClipData) {
                this.mc.gotoAndPlay(frame, playTimes);
            }
        };
        p.gotoAndStop = function (frame) {
            if (this.mc)
                this.mc.gotoAndStop(frame);
        };
        p.nextFrame = function () {
            if (this.mc)
                this.mc.nextFrame();
        };
        p.play = function (playTimes) {
            if (!this.mc || !this.mc.movieClipData) {
                this.frame = 1;
                this.playTimes = playTimes;
            }
            if (this.mc && this.mc.movieClipData) {
                this.mc.play(playTimes);
            }
        };
        p.prevFrame = function () {
            if (this.mc)
                this.mc.prevFrame();
        };
        p.stop = function () {
            if (this.mc)
                this.mc.stop();
        };
        p.onMcEvent = function (e) {
            this.dispatchEvent(new egret.Event(e.type));
        };
        return Effect;
    })(mo.gui.UIAsset);
    g_base.Effect = Effect;
    egret.registerClass(Effect,"g_base.Effect");
})(g_base || (g_base = {}));

/**
 * Created by Administrator on 2015/9/9.
 */
var g_comp;
(function (g_comp) {
    var UIEffect = (function (_super) {
        __extends(UIEffect, _super);
        function UIEffect() {
            _super.apply(this, arguments);
        }
        var d = __define,c=UIEffect,p=c.prototype;
        p.getQueryString = function (name) {
            var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
            var r = window.location.search.substr(1).match(reg);
            if (r != null)
                return decodeURI(r[2]);
            if (egret.Capabilities.os == "Android" || egret.Capabilities.os == "Unknown") {
                return "false";
            }
            else {
                return "true";
            }
        };
        //@override
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            self.touchEnabled = self.touchChildren = false;
            self._playTimes = -1;
            self.autoPlay = false;
            self.needPlay = true;
            self.performanceControl = true;
        };
        d(p, "effectId"
            ,function () {
                return this._effectId;
            }
            ,function (id) {
                var self = this;
                self._effectId = id;
            }
        );
        p.getEffect = function (id, extname) {
            var resName = id;
            if (extname) {
                resName = mo.STR.format("resource/dynamic2/%s.%s", id, extname);
            }
            return resName;
        };
        p.startLoadByKey = function (id, cb, cbtx) {
            var self = this;
            self.loadRes(self.getEffect(id), self.getEffect(id, "png"), cb, cbtx);
            if (self.autoPlay) {
                self.play(self._playTimes);
            }
        };
        p._childrenCreated = function () {
            var self = this;
            _super.prototype._childrenCreated.call(this);
            if (self.performanceControl) {
                var hp = self.getQueryString("high");
                if (hp && hp == "true") {
                    self.needPlay = true;
                }
                else if (hp && hp == "false") {
                    self.needPlay = false;
                }
            }
            if (self._effectId && self.needPlay) {
                self.startLoadByKey(self._effectId);
            }
        };
        p.loadRes = function (jsonUrl, imgUrl, cb, ctx) {
            if (cb === void 0) { cb = null; }
            if (ctx === void 0) { ctx = null; }
            var self = this;
            self.jsonData = mo.getData("mc", jsonUrl);
            self.texture = null;
            RES.getResByUrl(imgUrl, function (texture) {
                self.texture = texture;
                self.initMc();
                if (self.jsonData && self.texture) {
                    if (cb)
                        cb.call(ctx);
                }
            }, self);
        };
        return UIEffect;
    })(g_base.Effect);
    g_comp.UIEffect = UIEffect;
    egret.registerClass(UIEffect,"g_comp.UIEffect");
})(g_comp || (g_comp = {}));

/**
 * Created by lihex on 10/22/15.
 */
var uiHelper;
(function (uiHelper) {
    var EfxPlayer = (function (_super) {
        __extends(EfxPlayer, _super);
        function EfxPlayer() {
            _super.apply(this, arguments);
        }
        var d = __define,c=EfxPlayer,p=c.prototype;
        //@override
        p.init = function (parent, efxId, pos) {
            var self = this, clazz = self.__class;
            _super.prototype.init.call(this);
            var efx;
            if (parent instanceof g_comp.UIEffect) {
                efx = self.efx = parent;
                efx.visible = false;
                efx.addEventListener(egret.Event.COMPLETE, self._onPlayEnd, self);
            }
            else {
                efx = self.efx = g_comp.UIEffect.create();
                efx.effectId = efxId;
                efx.x = pos.x;
                efx.y = pos.y;
                parent.addElement(efx);
                efx.addEventListener(egret.Event.COMPLETE, self._onPlayEnd2, self);
                efx.play(1);
            }
        };
        p.initByGroup = function (efxs) {
            _super.prototype.init.call(this);
            var self = this;
            self._efxs = efxs || [];
            for (var i = 0, li = self._efxs.length; i < li; i++) {
                var efx = self._efxs[i];
                efx.visible = false;
                efx.addEventListener(egret.Event.COMPLETE, self._onPlayEnd, self);
            }
        };
        p.setEndCallback = function (endCb, endCtx) {
            var self = this;
            self._endCb = endCb;
            self._endCtx = endCtx;
        };
        p._onPlayEnd = function (event) {
            var self = this;
            var efx = event.target;
            efx.gotoAndStop(1);
            efx.visible = false;
            if (self._endCb)
                self._endCb.call(self._endCtx);
        };
        p._onPlayEnd2 = function () {
            var self = this;
            self.efx.parent.removeElement(self.efx);
            if (self._endCb)
                self._endCb.call(self._endCtx);
        };
        p.play = function () {
            var self = this;
            if (self._efxs) {
                for (var i = 0, li = self._efxs.length; i < li; i++) {
                    var efx = self._efxs[i];
                    efx.visible = true;
                    efx.gotoAndPlay(1, 1);
                }
            }
            else {
                self.efx.visible = true;
                self.efx.gotoAndPlay(1, 1);
            }
        };
        EfxPlayer.play = function (container, efxId, pos, endCb, endCtx) {
            var player = new this();
            player.init(container, efxId, pos);
            player.setEndCallback(endCb, endCtx);
            return player;
        };
        EfxPlayer.createPlayer = function (efxNode, endCb, endCtx) {
            var armCtrl = new this();
            armCtrl.init(efxNode, null, null);
            armCtrl.setEndCallback(endCb, endCtx);
            return armCtrl;
        };
        EfxPlayer.createPlayGroup = function (efxs) {
            var player = new this();
            player.initByGroup(efxs);
            return player;
        };
        return EfxPlayer;
    })(mo.Class);
    uiHelper.EfxPlayer = EfxPlayer;
    egret.registerClass(EfxPlayer,"uiHelper.EfxPlayer");
})(uiHelper || (uiHelper = {}));

var gc;
(function (gc) {
    gc.Keys = {
        curServerId: "curServerId",
        accountName: "AccountName",
        password: "Password",
        logined: "Logined",
        simulateFight: "SimulateFight",
        key_host: "key_host",
        key_port: "key_port",
        msgCode: "m",
        msgArgs: "a",
        msgValue: "v",
        token: "token",
        rankPkTime: "rpt"
    };
    /** 服务端返回的消息码key值 */
    gc.RESP_MSG_CODE = "m";
    /** 服务端返回的消息参数key值 */
    gc.RESP_MSG_ARGS = "a";
    /** 服务端返回的数据key值 */
    gc.RESP_VALUE = "v";
    var Net = (function (_super) {
        __extends(Net, _super);
        function Net() {
            _super.apply(this, arguments);
        }
        var d = __define,c=Net,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            self.respKey_msgCode = gc.RESP_MSG_CODE;
            self.respKey_msgArgs = gc.RESP_MSG_ARGS;
            self.respKey_value = gc.RESP_VALUE;
            self.httpKey_route = "r";
            self.httpKey_args = "a";
            self.httpKey_sessionId = "s";
            self.httpKey_handler = "h";
            self.key_host = gc.Keys.key_host;
            self.key_port = gc.Keys.key_port;
            self.loginRoute = gc.iface.h_account_login;
            self.loginNameKey = gc.iface.h_account_login_args.name;
            self.loginPwdKey = gc.iface.h_account_login_args.pwd;
            self.loginNameKeyOfLocal = gc.Keys.accountName;
            self.loginPwdKeyOfLocal = gc.Keys.password;
            self.httpConnectRoute = gc.iface.c_net_connect;
            self.httpDisconnectRoute = gc.iface.c_net_disconnect;
        };
        //同步账户
        p.asyncAccount = function (cb, toPlayWaiting, toResetAsyncFlag) {
            if (toPlayWaiting === void 0) { toPlayWaiting = true; }
            if (toResetAsyncFlag === void 0) { toResetAsyncFlag = true; }
            var self = this;
            if (toResetAsyncFlag)
                self._hasAsyncAccount = false;
            if (toPlayWaiting)
                mo.playWaiting();
            logger.net.info("开始同步账号信息!");
            var onSuccess = function (user) {
                if (toPlayWaiting)
                    mo.stopWaiting();
                self._reconnecting = false;
                self._hasAsyncAccount = true;
                logger.net.info("账号同步完毕！");
                cb(user);
            };
            //var channelInfo = channelCfg.getCurChannel();
            //mo_channel.enterGame(onSuccess, self);
        };
        return Net;
    })(mo.Net);
    gc.Net = Net;
    egret.registerClass(Net,"gc.Net");
    gc.net = new gc.Net();
    mo.registerNet({
        //网络处理器
        net: gc.net,
        //等待视图
        waitingView: g_base.BaseJuHua.getInstance(),
        //重连视图
        reccnView: {
            show: function (onOk) {
                // mo.showMsg(gc.id_c_msgCode.connectFail, onOk);
            }
        },
        //被踢出视图
        kickView: {
            show: function (onOk) {
                /* mo.showMsg(gc.id_c_msgCode.outGame, function(){
                     if(onOk) onOk();
                 }, null);*/
            }
        },
        //重连失败
        recnnFailed: function () {
            console.error("重连失败！");
            //uw.backToIndex();
        },
        //网络异常
        netErrorView: {
            show: function (onOk) {
                //console.error("网络异常");
                mo.showMsg(gc.id_c_msgCode.checkYourNet, function () {
                    if (onOk)
                        onOk();
                    //todo 临时h5刷新
                    mo_channel.getCurChannel().logout(function () { });
                });
            }
        }
    });
    egret.Boot.once(egret.Boot.AFTER_CONFIG, function () {
        var net = gc.net, project = egret.project;
        net.httpHost = project.httpHost;
        net.httpPort = project.httpPort;
    });
})(gc || (gc = {}));

/**
 * Created by Administrator on 2015/9/17.
 */
var gd;
(function (gd) {
    var HeroProp = (function () {
        function HeroProp() {
            this.maxHp = 1000; //[1]生命
            this.maxHpScale = 200; //[2]生命加成
            this.attack = 100; //[3]攻击
            this.attackScale = 100; //[4]攻击加成
            this.defence = 100; //[5]物防
            this.defenceScale = 100; //[6]物防加成
            this.magicDefence = 100; //[7]魔防
            this.magicDefenceScale = 100; //[8]魔防加成
            this.hit = 100; //[9]命中
            this.hitScale = 100; //[10]命中加成
            this.dodge = 100; //[11]闪避
            this.dodgeScale = 100; //[12]闪避加成
            this.critical = 100; //[13]暴击
            this.criticalScale = 100; //[14]暴击加成
            this.disCritical = 100; //[15]抗暴
            this.disCriticalScale = 100; //[16]抗暴加成
            this.luckyValue = 100; //[17]
            this.luckyValueScale = 100; //[18]
            this.moveSpeed = 150; //[19]移动速度
            this.moveSpeedScale = 0; //[20]移动速度加成
            this.attackInterval = 100; //[21]攻击频率
            this.attackIntervalScale = 100; //[22]攻击频率加成
            this.damageIncrease = 100; //[23]伤害加深
            this.damageDecrease = 100; //[24]伤害减免
            this.benumbPro = 100; //[25]麻痹
            this.disBenumbPro = 100; //[26]抗麻痹
            this.poisoningRecoveryProb = 100; //[27]
            this.benumbProSpan = 100; //[28]麻痹时长
            this.reviveCount = 100; //[29]复活次数
            this.reviveHPScale = 100; //[30]复活HP%
            this.maxHp2 = 100; //[31]抗护身
            this.disMaxHp2 = 100; //[32]抗护身概率
            this.maxHpTemp = 100; //[33]生命
            this.attackTemp = 100; //[34]攻击
            this.defenceTemp = 100; //[35]物防
            this.magicDefenceTemp = 100; //[36]法防
            this.hitTemp = 100; //[37]命中
            this.dodgeTemp = 100; //[38]闪避
            this.criticalTemp = 100; //[39]暴击
            this.disCriticalTemp = 100; //[40]抗暴
            this.luckyValueTemp = 100; //[41]
            this.moveSpeedTemp = 0; //[42]移动速度
            this.attackIntervalTemp = 100; //[43]攻击频率
            this.damageIncreaseTemp = 100; //[44]伤害加成
            this.damageDecreaseTemp = 100; //[45]伤害减免
            this.property_index_max = 46; //[46]
        }
        var d = __define,c=HeroProp,p=c.prototype;
        return HeroProp;
    })();
    gd.HeroProp = HeroProp;
    egret.registerClass(HeroProp,"gd.HeroProp");
})(gd || (gd = {}));

/**
 * Created by Administrator on 2015/9/18.
 */
var g_base;
(function (g_base) {
    var PropBase = (function (_super) {
        __extends(PropBase, _super);
        function PropBase() {
            _super.call(this);
            this.curProps = [];
            this.buffProps = [];
            this.isCritical = function (disCriticalFightTarget) {
                var rate = this.criticalFight / (this.criticalFight + disCriticalFightTarget);
                return Math.random() <= rate;
            };
            for (var i = 1; i < PropBase.MAX_PROP; ++i) {
                this.curProps[i] = 0;
                this.buffProps[i] = 0;
            }
        }
        var d = __define,c=PropBase,p=c.prototype;
        PropBase.isPercentProp = function (prop) {
            return PropBase.percentProps.indexOf(prop) != -1;
        };
        p.setHeroProp = function (props) {
            this.curProps = props.concat();
        };
        p.setMonsterInfo = function (monsterInfo) {
            this.curProps[1] = monsterInfo[gc.t_monster_maxHp];
            this.curProps[3] = monsterInfo[gc.t_monster_attack];
            this.curProps[5] = monsterInfo[gc.t_monster_defense];
            this.curProps[7] = monsterInfo[gc.t_monster_magicDefence];
            this.curProps[9] = monsterInfo[gc.t_monster_hit];
            this.curProps[11] = monsterInfo[gc.t_monster_dodge];
            this.curProps[13] = monsterInfo[gc.t_monster_critical];
            this.curProps[15] = monsterInfo[gc.t_monster_disCritical];
            this.curProps[19] = monsterInfo[gc.t_monster_moveSpeed];
            this.curProps[21] = monsterInfo[gc.t_monster_attackTime];
            this.curProps[23] = monsterInfo[gc.t_monster_damageIncrease];
            this.curProps[24] = monsterInfo[gc.t_monster_damageDecrease];
            this.curProps[25] = monsterInfo[gc.t_monster_benumbPro];
            this.curProps[26] = monsterInfo[gc.t_monster_disBenyumbPro];
            this.curProps[28] = monsterInfo[gc.t_monster_benumbPro];
        };
        p.setPropByIndex = function (index, value) {
            this.curProps[index] = value;
        };
        p.getPropByIndex = function (index) {
            return this.curProps[index];
        };
        p.setBuffPropByIndex = function (index, value) {
            this.buffProps[index] = value;
        };
        p.getBuffPropByIndex = function (index) {
            return this.buffProps[index];
        };
        p.getCurAndBuffPropByIndex = function (index) {
            return this.getPropByIndex(index) + this.getBuffPropByIndex(index);
        };
        p.getFightPropByIndex = function (baseIndex, scaleIndex, tempScale) {
            return Math.floor(this.getCurAndBuffPropByIndex(baseIndex) * (1 + this.getCurAndBuffPropByIndex(scaleIndex) / PropBase.Scale_Num) + this.getCurAndBuffPropByIndex(tempScale));
        };
        d(p, "maxHpFight"
            ,function () {
                return this.getFightPropByIndex(1, 2, 33);
            }
        );
        d(p, "attackFight"
            ,function () {
                return this.getFightPropByIndex(3, 4, 34);
            }
        );
        d(p, "defenceFight"
            ,function () {
                return this.getFightPropByIndex(5, 6, 35);
            }
        );
        d(p, "magicDefenceFight"
            ,function () {
                return this.getFightPropByIndex(7, 8, 36);
            }
        );
        d(p, "hitFight"
            ,function () {
                return this.getFightPropByIndex(9, 10, 37);
            }
        );
        d(p, "dodgeFight"
            ,function () {
                return this.getFightPropByIndex(11, 12, 38);
            }
        );
        d(p, "criticalFight"
            ,function () {
                return this.getFightPropByIndex(13, 14, 39);
            }
        );
        d(p, "disCriticalFight"
            ,function () {
                return this.getFightPropByIndex(15, 16, 40);
            }
        );
        d(p, "luckyValueFight"
            ,function () {
                return this.getFightPropByIndex(17, 18, 41);
            }
        );
        d(p, "moveSpeedFight"
            ,function () {
                return this.getFightPropByIndex(19, 20, 42);
            }
        );
        d(p, "attackIntervalFight"
            ,function () {
                return this.getFightPropByIndex(21, 22, 43);
            }
        );
        d(p, "damageIncreaseFight"
            ,function () {
                var b = this.getCurAndBuffPropByIndex(23) + this.getCurAndBuffPropByIndex(44);
                b = b / PropBase.Scale_Num;
                return b = Math.floor(100 * b) / 100;
            }
        );
        d(p, "damageDecreaseFight"
            ,function () {
                var b = this.getCurAndBuffPropByIndex(24) + this.getCurAndBuffPropByIndex(45);
                b = b / PropBase.Scale_Num;
                return b = Math.floor(100 * b) / 100;
            }
        );
        d(p, "benumbProFight"
            ,function () {
                return this.getPropByIndex(25) / PropBase.Scale_Num;
            }
        );
        d(p, "disBenumbProFight"
            ,function () {
                return this.getPropByIndex(26) / PropBase.Scale_Num;
            }
        );
        d(p, "benumbProSpanFight"
            //poisoningRecoveryProb :number = 0;//[27]
            ,function () {
                return this.getPropByIndex(28);
            }
        );
        d(p, "reviveCountFight"
            ,function () {
                return this.getPropByIndex(29);
            }
        );
        d(p, "reviveHPScaleFight"
            ,function () {
                return this.getPropByIndex(30) / PropBase.Scale_Num;
            }
        );
        d(p, "maxHp2Fight"
            ,function () {
                var b = this.maxHpFight;
                return b = b * this.getPropByIndex(31) / PropBase.Scale_Num;
            }
        );
        d(p, "invincibleTimeFight"
            //public get disMaxHp2Fight() :number //[32]抗护身概率
            //{
            //    return this.getPropByIndex(32) / PropBase.Scale_Num;
            //}
            ,function () {
                return this.getPropByIndex(32);
            }
        );
        d(p, "penetrateFight"
            ,function () {
                return this.getPropByIndex(46) / PropBase.Scale_Num;
            }
        );
        p.isHitSucc = function (dodgeFightTarget) {
            var rate = this.hitFight / (this.hitFight + dodgeFightTarget);
            return Math.random() <= rate;
        };
        p.getCritDamage = function (disCriticalFightTarget) {
            return this.criticalFight / (this.criticalFight + disCriticalFightTarget) * 3;
        };
        p.isBenumbProSucc = function (disBenumbProFightTarget) {
            if (Math.random() <= disBenumbProFightTarget)
                return false;
            return Math.random() <= this.benumbProFight;
        };
        //public isDisHp2Succ(maxHp2FightTarget:number) {//是否抗护身成功，b对方maxHp2Fight
        //    if (0 == maxHp2FightTarget)
        //        return true;
        //    return Math.random()<=this.disMaxHp2Fight;
        //}
        p.getDefence = function (attackType, roleLevel, attack) {
            //var def = 0;
            //roleLevel = 1;
            //def = attackType == PropBase.BehaviorPhysics ? this.defenceFight : attackType == PropBase.BehaviorMagic ? this.magicDefenceFight : (this.magicDefenceFight + this.defenceFight) / 2;
            //var curDef = 20000 >= def ? 0.002 * def / (1 + 0.8 * roleLevel + 0.002 * def) : 40 / (0.8 * roleLevel + 41) + 0.001 * (def - 20000) / (1 + 0.8 * roleLevel + 0.001 * (def - 20000));
            //
            //curDef = curDef > 0.9 ? 0.9 : curDef;
            //return curDef;
            var def = attackType == PropBase.BehaviorPhysics ? this.defenceFight : attackType == PropBase.BehaviorMagic ? this.magicDefenceFight : (this.magicDefenceFight + this.defenceFight) / 2;
            var curDef;
            if (def <= 10000) {
                curDef = 0.002 * def / (1 + 0.015 * roleLevel + 0.002 * def);
                curDef = Math.min(curDef, 0.6);
            }
            else if (def < 60000) {
                curDef = 100 / (1 + 0.8 * roleLevel + 100) + 0.001 * (def - 10000) / (1 + 1.25 * roleLevel + 0.001 * (def - 10000));
                curDef = Math.min(curDef, 0.9);
            }
            else {
                if (attack < 120000) {
                    curDef = 0.8 + def / (def + 4000000);
                }
                else {
                    curDef = def / (def + attack * 0.125);
                }
                curDef = Math.min(curDef, 0.9);
            }
            return curDef;
        };
        PropBase.MAX_PROP = 47;
        PropBase.Scale_Num = 10000;
        PropBase.BehaviorPhysics = 1;
        PropBase.BehaviorMagic = 2;
        PropBase.BehaviorTaoism = 3;
        PropBase.percentProps = [2, 4, 6, 8, 10, 12, 14, 16, 20, 22, 23, 24, 25, 26, 30, 31, 42, 43, 44, 45, 46];
        return PropBase;
    })(egret.EventDispatcher);
    g_base.PropBase = PropBase;
    egret.registerClass(PropBase,"g_base.PropBase");
})(g_base || (g_base = {}));

/**
 * Created by Administrator on 2015/9/19.
 */
var gd;
(function (gd) {
    var LootObj = (function () {
        function LootObj() {
            this.copyId = null;
            this.useLootDic = {};
            this.unUseLootDic = {};
            //boss掉落
            this.useBossLootDic = {};
            this.unUseBossLootDic = {};
        }
        var d = __define,c=LootObj,p=c.prototype;
        return LootObj;
    })();
    gd.LootObj = LootObj;
    egret.registerClass(LootObj,"gd.LootObj");
})(gd || (gd = {}));

/**
 * Created by SmallAiTT on 2015/7/22.
 */
var g_msg;
(function (g_msg) {
    var MsgAlert = (function (_super) {
        __extends(MsgAlert, _super);
        function MsgAlert() {
            _super.apply(this, arguments);
        }
        var d = __define,c=MsgAlert,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            self._btnNames = ['btn_left', 'btn_center', 'btn_right'];
        };
        return MsgAlert;
    })(mo.gui.MsgDlg);
    g_msg.MsgAlert = MsgAlert;
    egret.registerClass(MsgAlert,"g_msg.MsgAlert");
})(g_msg || (g_msg = {}));

/**
 * Created by SmallAiTT on 2015/8/11.
 */
var g_msg;
(function (g_msg) {
    var MsgItem = (function (_super) {
        __extends(MsgItem, _super);
        function MsgItem() {
            _super.apply(this, arguments);
        }
        var d = __define,c=MsgItem,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            self._btnNames = ['btn_cancel', 'btn_ok'];
        };
        p.setMsgInfo = function (msgData, msgArgs) {
            // 这里处理比较特殊，需要先将itemId拿出来
            //var itemId = msgArgs.shift();
            //super.setMsgInfo(msgData, msgArgs);
            //var t_item = mo.getJSONWithFileName(uw.cfg_t_item);
            //var temp = t_item[itemId];
            //if(!temp) {
            //    return error('未找到物品【%s】', itemId);
            //}
            //this.set('item', temp[uw.t_item_name]);
            //this.ico_item.set('itemId', resHelper.getItemIconPath(itemId));
        };
        return MsgItem;
    })(mo.gui.MsgDlg);
    g_msg.MsgItem = MsgItem;
    egret.registerClass(MsgItem,"g_msg.MsgItem");
})(g_msg || (g_msg = {}));

/**
 * Created by SmallAiTT on 2015/7/22.
 */
var g_msg;
(function (g_msg) {
    var MsgTips = (function (_super) {
        __extends(MsgTips, _super);
        function MsgTips() {
            _super.apply(this, arguments);
        }
        var d = __define,c=MsgTips,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            self._tipsArr = [];
            self._tipsRunning = false;
            self._interval = 600;
            self._penetrable = true;
            self.toPauseGuide = false; //不需要暂停引导
        };
        p.isNeedToClose = function () {
            var self = this;
            if (self.grp_container.numElements == 0 && self._tipsArr.length == 0 && self._tipsRunning) {
                self._tipsRunning = false;
                tm.clearInterval(self._intervalId);
                self.close();
            }
        };
        p._setTips = function (msgData, msgArgs) {
            this._tipsArr = msgArgs;
        };
        p.setMsgInfo = function (msgData, msgArgs) {
            _super.prototype.setMsgInfo.call(this, msgData, msgArgs);
            var self = this;
            self._setTips(msgData, msgArgs);
            if (!self._tipsRunning) {
                self._tipsRunning = true;
                self._runActionQueue();
                tm.setInterval4Tick(self._runActionQueue, self, self._interval);
            }
        };
        p.onExit = function () {
            _super.prototype.onExit.call(this);
            var self = this;
            self._tipsArr = [];
            self.removeChildren();
            if (self._tipsRunning) {
                self._tipsRunning = false;
                tm.clearInterval(self._intervalId);
                self.close();
            }
        };
        p._runActionQueue = function () {
            var self = this, group_container = self.grp_container;
            if (self._tipsArr.length > 0) {
                var tipNode = self.createTip(self._tipsArr.shift());
                var stage = mo.getStage();
                var w = stage.stageWidth, h = stage.stageHeight;
                group_container.addElement(tipNode);
                tipNode.horizontalCenter = 0;
                tipNode.y = h / 2;
                // 播放动画
                var duration = 2.0, fadeIn = mo.fadeIn(duration * 0.2), fade = mo.fadeOut(duration * 0.2), delay = mo.delayTime(duration * 0.8), act = mo.sequence(mo.moveBy(duration, mo.p(0, -360)), mo.callFunc(function (sender) {
                    mo.gui.helper.rm(sender);
                    self.isNeedToClose();
                }, self));
                var actMgr = egret.action.Manager.getInstance();
                actMgr.addAction(tipNode, fadeIn);
                actMgr.addAction(tipNode, act);
                actMgr.addAction(tipNode, mo.sequence(delay, fade));
            }
        };
        p.createTip = function (text) {
            var self = this;
            var item = new g_msg.MsgTipItem();
            //item.label_msg.text = text;
            item.msg = text;
            return item;
        };
        return MsgTips;
    })(mo.gui.MsgDlg);
    g_msg.MsgTips = MsgTips;
    egret.registerClass(MsgTips,"g_msg.MsgTips");
})(g_msg || (g_msg = {}));

/**
 * Created by SmallAiTT on 2015/7/22.
 */
var g_msg;
(function (g_msg) {
    var MsgTipItem = (function (_super) {
        __extends(MsgTipItem, _super);
        function MsgTipItem() {
            _super.apply(this, arguments);
        }
        var d = __define,c=MsgTipItem,p=c.prototype;
        p.onEnter = function () {
            _super.prototype.onEnter.call(this);
            this.label_msg.text = this.msg;
        };
        return MsgTipItem;
    })(mo.gui.Comp);
    g_msg.MsgTipItem = MsgTipItem;
    egret.registerClass(MsgTipItem,"g_msg.MsgTipItem");
})(g_msg || (g_msg = {}));

/**
 * Created by SmallAiTT on 2015/7/22.
 */
var g_msg;
(function (g_msg) {
    var MsgTip = (function (_super) {
        __extends(MsgTip, _super);
        function MsgTip() {
            _super.apply(this, arguments);
        }
        var d = __define,c=MsgTip,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            mo.gui.helper.setSkinName(this, g_msg.MsgTips.__className);
            this._penetrable = true;
        };
        p._setTips = function (msgData, msgArgs) {
            this._tipsArr = [mo.STR.format.apply(mo.STR, [msgData.text].concat(msgArgs))];
        };
        return MsgTip;
    })(g_msg.MsgTips);
    g_msg.MsgTip = MsgTip;
    egret.registerClass(MsgTip,"g_msg.MsgTip");
})(g_msg || (g_msg = {}));

/**
 * Created by SmallAiTT on 2015/7/22.
 */
var g_msg;
(function (g_msg) {
    var GetItemTips = (function (_super) {
        __extends(GetItemTips, _super);
        function GetItemTips() {
            _super.apply(this, arguments);
            this._trayName = 'top';
        }
        var d = __define,c=GetItemTips,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            self._tipsArr = [];
            self._tipsRunning = false;
            self._interval = 600;
            self._penetrable = true;
            self._layerOpt.shownWithAction = false;
            var propRef = {};
            propRef["maxHpFight"] = "生    命";
            propRef["attackFight"] = "攻    击";
            propRef["defenceFight"] = "物    防";
            propRef["magicDefenceFight"] = "法    防";
            propRef["hitFight"] = "命    中";
            propRef["dodgeFight"] = "闪    避";
            propRef["criticalFight"] = "暴    击";
            propRef["disCriticalFight"] = "抗    暴";
            propRef["damageIncreaseFight"] = "伤害加深";
            propRef["damageDecreaseFight"] = "伤害减免";
            propRef["benumbProFight"] = "麻    痹";
            propRef["disBenumbProFight"] = "抗    麻";
            self.propRef = propRef;
        };
        p.setMsgInfo = function (msgData, msgArgs) {
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var items = self.data.items || {};
            var equips = self.data.equips || [];
            var changeProp = self.data.changeProp;
            var cfg_t_item = mo.getJSONWithFileName(gc.cfg_t_item);
            for (var itemId in items) {
                var t_item = cfg_t_item[itemId];
                var name = t_item[gc.t_item_name];
                var quality = t_item[gc.t_item_color];
                var type = t_item[gc.t_item_type];
                //钥匙宝箱要单独显示
                if (type == gc.c_prop.itemTypeKey.chest && gd.userCtrl.getNeedItems(itemId)[0] != 0) {
                    g_msg.UIMsgTextCtrl.push(mo.STR.format("恭喜获得[ubb color=%s stroke=1 stroke=1 bold=true]%s[/ubb]%s个！", uiHelper.getColorByQuality(quality), name, items[itemId]));
                    continue;
                }
                var str = mo.STR.format("获得：[ubb color=%s]%s[/ubb] x%s", uiHelper.getColorByQuality(quality), name, items[itemId]);
                var label = new mo.gui.Label();
                label.size = 22;
                label.text = str;
                label.stroke = 2;
                label.strokeColor = 0;
                label.textColor = 0x00ff00;
                self._tipsArr.push(label);
            }
            for (var i = 0, li = equips.length; i < li; i++) {
                var itemId = equips[i];
                var t_item = cfg_t_item[itemId];
                var name = t_item[gc.t_item_name];
                var quality = t_item[gc.t_item_color];
                var str = mo.STR.format("获得：[ubb color=%s]%s[/ubb] x%s", uiHelper.getColorByQuality(quality), name, 1);
                var label = new mo.gui.Label();
                label.size = 22;
                label.text = str;
                label.stroke = 2;
                label.strokeColor = 0;
                label.textColor = 0x00ff00;
                self._tipsArr.push(label);
            }
            if (changeProp) {
                var hec = self.data.hec;
                var label = new mo.gui.Label();
                label.size = 25;
                label.style = g_consts.style.orange_103;
                label.text = mo.STR.format("%s:", gc.c_prop.heroJob[hec.job]);
                self._tipsArr.push(label);
                for (var propKey in changeProp) {
                    var str = mo.STR.format("%s：+%s", self.propRef[propKey], changeProp[propKey]);
                    var label = new mo.gui.Label();
                    label.size = 22;
                    label.textColor = 0x00ff00; //绿色
                    label.stroke = 2;
                    label.strokeColor = 0;
                    label.text = str;
                    label.width = 200;
                    self._tipsArr.push(label);
                }
            }
            var self = this, group_container = self.grp_container, group_tips = self.grp_tips;
            var stage = mo.getStage();
            var w = stage.stageWidth, h = stage.stageHeight;
            for (var i = 0; i < self._tipsArr.length; i++) {
                var tipNode = self._tipsArr[i];
                group_tips.addElement(tipNode);
            }
            // 播放动画
            var duration = 2.0, fadeIn = mo.fadeIn(duration * 0.2), fade = mo.fadeOut(duration * 0.2), delay = mo.delayTime(duration * 0.8), act = mo.sequence(mo.moveBy(duration, mo.p(0, -360)), mo.callFunc(function (sender) {
                self.close();
            }, self));
            var actMgr = egret.action.Manager.getInstance();
            actMgr.addAction(group_container, fadeIn);
            actMgr.addAction(group_container, act);
            actMgr.addAction(group_container, mo.sequence(delay, fade));
        };
        return GetItemTips;
    })(mo.gui.Dlg);
    g_msg.GetItemTips = GetItemTips;
    egret.registerClass(GetItemTips,"g_msg.GetItemTips");
})(g_msg || (g_msg = {}));

/**
 * Created by SmallAiTT on 2015/7/22.
 */
var g_msg;
(function (g_msg) {
    var CombatTips = (function (_super) {
        __extends(CombatTips, _super);
        function CombatTips() {
            _super.apply(this, arguments);
            this._trayName = 'top';
            this._counter = 0;
            this._tickNum = 0;
            this._diff = 0;
        }
        var d = __define,c=CombatTips,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            self._penetrable = true;
            self._layerOpt.shownWithAction = false;
        };
        p.setMsgInfo = function (msgData, msgArgs) {
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
        };
        p._updateNumber = function (dt) {
            var self = this, grp_container = self.grp_container;
            self._counter += self._tickNum;
            var flag = self._tickNum > 0 ? (self._counter >= self.data.newCombat) : (self._counter <= self.data.newCombat);
            if (flag) {
                self._counter = self.data.newCombat;
                tm.clearInterval(self._intervalId);
                var delay = mo.delayTime(1.0), act = mo.sequence(delay, mo.callFunc(function (sender) {
                    self.close();
                }, self));
                mo.ACT.run(grp_container, act);
            }
            self.label_combat.text = self._counter;
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this, grp_container = self.grp_container;
            // 播放动画
            self._counter = self.data.oldCombat;
            self._diff = self.data.newCombat - self.data.oldCombat;
            self._tickNum = Math.max(1, Math.abs(Math.floor(self._diff / 20))) * (self._diff > 0 ? 1 : -1);
            self.label_combat.text = self.data.oldCombat;
            self.label_diff.text = [self._diff > 0 ? "+" : "", self._diff];
            var color = self._diff > 0 ? 0x00FF00 : 0xFF0000;
            if (self.label_diff.textColor != color) {
                self.label_diff.textColor = color;
            }
            var delay = mo.delayTime(1), act = mo.sequence(delay, mo.callFunc(function (sender) {
                self.label_diff.visible = false;
                self._intervalId = tm.setInterval4Tick(self._updateNumber, self, 20);
            }, self));
            mo.ACT.run(grp_container, act);
        };
        return CombatTips;
    })(mo.gui.Dlg);
    g_msg.CombatTips = CombatTips;
    egret.registerClass(CombatTips,"g_msg.CombatTips");
})(g_msg || (g_msg = {}));

/**
 * Created by Administrator on 2015/10/19.
 */
var g_base;
(function (g_base) {
    var BaseNotice = (function (_super) {
        __extends(BaseNotice, _super);
        function BaseNotice() {
            _super.apply(this, arguments);
            this._trayName = 'top';
        }
        var d = __define,c=BaseNotice,p=c.prototype;
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            self._penetrable = true;
            self._layerOpt.shownWithAction = false;
            self.touchChildren = self.touchEnabled = false;
            self.registerClassByKey(gd.ChatCtrl, gd.ChatCtrl.ON_NOTICE_UPDATE, self.onNoticeUpdate);
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.grp_notice.visible = false;
            self.onNoticeUpdate(gd.chatCtrl.getNoticeList());
        };
        p.setMsgInfo = function (msgData, msgArgs) {
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
        };
        p.onNoticeUpdate = function (data) {
            var self = this;
            if (data.length == 0) {
                self.grp_notice.visible = false;
                return;
            }
            if (self.grp_notice.visible)
                return;
            self.curNotice = data[0];
            var firstNoticeStr = gd.chatCtrl.getChatDataStr(self.curNotice);
            self.label_noticeContent.text = firstNoticeStr;
            process.nextTick(function () {
                process.nextTick(function () {
                    if (!self.grp_notice)
                        return;
                    self.grp_notice.visible = true;
                    self.label_noticeContent.x = 480;
                    self.grp_notice.height = this.label_noticeContent.height;
                    var toX = -self.label_noticeContent.width;
                    egret.Tween.get(self.label_noticeContent).to({ x: toX }, Math.abs(toX) * 40).call(function () {
                        self.grp_notice.visible = false;
                        gd.chatCtrl.delNotice(self.curNotice[gc.dsConsts.ChatData.uniqueId]);
                        self.onNoticeUpdate(gd.chatCtrl.getNoticeList());
                    }, self);
                });
            });
        };
        return BaseNotice;
    })(mo.gui.Dlg);
    g_base.BaseNotice = BaseNotice;
    egret.registerClass(BaseNotice,"g_base.BaseNotice");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/5/4.
 */
var g_msg;
(function (g_msg) {
    var UIMsgCtrl = (function (_super) {
        __extends(UIMsgCtrl, _super);
        function UIMsgCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=UIMsgCtrl,p=c.prototype;
        //@override
        p._initProp = function () {
            _super.prototype._initProp.call(this);
            var self = this;
            self._tipsArr = [];
            self._tipsRunning = false;
            self._interval = 600;
        };
        p.setTips = function (arg) {
            var self = this;
            if (arg instanceof Array) {
                self._tipsArr = self._tipsArr.concat(arg);
            }
            else {
                self._tipsArr.push(arg);
            }
            self.begin();
        };
        p.begin = function () {
            var self = this;
            if (!self._tipsRunning) {
                self._tipsRunning = true;
                self._runActionQueue();
                self._invId = tm.setInterval4Tick(self._runActionQueue, self, self._interval);
            }
        };
        p.end = function () {
            var self = this;
            self._tipsArr = [];
            if (self._tipsRunning) {
                self._tipsRunning = false;
                tm.clearInterval(self._invId);
                self._invId = null;
            }
        };
        p.checkEnd = function () {
            var self = this;
            if (self._tipsArr.length == 0) {
                self.end();
            }
        };
        p._runActionQueue = function () {
            var self = this, tip;
            if (self._tipsArr.length > 0) {
                tip = self._tipsArr.shift();
                self.createNode(tip);
            }
        };
        p.createNode = function (text) {
            var self = this;
            self.checkEnd();
        };
        UIMsgCtrl.show = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var _instance = this.getInstance();
            _instance.setTips.apply(_instance, args);
        };
        UIMsgCtrl.push = function (arg) {
            var self = this;
            if (self.showAtOnce) {
                self.show(arg);
            }
            else {
                if (arg instanceof Array) {
                    self._msgQueue = self._msgQueue.concat(arg);
                }
                else {
                    self._msgQueue.push(arg);
                }
            }
        };
        UIMsgCtrl.pop = function () {
            var self = this;
            self.show(self._msgQueue);
            self._msgQueue = [];
        };
        UIMsgCtrl.showAtOnce = true;
        UIMsgCtrl._msgQueue = [];
        return UIMsgCtrl;
    })(mo.DataController);
    g_msg.UIMsgCtrl = UIMsgCtrl;
    egret.registerClass(UIMsgCtrl,"g_msg.UIMsgCtrl");
})(g_msg || (g_msg = {}));

/**
 * Created by SmallAiTT on 2015/5/4.
 */
var g_msg;
(function (g_msg) {
    var UIMsgTextCtrl = (function (_super) {
        __extends(UIMsgTextCtrl, _super);
        function UIMsgTextCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=UIMsgTextCtrl,p=c.prototype;
        p.createNode = function (text) {
            var self = this;
            var node;
            if (typeof text == "string") {
                var hasUbb = text.indexOf("ubb") >= 0;
                if (hasUbb) {
                    var tipNode = self.createMsgTips(text);
                    // 播放动画: 向上漂浮风格
                    var duration = 4.0, fadeIn = mo.fadeIn(duration * 0.2), fade = mo.fadeOut(duration * 0.2), delay = mo.delayTime(duration * 0.8), act = mo.sequence(mo.moveBy(duration, mo.p(0, -360)), mo.callFunc(function (sender) {
                        sender.parent.removeChild(sender);
                        self.checkEnd();
                    }, self));
                    var actMgr = egret.action.Manager.getInstance();
                    actMgr.addAction(tipNode, fadeIn);
                    actMgr.addAction(tipNode, act);
                    actMgr.addAction(tipNode, mo.sequence(delay, fade));
                }
                else {
                    node = self.createLabel(text);
                    node.scaleX = 0.5;
                    node.scaleY = 0.5;
                    // 播放动画: 向下弹出再漂浮风格
                    var spawn = mo.spawn(mo.fadeOut(0.5), mo.moveBy(0.5, mo.p(0, -100)));
                    var seq = mo.sequence(mo.scaleTo(0.2, 1).setEase(mo.Ease.backOut), mo.delayTime(1), spawn, mo.callFunc(function (sender) {
                        sender.parent.removeChild(sender);
                        self.checkEnd();
                    }, self));
                    mo.runAction(node, seq);
                }
            }
        };
        p.createLabel = function (text) {
            var stage = mo.getStage();
            var self = this;
            var center = new egret.Point(mo.getStage().stageWidth / 2, mo.getStage().stageHeight / 2);
            var container = new egret.gui.Group();
            container.x = center.x;
            container.y = center.y;
            container.width = 0;
            container.height = 0;
            container.horizontalCenter = 0;
            container.verticalCenter = 0;
            stage.addChild(container);
            var tipsGroup = new egret.gui.Group();
            var layout = new egret.gui.VerticalLayout(); //纵向布局
            layout.verticalAlign = egret.VerticalAlign.MIDDLE;
            layout.horizontalAlign = egret.HorizontalAlign.CENTER;
            tipsGroup.layout = layout;
            tipsGroup.horizontalCenter = 0;
            tipsGroup.verticalCenter = 100;
            var textNode = new egret.gui.Label();
            textNode.text = text;
            textNode.size = 30;
            textNode.textColor = 0x00e91b;
            textNode.stroke = 1;
            textNode.strokeColor = 0x383838;
            tipsGroup.addElement(textNode);
            container.addElement(tipsGroup);
            return container;
        };
        p.createMsgTips = function (text) {
            var stage = mo.getStage();
            var self = this;
            var center = new egret.Point(mo.getStage().stageWidth / 2, mo.getStage().stageHeight / 2);
            var container = new egret.gui.Group();
            container.x = center.x;
            container.y = center.y;
            container.width = 0;
            container.height = 0;
            container.horizontalCenter = 0;
            container.verticalCenter = 0;
            stage.addChild(container);
            var tipsGroup = new egret.gui.Group();
            var layout = new egret.gui.VerticalLayout(); //纵向布局
            layout.verticalAlign = egret.VerticalAlign.MIDDLE;
            layout.horizontalAlign = egret.HorizontalAlign.CENTER;
            tipsGroup.layout = layout;
            tipsGroup.horizontalCenter = 0;
            tipsGroup.verticalCenter = 0;
            var textNode = new mo.gui.Label();
            textNode.size = 30;
            textNode.stroke = 2;
            textNode.text = text;
            tipsGroup.addElement(textNode);
            container.addElement(tipsGroup);
            return container;
        };
        return UIMsgTextCtrl;
    })(g_msg.UIMsgCtrl);
    g_msg.UIMsgTextCtrl = UIMsgTextCtrl;
    egret.registerClass(UIMsgTextCtrl,"g_msg.UIMsgTextCtrl");
})(g_msg || (g_msg = {}));

/**
   hd 实现系统通知的跑马灯
   大部分代码都是copy自BaseNotice
*/
var g_base;
(function (g_base) {
    var BaseSysNotice = (function (_super) {
        __extends(BaseSysNotice, _super);
        function BaseSysNotice() {
            _super.apply(this, arguments);
            this._trayName = 'top';
        }
        var d = __define,c=BaseSysNotice,p=c.prototype;
        p._initProp = function () {
            var self = this;
            _super.prototype._initProp.call(this);
            mo.gui.helper.setSkinName(this, g_base.BaseNotice.__className);
            self._penetrable = true;
            self._layerOpt.shownWithAction = false;
            self.touchChildren = self.touchEnabled = false;
            self.registerClassByKey(gd.HoodinnCtlr, gd.HoodinnCtlr.ON_SYSNOTICE_UPDATE, self.onNoticeUpdate);
        };
        p._childrenCreated = function () {
            _super.prototype._childrenCreated.call(this);
            var self = this;
            self.grp_notice.visible = false;
            //self.grp_notice.y += 40;
            self.onNoticeUpdate(gd.hoodinnCtlr.getAllNotices());
        };
        p.setMsgInfo = function (msgData, msgArgs) {
        };
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
        };
        p.onNoticeUpdate = function (data) {
            var self = this;
            if (data.length == 0) {
                self.grp_notice.visible = false;
                return;
            }
            if (self.grp_notice.visible)
                return;
            self.curNotice = data[0];
            // 获取间隔、次数等信息
            var sysArgs = self.curNotice[gc.dsConsts.ChatData.sysArgs];
            var cfgid = sysArgs[0];
            var interval = 0;
            var times = 1;
            if (cfgid == 9999) {
                interval = sysArgs[sysArgs.length - 1];
                times = sysArgs[sysArgs.length - 2];
            }
            // 查表得出消息的具体格式
            var firstNoticeStr;
            if (cfgid == 9999) {
                firstNoticeStr = sysArgs[1];
            }
            else {
                firstNoticeStr = gd.hoodinnCtlr.getSysNoticeStr(self.curNotice);
            }
            // 设置，因为有可能是ubb，所以需要等下调整高度
            self.label_noticeContent.text = firstNoticeStr;
            process.nextTick(function () {
                process.nextTick(function () {
                    if (!self.grp_notice)
                        return;
                    self.grp_notice.visible = true;
                    self.label_noticeContent.x = 480;
                    self.grp_notice.getChildAt(0).height = self.label_noticeContent.height + 10;
                    var toX = -self.label_noticeContent.width;
                    var duration = Math.abs(toX) / 480 * 12000;
                    if (duration < 12000)
                        duration = 12000;
                    egret.Tween.get(self.label_noticeContent)
                        .to({ x: toX }, duration)
                        .call(function () {
                        gd.hoodinnCtlr.delNotice(self.curNotice[gc.dsConsts.ChatData.uniqueId]);
                        var notices = gd.hoodinnCtlr.getAllNotices();
                        self.grp_notice.visible = false;
                        if (notices.length) {
                            self.onNoticeUpdate(notices);
                        }
                    }, self);
                });
            });
        };
        BaseSysNotice.instance = null;
        return BaseSysNotice;
    })(mo.gui.Dlg);
    g_base.BaseSysNotice = BaseSysNotice;
    egret.registerClass(BaseSysNotice,"g_base.BaseSysNotice");
})(g_base || (g_base = {}));

/**
 * Created by SmallAiTT on 2015/5/4.
 */
var g_msg;
(function (g_msg) {
    var UIMsgHeroPropCtrl = (function (_super) {
        __extends(UIMsgHeroPropCtrl, _super);
        function UIMsgHeroPropCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=UIMsgHeroPropCtrl,p=c.prototype;
        p.createNode = function (data) {
            var self = this;
            g_msg.GetItemTips.create().setData(data).show().onClose(function () {
                self.checkEnd();
            });
        };
        return UIMsgHeroPropCtrl;
    })(g_msg.UIMsgCtrl);
    g_msg.UIMsgHeroPropCtrl = UIMsgHeroPropCtrl;
    egret.registerClass(UIMsgHeroPropCtrl,"g_msg.UIMsgHeroPropCtrl");
})(g_msg || (g_msg = {}));

/**
 * Created by SmallAiTT on 2015/5/4.
 */
var g_msg;
(function (g_msg) {
    var UIMsgCombatCtrl = (function (_super) {
        __extends(UIMsgCombatCtrl, _super);
        function UIMsgCombatCtrl() {
            _super.apply(this, arguments);
        }
        var d = __define,c=UIMsgCombatCtrl,p=c.prototype;
        p.createNode = function (data) {
            var self = this;
            g_msg.CombatTips.create().setData(data).show().onClose(function () {
                self.checkEnd();
            });
        };
        return UIMsgCombatCtrl;
    })(g_msg.UIMsgCtrl);
    g_msg.UIMsgCombatCtrl = UIMsgCombatCtrl;
    egret.registerClass(UIMsgCombatCtrl,"g_msg.UIMsgCombatCtrl");
})(g_msg || (g_msg = {}));

/**
 * Created by SmallAiTT on 2015/5/4.
 */
var g_msg;
(function (g_msg) {
    logger.initLogger(g_msg, "g-msg");
    logger.setLvl("g-msg", 4);
    g_msg.msgType = {
        tip: 10,
        alert: 13,
        confirm: 14,
        confirmRecharge: 15,
        confirmPurchase: 16,
        confirmUse: 17,
        confirmUpgrade: 18,
        confirmCountDown: 19,
        retryToConnect: 20,
        msgItem: 21,
        alertLogout: 22,
    };
    var _initReceiver = function () {
        //pomelo.on(gc.c_prop.receiverKey.onTaskChanged1, function (result) {//TaskEntity
        //    var taskEntity = result[gc.RESP_VALUE];
        //    mo.debug("通知任务更新：gc.c_prop.receiverKey.onTaskChanged--->", taskEntity);
        //    gc.taskCtrl.init(taskEntity);
        //});
        //
        ////神秘商店出现的通知
        //pomelo.on(gc.c_prop.receiverKey.onSecretShopChanged, function (result) {//ShopEntity
        //    var shopAppearData = result[gc.RESP_VALUE];
        //    var shopEntity = shopAppearData[gc.dsConsts.SecretShopAppearData.shopEntity];
        //    var shopFlag = shopAppearData[gc.dsConsts.SecretShopAppearData.shopFlag];//1:神秘1、2：神秘2、3：全部
        //    gc.shopDataCtrl.reset(shopEntity);
        //    gc.shopDataCtrl.updateTraderStatus();
        //    gc.shopDataCtrl.pushNotify(gc.ShopDataCtrl.ON_SECRET_SHOP_APPEAR, shopFlag);
        //});
    };
    var setMsgCode = function () {
        var data = res["_jsData"][gc.cfg_c_msgCode];
        mo.msgMgr.translate = function (msgData) {
            return {
                text: msgData[gc.c_msgCode_text],
                type: msgData[gc.c_msgCode_region0],
                onTop: msgData[gc.c_msgCode_onTop],
                time: msgData[gc.c_msgCode_time]
            };
        };
        mo.setMsgData(data);
        mo.defaultMsgType = g_msg.msgType.tip;
        var okText = '确定', cancelText = '取消';
        mo.registerMsgDlg(g_msg.msgType.alert, g_msg.MsgAlert, {
            btn_center: { text: okText, callEnd: true }
        });
        mo.registerMsgWaitingDlg(g_msg.msgType.alert);
        mo.registerMsgDlg(g_msg.msgType.alertLogout, g_msg.MsgAlert, {
            btn_center: {
                text: okText,
                listener: function () {
                    mo_channel.getCurChannel().logout(function () { });
                },
                callEnd: true }
        });
        mo.registerMsgWaitingDlg(g_msg.msgType.alertLogout);
        mo.registerMsgDlg(g_msg.msgType.retryToConnect, g_msg.MsgAlert, {
            btn_center: { text: okText, callEnd: true }
        });
        mo.registerMsgWaitingDlg(g_msg.msgType.retryToConnect);
        mo.registerMsgDlg(g_msg.msgType.confirm, g_msg.MsgAlert, {
            btn_left: { text: okText, callEnd: true },
            btn_right: { text: cancelText, event: 'cancel' }
        });
        mo.registerMsgDlg(g_msg.msgType.confirmRecharge, g_msg.MsgAlert, {
            btn_left: { text: '充值', moduleToPush: g_consts.moduleId.recharge },
            btn_right: { text: cancelText }
        });
        mo.registerMsgDlg(g_msg.msgType.confirmPurchase, g_msg.MsgAlert, {
            btn_left: { text: '购买', callEnd: true },
            btn_right: { text: cancelText }
        });
        //mo.registerMsgDlg(msgType.confirmUse, MsgAlert, {
        //    btn_left : { text : '使用', moduleToPush:g_consts.moduleId.alchemy},
        //    btn_right : {text : cancelText}
        //});
        mo.registerMsgDlg(g_msg.msgType.confirmUpgrade, g_msg.MsgAlert, {
            btn_center: { text: okText, moduleToPush: g_consts.moduleId.vip }
        });
        mo.registerMsgDlg(g_msg.msgType.confirmCountDown, g_msg.MsgAlert);
        mo.registerMsgDlg(g_msg.msgType.tip, g_msg.MsgTip);
        mo.registerMsgDlg(g_msg.msgType.msgItem, g_msg.MsgItem, {
            btn_cancel: {},
            btn_ok: { callEnd: true }
        });
        mo.registerMsgDlg(999, g_msg.GetItemTips, {});
        mo.registerMsgDlg(998, g_base.Notice, {});
        mo.registerMsgDlg(997, g_base.OfflineGain, {});
        mo.registerMsgDlg(996, g_base.FirstEnterGame, {});
        //// 出售杂物的msg弹框设置
        //mo.registerMsgDlg(22, MsgSundry, {
        //    moneyTxt : '出售可获得',
        //    onInfo : function(msgSundry:MsgSundry){
        //        var items = msgSundry.items || {};
        //        var money = 0;
        //        var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
        //        for (var itemId in items) {
        //            money += t_item[itemId][gc.t_item_sellPrice] * items[itemId];
        //        }
        //        msgSundry.money = money;
        //    },
        //    btn_left : {},
        //    btn_right : {
        //        notToClose : true, // 这里不主动关闭
        //        listener : function(msgSundry:MsgSundry){
        //            // 出售物品
        //            gc.userDataCtrl.saleSundries(function () {
        //                msgSundry.close();
        //            }, null);
        //        }
        //    }
        //});
        //// 一键装备的msg弹框设置
        //mo.registerMsgDlg(23, MsgSundry, {
        //    moneyTxt : '需要花费',
        //    onInfo : function(msgSundry:MsgSundry){
        //        var items = msgSundry.items || {};
        //        var money = 0;
        //        var t_item = mo.getJSONWithFileName(gc.cfg_t_item);
        //        for (var itemId in items) {
        //            money += t_item[itemId][gc.t_item_sellPrice] * items[itemId];
        //        }
        //        msgSundry.money = money;
        //    },
        //    btn_left : {},
        //    btn_right : {callEnd:true}
        //});
        //mo.registerMsgDlg(24,MsgShopAppear);
        mo.registerValidModuleFunc(function (moduleCfgItem, moduleParam) {
            var moduleId = moduleCfgItem.id;
            var subModuleId = (moduleParam || {}).subModuleId;
            var curModule = mo.moduleMgr.curModule;
            if (curModule && curModule.name == moduleId && subModuleId != null) {
                var subModuleIds = g_consts.subModuleMap[moduleId];
                if (subModuleIds.indexOf(subModuleId) >= 0) {
                    var subModules = curModule.subModules;
                    for (var i = 0, li = subModules.length; i < li; i++) {
                        if (subModules[i] && subModules[i].target) {
                            subModules[i].target.close();
                        }
                    }
                    var target = curModule.target;
                    var dlgGroup = target.getTray('dlg');
                    while (dlgGroup.numElements > 0) {
                        dlgGroup.getElementAt(0).close();
                    }
                    //打开新模块
                    process.nextTick(function () {
                        if (curModule.target.openSubModule)
                            curModule.target.openSubModule(subModuleId);
                    });
                    return false;
                }
            }
            var MI = g_consts.moduleId;
            if (moduleId == MI.index
                || moduleId == MI.fight
                || moduleId == MI.home
                || moduleId == MI.role
                || moduleId == MI.forge
                || moduleId == MI.shop)
                return true;
            var sysId = moduleCfgItem.sysId;
            if (sysId == null)
                return true; // 没有配置系统
            var c_open = mo.getJSONWithFileName(gc.cfg_c_open);
            var openInfo = c_open[sysId];
            if (!openInfo) {
                g_msg.debug(mo.STR.format("未在【c_open】表中配置模块【%s】的数据，请检查！", moduleId));
                return false;
            }
            var lvlRequired = openInfo[gc.c_open_lvlRequired];
            if (lvlRequired == -1) {
                mo.showMsg(gc.id_c_msgCode.noOpenNow);
                return false;
            }
            if (lvlRequired > gd.userCtrl.getLvl()) {
                mo.showMsg(gc.id_c_msgCode.noRoleLvl, lvlRequired);
                return false;
            }
            return true;
        });
        mo.registerModuleNotFoundFunc(function (moduleName) {
            mo.showMsg(gc.id_c_msgCode.noOpenNow);
        });
    };
    var _init = function (cb) {
        setMsgCode();
        //
        //dataEmitter.on(DataEmitter.ON_USER_ITEM_INFO, _showUserItemInfo);
        //dataEmitter.on(DataEmitter.ON_SHOW_PROP_TIPS, _showPropTips);
        //初始化后端主动通知的接收器
        _initReceiver();
        cb();
    };
    egret.Boot.onceAsync(egret.Boot.AFTER_CONFIG, _init);
})(g_msg || (g_msg = {}));

